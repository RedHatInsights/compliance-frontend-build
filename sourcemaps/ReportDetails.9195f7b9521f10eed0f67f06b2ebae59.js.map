{"version":3,"file":"js/ReportDetails.1663242767162.87704b93f389c8ba807f.js","mappings":"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","sources":["webpack:///./src/SmartComponents/ReportDetails/Components/ReportedSystemRow.js","webpack:///./src/SmartComponents/ReportDetails/Components/ChartLegend.js","webpack:///./src/SmartComponents/ReportDetails/Components/hooks/useLegendData.js","webpack:///./src/SmartComponents/ReportDetails/Components/hooks/useDonutChart.js","webpack:///./src/SmartComponents/ReportDetails/Components/ReportChart.js","webpack:///./src/SmartComponents/ReportDetails/ReportDetailsWithNotReportedSystems.js","webpack:///./src/SmartComponents/ReportDetails/ReportDetails.js","webpack:///./src/SmartComponents/ReportDownload/constants.js","webpack:///./src/SmartComponents/ReportDownload/Components/ExportPDFForm.js","webpack:///./src/SmartComponents/ReportDownload/hooks/helpers.js","webpack:///./src/SmartComponents/ReportDownload/hooks/useQueryExportData.js","webpack:///./src/SmartComponents/ReportDownload/Components/ReportPDF/StyleSheet.js","webpack:///./src/SmartComponents/ReportDownload/Components/ReportPDF/SystemsTable.js","webpack:///./src/SmartComponents/ReportDownload/Components/ReportPDF/UnsupportedSystemsTable.js","webpack:///./src/SmartComponents/ReportDownload/Components/ReportPDF/NonReportedSystemsTable.js","webpack:///./src/SmartComponents/ReportDownload/Components/ReportPDF/RulesTable.js","webpack:///./src/SmartComponents/ReportDownload/Components/ReportPDF/PanelItem.js","webpack:///./src/SmartComponents/ReportDownload/Components/ReportPDF/SubSection.js","webpack:///./src/SmartComponents/ReportDownload/Components/ReportPDF/ComplianceChart.js","webpack:///./src/SmartComponents/ReportDownload/Components/ReportPDF.js","webpack:///./src/Utilities/hooks/api/utils/ApiClient.js","webpack:///./src/Utilities/hooks/api/useApi.js","webpack:///./src/Utilities/hooks/api/useCollection.js","webpack:///./src/SmartComponents/ReportDownload/hooks/useSupportedSsgFinder.js","webpack:///./src/SmartComponents/ReportDownload/hooks/usePDFExport.js","webpack:///./src/SmartComponents/ReportDownload/hooks/usePDFBuilder.js","webpack:///./src/SmartComponents/ReportDownload/ReportDownload.js","webpack:///./src/SmartComponents/ReportDownload/hooks/useExportSettings.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { RowWrapper } from '@patternfly/react-table';\n\nconst ReportedSystemRow = ({ row, children }) => (\n  <RowWrapper\n    style={\n      row.testResultProfiles?.length === 0\n        ? {\n            background: '#F0F0F0',\n            borderLeft:\n              'var(--pf-c-table--border-width--base) solid var(--pf-c-table--BorderColor)',\n            borderRight:\n              'var(--pf-c-table--border-width--base) solid var(--pf-c-table--BorderColor)',\n          }\n        : {}\n    }\n  >\n    {children}\n  </RowWrapper>\n);\n\nReportedSystemRow.propTypes = {\n  row: propTypes.node,\n  children: propTypes.node,\n};\n\nexport default ReportedSystemRow;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { List, ListItem, Tooltip, Popover } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\n\nconst ChartIcon = ({ color = '#FFFFFF' }) => (\n  <span\n    style={{\n      width: '10px',\n      height: '10px',\n      display: 'inline-block',\n      background: color,\n    }}\n  >\n    &nbsp;\n  </span>\n);\n\nChartIcon.propTypes = {\n  color: propTypes.string,\n};\n\nconst ChartLegend = ({ legendData = [] }) => (\n  <List>\n    {legendData.map(({ name, symbol, tooltip, popover }, index) => (\n      <ListItem\n        key={index}\n        icon={<ChartIcon color={symbol?.fill} />}\n        style={{ verticalAlign: 'middle', display: 'inline-block' }}\n      >\n        {name}\n        {tooltip && (\n          <Tooltip content={<> {tooltip} </>}>\n            <span>\n              &nbsp;\n              <OutlinedQuestionCircleIcon className=\"grey-icon\" />\n            </span>\n          </Tooltip>\n        )}\n        {popover &&\n          (({ title = '', content = '', footer = '' }) => (\n            <Popover\n              maxWidth=\"25rem\"\n              headerContent={title}\n              bodyContent={content}\n              footerContent={footer}\n            >\n              <span>\n                &nbsp;\n                <OutlinedQuestionCircleIcon\n                  className=\"grey-icon\"\n                  style={{ cursor: 'pointer' }}\n                />\n              </span>\n            </Popover>\n          ))(popover)}\n      </ListItem>\n    ))}\n  </List>\n);\n\nChartLegend.propTypes = {\n  legendData: propTypes.array,\n};\n\nexport default ChartLegend;\n","import React from 'react';\nimport { Text } from '@patternfly/react-core';\nimport blue200 from '@patternfly/react-tokens/dist/esm/chart_color_blue_200';\nimport blue300 from '@patternfly/react-tokens/dist/esm/chart_color_blue_300';\nimport chart_color_black_200 from '@patternfly/react-tokens/dist/esm/chart_color_black_200';\nimport chart_color_gold_300 from '@patternfly/react-tokens/dist/esm/chart_color_gold_300';\nimport { pluralize } from 'Utilities/TextHelper';\nimport { SupportedSSGVersionsLink } from 'PresentationalComponents';\n\nconst useLegendData = (donutValues, profile) => {\n  const {\n    testResultHostCount = 0,\n    unsupportedHostCount = 0,\n    totalHostCount = 0,\n  } = profile;\n  const notReportingHostCount =\n    totalHostCount - unsupportedHostCount - testResultHostCount;\n\n  return [\n    {\n      name: `${donutValues[0].y} ${pluralize(\n        donutValues[0].y,\n        'system'\n      )} compliant`,\n      symbol: { fill: blue300.value },\n    },\n    {\n      name: `${donutValues[1].y} ${pluralize(\n        donutValues[1].y,\n        'system'\n      )} non-compliant`,\n      symbol: { fill: blue200.value },\n    },\n    ...(unsupportedHostCount > 0\n      ? [\n          {\n            name: `${donutValues[2].y} ${pluralize(\n              donutValues[2].y,\n              'system'\n            )} not supported`,\n            symbol: { fill: chart_color_gold_300.value },\n            popover: {\n              title: 'Unsupported SSG versions',\n              content: (\n                <>\n                  <Text variant=\"p\">\n                    These systems are running unsupported versions of the SCAP\n                    Security Guide (SSG) for the version of RHEL installed on\n                    them. Assessment of rules failed/passed on these systems is\n                    a best-guess effort and may not be accurate.\n                  </Text>\n                  <Text variant=\"p\">\n                    The policy&apos;s compliance score excludes these systems.\n                  </Text>\n                </>\n              ),\n              footer: <SupportedSSGVersionsLink />,\n            },\n          },\n        ]\n      : []),\n    ...(notReportingHostCount > 0\n      ? [\n          {\n            name: `${notReportingHostCount} ${pluralize(\n              notReportingHostCount,\n              'system'\n            )} never reported`,\n            popover: {\n              title: 'Systems never reported',\n              content: `${notReportingHostCount} ${pluralize(\n                notReportingHostCount,\n                'system'\n              )} are not reporting scan results. This may be because the system is disconnected, or the insights-client is not properly configured to use Compliance.`,\n            },\n            symbol: { fill: chart_color_black_200.value },\n          },\n        ]\n      : []),\n  ];\n};\n\nexport default useLegendData;\n","import { ChartThemeVariant } from '@patternfly/react-charts';\nimport black300 from '@patternfly/react-tokens/dist/esm/global_palette_black_300';\nimport blue200 from '@patternfly/react-tokens/dist/esm/chart_color_blue_200';\nimport blue300 from '@patternfly/react-tokens/dist/esm/chart_color_blue_300';\nimport chart_color_black_200 from '@patternfly/react-tokens/dist/esm/chart_color_black_200';\nimport chart_color_gold_300 from '@patternfly/react-tokens/dist/esm/chart_color_gold_300';\nimport { fixedPercentage } from 'Utilities/TextHelper';\nimport useLegendData from './useLegendData';\n\nconst useDonutChart = (profile) => {\n  const {\n    compliantHostCount = 0,\n    testResultHostCount = 0,\n    unsupportedHostCount = 0,\n    totalHostCount = 0,\n  } = profile;\n  const notReportingHostCount =\n    totalHostCount - unsupportedHostCount - testResultHostCount;\n  const nonCompliantHostCount = testResultHostCount - compliantHostCount;\n  const donutId = profile.name?.replace(/ /g, '') || 'donut-chart';\n  const donutValues = [\n    { x: 'Compliant', y: compliantHostCount },\n    { x: 'Non-compliant', y: nonCompliantHostCount },\n    { x: 'Unsupported', y: unsupportedHostCount },\n    { x: 'Not reporting', y: notReportingHostCount },\n  ];\n  const chartColorScale = (testResultHostCount === 0 && [black300.value]) || [\n    blue300.value,\n    blue200.value,\n    chart_color_gold_300.value,\n    chart_color_black_200.value,\n  ];\n  const legendData = useLegendData(donutValues, profile);\n\n  const compliancePercentage = testResultHostCount\n    ? fixedPercentage(Math.floor(100 * (compliantHostCount / totalHostCount)))\n    : 0;\n\n  return {\n    chartProps: {\n      data: donutValues,\n      identifier: donutId,\n      title: compliancePercentage,\n      subTitle: 'Compliant',\n      themeVariant: ChartThemeVariant.light,\n      colorScale: chartColorScale,\n      style: { fontSize: 20 },\n      innerRadius: 88,\n      constrainToVisibleArea: true,\n    },\n    legendData,\n  };\n};\n\nexport default useDonutChart;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { ChartDonut } from '@patternfly/react-charts';\nimport '@/Charts.scss';\nimport ChartLegend from './ChartLegend';\nimport useDonutChart from './hooks/useDonutChart';\n\nconst ReportChart = ({ profile = {} }) => {\n  const { chartProps, legendData } = useDonutChart(profile);\n\n  return (\n    <Grid className=\"chart-container\">\n      <GridItem span={6}>\n        <ChartDonut {...chartProps} />\n      </GridItem>\n      <GridItem\n        span={6}\n        className=\"pf-u-display-flex pf-u-align-items-center\"\n        style={{\n          fontSize: '.85em',\n          height: '100%',\n        }}\n      >\n        <ChartLegend legendData={legendData} />\n      </GridItem>\n    </Grid>\n  );\n};\n\nReportChart.propTypes = {\n  profile: propTypes.object,\n};\n\nexport default ReportChart;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Grid,\n  GridItem,\n  Text,\n} from '@patternfly/react-core';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  BackgroundLink,\n  BreadcrumbLinkItem,\n  ReportDetailsContentLoader,\n  ReportDetailsDescription,\n  StateViewWithError,\n  StateViewPart,\n  UnsupportedSSGVersion,\n  SubPageTitle,\n  LinkButton,\n} from 'PresentationalComponents';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport { SystemsTable } from 'SmartComponents';\nimport '@/Charts.scss';\nimport './ReportDetails.scss';\nimport * as Columns from '../SystemsTable/Columns';\nimport ReportedSystemRow from './Components/ReportedSystemRow';\nimport ReportChart from './Components/ReportChart';\n\nexport const QUERY = gql`\n  query Profile($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      totalHostCount\n      testResultHostCount\n      compliantHostCount\n      unsupportedHostCount\n      complianceThreshold\n      osMajorVersion\n      lastScanned\n      policyType\n      policy {\n        id\n        name\n        profiles {\n          benchmark {\n            profiles {\n              ssgVersion\n            }\n          }\n        }\n      }\n      benchmark {\n        id\n        version\n      }\n      businessObjective {\n        id\n        title\n      }\n    }\n  }\n`;\n\nexport const ReportDetails = ({ route }) => {\n  const { report_id: policyId } = useParams();\n  const pdfReportEnabled = useFeature('pdfReport');\n  const { data, error, loading } = useQuery(QUERY, {\n    variables: { policyId },\n    fetchPolicy: 'no-cache',\n  });\n  let profile = {};\n  let policyName;\n  let pageTitle;\n  let ssgVersions = [];\n\n  if (!loading && data) {\n    profile = data.profile;\n    policyName = profile.policy.name;\n    pageTitle = `Report: ${policyName}`;\n    ssgVersions = [\n      ...new Set(\n        profile.policy.profiles.flatMap(({ benchmark: { profiles } }) =>\n          profiles.map(({ ssgVersion }) => ssgVersion)\n        )\n      ),\n    ];\n  }\n\n  useTitleEntity(route, policyName);\n\n  return (\n    <StateViewWithError stateValues={{ error, data, loading }}>\n      <StateViewPart stateKey=\"loading\">\n        <PageHeader>\n          <ReportDetailsContentLoader />\n        </PageHeader>\n        <Main>\n          <EmptyTable>\n            <Spinner />\n          </EmptyTable>\n        </Main>\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <PageHeader>\n          <Breadcrumb ouiaId=\"ReportDetailsPathBreadcrumb\">\n            <BreadcrumbLinkItem to=\"/\">Compliance</BreadcrumbLinkItem>\n            <BreadcrumbLinkItem to=\"/reports\">Reports</BreadcrumbLinkItem>\n            <BreadcrumbItem isActive>{pageTitle}</BreadcrumbItem>\n          </Breadcrumb>\n          <Grid hasGutter>\n            <GridItem sm={9} md={9} lg={9} xl={9}>\n              <PageHeaderTitle title={pageTitle} />\n              <SubPageTitle>{profile.policyType}</SubPageTitle>\n            </GridItem>\n            <GridItem\n              className=\"report-details-button\"\n              sm={3}\n              md={3}\n              lg={3}\n              xl={3}\n            >\n              {pdfReportEnabled && (\n                <BackgroundLink\n                  state={{ profile }}\n                  to={`/reports/${profile.id}/pdf`}\n                  component={LinkButton}\n                  ouiaId=\"ReportDetailsDownloadReportPDFLink\"\n                  variant=\"primary\"\n                  className=\"pf-u-mr-md\"\n                >\n                  Download PDF\n                </BackgroundLink>\n              )}\n              <BackgroundLink\n                state={{ profile }}\n                to={`/reports/${profile.id}/delete`}\n                component={LinkButton}\n                variant=\"link\"\n                ouiaId=\"ReportDetailsDeleteReportLink\"\n                isInline\n              >\n                Delete report\n              </BackgroundLink>\n            </GridItem>\n          </Grid>\n          <Grid hasGutter>\n            <GridItem sm={12} md={12} lg={12} xl={6}>\n              <ReportChart profile={profile} />\n              {profile.unsupportedHostCount > 0 && (\n                <Text ouiaId=\"UnsupportedSSGCountNotification\">\n                  <UnsupportedSSGVersion showHelpIcon>\n                    <strong className=\"ins-c-warning-text\">\n                      {profile.unsupportedHostCount} systems not supported\n                    </strong>\n                  </UnsupportedSSGVersion>\n                </Text>\n              )}\n            </GridItem>\n            <GridItem sm={12} md={12} lg={12} xl={6}>\n              <ReportDetailsDescription profile={profile} />\n            </GridItem>\n          </Grid>\n        </PageHeader>\n        <Main>\n          <Grid hasGutter>\n            <GridItem span={12}>\n              <SystemsTable\n                showOsMinorVersionFilter={[profile.osMajorVersion]}\n                ssgVersions={ssgVersions}\n                columns={[\n                  Columns.customName({\n                    showLink: true,\n                    showOsInfo: true,\n                  }),\n                  Columns.inventoryColumn('tags'),\n                  Columns.SsgVersion,\n                  Columns.FailedRules,\n                  Columns.ComplianceScore,\n                  Columns.LastScanned,\n                ]}\n                compliantFilter\n                defaultFilter={`policy_id = ${profile.id}`}\n                policyId={profile.id}\n                tableProps={{\n                  rowWrapper: ReportedSystemRow,\n                }}\n              />\n            </GridItem>\n          </Grid>\n        </Main>\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nReportDetails.propTypes = {\n  route: propTypes.object,\n};\n\nexport default ReportDetails;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport black300 from '@patternfly/react-tokens/dist/esm/global_palette_black_300';\nimport blue200 from '@patternfly/react-tokens/dist/esm/chart_color_blue_200';\nimport blue300 from '@patternfly/react-tokens/dist/esm/chart_color_blue_300';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { ChartDonut, ChartThemeVariant } from '@patternfly/react-charts';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Grid,\n  GridItem,\n  Text,\n} from '@patternfly/react-core';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { fixedPercentage, pluralize } from 'Utilities/TextHelper';\nimport {\n  BackgroundLink,\n  BreadcrumbLinkItem,\n  ReportDetailsContentLoader,\n  ReportDetailsDescription,\n  StateViewWithError,\n  StateViewPart,\n  UnsupportedSSGVersion,\n  SubPageTitle,\n  LinkButton,\n} from 'PresentationalComponents';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport { SystemsTable } from 'SmartComponents';\nimport '@/Charts.scss';\nimport './ReportDetails.scss';\nimport * as Columns from '../SystemsTable/Columns';\nimport { default as ReportDetailsWithNotReportedSystems } from './ReportDetailsWithNotReportedSystems';\n\nexport const QUERY = gql`\n  query Profile($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      testResultHostCount\n      compliantHostCount\n      unsupportedHostCount\n      complianceThreshold\n      osMajorVersion\n      lastScanned\n      policyType\n      policy {\n        id\n        name\n      }\n      benchmark {\n        id\n        version\n      }\n      businessObjective {\n        id\n        title\n      }\n    }\n  }\n`;\n\nexport const ReportDetails = ({ route }) => {\n  const { report_id: policyId } = useParams();\n  const pdfReportEnabled = useFeature('pdfReport');\n  const { data, error, loading } = useQuery(QUERY, {\n    variables: { policyId },\n    fetchPolicy: 'no-cache',\n  });\n  let donutValues = [];\n  let donutId = 'loading-donut';\n  let chartColorScale;\n  let profile = {};\n  let policyName;\n  let legendData;\n  let compliancePercentage;\n  let pageTitle;\n\n  if (!loading && data) {\n    profile = data.profile;\n    policyName = profile.policy.name;\n    pageTitle = `Report: ${policyName}`;\n    const compliantHostCount = profile.compliantHostCount;\n    const testResultHostCount = profile.testResultHostCount;\n    donutId = profile.name.replace(/ /g, '');\n    donutValues = [\n      { x: 'Compliant', y: testResultHostCount ? compliantHostCount : '0' },\n      { x: 'Non-compliant', y: testResultHostCount - compliantHostCount },\n    ];\n    chartColorScale = (testResultHostCount === 0 && [black300.value]) || [\n      blue300.value,\n      blue200.value,\n    ];\n    legendData = [\n      {\n        name:\n          donutValues[0].y +\n          ' ' +\n          pluralize(donutValues[0].y, 'system') +\n          ' compliant',\n      },\n      {\n        name:\n          donutValues[1].y +\n          ' ' +\n          pluralize(donutValues[1].y, 'system') +\n          ' non-compliant',\n      },\n    ];\n    compliancePercentage = testResultHostCount\n      ? fixedPercentage(\n          Math.floor(\n            100 * (donutValues[0].y / (donutValues[0].y + donutValues[1].y))\n          )\n        )\n      : 0;\n  }\n\n  useTitleEntity(route, policyName);\n\n  return (\n    <StateViewWithError stateValues={{ error, data, loading }}>\n      <StateViewPart stateKey=\"loading\">\n        <PageHeader>\n          <ReportDetailsContentLoader />\n        </PageHeader>\n        <Main>\n          <EmptyTable>\n            <Spinner />\n          </EmptyTable>\n        </Main>\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <PageHeader>\n          <Breadcrumb ouiaId=\"ReportDetailsPathBreadcrumb\">\n            <BreadcrumbLinkItem to=\"/\">Compliance</BreadcrumbLinkItem>\n            <BreadcrumbLinkItem to=\"/reports\">Reports</BreadcrumbLinkItem>\n            <BreadcrumbItem isActive>{pageTitle}</BreadcrumbItem>\n          </Breadcrumb>\n          <Grid hasGutter>\n            <GridItem sm={9} md={9} lg={9} xl={9}>\n              <PageHeaderTitle title={pageTitle} />\n              <SubPageTitle>{profile.policyType}</SubPageTitle>\n            </GridItem>\n            <GridItem\n              className=\"report-details-button\"\n              sm={3}\n              md={3}\n              lg={3}\n              xl={3}\n            >\n              {pdfReportEnabled && (\n                <BackgroundLink\n                  state={{ profile }}\n                  to={`/reports/${profile.id}/pdf`}\n                  component={LinkButton}\n                  ouiaId=\"ReportDetailsDownloadReportPDFLink\"\n                  variant=\"plain\"\n                  className=\"pf-u-mr-md\"\n                >\n                  Download PDF\n                </BackgroundLink>\n              )}\n              <BackgroundLink\n                state={{ profile }}\n                to={`/reports/${profile.id}/delete`}\n                component={LinkButton}\n                variant=\"link\"\n                ouiaId=\"ReportDetailsDeleteReportLink\"\n                isInline\n              >\n                Delete report\n              </BackgroundLink>\n            </GridItem>\n          </Grid>\n          <Grid hasGutter>\n            <GridItem sm={12} md={12} lg={12} xl={6}>\n              <div className=\"chart-inline\">\n                <div className=\"chart-container\">\n                  <ChartDonut\n                    data={donutValues}\n                    identifier={donutId}\n                    title={compliancePercentage}\n                    subTitle=\"Compliant\"\n                    themeVariant={ChartThemeVariant.light}\n                    colorScale={chartColorScale}\n                    style={{ fontSize: 20 }}\n                    constrainToVisibleArea={true}\n                    innerRadius={88}\n                    width={462}\n                    legendPosition=\"right\"\n                    legendData={legendData}\n                    legendOrientation=\"vertical\"\n                    padding={{\n                      bottom: 20,\n                      left: 0,\n                      right: 250,\n                      top: 20,\n                    }}\n                  />\n                </div>\n              </div>\n              {profile.unsupportedHostCount > 0 && (\n                <Text>\n                  <UnsupportedSSGVersion showHelpIcon>\n                    <strong className=\"ins-c-warning-text\">\n                      {profile.unsupportedHostCount} systems not supported\n                    </strong>\n                  </UnsupportedSSGVersion>\n                </Text>\n              )}\n            </GridItem>\n            <GridItem sm={12} md={12} lg={12} xl={6}>\n              <ReportDetailsDescription profile={profile} />\n            </GridItem>\n          </Grid>\n        </PageHeader>\n        <Main>\n          <Grid hasGutter>\n            <GridItem span={12}>\n              <SystemsTable\n                showOsMinorVersionFilter={[profile.osMajorVersion]}\n                columns={[\n                  Columns.customName({\n                    showLink: true,\n                    showOsInfo: true,\n                  }),\n                  Columns.inventoryColumn('tags'),\n                  Columns.SsgVersion,\n                  Columns.FailedRules,\n                  Columns.ComplianceScore,\n                  Columns.LastScanned,\n                ]}\n                showOnlySystemsWithTestResults\n                compliantFilter\n                defaultFilter={`with_results_for_policy_id = ${profile.id}`}\n                policyId={profile.id}\n              />\n            </GridItem>\n          </Grid>\n        </Main>\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nReportDetails.propTypes = {\n  route: propTypes.object,\n};\n\nconst ReportDetailsFeatureWrapper = (props) => {\n  const systemsNotReporting = useFeature('systemsNotReporting');\n\n  return systemsNotReporting ? (\n    <ReportDetailsWithNotReportedSystems {...props} />\n  ) : (\n    <ReportDetails {...props} />\n  );\n};\n\nexport default ReportDetailsFeatureWrapper;\n","import gql from 'graphql-tag';\n\nexport const DEFAULT_EXPORT_SETTINGS = {\n  compliantSystems: false,\n  nonCompliantSystems: true,\n  unsupportedSystems: true,\n  nonReportingSystems: true,\n  topTenFailedRules: true,\n  userNotes: undefined,\n};\n\nexport const GET_SYSTEMS = gql`\n  query getSystems(\n    $filter: String!\n    $policyId: ID\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n          osMinorVersion\n          insightsId\n          testResultProfiles(policyId: $policyId) {\n            lastScanned\n            compliant\n            score\n            supported\n            benchmark {\n              version\n            }\n            rulesFailed\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_PROFILE = gql`\n  query Profile($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      testResultHostCount\n      compliantHostCount\n      unsupportedHostCount\n      complianceThreshold\n      osMajorVersion\n      lastScanned\n      policyType\n      totalHostCount\n      policy {\n        id\n        name\n      }\n      benchmark {\n        id\n      }\n      businessObjective {\n        id\n        title\n      }\n    }\n  }\n`;\n\nexport const GET_RULES = gql`\n  query getProfiles($filter: String!, $policyId: ID!) {\n    profiles(search: $filter) {\n      totalCount\n      edges {\n        node {\n          topFailedRules(policyId: $policyId) {\n            refId\n            title\n            remediationAvailable\n            severity\n            identifier\n            failedCount\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextArea,\n  Checkbox,\n} from '@patternfly/react-core';\nimport useFeature from 'Utilities/hooks/useFeature';\n\nconst ExportPDFForm = ({ policy, setExportSetting, exportSettings }) => {\n  const systemsNotReporting = useFeature('systemsNotReporting');\n\n  return (\n    <Form>\n      <FormGroup isInline fieldId=\"simple-form-checkbox-group\" label=\"Policy\">\n        <Text>{policy.name}</Text>\n      </FormGroup>\n\n      <FormGroup\n        fieldId=\"simple-form-checkbox-group\"\n        label=\"System data to include\"\n      >\n        <Checkbox\n          label=\"Non-compliant systems\"\n          id=\"non-compliant-systems-export-setting\"\n          aria-label=\"Non-compliant systems\"\n          onChange={setExportSetting('nonCompliantSystems')}\n          isChecked={exportSettings.nonCompliantSystems}\n        />\n        <Checkbox\n          label=\"Systems with unsupported configuration\"\n          id=\"unsupported-systems-export-setting\"\n          aria-label=\"Systems with unsupported configuration\"\n          onChange={setExportSetting('unsupportedSystems')}\n          isChecked={exportSettings.unsupportedSystems}\n        />\n        {systemsNotReporting && (\n          <Checkbox\n            label=\"Systems with no reports\"\n            id=\"nonreporting-systems-export-setting\"\n            aria-label=\"Systems never reported\"\n            onChange={setExportSetting('nonReportingSystems')}\n            isChecked={exportSettings.nonReportingSystems}\n          />\n        )}\n        <Checkbox\n          id=\"compliant-systems-export-setting\"\n          onChange={setExportSetting('compliantSystems')}\n          isChecked={exportSettings.compliantSystems}\n          label=\"Compliant systems\"\n          aria-label=\"Compliant systems\"\n        />\n      </FormGroup>\n\n      <FormGroup label=\"Rule data to include\" fieldId=\"checkbox01\">\n        <Checkbox\n          id=\"failed-rules-export-setting\"\n          label=\"Top failed rules (Up to 10)\"\n          aria-label=\"Rule data to include\"\n          onChange={setExportSetting('topTenFailedRules')}\n          isChecked={exportSettings.topTenFailedRules}\n        />\n      </FormGroup>\n\n      <FormGroup label=\"User notes (optional)\" fieldId=\"checkbox01\">\n        <TextArea\n          aria-label=\"User notes (optional)\"\n          onChange={setExportSetting('userNotes')}\n          value={exportSettings.userNotes}\n        />\n      </FormGroup>\n    </Form>\n  );\n};\n\nExportPDFForm.propTypes = {\n  policy: propTypes.object,\n  exportSettings: propTypes.object,\n  setExportSetting: propTypes.func,\n};\n\nexport default ExportPDFForm;\n","// TODO move to utilities\n// to make these helpers available elsewhere and then use where needed\n\nconst scannedProfiles = (profiles) =>\n  profiles?.filter((profile) => profile.lastScanned != 'Never') || [];\n\nconst isSystemCompliant = (system) => {\n  const hasScannedProfiles =\n    scannedProfiles(system.testResultProfiles).length > 0;\n  const hasOnlyCompliantScannedProfiles = scannedProfiles(\n    system.testResultProfiles\n  ).every((profile) => profile.compliant);\n\n  return hasScannedProfiles && hasOnlyCompliantScannedProfiles;\n};\n\nconst isSystemNonCompliant = (system) => {\n  const hasScannedProfiles =\n    scannedProfiles(system.testResultProfiles).length > 0;\n  const hasNonCompliantProfiles =\n    scannedProfiles(system.testResultProfiles).filter(\n      (profile) => !profile.compliant\n    ).length > 0;\n\n  return hasScannedProfiles && hasNonCompliantProfiles;\n};\n\nconst hasProfiles = ({ testResultProfiles }) =>\n  scannedProfiles(testResultProfiles).length > 0;\n\nconst isSystemSupported = (system) =>\n  hasProfiles(system) &&\n  scannedProfiles(system.testResultProfiles).every(\n    (profile) => profile.supported\n  );\n\nconst isSystemUnsupported = (system) =>\n  hasProfiles(system) &&\n  scannedProfiles(system.testResultProfiles).every(\n    (profile) => !profile.supported\n  );\n\nexport const compliantSystemsData = (systems) =>\n  systems.filter(\n    (system) => isSystemSupported(system) && isSystemCompliant(system)\n  );\n\nexport const nonCompliantSystemsData = (systems) =>\n  systems.filter(\n    (system) => isSystemSupported(system) && isSystemNonCompliant(system)\n  );\n\nexport const unsupportedSystemsData = (systems) =>\n  systems.filter((system) => isSystemUnsupported(system));\n\nexport const supportedSystemsData = (systems) =>\n  systems.filter((system) => isSystemSupported(system));\n\nexport const nonReportingSystemsData = (systems) => {\n  const reportingSystemIds = [\n    ...compliantSystemsData(systems),\n    ...nonCompliantSystemsData(systems),\n    ...unsupportedSystemsData(systems),\n  ].map((system) => system.id);\n\n  return systems.filter((system) => !reportingSystemIds.includes(system.id));\n};\n\nexport const prepareForExport = (\n  exportSettings,\n  systems,\n  topTenFailedRules\n) => {\n  const compliantSystems = compliantSystemsData(systems);\n  const nonCompliantSystems = nonCompliantSystemsData(systems);\n  const unsupportedSystems = unsupportedSystemsData(systems);\n  const nonReportingSystems = nonReportingSystemsData(systems);\n\n  return {\n    totalHostCount: systems.length,\n\n    compliantSystemCount: compliantSystems.length,\n    ...(exportSettings.compliantSystems && {\n      compliantSystems: compliantSystems,\n    }),\n\n    nonCompliantSystemCount: nonCompliantSystems.length,\n    ...(exportSettings.nonCompliantSystems && {\n      nonCompliantSystems: nonCompliantSystems,\n    }),\n\n    unsupportedSystemCount: unsupportedSystems.length,\n    ...(exportSettings.unsupportedSystems && {\n      unsupportedSystems: unsupportedSystems,\n    }),\n\n    ...(exportSettings.topTenFailedRules && {\n      topTenFailedRules,\n    }),\n    nonReportingSystemCount: nonReportingSystems.length,\n    ...(exportSettings.nonReportingSystems && {\n      nonReportingSystems: nonReportingSystems,\n    }),\n    ...(exportSettings.userNotes && { userNotes: exportSettings.userNotes }),\n  };\n};\n","import { useApolloClient } from '@apollo/client';\nimport { GET_SYSTEMS, GET_RULES } from '../constants';\nimport { prepareForExport } from './helpers';\n\nconst fetchBatched = (fetchFunction, total, batchSize = 50) => {\n  const pages = Math.ceil(total / batchSize) || 1;\n  return Promise.all(\n    [...new Array(pages)].map((_, pageIdx) =>\n      fetchFunction(batchSize, pageIdx + 1)\n    )\n  );\n};\n\nconst useSystemsFetch = ({ id: policyId, totalHostCount } = {}) => {\n  const client = useApolloClient();\n\n  const fetchFunction = (perPage, page) =>\n    client.query({\n      query: GET_SYSTEMS,\n      fetchResults: true,\n      fetchPolicy: 'no-cache',\n      variables: {\n        perPage,\n        page,\n        filter: `policy_id = ${policyId}`,\n        policyId,\n      },\n    });\n\n  return async () =>\n    (await fetchBatched(fetchFunction, totalHostCount)).flatMap(\n      ({\n        data: {\n          systems: { edges },\n        },\n      }) => edges.map(({ node }) => node)\n    );\n};\n\nconst useFetchRules = ({ id: policyId } = {}) => {\n  const client = useApolloClient();\n\n  const fetchFunction = (perPage = 10, page = 1) =>\n    client.query({\n      query: GET_RULES,\n      fetchResults: true,\n      fetchPolicy: 'no-cache',\n      variables: {\n        perPage,\n        page,\n        filter: `policy_id = ${policyId}`,\n        policyId,\n      },\n    });\n\n  return async () =>\n    (await fetchFunction()).data.profiles?.edges.flatMap(\n      (edge) => edge.node.topFailedRules\n    );\n};\n\n// Hook that provides a wrapper function for a preconfigured GraphQL client to fetch export data\nconst useQueryExportData = (\n  exportSettings,\n  policy,\n  { onComplete, onError } = {\n    onComplete: () => undefined,\n    onError: () => undefined,\n  }\n) => {\n  const fetchSystems = useSystemsFetch(policy);\n  const fetchRules = useFetchRules(policy);\n\n  return async () => {\n    try {\n      const systems = await fetchSystems();\n      const rules = await fetchRules();\n      const exportData = prepareForExport(exportSettings, systems, rules);\n      onComplete?.(exportData);\n      return exportData;\n    } catch (error) {\n      if (onError) {\n        onError?.(error);\n        return [];\n      } else {\n        throw error;\n      }\n    }\n  };\n};\n\nexport default useQueryExportData;\n","import { StyleSheet } from '@react-pdf/renderer';\n\n// Supported style properties see: https://react-pdf.org/styling\nexport default StyleSheet.create({\n  // TODO: bold rendering in PDF does not appear to work\n  bold: {\n    fontWeight: 'bold',\n  },\n  italic: {\n    fontStyle: 'italic',\n  },\n\n  metaTitle: {\n    color: '#C9190B',\n    marginBottom: '20px',\n  },\n\n  userNotes: {\n    backgroundColor: '#F0F0F0',\n    padding: '8px',\n  },\n  userNotesTitle: {\n    marginBottom: '4px',\n  },\n\n  sectionTitle: {\n    color: '#C9190B',\n    fontWeight: 'bold',\n    fontSize: 14,\n  },\n\n  subSectionTitle: {\n    color: '#C9190B',\n    fontWeight: 'bold',\n    fontSize: 10,\n    marginBottom: '10pt',\n  },\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\n// eslint-disable-next-line rulesdir/disallow-fec-relative-imports\nimport { Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { fixedPercentage } from 'Utilities/TextHelper';\n\nconst SystemsTable = ({ systems }) => {\n  const headerRow = ['System name', 'OS', 'Failed rules', 'Compliance score'];\n  const rows = systems.map((system) => [\n    system.name,\n    `RHEL ${system.osMajorVersion}.${system.osMinorVersion}`,\n    `${system.testResultProfiles[0].rulesFailed || ''}`,\n    fixedPercentage(system.testResultProfiles[0].score),\n  ]);\n\n  return <Table withHeader rows={[headerRow, ...rows]} />;\n};\n\nSystemsTable.propTypes = {\n  systems: propTypes.array,\n};\n\nexport default SystemsTable;\n","import React from 'react';\nimport propTypes from 'prop-types';\n// eslint-disable-next-line rulesdir/disallow-fec-relative-imports\nimport { Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\n\nconst UnsupportedSystemsTable = ({ systems, ssgFinder }) => {\n  const headerRow = [\n    'System name',\n    'OS',\n    'Running SSG version',\n    'Expected SSG version',\n  ];\n  const rows = systems.map((system) => [\n    system.name,\n    `RHEL ${system.osMajorVersion}.${system.osMinorVersion}`,\n    system.testResultProfiles[0]?.benchmark.version,\n    ssgFinder(system.osMajorVersion, system.osMinorVersion),\n  ]);\n\n  return <Table withHeader rows={[headerRow, ...rows]} />;\n};\n\nUnsupportedSystemsTable.propTypes = {\n  systems: propTypes.array,\n  ssgFinder: propTypes.func,\n};\n\nexport default UnsupportedSystemsTable;\n","import React from 'react';\nimport propTypes from 'prop-types';\n// eslint-disable-next-line rulesdir/disallow-fec-relative-imports\nimport { Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\n\nconst NonReportedSystemsTable = ({ systems }) => {\n  const headerRow = ['System name', 'OS'];\n  const rows = systems.map((system) => [\n    system.name,\n    `RHEL ${system.osMajorVersion}.${system.osMinorVersion}`,\n  ]);\n\n  return <Table withHeader rows={[headerRow, ...rows]} />;\n};\n\nNonReportedSystemsTable.propTypes = {\n  systems: propTypes.array,\n  ssgFinder: propTypes.func,\n};\n\nexport default NonReportedSystemsTable;\n","import React from 'react';\nimport propTypes from 'prop-types';\n// eslint-disable-next-line rulesdir/disallow-fec-relative-imports\nimport { Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\n\nconst identifierLabel = ({ identifier }) =>\n  JSON.parse(identifier || '{}').label || '';\n\nconst capitalize = (str = '') => str.charAt(0).toUpperCase() + str.slice(1);\n\nconst RulesTable = ({ rules }) => {\n  const headerRow = ['Rule name', 'ID', 'Severity', 'Failed systems'];\n  const failedRuleRows = rules.slice(0, 10).map((rule) => [\n    rule.title,\n    identifierLabel(rule),\n    // TODO: Add icon svg for severity\n    capitalize(rule?.severity),\n    `${rule.failedCount}`,\n  ]);\n\n  return <Table withHeader rows={[headerRow, ...failedRuleRows]} />;\n};\n\nRulesTable.propTypes = {\n  rules: propTypes.array,\n};\n\nexport default RulesTable;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Text, View } from '@react-pdf/renderer';\n\n// TODO: Move into pdf-generator components as option to render title at the bottom\nconst PanelItem = (props) => {\n  const { children, title } = props;\n  return (\n    <View\n      style={{\n        justifyContent: 'space-evenly',\n        width: '24%',\n        paddingRight: '1%',\n      }}\n    >\n      <View>\n        <Text style={{ color: '#C9190B', fontSize: 20 }}>{children}</Text>\n      </View>\n      <Text>{title}</Text>\n    </View>\n  );\n};\n\nPanelItem.propTypes = {\n  children: propTypes.node,\n  title: propTypes.string,\n};\n\nexport default PanelItem;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Text, View } from '@react-pdf/renderer';\nimport styles from './StyleSheet';\n\nconst SubSection = ({ children, metaTitle, title }) => {\n  return (\n    <View\n      style={{\n        marginBottom: '20pt',\n      }}\n    >\n      <View\n        style={{\n          justifyContent: 'start',\n        }}\n      >\n        <Text\n          style={{\n            ...styles.subSectionTitle,\n            width: '70%',\n          }}\n        >\n          {title}\n        </Text>\n        <Text>{metaTitle}</Text>\n      </View>\n\n      {children}\n    </View>\n  );\n};\n\nSubSection.propTypes = {\n  children: propTypes.node,\n  metaTitle: propTypes.string,\n  title: propTypes.string,\n};\n\nexport default SubSection;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport chart_color_gold_300 from '@patternfly/react-tokens/dist/esm/chart_color_gold_300';\n// eslint-disable-next-line rulesdir/disallow-fec-relative-imports\nimport { Chart } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { fixedPercentage } from 'Utilities/TextHelper';\n\n// TODO Legend table style need to be disablable\nconst ComplianceChart = ({\n  policy: { percentCompliant = 0 },\n  compliantSystemCount,\n  nonCompliantSystemCount,\n  unsupportedSystemCount,\n  nonReportingSystemCount,\n}) => {\n  const compliantSystemsChartData = [\n    {\n      x: `${compliantSystemCount} systems compliant`,\n      y: compliantSystemCount,\n    },\n    {\n      x: `${nonCompliantSystemCount} systems non-compliant`,\n      y: nonCompliantSystemCount,\n    },\n    ...(unsupportedSystemCount > 0\n      ? [\n          {\n            x: `${unsupportedSystemCount} systems not supported`,\n            y: unsupportedSystemCount,\n            color: chart_color_gold_300.value,\n          },\n        ]\n      : []),\n    ...(nonReportingSystemCount > 0\n      ? [\n          {\n            x: `${nonReportingSystemCount} systems never reported`,\n            y: nonReportingSystemCount,\n          },\n        ]\n      : []),\n  ];\n  const compliancePercentage = fixedPercentage(percentCompliant);\n\n  return (\n    <Chart\n      legendHeader={''}\n      chartType=\"donut\"\n      subTitle=\"Compliant\"\n      colorSchema=\"multi\"\n      title={compliancePercentage}\n      data={compliantSystemsChartData}\n    />\n  );\n};\n\nComplianceChart.propTypes = {\n  policy: propTypes.object,\n  compliantSystemCount: propTypes.number,\n  nonCompliantSystemCount: propTypes.number,\n  unsupportedSystemCount: propTypes.number,\n  nonReportingSystemCount: propTypes.number,\n};\n\nexport default ComplianceChart;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Text, View } from '@react-pdf/renderer';\n// eslint-disable-next-line rulesdir/disallow-fec-relative-imports\nimport {\n  Panel,\n  Table,\n  Column,\n  Section,\n} from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { fixedPercentage } from 'Utilities/TextHelper';\nimport styles from './ReportPDF/StyleSheet';\nimport SystemsTable from './ReportPDF/SystemsTable';\nimport UnsupportedSystemsTable from './ReportPDF/UnsupportedSystemsTable';\nimport NonReportedSystemsTable from './ReportPDF/NonReportedSystemsTable';\nimport RulesTable from './ReportPDF/RulesTable';\nimport PanelItem from './ReportPDF/PanelItem';\nimport SubSection from './ReportPDF/SubSection';\nimport ComplianceChart from './ReportPDF/ComplianceChart';\n\nconst ReportPDF = ({ data, ssgFinder }) => {\n  const {\n    totalHostCount,\n    compliantSystems,\n    compliantSystemCount,\n    nonCompliantSystems,\n    nonCompliantSystemCount,\n    topTenFailedRules,\n    unsupportedSystems,\n    unsupportedSystemCount,\n    nonReportingSystems,\n    nonReportingSystemCount,\n    userNotes,\n    policy,\n  } = data;\n  const { testResultHostCount = 0, compliantHostCount = 0 } = policy;\n  const percentCompliant =\n    testResultHostCount != 0\n      ? fixedPercentage(Math.floor(100 * (compliantHostCount / totalHostCount)))\n      : 0;\n\n  return (\n    <Fragment>\n      <Text style={styles.subSectionTitle}>{`Report prepared ${\n        DateFormat({ date: new Date(), type: 'exact' }).props.children\n      }`}</Text>\n\n      {userNotes && (\n        <View style={styles.userNotes}>\n          <View style={styles.userNotesTitle}>\n            <Text>User notes</Text>\n          </View>\n          <View>\n            <Text>{userNotes}</Text>\n          </View>\n        </View>\n      )}\n\n      <Section\n        title=\"Policy Details\"\n        titleProps={{\n          style: styles.sectionTitle,\n        }}\n      >\n        <Column style={{ width: '150px' }}>\n          <Table\n            // TODO: correct left side styling\n            rows={[\n              ['Policy type', policy.policyType],\n              ['Operating system', `RHEL ${policy.osMajorVersion}`],\n              ['Compliance threshold', `${policy.complianceThreshold}%`],\n              ['Business Objective', policy.businessObjective?.title || '--'],\n            ]}\n          />\n        </Column>\n        <Column>\n          <ComplianceChart\n            policy={{\n              ...policy,\n              percentCompliant,\n            }}\n            {...{\n              compliantSystemCount,\n              nonCompliantSystemCount,\n              unsupportedSystemCount,\n              nonReportingSystemCount,\n            }}\n          />\n        </Column>\n      </Section>\n\n      <Section\n        title=\"Systems\"\n        withColumn={false}\n        titleProps={{\n          style: styles.sectionTitle,\n        }}\n      >\n        <Panel withColumn={false} style={{ marginBottom: '20px' }}>\n          <PanelItem title=\"Non-compliant systems\">\n            {nonCompliantSystemCount}\n          </PanelItem>\n\n          {unsupportedSystemCount ? (\n            <PanelItem title=\"Systems with unsupported configuration\">\n              {unsupportedSystemCount}\n            </PanelItem>\n          ) : null}\n\n          {nonReportingSystemCount ? (\n            <PanelItem title=\"Systems never reported\">\n              {nonReportingSystemCount}\n            </PanelItem>\n          ) : null}\n\n          <PanelItem title=\"Compliant systems\">\n            {compliantSystemCount}\n          </PanelItem>\n        </Panel>\n\n        {nonCompliantSystems && nonCompliantSystemCount ? (\n          <SubSection title=\"Non-compliant systems\">\n            <SystemsTable systems={nonCompliantSystems} />\n          </SubSection>\n        ) : null}\n\n        {unsupportedSystems && unsupportedSystemCount ? (\n          <SubSection title=\"Systems with unsupported configuration\">\n            <UnsupportedSystemsTable\n              systems={unsupportedSystems}\n              ssgFinder={ssgFinder}\n            />\n          </SubSection>\n        ) : null}\n\n        {nonReportingSystems && nonReportingSystemCount ? (\n          <SubSection title=\"Systems never reported\">\n            <NonReportedSystemsTable systems={nonReportingSystems} />\n          </SubSection>\n        ) : null}\n\n        {compliantSystems && compliantSystemCount ? (\n          <SubSection title=\"Compliant systems\">\n            <SystemsTable systems={compliantSystems} />\n          </SubSection>\n        ) : null}\n      </Section>\n\n      {topTenFailedRules ? (\n        <Section\n          title=\"Rules\"\n          withColumn={false}\n          titleProps={{\n            style: styles.sectionTitle,\n          }}\n        >\n          <SubSection title=\"Top failed rules\">\n            <RulesTable rules={topTenFailedRules} />\n          </SubSection>\n        </Section>\n      ) : null}\n    </Fragment>\n  );\n};\n\nReportPDF.propTypes = {\n  data: propTypes.object,\n  ssgFinder: propTypes.func,\n};\n\nexport default ReportPDF;\n","class ApiClient {\n  DEFAULT_API_HEADERS = {\n    'Content-Type': 'application/vnd.api+json',\n    Accept: 'application/json',\n  };\n\n  constructor(options = {}) {\n    this.apiBase = options.apiBase || '/api';\n    this.path = options.path || '';\n    this.authenticate = options.authenticate || (() => Promise.resolve({}));\n    this.onUnauthorised = options.onUnauthorised || (() => Promise.resolve({}));\n    this.defaultHeaders = options.headers || this.DEFAULT_API_HEADERS;\n  }\n\n  async request(path, apiProps, method, options = {}) {\n    return await this.callAuthenticate()\n      .then(() => this.fetch(path, apiProps, method, options))\n      .then(this.checkForEmptyResponse)\n      .then((response) => this.checkForErrors(response, options))\n      .then((response) => response.json())\n      .catch(this.finalCatch);\n  }\n\n  finalCatch(promise) {\n    if (promise.errors === undefined) {\n      return Promise.reject({ title: 'Error parsing' });\n    } else {\n      return Promise.reject({ ...promise });\n    }\n  }\n\n  fetch(path, apiProps, method, options) {\n    let params = {\n      method: method || 'get',\n      headers: this.defaultHeaders,\n      credentials: 'include',\n    };\n    const fullPath = `${this.apiBase}${this.path ? this.path : ''}${\n      path ? path : ''\n    }`;\n    let url = new URL(fullPath, window.location.origin);\n    if (options.params) {\n      const params = Object.keys(options.params)\n        .map(\n          (key) =>\n            encodeURIComponent(key) +\n            '=' +\n            encodeURIComponent(options.params[key])\n        )\n        .join('&');\n      url.search = new URLSearchParams(params);\n    }\n\n    if (apiProps) {\n      params.body = JSON.stringify(apiProps);\n    }\n\n    return fetch(url, params);\n  }\n\n  checkForEmptyResponse(response) {\n    return response.status === 204 ? { json: () => ({}) } : response;\n  }\n\n  checkForErrors(response, options = {}) {\n    if (response.status === 404 && options.ignore404) {\n      return { json: () => ({}) };\n    }\n\n    if (response.status === 401) {\n      return this.onUnauthorised();\n    }\n\n    const responseCloneJson = response.clone\n      ? response.clone().json()\n      : response;\n\n    if (response.status === 422) {\n      return responseCloneJson.then((json) =>\n        Promise.reject({ ...json, title: 'Validation error' })\n      );\n    }\n\n    if (response.status >= 400 && response.status <= 600) {\n      return responseCloneJson.then((json) => Promise.reject(json.errors[0]));\n    }\n\n    return response;\n  }\n\n  callAuthenticate() {\n    return Promise.resolve(this.authenticate() || true);\n  }\n\n  create(path, apiProps) {\n    return this.request(path, apiProps, 'post');\n  }\n\n  update(path, apiProps) {\n    return this.request(path, apiProps, 'put');\n  }\n\n  get(path, options = {}) {\n    return this.request(path, null, 'get', options);\n  }\n\n  destroy(path) {\n    return this.request(path, null, 'delete');\n  }\n}\n\nexport default ApiClient;\n","import ApiClient from './utils/ApiClient';\n\nconst useApi = (options) => {\n  const apiClient = new ApiClient({\n    ...options,\n  });\n\n  return apiClient;\n};\n\nexport default useApi;\n","import { useEffect, useState } from 'react';\nimport { COMPLIANCE_API_ROOT } from '@/constants';\nimport normalize from 'json-api-normalizer';\nimport useApi from './useApi';\n\nconst includePropAndDelete = (entity, prop) => {\n  const attributes = entity[prop];\n  let newEntity = entity;\n  delete newEntity[prop];\n  return { ...newEntity, ...attributes };\n};\n\nconst includeAttributes = (entity) =>\n  entity && includePropAndDelete(entity, 'attributes');\n\nconst includeRelationship = (entity, normalizedJson) => {\n  let relationships = {};\n  Object.entries(entity?.relationships || []).forEach((item) => {\n    const [relationship, relationshipData] = item;\n    relationships[relationship] = relationshipData?.data\n      .map((entity) =>\n        includeAttributes(normalizedJson?.[entity.type]?.[entity.id])\n      )\n      .filter((v) => !!v);\n  });\n  delete entity.relationships;\n  return { ...entity, ...relationships };\n};\n\nconst normalizeData = (json, type) => {\n  const jsonNormalized = normalize(json);\n  return Object.values(jsonNormalized[type] || {})?.map((entity) =>\n    includeRelationship(includeAttributes(entity), jsonNormalized)\n  );\n};\n\nconst fetchCollection = async (\n  apiClient,\n  collection,\n  params = {},\n  options = {}\n) => {\n  const json = await apiClient.get(`/${collection}`, { params });\n  const normalized = await normalizeData(json, options?.type || collection);\n\n  return {\n    collection: normalized,\n    meta: json.meta,\n    total: json.meta.total,\n    json,\n  };\n};\n\nconst useCollection = (collection, options = {}, dependencies = []) => {\n  const [collectionState, setCollectionState] = useState({\n    data: undefined,\n    loading: false,\n    error: undefined,\n  });\n  const apiClient = useApi({\n    apiBase: COMPLIANCE_API_ROOT,\n  });\n  const params = {\n    ...(options?.params || {}),\n    include: options?.include || [],\n  };\n\n  useEffect(() => {\n    if (!options?.skip) {\n      setCollectionState({\n        data: undefined,\n        loading: true,\n        error: undefined,\n      });\n\n      fetchCollection(apiClient, collection, params, options).then((data) => {\n        setCollectionState({\n          data,\n          loading: false,\n          error: undefined,\n        });\n      });\n    }\n  }, [...dependencies, options?.skip]);\n\n  return collectionState;\n};\n\nexport default useCollection;\n","import useCollection from 'Utilities/hooks/api/useCollection';\n\nconst compareAsIntegers = (firstString, secondString) =>\n  parseInt(firstString) === parseInt(secondString);\n\nconst useSupportedSsgFinder = (skip) => {\n  const { data: supportedSsgs } = useCollection('supported_ssgs', {\n    type: 'supportedSsg',\n    skip,\n  });\n  return (majorVersion, minorVersion) => {\n    const matchingVersion = (supportedSsgs || {}).collection?.find(\n      (profile) =>\n        compareAsIntegers(profile.osMajorVersion, majorVersion) &&\n        compareAsIntegers(profile.osMinorVersion, minorVersion)\n    );\n\n    return matchingVersion?.version || 'N/A';\n  };\n};\n\nexport default useSupportedSsgFinder;\n","import { dispatchNotification } from 'Utilities/Dispatcher';\nimport useQueryExportData from './useQueryExportData';\nimport usePDFBuilder from './usePDFBuilder';\nimport useSupportedSsgFinder from './useSupportedSsgFinder';\n\n// Hook to provide a function that fetches the necessary data to export\n// and compile it into pages for the pdf-generator DownloadButton\nconst usePDFExport = (exportSettings, policy) => {\n  const ssgFinder = useSupportedSsgFinder();\n  const queryExportData = useQueryExportData(exportSettings, policy, {\n    onError: () => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Couldn’t download export',\n        description: 'Reinitiate this export to try again.',\n      });\n    },\n    onComplete: () => {\n      dispatchNotification({\n        variant: 'success',\n        title: 'Downloading export',\n      });\n    },\n  });\n  const buildPDFPages = usePDFBuilder(policy);\n\n  const exportPDF = async () => {\n    dispatchNotification({\n      variant: 'info',\n      title: 'Preparing export',\n      description: 'Once complete, your download will start automatically.',\n    });\n    const data = await queryExportData();\n    return await buildPDFPages(data, ssgFinder);\n  };\n\n  return exportPDF;\n};\n\nexport default usePDFExport;\n","import React from 'react';\nimport ReportPDF from '../Components/ReportPDF';\n\n// (Eventually) responsible for rendering sections and splitting into pages\nconst usePDFBuilder = (policy) => async (data, ssgFinder) =>\n  [\n    <ReportPDF\n      key=\"pdf-page-1\"\n      data={{ ...data, policy }}\n      ssgFinder={ssgFinder}\n    />,\n  ];\n\nexport default usePDFBuilder;\n","import React from 'react';\nimport { Button, Spinner } from '@patternfly/react-core';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n// eslint-disable-next-line\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport {\n  ComplianceModal,\n  StateViewWithError,\n  StateViewPart,\n} from 'PresentationalComponents';\nimport { useLinkToBackground } from 'Utilities/Router';\nimport { GET_PROFILE } from './constants';\nimport ExportPDFForm from './Components/ExportPDFForm';\nimport usePDFExport from './hooks/usePDFExport';\nimport useExportSettings from './hooks/useExportSettings';\n\n// Provides that export settings modal accessible in the report details\nexport const ReportDownload = () => {\n  const { report_id: policyId } = useParams();\n  const linkToReport = useLinkToBackground('/reports/' + policyId);\n  const { data, loading, error } = useQuery(GET_PROFILE, {\n    variables: { policyId },\n  });\n  const policy = data?.profile;\n  const {\n    exportSettings,\n    setExportSetting,\n    isValid: settingsValid,\n  } = useExportSettings();\n\n  const exportPDF = usePDFExport(exportSettings, policy);\n  const exportFileName = `compliance-report--${\n    new Date().toISOString().split('T')[0]\n  }`;\n  const buttonLabel = 'Export report';\n  const buttonProps = {\n    ouiaId: 'ExportReportButton',\n    variant: 'primary',\n    isDisabled: !settingsValid,\n  };\n\n  const FallbackButton = () => <Button {...buttonProps}>{buttonLabel}</Button>;\n\n  const actions = [\n    <DownloadButton\n      groupName=\"Red Hat Insights\"\n      key=\"export\"\n      label={buttonLabel}\n      reportName={`Compliance:`}\n      type={policy && policy.name}\n      fileName={exportFileName}\n      asyncFunction={exportPDF}\n      buttonProps={buttonProps}\n      fallback={<FallbackButton />}\n      className=\"pf-u-mr-sm\"\n    />,\n    <Button\n      variant=\"secondary\"\n      key=\"cancel\"\n      ouiaId=\"ExportReportCancelButton\"\n      onClick={(event) => {\n        event.preventDefault();\n        window.history.back();\n      }}\n    >\n      Cancel\n    </Button>,\n  ];\n\n  return (\n    <ComplianceModal\n      isOpen\n      width=\"440px\"\n      ouiaId=\"DownloadReportModal\"\n      title=\"Compliance report\"\n      onClose={() => linkToReport()}\n      actions={actions}\n    >\n      <StateViewWithError stateValues={{ error, data, loading }}>\n        <StateViewPart stateKey=\"loading\">\n          <Spinner />\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n          <ExportPDFForm {...{ policy, setExportSetting, exportSettings }} />\n        </StateViewPart>\n      </StateViewWithError>\n    </ComplianceModal>\n  );\n};\n\nexport default ReportDownload;\n","import { useState } from 'react';\nimport pickBy from 'lodash/pickBy';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport { DEFAULT_EXPORT_SETTINGS } from '../constants';\n\nconst preparedSettings = (withReporting) =>\n  pickBy(\n    DEFAULT_EXPORT_SETTINGS,\n    (_value, key) => !(key === 'nonReportingSystems' && !withReporting)\n  );\n\nconst useExportSettings = () => {\n  const systemsNotReporting = useFeature('systemsNotReporting');\n  const [exportSettings, setExportSettings] = useState(\n    preparedSettings(systemsNotReporting)\n  );\n\n  const setExportSetting = (setting) => (value) =>\n    setExportSettings({\n      ...exportSettings,\n      [setting]: value,\n    });\n\n  const isValid = () =>\n    Object.keys(exportSettings).some(\n      (key) => (key !== 'userNotes' && !!exportSettings[key]) === true\n    );\n\n  return {\n    exportSettings,\n    setExportSetting,\n    isValid: isValid(),\n  };\n};\n\nexport default useExportSettings;\n"],"names":["ReportedSystemRow","row","children","RowWrapper","style","testResultProfiles","length","background","borderLeft","borderRight","propTypes","ChartIcon","color","width","height","display","ChartLegend","legendData","List","map","index","title","content","footer","name","symbol","tooltip","popover","ListItem","key","icon","fill","verticalAlign","Tooltip","className","Popover","maxWidth","headerContent","bodyContent","footerContent","cursor","profile","compliantHostCount","testResultHostCount","unsupportedHostCount","totalHostCount","notReportingHostCount","nonCompliantHostCount","donutId","replace","donutValues","x","y","chartColorScale","black300","blue300","blue200","chart_color_gold_300","chart_color_black_200","pluralize","Text","variant","useLegendData","chartProps","data","identifier","fixedPercentage","Math","floor","subTitle","themeVariant","ChartThemeVariant","colorScale","fontSize","innerRadius","constrainToVisibleArea","ReportChart","useDonutChart","Grid","GridItem","span","ChartDonut","QUERY","gql","ReportDetails","policyName","pageTitle","route","policyId","useParams","report_id","pdfReportEnabled","useFeature","useQuery","variables","fetchPolicy","error","loading","ssgVersions","policy","Set","profiles","flatMap","benchmark","ssgVersion","useTitleEntity","stateValues","stateKey","PageHeader","Main","EmptyTable","Spinner","Breadcrumb","ouiaId","to","BreadcrumbItem","isActive","hasGutter","sm","md","lg","xl","PageHeaderTitle","policyType","state","id","component","LinkButton","isInline","showHelpIcon","showOsMinorVersionFilter","osMajorVersion","columns","Columns","showLink","showOsInfo","compliantFilter","defaultFilter","tableProps","rowWrapper","compliancePercentage","legendPosition","legendOrientation","padding","bottom","left","right","top","showOnlySystemsWithTestResults","props","ReportDetailsWithNotReportedSystems","DEFAULT_EXPORT_SETTINGS","compliantSystems","nonCompliantSystems","unsupportedSystems","nonReportingSystems","topTenFailedRules","userNotes","undefined","GET_SYSTEMS","GET_PROFILE","GET_RULES","ExportPDFForm","setExportSetting","exportSettings","systemsNotReporting","Form","FormGroup","fieldId","label","Checkbox","onChange","isChecked","TextArea","value","scannedProfiles","filter","lastScanned","hasProfiles","isSystemSupported","system","every","supported","compliantSystemsData","systems","hasScannedProfiles","hasOnlyCompliantScannedProfiles","compliant","isSystemCompliant","nonCompliantSystemsData","hasNonCompliantProfiles","isSystemNonCompliant","unsupportedSystemsData","isSystemUnsupported","prepareForExport","reportingSystemIds","includes","nonReportingSystemsData","compliantSystemCount","nonCompliantSystemCount","unsupportedSystemCount","nonReportingSystemCount","fetchBatched","fetchFunction","total","batchSize","pages","ceil","Promise","all","Array","_","pageIdx","useSystemsFetch","client","useApolloClient","perPage","page","query","fetchResults","edges","node","useFetchRules","edge","topFailedRules","StyleSheet","bold","fontWeight","italic","fontStyle","metaTitle","marginBottom","backgroundColor","userNotesTitle","sectionTitle","subSectionTitle","SystemsTable","rows","osMinorVersion","rulesFailed","score","withHeader","UnsupportedSystemsTable","ssgFinder","version","NonReportedSystemsTable","capitalize","str","charAt","toUpperCase","slice","RulesTable","failedRuleRows","rules","rule","JSON","parse","severity","failedCount","PanelItem","justifyContent","paddingRight","SubSection","styles","ComplianceChart","percentCompliant","compliantSystemsChartData","legendHeader","chartType","colorSchema","ReportPDF","Fragment","DateFormat","date","Date","type","titleProps","complianceThreshold","businessObjective","withColumn","ApiClient","options","Accept","this","apiBase","path","authenticate","resolve","onUnauthorised","defaultHeaders","headers","DEFAULT_API_HEADERS","apiProps","method","callAuthenticate","then","fetch","checkForEmptyResponse","response","checkForErrors","json","catch","finalCatch","promise","errors","reject","params","credentials","fullPath","url","URL","window","location","origin","Object","keys","encodeURIComponent","join","search","URLSearchParams","body","stringify","status","ignore404","responseCloneJson","clone","request","apiClient","includeAttributes","entity","prop","attributes","newEntity","includePropAndDelete","normalizeData","jsonNormalized","normalize","values","normalizedJson","relationships","entries","forEach","item","relationship","relationshipData","v","includeRelationship","fetchCollection","collection","get","normalized","meta","compareAsIntegers","firstString","secondString","parseInt","skip","supportedSsgs","dependencies","useState","collectionState","setCollectionState","useApi","COMPLIANCE_API_ROOT","include","useEffect","useCollection","majorVersion","minorVersion","matchingVersion","find","useSupportedSsgFinder","queryExportData","onComplete","onError","fetchSystems","fetchRules","exportData","useQueryExportData","dispatchNotification","description","buildPDFPages","usePDFBuilder","exportPDF","ReportDownload","linkToReport","useLinkToBackground","withReporting","pickBy","_value","setExportSettings","setting","isValid","some","useExportSettings","settingsValid","usePDFExport","exportFileName","toISOString","split","buttonLabel","buttonProps","isDisabled","FallbackButton","Button","actions","groupName","reportName","fileName","asyncFunction","fallback","onClick","event","preventDefault","history","back","C","isOpen","onClose"],"sourceRoot":""}