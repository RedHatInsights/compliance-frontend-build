{"version":3,"sources":["webpack:///./src/SmartComponents/ReportDetails/ReportDetails.scss?1b44","webpack:///./src/SmartComponents/ReportDetails/ReportDetails.scss","webpack:///./src/SmartComponents/DeleteReport/DeleteReport.js","webpack:///./src/SmartComponents/ReportDetails/ReportDetails.js"],"names":["content","module","i","options","transform","undefined","locals","exports","___CSS_LOADER_API_IMPORT___","push","DeleteReport","policyId","isModalOpen","onClose","onDelete","useState","modalOpen","setModalOpen","closeModal","removed","useMutation","DELETE_REPORT","onCompleted","dispatchAction","addNotification","variant","title","onError","error","description","message","deleteReport","useEffect","Modal","isSmall","isOpen","isFooterLeftAligned","actions","Button","key","aria-label","onClick","variables","input","profileId","TextContent","propTypes","func","bool","string","defaultProps","QUERY","gql","ReportDetails","legendData","compliancePercentage","match","history","useQuery","params","report_id","data","loading","deleteModalOpen","setDeleteModalOpen","donutValues","donutId","policy","compliantHostCount","profile","totalHostCount","name","replace","x","y","pluralize","fixedPercentage","Math","floor","stateValues","stateKey","Breadcrumb","BreadcrumbItem","to","isActive","Grid","gutter","GridItem","xl","className","isInline","sm","md","lg","ChartDonut","identifier","subTitle","themeColor","ChartThemeColor","blue","themeVariant","ChartThemeVariant","light","style","fontSize","innerRadius","width","legendPosition","legendOrientation","padding","bottom","left","right","top","span","SystemsTable","showOnlySystemsWithTestResults","id","columns","props","beta","window","insights","chrome","isBeta","object","routerParams"],"mappings":"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","file":"js/ReportDetails.js","sourcesContent":["\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ref--5-2!./ReportDetails.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ref--5-2!./ReportDetails.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ref--5-2!./ReportDetails.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".threshold-tooltip{margin-bottom:var(--pf-global--spacer--md)}.grey-icon{color:var(--pf-global--Color--200)}.policy-details{padding-top:10px}.report-details-button{text-align:right}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import {\n    Modal,\n    TextContent,\n    Button\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { DELETE_REPORT } from 'Utilities/graphql/mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { dispatchAction } from 'Utilities/Dispatcher';\n\nconst DeleteReport = ({ policyId, isModalOpen, onClose, onDelete }) => {\n    const [modalOpen, setModalOpen] = useState(isModalOpen);\n    const closeModal = (removed = false) => {\n        setModalOpen(false);\n        onClose(removed);\n    };\n\n    const [deleteReport] = useMutation(DELETE_REPORT, {\n        onCompleted: () => {\n            dispatchAction(addNotification({\n                variant: 'success',\n                title: `Removed report`\n            }));\n            onDelete();\n            closeModal(true);\n        },\n        onError: (error) => {\n            dispatchAction(addNotification({\n                variant: 'danger',\n                title: 'Error removing report',\n                description: error.message\n            }));\n            closeModal();\n        }\n    });\n\n    useEffect(() => {\n        setModalOpen(isModalOpen);\n    }, [isModalOpen]);\n\n    return (\n        <Modal\n            isSmall\n            title='Delete report'\n            isOpen={ modalOpen }\n            isFooterLeftAligned\n            onClose={ closeModal }\n            actions={[\n                <Button\n                    key='destroy'\n                    aria-label=\"delete\"\n                    variant='danger'\n                    onClick={() => deleteReport({\n                        variables: {\n                            input: {\n                                profileId: policyId\n                            }\n                        }\n                    })}>\n                    Delete report\n                </Button>,\n                <Button key='cancel' variant='secondary' onClick={ () => closeModal() }>\n                    Cancel\n                </Button>\n            ]}>\n            <TextContent>\n                Deleting a report is permanent and cannot be undone.\n            </TextContent>\n        </Modal>\n    );\n};\n\nDeleteReport.propTypes = {\n    onClose: propTypes.func,\n    isModalOpen: propTypes.bool,\n    onDelete: propTypes.func,\n    policyId: propTypes.string\n};\n\nDeleteReport.defaultProps = {\n    onDelete: () => {},\n    onClose: () => {}\n};\n\nexport default DeleteReport;\n","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport SystemsTable from '../SystemsTable/SystemsTable';\nimport { fixedPercentage, pluralize } from '../../Utilities/TextHelper';\nimport {\n    ReportDetailsContentLoader,\n    ReportDetailsDescription,\n    StateViewWithError,\n    StateViewPart\n} from 'PresentationalComponents';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport {\n    PageHeader,\n    PageHeaderTitle,\n    Main,\n    EmptyTable,\n    Spinner\n} from '@redhat-cloud-services/frontend-components';\nimport {\n    ChartDonut,\n    ChartThemeColor,\n    ChartThemeVariant\n} from '@patternfly/react-charts';\nimport {\n    Breadcrumb,\n    BreadcrumbItem,\n    Button\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport '../../Charts.scss';\nimport './ReportDetails.scss';\nimport DeleteReport from '../DeleteReport/DeleteReport';\nexport const QUERY = gql`\nquery Profile($policyId: String!){\n    profile(id: $policyId) {\n        id\n        name\n        refId\n        external\n        totalHostCount\n        compliantHostCount\n        complianceThreshold\n        majorOsVersion\n        lastScanned\n        benchmark {\n            version\n        }\n        businessObjective {\n            id\n            title\n        }\n    }\n}\n`;\n\nexport const ReportDetails = ({ match, history }) => {\n    const { data, error, loading } = useQuery(QUERY, {\n        variables: { policyId: match.params.report_id }\n    });\n    const [deleteModalOpen, setDeleteModalOpen] = useState(false);\n    const redirect = () => {\n        const beta = window.insights.chrome.isBeta();\n        history.push(`${ beta && '/beta' }/rhel/compliance/reports`);\n    };\n\n    let donutValues = [];\n    let donutId = 'loading-donut';\n    let policy = {};\n    let legendData;\n    let compliancePercentage;\n\n    if (!loading && data) {\n        policy = data.profile;\n        const compliantHostCount = policy.compliantHostCount;\n        const totalHostCount = policy.totalHostCount;\n        donutId = policy.name.replace(/ /g, '');\n        donutValues = [\n            { x: 'Compliant', y: compliantHostCount },\n            { x: 'Non-compliant', y: totalHostCount - compliantHostCount }\n        ];\n        legendData = [\n            { name: donutValues[0].y + ' ' + pluralize(donutValues[0].y, 'system') + ' compliant' },\n            { name: donutValues[1].y + ' ' + pluralize(donutValues[1].y, 'system') + ' non-compliant' }\n        ];\n        compliancePercentage = fixedPercentage(Math.floor(100 *\n                (donutValues[0].y / (donutValues[0].y + donutValues[1].y))));\n    }\n\n    const columns = [{\n        key: 'facts.compliance.display_name',\n        title: 'System name',\n        props: {\n            width: 30\n        }\n    }, {\n        key: 'facts.compliance.rules_failed',\n        title: 'Rules failed',\n        props: {\n            width: 5\n        }\n    }, {\n        key: 'facts.compliance.compliance_score',\n        title: 'Compliance score',\n        props: {\n            width: 5\n        }\n    }, {\n        key: 'facts.compliance.last_scanned',\n        title: 'Last scanned',\n        props: {\n            width: 10\n        }\n    }];\n\n    return <StateViewWithError stateValues={ { error, data, loading } }>\n        <StateViewPart stateKey='loading'>\n            <PageHeader><ReportDetailsContentLoader/></PageHeader>\n            <Main><EmptyTable><Spinner/></EmptyTable></Main>\n        </StateViewPart>\n        <StateViewPart stateKey='data'>\n            <PageHeader>\n                <Breadcrumb>\n                    <BreadcrumbItem to='/rhel/compliance/reports'>\n                        Reports\n                    </BreadcrumbItem>\n                    <BreadcrumbItem isActive>{policy.name}</BreadcrumbItem>\n                </Breadcrumb>\n                <Grid gutter='lg'>\n                    <GridItem xl={8}>\n                        <PageHeaderTitle title={policy.name + ' report'} />\n                    </GridItem>\n                    <GridItem className='report-details-button' xl={4}>\n                        <Button\n                            isInline\n                            variant=\"link\"\n                            onClick={\n                                () => setDeleteModalOpen(true)\n                            }>\n                            Delete Report\n                        </Button>\n                    </GridItem>\n                </Grid>\n                <Grid gutter='md'>\n                    <GridItem sm={12} md={12} lg={12} xl={6}>\n                        <div className='chart-inline'>\n                            <div className='chart-container'>\n                                <ChartDonut data={donutValues}\n                                    identifier={donutId}\n                                    title={compliancePercentage}\n                                    subTitle=\"Compliant\"\n                                    themeColor={ChartThemeColor.blue}\n                                    themeVariant={ChartThemeVariant.light}\n                                    style={{ fontSize: 20 }}\n                                    innerRadius={88}\n                                    width={462}\n                                    legendPosition='right'\n                                    legendData={legendData}\n                                    legendOrientation='vertical'\n                                    padding={{\n                                        bottom: 20,\n                                        left: 0,\n                                        right: 250,\n                                        top: 20\n                                    }}\n                                />\n                            </div>\n                        </div>\n\n                    </GridItem>\n                    <GridItem sm={12} md={12} lg={12} xl={6}>\n                        <ReportDetailsDescription policy={policy} />\n                    </GridItem>\n                </Grid>\n            </PageHeader>\n            <Main>\n                <Grid gutter='md'>\n                    <GridItem span={12}>\n                        <SystemsTable showOnlySystemsWithTestResults policyId={policy.id} columns={columns} />\n                    </GridItem>\n                </Grid>\n            </Main>\n            <DeleteReport\n                isModalOpen={ deleteModalOpen }\n                policyId={ policy.id }\n                onClose={ (removed) => {\n                    setDeleteModalOpen(false);\n                    if (removed) {\n                        redirect();\n                    }\n                } } />\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nReportDetails.propTypes = {\n    match: propTypes.object,\n    history: propTypes.object\n};\n\nexport default routerParams(ReportDetails);\n"],"sourceRoot":""}