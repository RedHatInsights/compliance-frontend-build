{"version":3,"sources":["webpack:///./src/SmartComponents/ReportDetails/ReportDetails.scss?1b44","webpack:///./src/SmartComponents/ReportDetails/ReportDetails.scss","webpack:///./src/SmartComponents/ReportDetails/ReportDetails.js"],"names":["content","module","i","options","transform","undefined","locals","exports","___CSS_LOADER_API_IMPORT___","push","QUERY","gql","ReportDetails","legendData","compliancePercentage","match","history","useQuery","variables","policyId","params","report_id","data","error","loading","useState","deleteModalOpen","setDeleteModalOpen","beta","window","insights","chrome","isBeta","donutValues","donutId","profile","compliantHostCount","totalHostCount","name","replace","x","y","pluralize","fixedPercentage","Math","floor","stateValues","stateKey","to","isActive","gutter","sm","md","lg","xl","title","className","isInline","variant","onClick","identifier","subTitle","themeColor","ChartThemeColor","blue","themeVariant","ChartThemeVariant","light","style","fontSize","innerRadius","width","legendPosition","legendOrientation","padding","bottom","left","right","top","span","showOnlySystemsWithTestResults","compliantFilter","id","columns","key","props","isModalOpen","onClose","removed","propTypes","object","routerParams"],"mappings":"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","file":"js/ReportDetails.js","sourcesContent":["\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ref--5-2!./ReportDetails.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ref--5-2!./ReportDetails.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ref--5-2!./ReportDetails.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".threshold-tooltip{margin-bottom:var(--pf-global--spacer--md)}.grey-icon{color:var(--pf-global--Color--200)}.policy-details{padding-top:10px}.report-details-button{text-align:right}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { ChartDonut, ChartThemeColor, ChartThemeVariant } from '@patternfly/react-charts';\nimport { Breadcrumb, BreadcrumbItem, Button, Grid, GridItem } from '@patternfly/react-core';\n\nimport {\n    PageHeader, PageHeaderTitle, Main, EmptyTable, Spinner\n} from '@redhat-cloud-services/frontend-components';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\n\nimport { fixedPercentage, pluralize } from 'Utilities/TextHelper';\nimport {\n    ReportDetailsContentLoader, ReportDetailsDescription, StateViewWithError, StateViewPart\n} from 'PresentationalComponents';\nimport { DeleteReport, SystemsTable } from 'SmartComponents';\n\nimport '@/Charts.scss';\nimport './ReportDetails.scss';\n\nexport const QUERY = gql`\nquery Profile($policyId: String!){\n    profile(id: $policyId) {\n        id\n        name\n        refId\n        totalHostCount\n        compliantHostCount\n        complianceThreshold\n        majorOsVersion\n        lastScanned\n        policy {\n            id\n        }\n        benchmark {\n            id\n            version\n        }\n        businessObjective {\n            id\n            title\n        }\n    }\n}\n`;\n\nexport const ReportDetails = ({ match, history }) => {\n    const { data, error, loading } = useQuery(QUERY, {\n        variables: { policyId: match.params.report_id }\n    });\n    const [deleteModalOpen, setDeleteModalOpen] = useState(false);\n    const beta = window.insights.chrome.isBeta();\n    const redirect = () => {\n        history.push('insights/compliance/reports');\n    };\n\n    let donutValues = [];\n    let donutId = 'loading-donut';\n    let profile = {};\n    let legendData;\n    let compliancePercentage;\n\n    if (!loading && data) {\n        profile = data.profile;\n        const compliantHostCount = profile.compliantHostCount;\n        const totalHostCount = profile.totalHostCount;\n        donutId = profile.name.replace(/ /g, '');\n        donutValues = [\n            { x: 'Compliant', y: compliantHostCount },\n            { x: 'Non-compliant', y: totalHostCount - compliantHostCount }\n        ];\n        legendData = [\n            { name: donutValues[0].y + ' ' + pluralize(donutValues[0].y, 'system') + ' compliant' },\n            { name: donutValues[1].y + ' ' + pluralize(donutValues[1].y, 'system') + ' non-compliant' }\n        ];\n        compliancePercentage = fixedPercentage(Math.floor(100 *\n                (donutValues[0].y / (donutValues[0].y + donutValues[1].y))));\n    }\n\n    const columns = [{\n        key: 'facts.compliance.display_name',\n        title: 'System name',\n        props: {\n            width: 30\n        }\n    }, {\n        key: 'facts.compliance.rules_failed',\n        title: 'Rules failed',\n        props: {\n            width: 5\n        }\n    }, {\n        key: 'facts.compliance.compliance_score',\n        title: 'Compliance score',\n        props: {\n            width: 5\n        }\n    }, {\n        key: 'facts.compliance.last_scanned',\n        title: 'Last scanned',\n        props: {\n            width: 10\n        }\n    }];\n\n    return <StateViewWithError stateValues={ { error, data, loading } }>\n        <StateViewPart stateKey='loading'>\n            <PageHeader><ReportDetailsContentLoader/></PageHeader>\n            <Main><EmptyTable><Spinner/></EmptyTable></Main>\n        </StateViewPart>\n        <StateViewPart stateKey='data'>\n            <PageHeader>\n                <Breadcrumb>\n                    <BreadcrumbItem to={`${ beta ? '/beta/insights' : '/rhel' }/compliance/reports`}>\n                        Reports\n                    </BreadcrumbItem>\n                    <BreadcrumbItem isActive>{profile.name}</BreadcrumbItem>\n                </Breadcrumb>\n                <Grid gutter='lg'>\n                    <GridItem sm={9} md={9} lg={9} xl={9}>\n                        <PageHeaderTitle title={profile.name + ' report'} />\n                    </GridItem>\n                    <GridItem className='report-details-button' sm={3} md={3} lg={3} xl={3}>\n                        <Button\n                            isInline\n                            variant=\"link\"\n                            onClick={\n                                () => setDeleteModalOpen(true)\n                            }>\n                            Delete Report\n                        </Button>\n                    </GridItem>\n                </Grid>\n                <Grid gutter='md'>\n                    <GridItem sm={12} md={12} lg={12} xl={6}>\n                        <div className='chart-inline'>\n                            <div className='chart-container'>\n                                <ChartDonut data={donutValues}\n                                    identifier={donutId}\n                                    title={compliancePercentage}\n                                    subTitle=\"Compliant\"\n                                    themeColor={ChartThemeColor.blue}\n                                    themeVariant={ChartThemeVariant.light}\n                                    style={{ fontSize: 20 }}\n                                    innerRadius={88}\n                                    width={462}\n                                    legendPosition='right'\n                                    legendData={legendData}\n                                    legendOrientation='vertical'\n                                    padding={{\n                                        bottom: 20,\n                                        left: 0,\n                                        right: 250,\n                                        top: 20\n                                    }}\n                                />\n                            </div>\n                        </div>\n\n                    </GridItem>\n                    <GridItem sm={12} md={12} lg={12} xl={6}>\n                        <ReportDetailsDescription profile={profile} />\n                    </GridItem>\n                </Grid>\n            </PageHeader>\n            <Main>\n                <Grid gutter='md'>\n                    <GridItem span={12}>\n                        <SystemsTable\n                            showOnlySystemsWithTestResults\n                            compliantFilter\n                            policyId={profile.id}\n                            columns={columns} />\n                    </GridItem>\n                </Grid>\n            </Main>\n            <DeleteReport\n                isModalOpen={ deleteModalOpen }\n                policyId={ profile.id }\n                onClose={ (removed) => {\n                    setDeleteModalOpen(false);\n                    if (removed) {\n                        redirect();\n                    }\n                } } />\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nReportDetails.propTypes = {\n    match: propTypes.object,\n    history: propTypes.object\n};\n\nexport default routerParams(ReportDetails);\n"],"sourceRoot":""}