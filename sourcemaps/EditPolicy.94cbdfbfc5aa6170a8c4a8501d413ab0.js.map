{"version":3,"file":"js/EditPolicy.1643978350173.5868a7236d9c15cd0854.js","mappings":"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","sources":["webpack:///./src/SmartComponents/ComplianceSystems/ComplianceSystems.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeDetailsRow.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeTable.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeTooltip.js","webpack:///./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyProfilesRules.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack:///./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack:///./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack:///./src/SmartComponents/DeleteReport/DeleteReport.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyDetailsTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyRulesTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicySystemsTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyForm.js","webpack:///./src/SmartComponents/EditPolicy/hooks.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicy.js","webpack:///./src/SmartComponents/SystemsTable/Cells.js","webpack:///./src/SmartComponents/SystemsTable/Columns.js","webpack:///./src/SmartComponents/SystemsTable/constants.js","webpack:///./src/SmartComponents/InventoryDetails/InventoryDetails.js","webpack:///./src/SmartComponents/SystemsTable/hooks.js","webpack:///./src/SmartComponents/SystemsTable/SystemsTable.js","webpack:///./src/store/Reducers/SystemStore.js"],"sourcesContent":["/* eslint-disable react/display-name */\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { nowrap } from '@patternfly/react-table';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport { SystemsTable } from 'SmartComponents';\nimport { GET_SYSTEMS } from '../SystemsTable/constants';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst QUERY = gql`\n  {\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          name\n          refId\n          majorOsVersion\n        }\n      }\n    }\n  }\n`;\n\nconst DEFAULT_FILTER = 'has_test_results = true or has_policy = true';\n\nexport const ComplianceSystems = () => {\n  const { data, error, loading } = useQuery(QUERY);\n  const policies = data?.profiles?.edges.map(({ node }) => node);\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"page-header\">\n        <PageHeaderTitle title=\"Compliance systems\" />\n      </PageHeader>\n      <Main>\n        <StateViewWithError stateValues={{ error, data, loading }}>\n          <StateViewPart stateKey=\"data\">\n            {policies && (\n              <SystemsTable\n                columns={[\n                  Columns.customName({\n                    showLink: true,\n                  }),\n                  Columns.inventoryColumn('tags'),\n                  Columns.OS,\n                  Columns.Policies,\n                  Columns.inventoryColumn('updated', {\n                    props: { isStatic: true },\n                    transforms: [nowrap],\n                  }),\n                ]}\n                query={GET_SYSTEMS}\n                defaultFilter={DEFAULT_FILTER}\n                systemProps={{\n                  isFullView: true,\n                }}\n                showOsMinorVersionFilter={policies.map(\n                  (policy) => policy.majorOsVersion\n                )}\n                showComplianceSystemsInfo\n                enableEditPolicy={false}\n                remediationsEnabled={false}\n                policies={policies}\n              />\n            )}\n          </StateViewPart>\n        </StateViewWithError>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default ComplianceSystems;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Text } from '@patternfly/react-core';\n\nconst PolicyTypeDetailsRow = ({ item: { description }, key }) => {\n  return (\n    <Text key={key} style={{ margin: 'var(--pf-global--spacer--lg) 0' }}>\n      {description}\n    </Text>\n  );\n};\n\nPolicyTypeDetailsRow.propTypes = {\n  item: propTypes.object,\n  key: propTypes.string,\n};\n\nexport default PolicyTypeDetailsRow;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { fitContent } from '@patternfly/react-table';\nimport { InUseProfileLabel } from 'PresentationalComponents';\nimport { TableToolsTable } from 'Utilities/hooks/useTableTools';\nimport { renderComponent } from 'Utilities/helpers';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport PolicyTypeDetailsRow from './PolicyTypeDetailsRow';\n\nconst NameCell = ({ name, disabled }) => {\n  return (\n    <>\n      {name} {disabled && <InUseProfileLabel compact />}\n    </>\n  );\n};\n\nNameCell.propTypes = {\n  name: propTypes.string,\n  disabled: propTypes.boolean,\n};\n\nconst PolicyTypeTable = ({ profiles, onChange, selectedProfile }) => (\n  <TableToolsTable\n    items={profiles.map((profile) => ({\n      ...profile,\n      rowProps: {\n        selected: profile.id === selectedProfile?.id,\n        disableSelection: profile.disabled,\n      },\n    }))}\n    filters={{\n      filterConfig: [\n        {\n          type: conditionalFilterType.text,\n          label: 'Policy Name',\n          filter: (policyTypes, value) =>\n            policyTypes.filter((policyType) =>\n              policyType?.name.toLowerCase().includes(value.toLowerCase())\n            ),\n        },\n      ],\n    }}\n    columns={[\n      {\n        title: 'Policy name',\n        key: 'name',\n        sortByProp: 'name',\n        renderFunc: renderComponent(NameCell),\n      },\n      {\n        title: 'Supported OS versions',\n        transforms: [fitContent],\n        sortByProp: 'supportedOsVersions',\n        renderFunc: (_data, _id, profile) =>\n          profile.supportedOsVersions.join(', '),\n      },\n    ]}\n    options={{\n      detailsComponent: PolicyTypeDetailsRow,\n      hasRadioSelect: true,\n      sortBy: {\n        index: 2,\n        direction: 'asc',\n        property: 'name',\n      },\n    }}\n    onSelect={(_event, _value, _rowIdx, { itemId }) =>\n      onChange && onChange(profiles.find(({ id }) => id === itemId))\n    }\n    selectVariant=\"radio\"\n    variant=\"compact\"\n  />\n);\n\nPolicyTypeTable.propTypes = {\n  profiles: propTypes.array,\n  onChange: propTypes.func,\n  selectedProfile: propTypes.string,\n};\n\nexport default PolicyTypeTable;\n","import React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\n\nconst PolicyTypeTooltip = () => (\n  <Tooltip\n    position=\"right\"\n    content=\"Policy types are OpenSCAP policies that are supported by RHEL.\n        For each major version of RHEL, users can create one policy of each type.\"\n  >\n    <OutlinedQuestionCircleIcon className=\"grey-icon\" />\n  </Tooltip>\n);\n\nexport default PolicyTypeTooltip;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  Tile,\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport PolicyTypesTable from './Components/PolicyTypeTable';\nimport PolicyTypeTooltip from './Components/PolicyTypeTooltip';\n\nconst SUPPORTED_PROFILES = gql`\n  query supportedProfilesByOSMajor {\n    osMajorVersions {\n      edges {\n        node {\n          osMajorVersion\n          profiles {\n            id\n            name\n            refId\n            description\n            complianceThreshold\n            supportedOsVersions\n            benchmark {\n              id\n              refId\n              osMajorVersion\n            }\n          }\n        }\n      }\n    }\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          refId\n          benchmark {\n            refId\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const CreateSCAPPolicy = ({\n  change,\n  selectedProfile,\n  selectedOsMajorVersion,\n}) => {\n  const { data, error, loading } = useQuery(SUPPORTED_PROFILES, {\n    fetchPolicy: 'no-cache',\n  });\n  const inUseProfileRefIds = data?.profiles?.edges.map(\n    ({ node: { refId } }) => refId\n  );\n  const osMajorVersions = data?.osMajorVersions?.edges.map(({ node }) => node);\n  const selectedOsMajorVersionObject = osMajorVersions?.find(\n    ({ osMajorVersion }) => osMajorVersion === selectedOsMajorVersion\n  );\n  const profilesToSelect = selectedOsMajorVersionObject?.profiles.map(\n    (profile) => ({\n      ...profile,\n      disabled: inUseProfileRefIds.includes(profile.refId),\n    })\n  );\n\n  return (\n    <StateViewWithError stateValues={{ error, data, loading }}>\n      <StateViewPart stateKey=\"loading\">\n        <Spinner />\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <TextContent>\n          <Text component={TextVariants.h1} className=\"pf-u-mb-md\">\n            Create SCAP policy\n          </Text>\n          <Text className=\"pf-u-mb-md\">\n            Select the operating system and policy type for this policy.\n          </Text>\n        </TextContent>\n        <Form>\n          <FormGroup label=\"Operating system\" isRequired fieldId=\"benchmark\">\n            {osMajorVersions &&\n              osMajorVersions.map(({ osMajorVersion }) => (\n                <Tile\n                  key={`rhel${osMajorVersion}-select`}\n                  className=\"pf-u-mr-md\"\n                  title={`RHEL ${osMajorVersion}`}\n                  onClick={() => {\n                    change('osMajorVersion', osMajorVersion);\n                  }}\n                  isSelected={selectedOsMajorVersion === osMajorVersion}\n                  isStacked\n                />\n              ))}\n          </FormGroup>\n\n          {selectedOsMajorVersion && (\n            <FormGroup\n              isRequired\n              labelIcon={<PolicyTypeTooltip />}\n              label=\"Policy type\"\n              fieldId=\"policy-type\"\n            >\n              <PolicyTypesTable\n                aria-label=\"PolicyTypeTable\"\n                profiles={profilesToSelect}\n                onChange={(policy) => {\n                  change('profile', policy);\n                  change('benchmark', policy.benchmark.id);\n                  change('selectedRuleRefIds', undefined);\n                }}\n                selectedProfile={selectedProfile}\n              />\n            </FormGroup>\n          )}\n        </Form>\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nCreateSCAPPolicy.propTypes = {\n  change: reduxFormPropTypes.change,\n  selectedProfile: propTypes.object,\n  selectedOsMajorVersion: propTypes.string,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    selectedProfile: selector(state, 'profile'),\n    selectedOsMajorVersion: selector(state, 'osMajorVersion'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(CreateSCAPPolicy);\n","import React, { useLayoutEffect } from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  Title,\n  Text,\n  TextContent,\n  TextVariants,\n  EmptyState,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\n\nconst PROFILES_QUERY = gql`\n  query Profiles($filter: String!) {\n    profiles(search: $filter) {\n      edges {\n        node {\n          id\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          policy {\n            id\n          }\n          policyType\n          benchmark {\n            id\n            refId\n            latestSupportedOsMinorVersions\n            osMajorVersion\n          }\n          ssgVersion\n          rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst BENCHMARKS_QUERY = gql`\n  query Benchmarks($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        profiles {\n          id\n          refId\n          osMajorVersion\n          ssgVersion\n        }\n      }\n    }\n  }\n`;\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nexport const EditPolicyProfilesRules = ({\n  policy,\n  selectedRuleRefIds,\n  change,\n  osMajorVersion,\n  osMinorVersionCounts,\n}) => {\n  const columns = [Columns.Name, Columns.Severity, Columns.Remediation];\n  const osMinorVersions = osMinorVersionCounts\n    .map((i) => i.osMinorVersion)\n    .sort();\n  const benchmarkSearch =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const {\n    data: benchmarksData,\n    error: benchmarksError,\n    loading: benchmarksLoading,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter: benchmarkSearch,\n    },\n    skip: osMinorVersions.length === 0,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  let tabsData = osMinorVersionCounts.map(\n    ({ osMinorVersion, count: systemCount }) => {\n      osMinorVersion = `${osMinorVersion}`;\n      let profile;\n      if (benchmarks) {\n        const benchmark = getBenchmarkBySupportedOsMinor(\n          benchmarks,\n          osMinorVersion\n        );\n        if (benchmark) {\n          profile = getBenchmarkProfile(benchmark, policy.refId);\n          if (profile) {\n            profile = {\n              ...profile,\n              benchmark,\n            };\n          }\n        }\n      }\n\n      return {\n        profile,\n        systemCount,\n        newOsMinorVersion: osMinorVersion,\n      };\n    }\n  );\n  tabsData = tabsData.filter(({ profile }) => !!profile);\n\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n  const profileIds = Object.keys(profileToOsMinorMap);\n  const filter = profileIds.map((i) => `id = ${i}`).join(' OR ');\n  const skipProfilesQuery = benchmarksLoading || filter.length === 0;\n  const {\n    data: profilesData,\n    error: profilesError,\n    loading: profilesLoading,\n  } = useQuery(PROFILES_QUERY, {\n    variables: {\n      filter,\n    },\n    skip: skipProfilesQuery,\n  });\n  const error = benchmarksError || profilesError;\n  const dataState = profileIds?.length > 0 ? profilesData : undefined;\n  const loadingState = profilesLoading || benchmarksLoading ? true : undefined;\n  const noRuleSets = !error && !loadingState && profileIds?.length === 0;\n  const profiles = skipProfilesQuery\n    ? []\n    : profilesData?.profiles.edges.map((p) => p.node);\n\n  const setSelectedRuleRefIds = (newSelection) => {\n    change('selectedRuleRefIds', newSelection);\n  };\n\n  useLayoutEffect(() => {\n    if (!loadingState) {\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      const newSelection = profilesWithRulesToSelection(\n        profilesWithOs,\n        selectedRuleRefIds,\n        { only: true }\n      );\n      setSelectedRuleRefIds(newSelection);\n    }\n  }, [JSON.stringify(profiles), loadingState]);\n\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-pb-md\">\n        <Text component={TextVariants.h1}>Rules</Text>\n        <Text>\n          Customize your <b>{policy.name}</b> SCAP policy by including and\n          excluding rules.\n        </Text>\n        <Text>\n          Each release of RHEL is supported with a unique and specific version\n          of the SCAP Security Guide (SSG). You must customize each version of\n          SSG for each release of RHEL.\n        </Text>\n      </TextContent>\n\n      <StateViewWithError\n        stateValues={{\n          error,\n          data: dataState,\n          loading: loadingState,\n          noRuleSets,\n        }}\n      >\n        <StateViewPart stateKey=\"noRuleSets\">\n          <EmptyState>\n            <Title headingLevel=\"h1\" size=\"xl\">\n              No rules can be configured\n            </Title>\n            <EmptyStateBody>\n              The policy type selected does not exist for the systems and OS\n              versions selected in the previous steps.\n            </EmptyStateBody>\n          </EmptyState>\n        </StateViewPart>\n        <StateViewPart stateKey=\"loading\">\n          <EmptyTable>\n            <Spinner />\n          </EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n          <TabbedRules\n            tabsData={tabsData}\n            selectedRuleRefIds={selectedRuleRefIds}\n            columns={columns}\n            remediationsEnabled={false}\n            selectedFilter\n            level={1}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            ouiaId=\"RHELVersions\"\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </React.Fragment>\n  );\n};\n\nEditPolicyProfilesRules.propTypes = {\n  policy: propTypes.object,\n  change: reduxFormPropTypes.change,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  selectedRuleRefIds: propTypes.array,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    policy: selector(state, 'profile'),\n    osMajorVersion: selector(state, 'osMajorVersion'),\n    osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n    selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyProfilesRules);\n","import React from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  reduxForm,\n  formValueSelector,\n} from 'redux-form';\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  WizardContextConsumer,\n} from '@patternfly/react-core';\nimport { SystemsTable } from 'SmartComponents';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { countOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n        <br />\n        Policies must be created with at least one system.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Choose a different operating system, or connect{' '}\n        <b>RHEL {osMajorVersion}</b> systems to Insights.\n      </Text>\n    </TextContent>\n    <WizardContextConsumer>\n      {({ goToStepById }) => (\n        <Button onClick={() => goToStepById(1)}>\n          Choose a different operating system\n        </Button>\n      )}\n    </WizardContextConsumer>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n        <br />\n        Systems can be added or removed at any time.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nexport const EditPolicySystems = ({\n  change,\n  osMajorVersion,\n  selectedSystems,\n}) => {\n  const onSystemSelect = (newSelectedSystems) => {\n    change('systems', newSelectedSystems);\n    change('osMinorVersionCounts', countOsMinorVersions(newSelectedSystems));\n  };\n\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-mb-md\">\n        <Text component={TextVariants.h1}>Systems</Text>\n      </TextContent>\n      <Form>\n        <FormGroup>\n          <SystemsTable\n            showOsMinorVersionFilter={[osMajorVersion]}\n            prependComponent={\n              <PrependComponent osMajorVersion={osMajorVersion} />\n            }\n            emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n            columns={[\n              {\n                ...Columns.Name,\n                props: {\n                  width: 40,\n                },\n                sortBy: ['name'],\n              },\n              Columns.inventoryColumn('tags'),\n              Columns.OperatingSystem,\n            ]}\n            remediationsEnabled={false}\n            compact\n            showActions={false}\n            query={GET_SYSTEMS_WITHOUT_FAILED_RULES}\n            defaultFilter={\n              osMajorVersion && `os_major_version = ${osMajorVersion}`\n            }\n            enableExport={false}\n            preselectedSystems={selectedSystems}\n            onSelect={onSystemSelect}\n          />\n        </FormGroup>\n      </Form>\n    </React.Fragment>\n  );\n};\n\nEditPolicySystems.propTypes = {\n  osMajorVersion: propTypes.string,\n  selectedSystems: propTypes.array,\n  change: reduxFormPropTypes.change,\n};\n\nEditPolicySystems.defaultProps = {\n  selectedSystems: [],\n};\n\nconst selector = formValueSelector('policyForm');\nconst mapStateToProps = (state) => ({\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  selectedSystems: selector(state, 'systems'),\n});\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicySystems);\n","import React, { useEffect } from 'react';\nimport { compose } from 'redux';\nimport {\n  Field,\n  reduxForm,\n  formValueSelector,\n  propTypes as reduxFormPropTypes,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  ReduxFormTextInput,\n  ReduxFormTextArea,\n} from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport {\n  ProfileThresholdField,\n  PolicyBusinessObjectiveTooltip,\n} from 'PresentationalComponents';\n\nexport const EditPolicyDetails = ({ change, policy, refId }) => {\n  useEffect(() => {\n    if (policy && policy.refId !== refId) {\n      change('name', `${policy.name}`);\n      change('refId', `${policy.refId}`);\n      change('description', `${policy.description}`);\n    }\n  }, [policy]);\n\n  return (\n    <React.Fragment>\n      <TextContent>\n        <Text component={TextVariants.h1}>Details</Text>\n      </TextContent>\n      <br />\n      <Form id=\"editpolicydetails\">\n        <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n          <Field\n            component={ReduxFormTextInput}\n            type=\"text\"\n            isRequired={true}\n            id=\"name\"\n            name=\"name\"\n            aria-describedby=\"name\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            isDisabled\n            id=\"refId\"\n            name=\"refId\"\n            aria-describedby=\"refId\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Description\" fieldId=\"description\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextArea}\n            id=\"description\"\n            name=\"description\"\n            aria-describedby=\"description\"\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Business objective\"\n          labelIcon={<PolicyBusinessObjectiveTooltip />}\n          fieldId=\"businessObjective\"\n        >\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            id=\"businessObjective\"\n            name=\"businessObjective\"\n            aria-describedby=\"businessObjective\"\n            defaultValue={policy.businessObjective}\n          />\n        </FormGroup>\n        <ProfileThresholdField previousThreshold={policy.complianceThreshold} />\n      </Form>\n    </React.Fragment>\n  );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n  policy: propTypes.object,\n  refId: propTypes.string,\n  change: reduxFormPropTypes.change,\n};\n\nconst mapStateToProps = (state) => {\n  const policy = selector(state, 'profile');\n  return {\n    policy,\n    refId: selector(state, 'refId'),\n    initialValues: {\n      name: `${policy.name}`,\n      refId: `${policy.refId}`,\n      description: `${policy.description}`,\n      benchmark: selector(state, 'benchmark'),\n      osMajorVersion: selector(state, 'osMajorVersion'),\n      profile: selector(state, 'profile'),\n    },\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyDetails);\n","import React from 'react';\nimport {\n  Text,\n  TextVariants,\n  TextContent,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useQuery } from '@apollo/client';\n\nconst REVIEW = gql`\n  query review($benchmarkId: String!) {\n    benchmark(id: $benchmarkId) {\n      id\n      osMajorVersion\n    }\n  }\n`;\n\nconst ReviewCreatedPolicy = ({\n  benchmarkId,\n  name,\n  businessObjective,\n  complianceThreshold,\n  parentProfileName,\n  osMinorVersionCounts,\n}) => {\n  const { data, error, loading } = useQuery(REVIEW, {\n    variables: { benchmarkId },\n  });\n\n  if (error) {\n    return error;\n  }\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  const {\n    benchmark: { osMajorVersion },\n  } = data;\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.h1}>Review</Text>\n      <Text>Review your SCAP policy before finishing.</Text>\n      <Text component={TextVariants.h3} style={{ marginTop: 0 }}>\n        {name}\n      </Text>\n      <TextList component={TextListVariants.dl}>\n        <TextListItem component={TextListItemVariants.dt}>\n          Policy type\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>\n          {parentProfileName}\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dt}>\n          Compliance threshold\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>\n          {complianceThreshold}%\n        </TextListItem>\n        {businessObjective && (\n          <React.Fragment>\n            <TextListItem component={TextListItemVariants.dt}>\n              Business objective\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {businessObjective}\n            </TextListItem>\n          </React.Fragment>\n        )}\n        <TextListItem component={TextListItemVariants.dt}>Systems</TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>\n          <TextList component={TextListVariants.dl}>\n            {osMinorVersionCounts.map(({ osMinorVersion, count }) => (\n              <React.Fragment key={osMinorVersion}>\n                <TextListItem\n                  component={TextListItemVariants.dt}\n                  style={{ fontWeight: 'normal' }}\n                >\n                  RHEL {osMajorVersion}.{osMinorVersion}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  {count} {count > 1 ? 'systems' : 'system'}\n                </TextListItem>\n              </React.Fragment>\n            ))}\n          </TextList>\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n\nReviewCreatedPolicy.propTypes = {\n  benchmarkId: propTypes.string,\n  refId: propTypes.string,\n  name: propTypes.string,\n  businessObjective: propTypes.string,\n  complianceThreshold: propTypes.number,\n  parentProfileName: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect((state) => ({\n  benchmarkId: selector(state, 'benchmark'),\n  refId: selector(state, 'refId'),\n  name: selector(state, 'name'),\n  businessObjective: selector(state, 'businessObjective'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  complianceThreshold:\n    parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n  parentProfileName: selector(state, 'profile').name,\n  rulesCount: selector(state, 'selectedRuleRefIds').length,\n}))(ReviewCreatedPolicy);\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Title,\n  Button,\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  List,\n  ListItem,\n} from '@patternfly/react-core';\nimport { ProgressBar } from 'PresentationalComponents';\nimport { Link } from 'react-router-dom';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from '@apollo/client/react/hoc';\nimport { usePolicy } from 'Mutations';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nconst EmtpyStateWithErrors = ({ errors }) =>\n  errors && Array.isArray(errors) && errors.length > 0 ? (\n    <EmptyStateBody className=\"wizard-failed-errors\">\n      <List>\n        {errors.map((error) => (\n          <ListItem key={error}>{error}</ListItem>\n        ))}\n      </List>\n    </EmptyStateBody>\n  ) : null;\n\nEmtpyStateWithErrors.propTypes = {\n  errors: propTypes.array,\n};\n\nexport const FinishedCreatePolicy = ({\n  onWizardFinish,\n  cloneFromProfileId,\n  description,\n  name,\n  complianceThreshold,\n  businessObjective,\n  refId,\n  benchmarkId,\n  systems,\n  selectedRuleRefIds,\n}) => {\n  const [percent, setPercent] = useState(0);\n  const [message, setMessage] = useState('This usually takes a minute or two.');\n  const [errors, setErrors] = useState(null);\n  const [failed, setFailed] = useState(false);\n  const updatePolicy = usePolicy();\n\n  const onProgress = (progress) => {\n    setPercent(progress * 100);\n  };\n\n  useEffect(() => {\n    const newPolicy = {\n      cloneFromProfileId,\n      description,\n      name,\n      complianceThreshold,\n      businessObjective: { title: businessObjective },\n      refId,\n      benchmarkId,\n      hosts: systems,\n      selectedRuleRefIds,\n    };\n\n    updatePolicy(null, newPolicy, onProgress)\n      .then(({ id }) => {\n        setPercent(100);\n        setMessage();\n        dispatchNotification({\n          variant: 'success',\n          title: `Created policy \"${name}\"`,\n          autoDismiss: true,\n          description: (\n            <span>\n              From the <strong>SCAP Policies</strong> list, open{' '}\n              <Link to={`/scappolicies/${id}`}>{name}</Link>.\n            </span>\n          ),\n        });\n      })\n      .catch((error) => {\n        setMessage(error.networkError?.message);\n        setErrors(error.networkError?.result?.errors);\n        setFailed(true);\n        dispatchNotification({\n          variant: 'danger',\n          title: 'Error creating policy',\n          description: error.message,\n        });\n      });\n  }, []);\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={WrenchIcon} />\n        <br />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          Creating policy\n        </Title>\n        <EmptyStateBody>\n          <ProgressBar percent={percent} failed={failed} />\n        </EmptyStateBody>\n        <EmptyStateBody className={failed && 'wizard-failed-message'}>\n          {message}\n        </EmptyStateBody>\n        <EmtpyStateWithErrors error={errors} />\n        <EmptyStateSecondaryActions>\n          {(percent === 100 || failed) && (\n            <Button\n              variant={'primary'}\n              ouiaId=\"ReturnToAppButton\"\n              onClick={() => {\n                onWizardFinish();\n              }}\n            >\n              {failed ? 'Back' : 'Return to application'}\n            </Button>\n          )}\n        </EmptyStateSecondaryActions>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nFinishedCreatePolicy.propTypes = {\n  benchmarkId: propTypes.string.isRequired,\n  businessObjective: propTypes.object,\n  cloneFromProfileId: propTypes.string.isRequired,\n  refId: propTypes.string.isRequired,\n  name: propTypes.string.isRequired,\n  description: propTypes.string,\n  systems: propTypes.array,\n  complianceThreshold: propTypes.number,\n  onWizardFinish: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string).isRequired,\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    benchmarkId: selector(state, 'benchmark'),\n    businessObjective: selector(state, 'businessObjective'),\n    cloneFromProfileId: selector(state, 'profile').id,\n    refId: selector(state, 'refId'),\n    name: selector(state, 'name'),\n    description: selector(state, 'description'),\n    complianceThreshold:\n      parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n    systems: selector(state, 'systems'),\n    selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: true,\n    forceUnregisterOnUnmount: true,\n  }),\n  withApollo\n)(FinishedCreatePolicy);\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { formValueSelector, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport { default as EditPolicyRules } from './EditPolicyProfilesRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport {\n  validateBenchmarkPage,\n  validateDetailsPage,\n  validateRulesPage,\n  validateSystemsPage,\n} from './validate';\n\nexport const CreatePolicyForm = ({\n  benchmark,\n  osMajorVersion,\n  complianceThreshold,\n  name,\n  profile,\n  refId,\n  selectedRuleRefIds,\n  systemIds,\n  reset,\n}) => {\n  const history = useHistory();\n  const [stepIdReached, setStepIdReached] = useState(1);\n  const resetAnchor = () => {\n    const { location } = history;\n    if (location.hash) {\n      history.push({ ...location, hash: '' });\n    }\n  };\n\n  const onNext = ({ id }) => {\n    setStepIdReached(stepIdReached < id ? id : stepIdReached);\n    resetAnchor();\n  };\n\n  const onClose = () => {\n    reset();\n    history.push('/scappolicies');\n  };\n\n  const steps = [\n    {\n      id: 1,\n      name: 'Create SCAP policy',\n      component: <CreateSCAPPolicy />,\n      enableNext: validateBenchmarkPage(benchmark, osMajorVersion, profile),\n    },\n    {\n      id: 2,\n      name: 'Details',\n      component: <EditPolicyDetails />,\n      canJumpTo: stepIdReached >= 2,\n      enableNext: validateDetailsPage(name, refId, complianceThreshold),\n    },\n    {\n      id: 3,\n      name: 'Systems',\n      component: <EditPolicySystems />,\n      canJumpTo: stepIdReached >= 3,\n      enableNext: validateSystemsPage(systemIds),\n    },\n    {\n      id: 4,\n      name: 'Rules',\n      component: <EditPolicyRules />,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 4,\n      enableNext: validateRulesPage(selectedRuleRefIds),\n    },\n    {\n      id: 5,\n      name: 'Review',\n      component: <ReviewCreatedPolicy />,\n      nextButtonText: 'Finish',\n      canJumpTo:\n        validateRulesPage(selectedRuleRefIds) &&\n        systemIds?.length > 0 &&\n        stepIdReached >= 5,\n    },\n    {\n      id: 6,\n      name: 'Finished',\n      component: <FinishedCreatePolicy onWizardFinish={onClose} />,\n      isFinishedStep: true,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 6,\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <Wizard\n        className=\"compliance\"\n        isOpen\n        onNext={onNext}\n        onGoToStep={resetAnchor}\n        onBack={resetAnchor}\n        onClose={onClose}\n        title=\"Create SCAP policy\"\n        description=\"Create a new policy for managing SCAP compliance\"\n        steps={steps}\n      />\n    </React.Fragment>\n  );\n};\n\nCreatePolicyForm.propTypes = {\n  benchmark: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  complianceThreshold: propTypes.string,\n  businessObjective: propTypes.object,\n  dispatch: propTypes.func,\n  isOpen: propTypes.bool,\n  name: propTypes.string,\n  onWizardFinish: propTypes.func,\n  profile: propTypes.string,\n  refId: propTypes.string,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string),\n  systemIds: propTypes.arrayOf(propTypes.string),\n  reset: propTypes.func,\n};\n\nCreatePolicyForm.defaultProps = {\n  isOpen: false,\n};\n\nconst CreatePolicy = reduxForm({\n  form: 'policyForm',\n})(CreatePolicyForm);\n\nconst selector = formValueSelector('policyForm');\nexport default connect((state) => ({\n  benchmark: selector(state, 'benchmark'),\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  businessObjective: selector(state, 'businessObjective'),\n  complianceThreshold: selector(state, 'complianceThreshold') || 100,\n  name: selector(state, 'name'),\n  profile: selector(state, 'profile'),\n  refId: selector(state, 'refId'),\n  selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  systemIds: selector(state, 'systems'),\n}))(CreatePolicy);\n","import { Button, ModalVariant, TextContent } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { DELETE_REPORT } from 'Mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ComplianceModal } from 'PresentationalComponents';\nimport { dispatchAction } from 'Utilities/Dispatcher';\n\nconst DeleteReport = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const { id } = location.state?.profile;\n  const onClose = () => {\n    history.push(location.state.background);\n  };\n\n  const onDelete = () => {\n    history.push('/reports');\n  };\n\n  const [deleteReport] = useMutation(DELETE_REPORT, {\n    onCompleted: () => {\n      dispatchAction(\n        addNotification({\n          variant: 'success',\n          title: 'Report deleted',\n          description:\n            'Systems associated with this policy will upload reports on the next check-in.',\n        })\n      );\n      onDelete();\n    },\n    onError: (error) => {\n      dispatchAction(\n        addNotification({\n          variant: 'danger',\n          title: 'Error removing report',\n          description: error.message,\n        })\n      );\n      onClose();\n    },\n  });\n  return (\n    <ComplianceModal\n      isOpen\n      variant={ModalVariant.small}\n      title=\"Delete report\"\n      ouiaId=\"DeleteReportModal\"\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"destroy\"\n          ouiaId=\"DeleteReportButton\"\n          aria-label=\"delete\"\n          variant=\"danger\"\n          onClick={() =>\n            deleteReport({\n              variables: {\n                input: {\n                  profileId: id,\n                },\n              },\n            })\n          }\n        >\n          Delete report\n        </Button>,\n        <Button\n          key=\"cancel\"\n          ouiaId=\"DeleteReportCancelButton\"\n          variant=\"secondary\"\n          onClick={() => onClose()}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        Deleting a report is permanent and cannot be undone.\n      </TextContent>\n    </ComplianceModal>\n  );\n};\n\nDeleteReport.propTypes = {\n  onClose: propTypes.func,\n  isModalOpen: propTypes.bool,\n  onDelete: propTypes.func,\n  policyId: propTypes.string,\n};\n\nDeleteReport.defaultProps = {\n  onDelete: () => {},\n  onClose: () => {},\n};\n\nexport default DeleteReport;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { FormGroup, TextArea, TextInput } from '@patternfly/react-core';\nimport {\n  PolicyThresholdTooltip,\n  PolicyBusinessObjectiveTooltip,\n  ComplianceThresholdHelperText,\n} from 'PresentationalComponents';\nimport { thresholdValid } from '../CreatePolicy/validate';\n\nexport const useThresholdValidate = () => {\n  const [validThreshold, setValidThreshold] = useState(true);\n  return [\n    validThreshold,\n    (threshold) => {\n      const valid = thresholdValid(threshold);\n      setValidThreshold(valid);\n      return valid;\n    },\n  ];\n};\n\nconst EditPolicyDetailsTab = ({ policy, updatedPolicy, setUpdatedPolicy }) => {\n  const [validThreshold, validateThreshold] = useThresholdValidate();\n\n  return (\n    <div className=\"pf-c-form\">\n      <FormGroup label=\"Policy description\" isRequired fieldId=\"description\">\n        <TextArea\n          style={{ width: 800, height: 110 }}\n          isRequired\n          type=\"text\"\n          id=\"description\"\n          name=\"description\"\n          aria-describedby=\"description\"\n          defaultValue={policy.description}\n          onChange={(value) => {\n            setUpdatedPolicy((policy) => ({\n              ...policy,\n              description: value,\n            }));\n          }}\n        />\n      </FormGroup>\n\n      <FormGroup\n        label=\"Business objective\"\n        labelIcon={<PolicyBusinessObjectiveTooltip />}\n        fieldId=\"business-objective\"\n      >\n        <TextInput\n          type=\"text\"\n          style={{ width: 300 }}\n          id=\"business-objective\"\n          name=\"business-objective\"\n          aria-describedby=\"business-objective\"\n          defaultValue={policy?.businessObjective?.title}\n          onChange={(value) => {\n            setUpdatedPolicy((policy) => ({\n              ...policy,\n              businessObjective: {\n                ...policy.businessObjective,\n                title: value,\n              },\n            }));\n          }}\n        />\n      </FormGroup>\n\n      <FormGroup\n        validated={validThreshold ? 'default' : 'error'}\n        label=\"Compliance threshold (%)\"\n        labelIcon={<PolicyThresholdTooltip />}\n        fieldId=\"policy-threshold\"\n        helperTextInvalid={\n          <ComplianceThresholdHelperText\n            threshold={\n              updatedPolicy\n                ? updatedPolicy.complianceThreshold\n                : policy.complianceThreshold\n            }\n          />\n        }\n        helperText=\"A value of 95% or higher is recommended\"\n      >\n        <TextInput\n          type=\"number\"\n          style={{ width: 150 }}\n          name=\"compliance-threshold\"\n          id=\"compliance-threshold\"\n          defaultValue={policy.complianceThreshold}\n          aria-describedby=\"policy-threshold\"\n          onChange={(value) => {\n            setUpdatedPolicy((policy) => ({\n              ...policy,\n              complianceThreshold: parseFloat(value),\n              complianceThresholdValid: validateThreshold(value),\n            }));\n          }}\n        />\n      </FormGroup>\n    </div>\n  );\n};\n\nEditPolicyDetailsTab.propTypes = {\n  policy: propTypes.shape({\n    description: propTypes.string,\n    businessObjective: propTypes.object,\n    complianceThreshold: propTypes.oneOfType([\n      propTypes.string,\n      propTypes.number,\n    ]),\n  }),\n  updatedPolicy: propTypes.shape({\n    description: propTypes.string,\n    businessObjective: propTypes.object,\n    complianceThreshold: propTypes.number,\n  }),\n  setUpdatedPolicy: propTypes.func,\n};\n\nexport default EditPolicyDetailsTab;\n","import React, { useLayoutEffect } from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  Text,\n  TextContent,\n  Title,\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport { sortingByProp } from 'Utilities/helpers';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\n\nconst PROFILES_QUERY = gql`\n  query Profiles($filter: String!) {\n    profiles(search: $filter) {\n      edges {\n        node {\n          id\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          policy {\n            id\n          }\n          policyType\n          benchmark {\n            id\n            refId\n            latestSupportedOsMinorVersions\n            osMajorVersion\n          }\n          ssgVersion\n          rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst BENCHMARKS_QUERY = gql`\n  query Benchmarks($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        profiles {\n          id\n          refId\n          ssgVersion\n        }\n      }\n    }\n  }\n`;\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst EditPolicyRulesTabEmptyState = () => (\n  <EmptyState>\n    <Title headingLevel=\"h5\" size=\"lg\">\n      No rules can be configured\n    </Title>\n    <EmptyStateBody>\n      This policy has no associated systems, and therefore no rules can be\n      configured.\n    </EmptyStateBody>\n    <EmptyStateBody>\n      Add at least one system to configure rules for this policy.\n    </EmptyStateBody>\n  </EmptyState>\n);\n\nexport const toTabsData = (policy, osMinorVersionCounts, benchmarks) =>\n  Object.values(osMinorVersionCounts)\n    .sort(sortingByProp('osMinorVersion', 'desc'))\n    .map(({ osMinorVersion, count: systemCount }) => {\n      osMinorVersion = `${osMinorVersion}`;\n      let profile = policy.policy.profiles.find(\n        (profile) => profile.osMinorVersion === osMinorVersion\n      );\n      let osMajorVersion = policy.osMajorVersion;\n\n      if (!profile && benchmarks) {\n        const benchmark = getBenchmarkBySupportedOsMinor(\n          benchmarks,\n          osMinorVersion\n        );\n        if (benchmark) {\n          const benchmarkProfile = getBenchmarkProfile(benchmark, policy.refId);\n          if (benchmarkProfile) {\n            profile = policy.policy.profiles.find(\n              (profile) =>\n                profile.parentProfileId === benchmarkProfile.id &&\n                profile.osMinorVersion === osMinorVersion\n            );\n\n            profile = {\n              ...benchmarkProfile,\n              benchmark,\n              osMajorVersion,\n              ...profile,\n            };\n          }\n        }\n      }\n\n      return {\n        profile,\n        systemCount,\n        newOsMinorVersion: osMinorVersion,\n      };\n    })\n    .filter(({ profile, newOsMinorVersion }) => !!profile && newOsMinorVersion);\n\nexport const EditPolicyRulesTab = ({\n  policy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  osMinorVersionCounts,\n  setNewRuleTabs,\n}) => {\n  const osMajorVersion = policy?.osMajorVersion;\n  const osMinorVersions = Object.keys(osMinorVersionCounts).sort();\n  const benchmarkSearch =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const {\n    data: benchmarksData,\n    error: benchmarksError,\n    loading: benchmarksLoading,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter: benchmarkSearch,\n    },\n    skip: osMinorVersions.length === 0,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  const tabsData = toTabsData(policy, osMinorVersionCounts, benchmarks);\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n  const filter = Object.keys(profileToOsMinorMap)\n    .map((i) => `id = ${i}`)\n    .join(' OR ');\n  const {\n    data: profilesData,\n    error: profilesError,\n    loading: profilesLoading,\n  } = useQuery(PROFILES_QUERY, {\n    variables: {\n      filter,\n    },\n    skip: filter.length === 0,\n  });\n  const loadingState = profilesLoading || benchmarksLoading ? true : undefined;\n  const dataState =\n    !loadingState && tabsData?.length > 0 ? profilesData : undefined;\n\n  if (!loadingState) {\n    setNewRuleTabs(\n      !!tabsData.find((tab) =>\n        policy.policy.profiles.find(\n          (profile) => profile.osMinorVersion !== tab.newOsMinorVersion\n        )\n      )\n    );\n  }\n\n  useLayoutEffect(() => {\n    if (profilesData) {\n      const profiles = profilesData?.profiles.edges.map((p) => p.node) || [];\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      setSelectedRuleRefIds((prevSelection) =>\n        profilesWithRulesToSelection(profilesWithOs, prevSelection)\n      );\n    }\n  }, [profilesData]);\n  const error = benchmarksError || profilesError;\n\n  return (\n    <StateViewWithError\n      stateValues={{\n        error,\n        data: !error && dataState,\n        loading: loadingState,\n        empty: !loadingState && !dataState && !error,\n      }}\n    >\n      <StateViewPart stateKey=\"loading\">\n        <EmptyTable>\n          <Spinner />\n        </EmptyTable>\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <TextContent>\n          <Text>\n            Different release versions of RHEL are associated with different\n            versions of the SCAP Security Guide (SSG), therefore each release\n            must be customized independently.\n          </Text>\n        </TextContent>\n        <TabbedRules\n          columns={[Columns.Name, Columns.Severity, Columns.Remediation]}\n          tabsData={tabsData}\n          selectedRuleRefIds={selectedRuleRefIds}\n          setSelectedRuleRefIds={setSelectedRuleRefIds}\n          remediationsEnabled={false}\n          selectedFilter\n          level={1}\n          ouiaId=\"RHELVersions\"\n        />\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">\n        <EditPolicyRulesTabEmptyState />\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nEditPolicyRulesTab.propTypes = {\n  setNewRuleTabs: propTypes.func,\n  policy: propTypes.object,\n  osMinorVersionCounts: propTypes.shape({\n    osMinorVersion: propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    }),\n  }),\n  selectedRuleRefIds: propTypes.array,\n  setSelectedRuleRefIds: propTypes.func,\n};\n\nexport default EditPolicyRulesTab;\n","import React from 'react';\nimport {\n  Alert,\n  AlertActionLink,\n  Text,\n  TextContent,\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { SystemsTable } from 'SmartComponents';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\nimport { useHistory } from 'react-router-dom';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>Connect RHEL {osMajorVersion} systems to Insights.</Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst EditPolicySystemsTab = ({\n  policy: { id: policyId, osMajorVersion },\n  newRuleTabs,\n  onSystemSelect,\n  selectedSystems,\n}) => {\n  const { push, location } = useHistory();\n\n  return (\n    <React.Fragment>\n      <SystemsTable\n        columns={[\n          Columns.Name,\n          Columns.inventoryColumn('tags'),\n          Columns.OperatingSystem,\n        ]}\n        showOsMinorVersionFilter={[osMajorVersion]}\n        prependComponent={<PrependComponent osMajorVersion={osMajorVersion} />}\n        emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n        compact\n        showActions={false}\n        query={GET_SYSTEMS_WITHOUT_FAILED_RULES}\n        defaultFilter={\n          osMajorVersion &&\n          `os_major_version = ${osMajorVersion} or policy_id = ${policyId}`\n        }\n        enableExport={false}\n        remediationsEnabled={false}\n        preselectedSystems={selectedSystems}\n        onSelect={onSystemSelect}\n      />\n      {newRuleTabs && (\n        <Alert\n          variant=\"info\"\n          isInline\n          title=\"You selected a system that has a release version previously not included in this policy.\"\n          actionLinks={\n            <AlertActionLink\n              onClick={() => push({ ...location, hash: '#rules' })}\n            >\n              Open rule editing\n            </AlertActionLink>\n          }\n        >\n          <p>\n            If you have edited any rules for this policy, you will need to do so\n            for this release version as well.\n          </p>\n        </Alert>\n      )}\n    </React.Fragment>\n  );\n};\n\nEditPolicySystemsTab.propTypes = {\n  policy: propTypes.object,\n  newRuleTabs: propTypes.bool,\n  onSystemSelect: propTypes.func,\n  selectedSystems: propTypes.array,\n};\n\nexport default EditPolicySystemsTab;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { Form, Tab, TabTitleText } from '@patternfly/react-core';\nimport { RoutedTabs } from 'PresentationalComponents';\nimport EditPolicyDetailsTab from './EditPolicyDetailsTab';\nimport EditPolicyRulesTab from './EditPolicyRulesTab';\nimport EditPolicySystemsTab from './EditPolicySystemsTab';\nimport { mapCountOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport { profilesWithRulesToSelection } from 'PresentationalComponents/TabbedRules';\nimport { thresholdValid } from '../CreatePolicy/validate';\n\nconst profilesToOsMinorMap = (profiles, hosts) =>\n  (profiles || []).reduce((acc, profile) => {\n    if (profile.osMinorVersion !== '') {\n      acc[profile.osMinorVersion] ||= {\n        osMinorVersion: profile.osMinorVersion,\n        count: 0,\n      };\n    }\n\n    return acc;\n  }, mapCountOsMinorVersions(hosts || []));\n\nexport const EditPolicyForm = ({\n  policy,\n  updatedPolicy,\n  setUpdatedPolicy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  selectedSystems,\n  setSelectedSystems,\n}) => {\n  const policyProfiles = policy?.policy?.profiles || [];\n  const [osMinorVersionCounts, setOsMinorVersionCounts] = useState({});\n  const [newRuleTabs, setNewRuleTabs] = useState(false);\n\n  const handleSystemSelect = (selectedSystems) => {\n    setSelectedSystems(selectedSystems);\n\n    setOsMinorVersionCounts(\n      profilesToOsMinorMap(policyProfiles, selectedSystems)\n    );\n  };\n\n  const updateSelectedRuleRefIds = () => {\n    if (policy) {\n      // existing policy profiles and their rule sets\n      const profilesWithOsMinor = policyProfiles.filter(\n        ({ osMinorVersion }) => !!osMinorVersion\n      );\n      setSelectedRuleRefIds(profilesWithRulesToSelection(profilesWithOsMinor));\n    }\n  };\n\n  useEffect(() => {\n    if (policy) {\n      const complianceThresholdValid = thresholdValid(\n        policy.complianceThreshold\n      );\n      setUpdatedPolicy({\n        ...policy,\n        complianceThresholdValid,\n      });\n      updateSelectedRuleRefIds();\n      handleSystemSelect(policy.hosts);\n    }\n  }, [policy]);\n\n  return (\n    <Form>\n      <RoutedTabs ouiaId=\"EditPolicy\" defaultTab=\"details\">\n        <Tab\n          eventKey=\"details\"\n          ouiaId=\"Details\"\n          title={<TabTitleText>Details</TabTitleText>}\n        >\n          <EditPolicyDetailsTab\n            policy={policy}\n            updatedPolicy={updatedPolicy}\n            setUpdatedPolicy={setUpdatedPolicy}\n          />\n        </Tab>\n\n        <Tab\n          eventKey=\"rules\"\n          ouiaId=\"Rules\"\n          title={<TabTitleText>Rules</TabTitleText>}\n        >\n          <EditPolicyRulesTab\n            policy={policy}\n            setNewRuleTabs={setNewRuleTabs}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            selectedRuleRefIds={selectedRuleRefIds}\n            osMinorVersionCounts={osMinorVersionCounts}\n          />\n        </Tab>\n\n        <Tab\n          eventKey=\"systems\"\n          ouiaId=\"Systems\"\n          title={<TabTitleText>Systems</TabTitleText>}\n        >\n          <EditPolicySystemsTab\n            policy={policy}\n            newRuleTabs={newRuleTabs}\n            selectedSystems={selectedSystems}\n            onSystemSelect={handleSystemSelect}\n          />\n        </Tab>\n      </RoutedTabs>\n    </Form>\n  );\n};\n\nEditPolicyForm.propTypes = {\n  policy: propTypes.object,\n  updatedPolicy: propTypes.object,\n  setUpdatedPolicy: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.object),\n  setSelectedRuleRefIds: propTypes.func,\n  setSelectedSystems: propTypes.func,\n  selectedSystems: propTypes.array,\n};\n\nexport default EditPolicyForm;\n","import { useState } from 'react';\nimport { usePolicy } from 'Mutations';\nimport { useLinkToBackground, useAnchor } from 'Utilities/Router';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nexport const useLinkToPolicy = () => {\n  const anchor = useAnchor();\n  const linkToBackground = useLinkToBackground('/scappolicies');\n  return () => {\n    linkToBackground({ hash: anchor });\n  };\n};\n\nexport const useOnSave = (policy, updatedPolicyHostsAndRules) => {\n  const updatePolicy = usePolicy();\n  const linkToPolicy = useLinkToPolicy();\n  const [isSaving, setIsSaving] = useState(false);\n  const onSave = () => {\n    if (isSaving) {\n      return Promise.resolve({});\n    }\n\n    setIsSaving(true);\n    updatePolicy(policy, updatedPolicyHostsAndRules)\n      .then(() => {\n        setIsSaving(false);\n        dispatchNotification({\n          variant: 'success',\n          title: 'Policy updated',\n          autoDismiss: true,\n        });\n        linkToPolicy();\n      })\n      .catch((error) => {\n        setIsSaving(false);\n        dispatchNotification({\n          variant: 'danger',\n          title: 'Error updating policy',\n          description: error.message,\n        });\n        linkToPolicy();\n      });\n  };\n\n  return [isSaving, onSave];\n};\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Button, Spinner } from '@patternfly/react-core';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport {\n  ComplianceModal,\n  StateViewWithError,\n  StateViewPart,\n} from 'PresentationalComponents';\nimport EditPolicyForm from './EditPolicyForm';\nimport { useOnSave, useLinkToPolicy } from './hooks';\n\nexport const MULTIVERSION_QUERY = gql`\n  query Profile($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      external\n      description\n      totalHostCount\n      compliantHostCount\n      complianceThreshold\n      majorOsVersion\n      osMajorVersion\n      lastScanned\n      policyType\n      policy {\n        id\n        name\n        refId\n        profiles {\n          id\n          ssgVersion\n          parentProfileId\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          benchmark {\n            id\n            title\n            latestSupportedOsMinorVersions\n            osMajorVersion\n          }\n          rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n        }\n      }\n      businessObjective {\n        id\n        title\n      }\n      hosts {\n        id\n        osMinorVersion\n        osMajorVersion\n      }\n    }\n  }\n`;\n\nexport const EditPolicy = ({ route }) => {\n  const { policy_id: policyId } = useParams();\n  const { data, loading, error } = useQuery(MULTIVERSION_QUERY, {\n    variables: { policyId },\n  });\n  const policy = data?.profile;\n  const linkToPolicy = useLinkToPolicy();\n  const [updatedPolicy, setUpdatedPolicy] = useState(null);\n  const [selectedRuleRefIds, setSelectedRuleRefIds] = useState([]);\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const saveEnabled = updatedPolicy && !updatedPolicy.complianceThresholdValid;\n  const updatedPolicyHostsAndRules = {\n    ...updatedPolicy,\n    selectedRuleRefIds,\n    hosts: selectedSystems,\n  };\n  const [isSaving, onSave] = useOnSave(policy, updatedPolicyHostsAndRules);\n\n  const actions = [\n    <Button\n      isDisabled={saveEnabled}\n      key=\"save\"\n      ouiaId=\"EditPolicySaveButton\"\n      variant=\"primary\"\n      spinnerAriaValueText=\"Saving\"\n      isLoading={isSaving}\n      onClick={onSave}\n    >\n      Save\n    </Button>,\n    <Button\n      key=\"cancel\"\n      ouiaId=\"EditPolicyCancelButton\"\n      variant=\"link\"\n      onClick={() => linkToPolicy()}\n    >\n      Cancel\n    </Button>,\n  ];\n\n  useTitleEntity(route, policy?.name);\n\n  return (\n    <ComplianceModal\n      isOpen\n      position={'top'}\n      style={{ minHeight: '350px' }}\n      variant={'large'}\n      ouiaId=\"EditPolicyModal\"\n      title={`Edit ${policy ? policy.name : ''}`}\n      onClose={() => linkToPolicy()}\n      actions={actions}\n    >\n      <StateViewWithError stateValues={{ policy, loading, error }}>\n        <StateViewPart stateKey=\"loading\">\n          <Spinner />\n        </StateViewPart>\n        <StateViewPart stateKey=\"policy\">\n          <EditPolicyForm\n            {...{\n              policy,\n              updatedPolicy,\n              setUpdatedPolicy,\n              selectedRuleRefIds,\n              setSelectedRuleRefIds,\n              selectedSystems,\n              setSelectedSystems,\n            }}\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </ComplianceModal>\n  );\n};\n\nEditPolicy.propTypes = {\n  route: propTypes.object,\n};\n\nexport default EditPolicy;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\n\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Truncate from '@redhat-cloud-services/frontend-components/Truncate';\nimport {\n  UnsupportedSSGVersion,\n  ComplianceScore as complianceScore,\n} from 'PresentationalComponents';\nimport {\n  profilesRulesFailed,\n  complianceScoreData,\n  NEVER,\n} from 'Utilities/ruleHelpers';\n\nconst SystemLink = ({ id, children }) => (\n  <Link to={{ pathname: `/systems/${id}` }}>{children}</Link>\n);\n\nSystemLink.propTypes = {\n  id: propTypes.string,\n  children: propTypes.node,\n};\n\nexport const Name = ({\n  id,\n  name,\n  osMajorVersion,\n  osMinorVersion,\n  showOsInfo = false,\n  showLink = false,\n}) => {\n  const hasOsInfo = (osMajorVersion, osMinorVersion) =>\n    !!osMajorVersion && !!osMinorVersion && showOsInfo;\n\n  return (\n    <TextContent>\n      {showLink ? <SystemLink {...{ id }}>{name}</SystemLink> : name}\n\n      {hasOsInfo(osMajorVersion, osMinorVersion) && (\n        <Text component={TextVariants.small}>\n          RHEL {osMajorVersion}.{osMinorVersion}\n        </Text>\n      )}\n    </TextContent>\n  );\n};\n\nName.propTypes = {\n  id: propTypes.string,\n  name: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersion: propTypes.string,\n  showOsInfo: propTypes.bool,\n  showLink: propTypes.bool,\n};\n\nexport const profilesSsgVersions = (profiles) =>\n  profiles\n    .map((p) => p.ssgVersion)\n    .filter((version) => !!version)\n    .join(', ');\n\nexport const SSGVersion = ({ ssgVersion = 'Not available', supported }) =>\n  supported ? (\n    ssgVersion\n  ) : (\n    <UnsupportedSSGVersion messageVariant=\"singular\">\n      {ssgVersion}\n    </UnsupportedSSGVersion>\n  );\n\nSSGVersion.propTypes = {\n  supported: propTypes.bool,\n  ssgVersion: propTypes.string,\n};\n\nexport const SSGVersions = ({ testResultProfiles = [] }) =>\n  testResultProfiles.length !== 0\n    ? testResultProfiles.map((profile) => (\n        <SSGVersion key={`ssgversion-${profile.id}`} {...profile} />\n      ))\n    : 'Unknown';\n\nSSGVersions.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const DetailsLink = ({ id, testResultProfiles = [] }) =>\n  testResultProfiles.length > 0 ? (\n    <SystemLink {...{ id }}>View Report</SystemLink>\n  ) : (\n    ''\n  );\n\nDetailsLink.propTypes = {\n  id: propTypes.string,\n  testResultProfiles: propTypes.array,\n};\n\nexport const Policies = ({ policies }) =>\n  (policies || []).length > 0 && (\n    <Truncate\n      inline\n      text={policies.map((p) => p.name).join(', ')}\n      length={215}\n    />\n  );\n\nPolicies.propTypes = {\n  policies: propTypes.array,\n};\n\nexport const FailedRules = ({ id, testResultProfiles }) => {\n  const rulesFailed = profilesRulesFailed(testResultProfiles).length;\n  return (\n    <SystemLink {...{ id }}>\n      {testResultProfiles.length > 0 ? rulesFailed : 'N/A'}\n    </SystemLink>\n  );\n};\n\nFailedRules.propTypes = {\n  id: propTypes.string,\n  testResultProfiles: propTypes.array,\n};\n\nexport { complianceScoreData };\nexport const ComplianceScore = ({ testResultProfiles }) =>\n  testResultProfiles.length > 0\n    ? complianceScore(complianceScoreData(testResultProfiles))\n    : 'N/A';\n\nComplianceScore.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nconst NeverScanned = () => (\n  <Tooltip\n    position=\"right\"\n    content={\n      <Fragment>\n        This system has never returned a report for this policy. This may be\n        because it is disconnected, or the insights-client on this system is not\n        configured to use Compliance.\n      </Fragment>\n    }\n  >\n    <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n    {' ' + NEVER}\n  </Tooltip>\n);\n\nexport const lastScanned = (profiles) => {\n  const dates = profiles.map((profile) => new Date(profile.lastScanned));\n  const last = new Date(\n    Math.max.apply(\n      null,\n      dates.filter((date) => isFinite(date))\n    )\n  );\n  const result =\n    last instanceof Date && isFinite(last) ? last : <NeverScanned />;\n\n  return result;\n};\n\nexport const LastScanned = ({ testResultProfiles: profiles }) => {\n  const lastScannedDate = lastScanned(profiles || []);\n\n  return lastScannedDate instanceof Date ? (\n    <DateFormat date={Date.parse(lastScannedDate)} type=\"relative\" />\n  ) : (\n    lastScannedDate\n  );\n};\n\nLastScanned.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const operatingSystemString = ({ osMinorVersion, osMajorVersion }) =>\n  `RHEL ${osMajorVersion}.${osMinorVersion}`;\n\nexport const OperatingSystem = (system) => operatingSystemString(system);\n","import React from 'react';\nimport { nowrap } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport { complianceScoreString } from 'PresentationalComponents';\nimport { profilesRulesFailed } from 'Utilities/ruleHelpers';\nimport { renderComponent } from 'Utilities/helpers';\n\nimport {\n  Name as NameCell,\n  ComplianceScore as ComplianceScoreCell,\n  DetailsLink as DetailsLinkCell,\n  FailedRules as FailedRulesCell,\n  LastScanned as LastScannedCell,\n  Policies as PoliciesCell,\n  SSGVersions as SsgVersionCell,\n  complianceScoreData,\n  lastScanned,\n  operatingSystemString,\n  OperatingSystem as OperatingSystemCell,\n} from './Cells';\n\nconst disableSorting = { isStatic: true };\n\nexport const compileColumnRenderFunc = ({ cell, ...column }) => ({\n  ...column,\n  renderFunc: renderComponent(cell, column.props),\n});\n\nexport const customColumn = (column, props) =>\n  compileColumnRenderFunc({\n    ...column,\n    props: {\n      ...column.props,\n      ...props,\n    },\n  });\n\nexport const Name = compileColumnRenderFunc({\n  key: 'name',\n  title: 'Name',\n  sortBy: ['name'],\n  props: {\n    width: 40,\n  },\n  renderExport: (system) => `${system.name} (${operatingSystemString(system)})`,\n  cell: NameCell,\n});\n\nexport const customName = (props) => ({\n  ...Name,\n  props: {\n    ...Name.props,\n    ...props,\n  },\n  renderFunc: renderComponent(NameCell, props),\n});\n\nexport const SsgVersion = {\n  title: 'SSG version',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  sortBy: ['ssg_version'],\n  key: 'ssg_version',\n  renderExport: (testResultProfiles) =>\n    testResultProfiles\n      .map(\n        ({ supported, ssgVersion }) => `${!supported ? '!' : ''}${ssgVersion}`\n      )\n      .join(', '),\n  renderFunc: renderComponent(SsgVersionCell),\n};\n\nexport const Policies = {\n  title: 'Policies',\n  transforms: [nowrap],\n  exportKey: 'policies',\n  renderExport: (policies) => policies.map(({ name }) => name).join(', '),\n  props: {\n    width: 40,\n    ...disableSorting,\n  },\n  renderFunc: renderComponent(PoliciesCell),\n};\n\nexport const DetailsLink = {\n  title: '',\n  export: false,\n  props: {\n    width: 20,\n    ...disableSorting,\n  },\n  renderFunc: renderComponent(DetailsLinkCell),\n};\n\nexport const FailedRules = {\n  title: 'Failed rules',\n  exportKey: 'testResultProfiles',\n  transforms: [nowrap],\n  props: {\n    width: 5,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) =>\n    profilesRulesFailed(testResultProfiles).length,\n  renderFunc: renderComponent(FailedRulesCell),\n};\n\nexport const ComplianceScore = {\n  title: 'Compliance score',\n  exportKey: 'testResultProfiles',\n  transforms: [nowrap],\n  props: {\n    width: 5,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) =>\n    complianceScoreString(complianceScoreData(testResultProfiles)).trim(),\n  renderFunc: renderComponent(ComplianceScoreCell),\n};\n\nexport const LastScanned = {\n  title: 'Last scanned',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  props: {\n    width: 10,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) => lastScanned(testResultProfiles),\n  renderFunc: renderComponent(LastScannedCell),\n};\n\nexport const OperatingSystem = compileColumnRenderFunc({\n  title: 'Operating system',\n  key: 'operatingSystem',\n  sortBy: ['osMajorVersion', 'osMinorVersion'],\n  transforms: [nowrap],\n  renderExport: (cell) => operatingSystemString(cell),\n  cell: OperatingSystemCell,\n});\n\nexport const OS = compileColumnRenderFunc({\n  title: (\n    <Tooltip content={<span>Operating System</span>}>\n      <span>OS</span>\n    </Tooltip>\n  ),\n  original: 'Operating System',\n  key: 'operatingSystem',\n  dataLabel: 'OS',\n  transforms: [nowrap],\n  sortBy: ['osMajorVersion', 'osMinorVersion'],\n  props: {\n    width: 10,\n  },\n  renderExport: (cell) => operatingSystemString(cell),\n  cell: OperatingSystemCell,\n});\n\nexport const inventoryColumn = (column, props) => ({\n  key: column,\n  ...props,\n});\n","import gql from 'graphql-tag';\nimport pickBy from 'lodash/pickBy';\nimport {\n  systemsPolicyFilterConfiguration,\n  systemsOsFilterConfiguration,\n  systemsOsMinorFilterConfiguration,\n} from '@/constants';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { entitiesReducer } from 'Store/Reducers/SystemStore';\n\nexport const GET_SYSTEMS = gql`\n  query getSystems(\n    $filter: String!\n    $policyId: ID\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n          osMinorVersion\n          culledTimestamp\n          staleWarningTimestamp\n          staleTimestamp\n          insightsId\n          lastScanned\n          testResultProfiles(policyId: $policyId) {\n            id\n            name\n            refId\n            lastScanned\n            compliant\n            external\n            score\n            supported\n            ssgVersion\n            majorOsVersion\n            rules {\n              refId\n              title\n              compliant\n              remediationAvailable\n            }\n          }\n          policies(policyId: $policyId) {\n            id\n            name\n          }\n          tags {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_SYSTEMS_WITHOUT_FAILED_RULES = gql`\n  query getSystems(\n    $filter: String!\n    $policyId: ID\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n          osMinorVersion\n          culledTimestamp\n          staleWarningTimestamp\n          staleTimestamp\n          insightsId\n          lastScanned\n          testResultProfiles(policyId: $policyId) {\n            id\n            name\n            lastScanned\n            external\n            compliant\n            score\n            supported\n            ssgVersion\n            policy {\n              id\n            }\n          }\n          policies(policyId: $policyId) {\n            id\n            name\n          }\n          tags {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_MINIMAL_SYSTEMS = gql`\n  query getSystems(\n    $filter: String!\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n          osMinorVersion\n          culledTimestamp\n          staleWarningTimestamp\n          staleTimestamp\n          insightsId\n          lastScanned\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_SYSTEMS_TAGS = gql`\n  query getSystems($filter: String!, $limit: Int) {\n    systems(search: $filter, limit: $limit) {\n      tags {\n        namespace\n        key\n        value\n      }\n    }\n  }\n`;\n\nexport const GET_SYSTEMS_OSES = gql`\n  query getSystems($filter: String!) {\n    systems(search: $filter) {\n      osVersions {\n        name\n        major\n        minor\n      }\n    }\n  }\n`;\n\nexport const policyFilter = (policies, osFilter) => [\n  ...systemsPolicyFilterConfiguration(policies),\n  ...(osFilter ? systemsOsFilterConfiguration(policies) : []),\n];\n\nexport const osMinorVersionFilter = (...args) =>\n  systemsOsMinorFilterConfiguration(...args);\n\nexport const initFilterState = (filterConfig) =>\n  pickBy(filterConfig.initialDefaultState(), (value) => !!value);\n\nexport const defaultOnLoad =\n  (columns) =>\n  ({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n    getRegistry().register({\n      ...mergeWithEntities(entitiesReducer(INVENTORY_ACTION_TYPES, columns)),\n    });\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Skeleton, {\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { registryDecorator } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport {\n  InventoryDetail,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\n\n@registryDecorator()\nclass InventoryDetails extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <DetailWrapper\n        onLoad={({ mergeWithDetail }) =>\n          this.getRegistry().register({\n            ...mergeWithDetail(),\n          })\n        }\n      >\n        <InventoryDetail\n          fallback={<Skeleton size={SkeletonSize.md} />}\n          hideBack\n        />\n      </DetailWrapper>\n    );\n  }\n}\n\nInventoryDetails.propTypes = {\n  entity: propTypes.object,\n};\n\nconst ConnectedInventoryDetails = (props) => {\n  return <InventoryDetails {...props} />;\n};\n\nexport default ConnectedInventoryDetails;\n","import { useEffect, useLayoutEffect, useState } from 'react';\nimport { useApolloClient, useQuery } from '@apollo/client';\nimport { useDispatch } from 'react-redux';\nimport debounce from '@redhat-cloud-services/frontend-components-utilities/debounce';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport {\n  osMinorVersionFilter,\n  GET_MINIMAL_SYSTEMS,\n  GET_SYSTEMS_TAGS,\n  GET_SYSTEMS_OSES,\n} from './constants';\nimport useExport from 'Utilities/hooks/useTableTools/useExport';\nimport { useBulkSelect } from 'Utilities/hooks/useTableTools/useBulkSelect';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nconst groupByMajorVersion = (versions = [], showFilter = []) => {\n  const showVersion = (version) => {\n    if (showFilter.length > 0) {\n      return showFilter.map(String).includes(String(version));\n    } else {\n      return true;\n    }\n  };\n\n  return versions.reduce((acc, currentValue) => {\n    if (showVersion(currentValue.major)) {\n      acc[String(currentValue.major)] = [\n        ...new Set([...(acc[currentValue.major] || []), currentValue.minor]),\n      ];\n    }\n\n    return acc;\n  }, []);\n};\n\nexport const useOsMinorVersionFilter = (showFilter, fetchArguments = {}) => {\n  let { data } = useQuery(GET_SYSTEMS_OSES, {\n    skip: !showFilter,\n    ...fetchArguments,\n  });\n  const { osVersions } = data?.systems || {};\n\n  return showFilter\n    ? osMinorVersionFilter(groupByMajorVersion(osVersions, showFilter))\n    : [];\n};\n\nexport const useSystemsFilter = (\n  filterString,\n  showOnlySystemsWithTestResults,\n  defaultFilter\n) => {\n  const combindedFilter = [\n    ...(showOnlySystemsWithTestResults ? ['has_test_results = true'] : []),\n    ...(filterString?.length > 0 ? [filterString] : []),\n  ].join(' and ');\n  const filter = defaultFilter\n    ? `(${defaultFilter})` +\n      (combindedFilter ? ` and (${combindedFilter})` : '')\n    : combindedFilter;\n\n  return filter;\n};\n\nconst renameInventoryAttributes = ({\n  culledTimestamp,\n  staleWarningTimestamp,\n  staleTimestamp,\n  insightsId,\n  lastScanned,\n  ...system\n}) => ({\n  ...system,\n  updated: lastScanned,\n  culled_timestamp: culledTimestamp,\n  stale_warning_timestamp: staleWarningTimestamp,\n  stale_timestamp: staleTimestamp,\n  insights_id: insightsId,\n});\n\nexport const useFetchSystems = ({\n  query,\n  onComplete,\n  variables = {},\n  onError,\n}) => {\n  const client = useApolloClient();\n\n  return (perPage, page, requestVariables = {}) =>\n    client\n      .query({\n        query,\n        fetchResults: true,\n        fetchPolicy: 'no-cache',\n        variables: {\n          perPage,\n          page,\n          ...variables,\n          ...requestVariables,\n        },\n      })\n      .then(({ data }) => {\n        const systems = data?.systems?.edges?.map((e) => e.node) || [];\n        const entities = systemsWithRuleObjectsFailed(systems).map(\n          renameInventoryAttributes\n        );\n        const result = {\n          entities,\n          meta: {\n            ...(requestVariables.tags && { tags: requestVariables.tags }),\n            totalCount: data?.systems?.totalCount || 0,\n          },\n        };\n\n        onComplete && onComplete(result);\n        return result;\n      })\n      .catch((error) => {\n        if (onError) {\n          onError(error);\n          return { entities: [], meta: { totalCount: 0 } };\n        } else {\n          throw error;\n        }\n      });\n};\n\nconst fetchBatched = (fetchFunction, total, filter, batchSize = 100) => {\n  const pages = Math.ceil(total / batchSize) || 1;\n  return Promise.all(\n    [...new Array(pages)].map((_, pageIdx) =>\n      fetchFunction(batchSize, pageIdx + 1, filter)\n    )\n  );\n};\n\nconst buildApiFilters = (filters = {}) => {\n  const { tagFilters, ...otherFilters } = filters;\n  const tagsApiFilter = tagFilters\n    ? {\n        tags: tagFilters.flatMap((tagFilter) =>\n          tagFilter.values.map(\n            (tag) =>\n              `${encodeURIComponent(tagFilter.key)}/${encodeURIComponent(\n                tag.tagKey\n              )}=${encodeURIComponent(tag.value)}`\n          )\n        ),\n      }\n    : {};\n\n  return {\n    ...otherFilters,\n    ...tagsApiFilter,\n  };\n};\n\nexport const useGetEntities = (fetchEntities, { selected, columns } = {}) => {\n  const appendDirection = (attributes, direction) =>\n    attributes.map((attribute) => `${attribute}:${direction}`);\n\n  const findColumnByKey = (key) =>\n    (columns || []).find((column) => column.key === key);\n\n  return async (\n    _ids,\n    { page = 1, per_page: perPage, orderBy, orderDirection, filters }\n  ) => {\n    const sortableColumn = findColumnByKey(orderBy);\n    const sortBy =\n      sortableColumn && sortableColumn.sortBy\n        ? appendDirection(sortableColumn.sortBy, orderDirection)\n        : undefined;\n    const filterForApi = buildApiFilters(filters);\n\n    const fetchedEntities = await fetchEntities(perPage, page, {\n      ...filterForApi,\n      sortBy,\n    });\n    const {\n      entities,\n      meta: { totalCount },\n    } = fetchedEntities || {};\n\n    return {\n      results: entities.map((entity) => ({\n        ...entity,\n        selected: (selected || []).map((id) => id).includes(entity.id),\n      })),\n      orderBy,\n      orderDirection,\n      total: totalCount,\n    };\n  };\n};\n\n// This hook is primarily meant to work around issues in the inventory\nexport const useInventoryUtilities = (\n  inventory,\n  selectedSystems,\n  activeFilters\n) => {\n  const dispatch = useDispatch();\n\n  // Resets the Inventory to a loading state\n  // and prevents previously shown columns and rows to appear\n  useLayoutEffect(() => {\n    dispatch({\n      type: 'INVENTORY_INIT',\n    });\n  }, []);\n\n  // Ensures rows are marked as selected\n  useEffect(() => {\n    dispatch({\n      type: 'SELECT_ENTITIES',\n      payload: {\n        selected: selectedSystems,\n      },\n    });\n  }, [selectedSystems]);\n\n  // Filters do not yet trigger the inventory to call getEntities\n  // and the page would not reset to page 1\n  const resetPage = () => {\n    Promise.resolve(\n      dispatch({\n        type: 'RESET_PAGE',\n      })\n    ).then(() => inventory?.current?.onRefreshData());\n  };\n\n  // The debounce is to not have filter updates collide or get out of order.\n  const debounceResetPage = debounce(resetPage, 50);\n\n  useEffect(() => {\n    debounceResetPage();\n  }, [activeFilters]);\n};\n\nconst toIdFilter = (ids) =>\n  ids?.length > 0 ? `id ^ (${ids.join(',')})` : undefined;\n\nexport const useSystemsExport = ({\n  columns,\n  selected,\n  total,\n  fetchArguments,\n}) => {\n  const selectionFilter = selected ? toIdFilter(selected) : undefined;\n  const fetchSystems = useFetchSystems({\n    query: fetchArguments.query,\n    variables: {\n      ...fetchArguments.variables,\n      ...(fetchArguments.tags && { tags: fetchArguments.tags }),\n      filter: selectionFilter\n        ? `${fetchArguments.variables.filter} and (${selectionFilter})`\n        : fetchArguments.variables.filter,\n    },\n    onError: () => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Couldn’t download export',\n        description: 'Reinitiate this export to try again.',\n      });\n    },\n  });\n\n  const selectedFilter = () =>\n    selected?.length > 0 ? toIdFilter(selected) : undefined;\n\n  const exporter = async () => {\n    const fetchedItems = await fetchBatched(\n      fetchSystems,\n      total,\n      selectedFilter()\n    );\n\n    return fetchedItems.flatMap((result) => result.entities);\n  };\n\n  const {\n    toolbarProps: { exportConfig },\n  } = useExport({\n    exporter,\n    columns,\n    isDisabled: total === 0,\n    onStart: () => {\n      dispatchNotification({\n        variant: 'info',\n        title: 'Preparing export',\n        description: 'Once complete, your download will start automatically.',\n      });\n    },\n    onComplete: () => {\n      dispatchNotification({\n        variant: 'success',\n        title: 'Downloading export',\n      });\n    },\n  });\n\n  return exportConfig;\n};\n\nexport const useSystemBulkSelect = ({\n  total,\n  onSelect,\n  preselected,\n  fetchArguments,\n  currentPageIds,\n  systemsCache = [],\n}) => {\n  // This is meant as a compatibility layer and to be removed\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const fetchSystems = useFetchSystems({\n    ...fetchArguments,\n    query: GET_MINIMAL_SYSTEMS,\n    onError: (error) => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error selecting systems',\n        description: error.message,\n      });\n    },\n  });\n\n  const fetchFunc = async (fetchIds) => {\n    if (fetchIds.length === 0) {\n      return [];\n    }\n\n    const idFilter = toIdFilter(fetchIds);\n    const results = await fetchBatched(fetchSystems, fetchIds.length, {\n      ...(idFilter && { filter: idFilter }),\n    });\n\n    return results.flatMap((result) => result.entities);\n  };\n\n  const cachedOrFetch = async (selectedIds) => {\n    const cachedSystems = systemsCache.filter(({ id }) =>\n      selectedIds.includes(id)\n    );\n    const cachedIds = cachedSystems.map(({ id }) => id);\n    const fetchIds = selectedIds.filter((id) => !cachedIds.includes(id));\n    const fetchedSystems = await fetchFunc(fetchIds);\n\n    return [...cachedSystems, ...fetchedSystems];\n  };\n\n  const onSelectCallback = async (selectedIds) => {\n    const systems = await cachedOrFetch(selectedIds);\n    setSelectedSystems(systems);\n    onSelect && onSelect(systems);\n  };\n\n  const itemIdsInTable = async () => {\n    const results = await fetchBatched(fetchSystems, total);\n    return results.flatMap((result) => result.entities.map(({ id }) => id));\n  };\n\n  const bulkSelect = useBulkSelect({\n    total,\n    onSelect: onSelectCallback,\n    preselected,\n    itemIdsInTable,\n    itemIdsOnPage: () => currentPageIds,\n  });\n  return {\n    selectedSystems,\n    ...bulkSelect,\n  };\n};\n\nconst searchTagsByKey = (search, tags) =>\n  tags.filter((tagItem) => {\n    if (search || search === '') {\n      return tagItem?.key.indexOf(search) !== -1;\n    } else {\n      return true;\n    }\n  });\n\nconst useFetchTag = () => {\n  const apiClient = useApolloClient();\n\n  return async (page, per_page, search, fetchArguments) => {\n    const fetchedTags = await apiClient\n      .query({\n        query: GET_SYSTEMS_TAGS,\n        ...fetchArguments,\n      })\n      .then(\n        ({\n          data: {\n            systems: { tags },\n          },\n        }) =>\n          searchTagsByKey(search, tags).map((tag) => ({\n            tag,\n          }))\n      );\n\n    const start = per_page * page - per_page;\n    const end = start + per_page;\n\n    return {\n      total: fetchedTags.length,\n      results: fetchedTags.slice(start, end),\n    };\n  };\n};\n\nexport const useTags = (fetchArguments) => {\n  const [currentTags, setCurrentTags] = useState();\n  const fetchTags = useFetchTag();\n\n  const getTags = async (search, config) => {\n    const { page, perPage: per_page } = config.pagination || {\n      perPage: 10,\n      page: 1,\n    };\n    const { total, results: tagsList } = await fetchTags(\n      page,\n      per_page,\n      search,\n      fetchArguments\n    );\n\n    return {\n      page,\n      per_page,\n      total,\n      results: tagsList,\n    };\n  };\n\n  return {\n    props: {\n      hideFilters: {\n        name: true,\n        tags: false,\n        registeredWith: true,\n        operatingSystem: true,\n        stale: true,\n      },\n      showTags: true,\n    },\n    currentTags,\n    setCurrentTags,\n    getTags,\n  };\n};\n","import React, { useMemo, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Spinner } from '@patternfly/react-core';\nimport { TableVariant } from '@patternfly/react-table';\n// eslint-disable-next-line max-len\nimport ComplianceRemediationButton from '@/PresentationalComponents/ComplianceRemediationButton';\nimport {\n  DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n  COMPLIANT_SYSTEMS_FILTER_CONFIGURATION,\n} from '@/constants';\nimport { ErrorPage, StateView, StateViewPart } from 'PresentationalComponents';\nimport useFilterConfig from 'Utilities/hooks/useTableTools/useFilterConfig';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { policyFilter, defaultOnLoad } from './constants';\nimport {\n  useFetchSystems,\n  useGetEntities,\n  useOsMinorVersionFilter,\n  useInventoryUtilities,\n  useSystemsExport,\n  useSystemsFilter,\n  useSystemBulkSelect,\n  useTags,\n} from './hooks';\n\nexport const SystemsTable = ({\n  columns,\n  showAllSystems,\n  policyId,\n  query,\n  showActions,\n  enableExport,\n  compliantFilter,\n  policies,\n  showOnlySystemsWithTestResults,\n  showOsFilter,\n  error,\n  showComplianceSystemsInfo,\n  compact,\n  remediationsEnabled,\n  systemProps,\n  defaultFilter,\n  emptyStateComponent,\n  prependComponent,\n  showOsMinorVersionFilter,\n  preselectedSystems,\n  onSelect: onSelectProp,\n  noSystemsTable,\n  tableProps,\n}) => {\n  const inventory = useRef(null);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [total, setTotal] = useState(0);\n  const osMinorVersionFilter = useOsMinorVersionFilter(\n    showOsMinorVersionFilter,\n    {\n      variables: {\n        filter: defaultFilter,\n        ...(policyId && { policyId }),\n      },\n    }\n  );\n  const {\n    toolbarProps: conditionalFilter,\n    filterString,\n    activeFilterValues,\n  } = useFilterConfig({\n    filters: {\n      filterConfig: [\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(policies?.length > 0 ? policyFilter(policies, showOsFilter) : []),\n        ...osMinorVersionFilter,\n      ],\n    },\n  });\n  const systemsFilter = useSystemsFilter(\n    filterString(),\n    showOnlySystemsWithTestResults,\n    defaultFilter\n  );\n\n  const {\n    props: tagsProps,\n    currentTags,\n    setCurrentTags,\n    getTags,\n  } = useTags({\n    variables: {\n      filter: systemsFilter,\n      ...(policyId && { policyId }),\n    },\n  });\n\n  const systemFetchArguments = {\n    query,\n    variables: {\n      tags: currentTags,\n      filter: systemsFilter,\n      ...(policyId && { policyId }),\n    },\n  };\n\n  const preselection = useMemo(\n    () => preselectedSystems.map(({ id }) => id),\n    [preselectedSystems]\n  );\n\n  const {\n    selectedIds,\n    selectedSystems,\n    tableProps: bulkSelectTableProps,\n    toolbarProps: bulkSelectToolBarProps,\n  } = useSystemBulkSelect({\n    total,\n    onSelect: onSelectProp,\n    preselected: preselection,\n    fetchArguments: systemFetchArguments,\n    currentPageIds: items.map(({ id }) => id),\n    systemsCache: items,\n  });\n\n  useInventoryUtilities(inventory, selectedIds, activeFilterValues);\n\n  const onComplete = (result) => {\n    setTotal(result.meta.totalCount);\n    setItems(result.entities);\n    setIsLoaded(true);\n    setCurrentTags && setCurrentTags(result.meta.tags);\n\n    if (\n      emptyStateComponent &&\n      result.meta.totalCount === 0 &&\n      activeFilterValues.length === 0 &&\n      result?.meta?.tags?.length === 0\n    ) {\n      setIsEmpty(true);\n    }\n  };\n\n  const fetchSystems = useFetchSystems({\n    ...systemFetchArguments,\n    onComplete,\n  });\n  const getEntities = useGetEntities(fetchSystems, {\n    selected: selectedIds,\n    columns,\n  });\n  const exportConfig = useSystemsExport({\n    columns,\n    filter: systemsFilter,\n    selected: selectedIds,\n    total,\n    fetchArguments: {\n      tags: currentTags,\n      ...systemFetchArguments,\n    },\n  });\n\n  const mergedColumns = (defaultColumns) =>\n    columns.map((column) => {\n      const isStringCol = typeof column === 'string';\n      const key = isStringCol ? column : column.key;\n      const defaultColumn = defaultColumns.find(\n        (defaultCol) => defaultCol.key === key\n      );\n      return {\n        ...defaultColumn,\n        ...(isStringCol ? { key: column } : column),\n        props: {\n          ...defaultColumn?.props,\n          ...column?.props,\n        },\n      };\n    });\n\n  return (\n    <StateView\n      stateValues={{\n        error,\n        noError: error === undefined && !isEmpty,\n        empty: isEmpty,\n      }}\n    >\n      <StateViewPart stateKey=\"error\">\n        {!!prependComponent && prependComponent}\n        <ErrorPage error={error} />\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">{emptyStateComponent}</StateViewPart>\n      <StateViewPart stateKey=\"noError\">\n        {!!prependComponent && isLoaded && prependComponent}\n        {showComplianceSystemsInfo && (\n          <Alert\n            isInline\n            variant=\"info\"\n            ouiaId=\"SystemsListIsDifferentAlert\"\n            title={\n              'The list of systems in this view is different than those that appear in the Inventory. ' +\n              'Only systems currently associated with or reporting against compliance policies are displayed.'\n            }\n          />\n        )}\n        <InventoryTable\n          {...systemProps}\n          {...tagsProps}\n          disableDefaultColumns\n          columns={mergedColumns}\n          noSystemsTable={noSystemsTable}\n          ref={inventory}\n          getEntities={getEntities}\n          getTags={getTags}\n          onLoad={defaultOnLoad(columns)}\n          tableProps={{\n            ...bulkSelectTableProps,\n            isStickyHeader: true,\n            ...tableProps,\n          }}\n          fallback={<Spinner />}\n          variant={compact ? TableVariant.compact : ''}\n          {...bulkSelectToolBarProps}\n          {...(!showAllSystems && {\n            ...conditionalFilter,\n            ...(remediationsEnabled && {\n              dedicatedAction: (\n                <ComplianceRemediationButton\n                  allSystems={selectedSystems}\n                  selectedRules={[]}\n                />\n              ),\n            }),\n          })}\n          {...(enableExport && { exportConfig })}\n          {...(showActions && {\n            actions: [\n              {\n                title: 'View in inventory',\n                onClick: (_event, _index, { id }) => {\n                  const beta =\n                    window.location.pathname.split('/')[1] === 'beta';\n                  window.location.href = `${window.location.origin}${\n                    beta ? '/beta' : ''\n                  }/insights/inventory/${id}`;\n                },\n              },\n            ],\n          })}\n        />\n      </StateViewPart>\n    </StateView>\n  );\n};\n\nSystemsTable.propTypes = {\n  columns: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.shape({}), PropTypes.string])\n  ),\n  policies: PropTypes.arrayOf(PropTypes.shape({})),\n  showAllSystems: PropTypes.bool,\n  policyId: PropTypes.string,\n  query: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  showActions: PropTypes.bool,\n  enableExport: PropTypes.bool,\n  compliantFilter: PropTypes.bool,\n  showOnlySystemsWithTestResults: PropTypes.bool,\n  showOsFilter: PropTypes.bool,\n  showComplianceSystemsInfo: PropTypes.bool,\n  error: PropTypes.object,\n  compact: PropTypes.bool,\n  remediationsEnabled: PropTypes.bool,\n  defaultFilter: PropTypes.string,\n  systemProps: PropTypes.shape({\n    isFullView: PropTypes.bool,\n  }),\n  emptyStateComponent: PropTypes.node,\n  prependComponent: PropTypes.node,\n  showOsMinorVersionFilter: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  preselectedSystems: PropTypes.array,\n  onSelect: PropTypes.func,\n  noSystemsTable: PropTypes.node,\n  tableProps: PropTypes.object,\n};\n\nSystemsTable.defaultProps = {\n  policyId: '',\n  showActions: true,\n  enableExport: true,\n  compliantFilter: false,\n  showOnlySystemsWithTestResults: false,\n  showComplianceSystemsInfo: false,\n  compact: false,\n  remediationsEnabled: true,\n  preselectedSystems: [],\n};\n\nexport default SystemsTable;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { sortingByProp } from 'Utilities/helpers';\n\nconst selectRows = (rows, selected) =>\n  rows.map((row) => ({\n    ...row,\n    selected: selected.includes(row.id),\n  }));\n\nexport const entitiesReducer = () =>\n  applyReducerHash({\n    ['INVENTORY_INIT']: () => ({\n      rows: [],\n      total: 0,\n    }),\n    ['RESET_PAGE']: (state) => ({\n      ...state,\n      page: 1,\n    }),\n    ['SELECT_ENTITIES']: (state, { payload: { selected } }) => ({\n      ...state,\n      rows: selectRows(state.rows, selected),\n    }),\n  });\n\nexport const mapCountOsMinorVersions = (systems) => {\n  if (!systems) {\n    return {};\n  }\n\n  return systems.reduce((acc, { osMinorVersion }) => {\n    if (osMinorVersion !== undefined && osMinorVersion !== null) {\n      (acc[osMinorVersion] = acc[osMinorVersion] || {\n        osMinorVersion,\n        count: 0,\n      }).count++;\n    }\n\n    return acc;\n  }, {});\n};\n\nexport const countOsMinorVersions = (systems) =>\n  Object.values(mapCountOsMinorVersions(systems)).sort(\n    sortingByProp('osMinorVersion', 'desc')\n  );\n"],"names":["QUERY","gql","ComplianceSystems","useQuery","data","error","loading","policies","profiles","edges","map","node","className","title","stateValues","stateKey","columns","Columns","showLink","props","isStatic","transforms","nowrap","query","GET_SYSTEMS","defaultFilter","systemProps","isFullView","showOsMinorVersionFilter","policy","majorOsVersion","showComplianceSystemsInfo","enableEditPolicy","remediationsEnabled","PolicyTypeDetailsRow","description","item","key","Text","style","margin","propTypes","NameCell","name","disabled","compact","PolicyTypeTable","onChange","selectedProfile","items","profile","rowProps","selected","id","disableSelection","filters","filterConfig","type","conditionalFilterType","label","filter","policyTypes","value","policyType","toLowerCase","includes","sortByProp","renderFunc","renderComponent","fitContent","_data","_id","supportedOsVersions","join","options","detailsComponent","hasRadioSelect","sortBy","index","direction","property","onSelect","_event","_value","_rowIdx","itemId","find","selectVariant","variant","Tooltip","position","content","SUPPORTED_PROFILES","CreateSCAPPolicy","change","selectedOsMajorVersion","fetchPolicy","inUseProfileRefIds","refId","osMajorVersions","selectedOsMajorVersionObject","osMajorVersion","profilesToSelect","Spinner","TextContent","component","TextVariants","Form","FormGroup","isRequired","fieldId","Tile","onClick","isSelected","isStacked","labelIcon","benchmark","undefined","reduxFormPropTypes","selector","formValueSelector","compose","connect","state","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","PROFILES_QUERY","BENCHMARKS_QUERY","EditPolicyProfilesRules","selectedRuleRefIds","osMinorVersionCounts","osMinorVersions","i","osMinorVersion","sort","benchmarkSearch","variables","skip","length","benchmarksData","benchmarksError","benchmarksLoading","benchmarks","nodes","tabsData","systemCount","count","latestSupportedOsMinorVersions","getBenchmarkBySupportedOsMinor","profileRefId","benchmarkProfile","getBenchmarkProfile","newOsMinorVersion","profileToOsMinorMap","tabsDataToOsMinorMap","profileIds","Object","keys","skipProfilesQuery","profilesData","profilesError","profilesLoading","dataState","loadingState","noRuleSets","p","setSelectedRuleRefIds","newSelection","useLayoutEffect","profilesWithOs","extendProfilesByOsMinor","profilesWithRulesToSelection","only","JSON","stringify","EmptyState","Title","headingLevel","size","EmptyStateBody","EmptyTable","TabbedRules","selectedFilter","level","ouiaId","WizardContextConsumer","goToStepById","Button","PrependComponent","EditPolicySystems","selectedSystems","prependComponent","emptyStateComponent","width","showActions","GET_SYSTEMS_WITHOUT_FAILED_RULES","enableExport","preselectedSystems","newSelectedSystems","countOsMinorVersions","defaultProps","EditPolicyDetails","useEffect","Field","ReduxFormTextInput","isDisabled","ReduxFormTextArea","defaultValue","businessObjective","previousThreshold","complianceThreshold","initialValues","REVIEW","ReviewCreatedPolicy","benchmarkId","parentProfileName","marginTop","TextList","TextListVariants","TextListItem","TextListItemVariants","fontWeight","parseFloat","rulesCount","EmtpyStateWithErrors","errors","Array","isArray","List","ListItem","FinishedCreatePolicy","onWizardFinish","cloneFromProfileId","systems","useState","percent","setPercent","message","setMessage","setErrors","failed","setFailed","updatePolicy","usePolicy","onProgress","progress","hosts","then","dispatchNotification","autoDismiss","Link","to","catch","networkError","result","Bullseye","EmptyStateVariant","EmptyStateIcon","icon","WrenchIcon","EmptyStateSecondaryActions","withApollo","CreatePolicyForm","systemIds","reset","history","useHistory","stepIdReached","setStepIdReached","resetAnchor","location","hash","push","onClose","steps","enableNext","validateBenchmarkPage","canJumpTo","validateDetailsPage","validateSystemsPage","validateRulesPage","nextButtonText","isFinishedStep","Wizard","isOpen","onNext","onGoToStep","onBack","dispatch","CreatePolicy","DeleteReport","useLocation","background","useMutation","DELETE_REPORT","onCompleted","dispatchAction","addNotification","onError","deleteReport","C","ModalVariant","actions","input","profileId","isModalOpen","onDelete","policyId","EditPolicyDetailsTab","updatedPolicy","setUpdatedPolicy","validThreshold","setValidThreshold","threshold","valid","thresholdValid","useThresholdValidate","validateThreshold","TextArea","height","TextInput","validated","helperTextInvalid","helperText","complianceThresholdValid","EditPolicyRulesTabEmptyState","EditPolicyRulesTab","setNewRuleTabs","values","sortingByProp","parentProfileId","toTabsData","tab","prevSelection","empty","EditPolicySystemsTab","newRuleTabs","onSystemSelect","Alert","isInline","actionLinks","AlertActionLink","EditPolicyForm","setSelectedSystems","policyProfiles","setOsMinorVersionCounts","handleSystemSelect","reduce","acc","mapCountOsMinorVersions","profilesWithOsMinor","updateSelectedRuleRefIds","defaultTab","Tab","eventKey","TabTitleText","useLinkToPolicy","anchor","useAnchor","linkToBackground","useLinkToBackground","MULTIVERSION_QUERY","EditPolicy","route","useParams","policy_id","linkToPolicy","saveEnabled","updatedPolicyHostsAndRules","isSaving","setIsSaving","Promise","resolve","useOnSave","onSave","spinnerAriaValueText","isLoading","useTitleEntity","minHeight","SystemLink","children","pathname","Name","showOsInfo","hasOsInfo","SSGVersion","ssgVersion","supported","messageVariant","SSGVersions","testResultProfiles","DetailsLink","Policies","Truncate","inline","text","FailedRules","rulesFailed","profilesRulesFailed","ComplianceScore","complianceScore","complianceScoreData","NeverScanned","Fragment","color","NEVER","lastScanned","dates","Date","last","Math","max","apply","date","isFinite","LastScanned","lastScannedDate","DateFormat","parse","operatingSystemString","OperatingSystem","system","disableSorting","compileColumnRenderFunc","cell","column","renderExport","customName","SsgVersion","exportKey","SsgVersionCell","PoliciesCell","DetailsLinkCell","FailedRulesCell","complianceScoreString","trim","ComplianceScoreCell","LastScannedCell","OperatingSystemCell","OS","original","dataLabel","inventoryColumn","GET_MINIMAL_SYSTEMS","GET_SYSTEMS_TAGS","GET_SYSTEMS_OSES","policyFilter","osFilter","systemsPolicyFilterConfiguration","systemsOsFilterConfiguration","osMinorVersionFilter","systemsOsMinorFilterConfiguration","defaultOnLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","getRegistry","register","entitiesReducer","InventoryDetails","registryDecorator","DetailWrapper","onLoad","mergeWithDetail","InventoryDetail","fallback","Skeleton","SkeletonSize","hideBack","React","entity","groupByMajorVersion","versions","showFilter","showVersion","version","String","currentValue","major","Set","minor","renameInventoryAttributes","culledTimestamp","staleWarningTimestamp","staleTimestamp","insightsId","updated","culled_timestamp","stale_warning_timestamp","stale_timestamp","insights_id","useFetchSystems","onComplete","client","useApolloClient","perPage","page","requestVariables","fetchResults","e","entities","systemsWithRuleObjectsFailed","meta","tags","totalCount","fetchBatched","fetchFunction","total","batchSize","pages","ceil","all","_","pageIdx","buildApiFilters","tagFilters","otherFilters","tagsApiFilter","flatMap","tagFilter","tag","encodeURIComponent","tagKey","toIdFilter","ids","searchTagsByKey","search","tagItem","indexOf","SystemsTable","showAllSystems","compliantFilter","showOnlySystemsWithTestResults","showOsFilter","onSelectProp","noSystemsTable","tableProps","inventory","useRef","isEmpty","setIsEmpty","isLoaded","setIsLoaded","setItems","setTotal","fetchArguments","osVersions","useOsMinorVersionFilter","useFilterConfig","DEFAULT_SYSTEMS_FILTER_CONFIGURATION","COMPLIANT_SYSTEMS_FILTER_CONFIGURATION","conditionalFilter","toolbarProps","filterString","activeFilterValues","systemsFilter","combindedFilter","useSystemsFilter","apiClient","currentTags","setCurrentTags","fetchTags","per_page","fetchedTags","end","start","results","slice","getTags","config","pagination","tagsList","hideFilters","registeredWith","operatingSystem","stale","showTags","useTags","tagsProps","systemFetchArguments","preselected","currentPageIds","systemsCache","fetchSystems","fetchFunc","fetchIds","idFilter","cachedOrFetch","selectedIds","cachedSystems","cachedIds","fetchedSystems","onSelectCallback","itemIdsInTable","useBulkSelect","itemIdsOnPage","useSystemBulkSelect","useMemo","bulkSelectTableProps","bulkSelectToolBarProps","activeFilters","useDispatch","payload","debounceResetPage","debounce","current","onRefreshData","useInventoryUtilities","getEntities","fetchEntities","appendDirection","attributes","attribute","findColumnByKey","_ids","orderBy","orderDirection","sortableColumn","filterForApi","fetchedEntities","useGetEntities","exportConfig","selectionFilter","exporter","fetchedItems","useExport","onStart","useSystemsExport","noError","InventoryTable","disableDefaultColumns","defaultColumns","isStringCol","defaultColumn","defaultCol","ref","isStickyHeader","TableVariant","dedicatedAction","ComplianceRemediationButton","allSystems","selectedRules","_index","beta","window","split","href","origin","PropTypes","selectRows","rows","row","applyReducerHash"],"sourceRoot":""}