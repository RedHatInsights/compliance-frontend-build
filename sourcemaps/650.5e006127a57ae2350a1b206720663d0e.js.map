{"version":3,"file":"js/650.351dafab7c7372295d02.js","mappings":"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","sources":["webpack:///./src/SmartComponents/ComplianceSystems/ComplianceSystems.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeDetailsRow.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeTable.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeTooltip.js","webpack:///./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/constants.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyProfilesRules.js","webpack:///./src/SmartComponents/CreatePolicy/hooks/useBenchmarksQuery.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack:///./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack:///./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack:///./src/SmartComponents/DeletePolicy/DeletePolicy.js","webpack:///./src/SmartComponents/DeleteReport/DeleteReport.js","webpack:///./src/SmartComponents/EditPolicy/constants.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyRulesTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicySystemsTab.js","webpack:///./src/SmartComponents/EditPolicy/components/NewRulesAlert.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyForm.js","webpack:///./src/SmartComponents/EditPolicy/hooks/index.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicy.js","webpack:///./src/SmartComponents/SystemsTable/Cells.js","webpack:///./src/SmartComponents/SystemsTable/Columns.js","webpack:///./src/SmartComponents/InventoryDetails/InventoryDetails.js","webpack:///./src/PresentationalComponents/ComplianceRemediationButton/constants.js","webpack:///./src/PresentationalComponents/ComplianceRemediationButton/RemediationButton.js","webpack:///./src/PresentationalComponents/ComplianceRemediationButton/hooks.js","webpack:///./src/SmartComponents/SystemsTable/constants.js","webpack:///./src/SmartComponents/SystemsTable/hooks.js","webpack:///./src/SmartComponents/SystemsTable/SystemsTable.js","webpack:///./src/Utilities/hooks/usePolicyQuery/constants.js","webpack:///./src/Utilities/hooks/usePolicyQuery/usePolicyQuery.js","webpack:///./src/Utilities/hooks/usePolicyQuery/helpers.js","webpack:///./src/Utilities/hooks/usePromiseQueue.js","webpack:///./src/store/Reducers/SystemStore.js"],"sourcesContent":["/* eslint-disable react/display-name */\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { nowrap } from '@patternfly/react-table';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport { SystemsTable } from 'SmartComponents';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst QUERY = gql`\n  {\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n        }\n      }\n    }\n  }\n`;\n\nconst DEFAULT_FILTER = 'has_test_results = true or has_policy = true';\n\nexport const ComplianceSystems = () => {\n  const { data, error, loading } = useQuery(QUERY);\n  const policies = data?.profiles?.edges.map(({ node }) => node);\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"page-header\">\n        <PageHeaderTitle title=\"Compliance systems\" />\n      </PageHeader>\n      <section className=\"pf-c-page__main-section\">\n        <StateViewWithError stateValues={{ error, data, loading }}>\n          <StateViewPart stateKey=\"data\">\n            {policies && (\n              <SystemsTable\n                columns={[\n                  Columns.customName({\n                    showLink: true,\n                  }),\n                  Columns.inventoryColumn('tags'),\n                  Columns.OS,\n                  Columns.Policies,\n                  Columns.inventoryColumn('updated', {\n                    props: { isStatic: true },\n                    transforms: [nowrap],\n                  }),\n                ]}\n                defaultFilter={DEFAULT_FILTER}\n                systemProps={{\n                  isFullView: true,\n                }}\n                showOsMinorVersionFilter={policies.map(\n                  (policy) => policy.osMajorVersion\n                )}\n                showComplianceSystemsInfo\n                enableEditPolicy={false}\n                remediationsEnabled={false}\n                policies={policies}\n              />\n            )}\n          </StateViewPart>\n        </StateViewWithError>\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default ComplianceSystems;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Text } from '@patternfly/react-core';\n\nconst PolicyTypeDetailsRow = ({ item: { description }, key }) => {\n  return (\n    <Text key={key} style={{ margin: 'var(--pf-global--spacer--lg) 0' }}>\n      {description}\n    </Text>\n  );\n};\n\nPolicyTypeDetailsRow.propTypes = {\n  item: propTypes.object,\n  key: propTypes.string,\n};\n\nexport default PolicyTypeDetailsRow;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { fitContent, info } from '@patternfly/react-table';\nimport { InUseProfileLabel } from 'PresentationalComponents';\nimport { TableToolsTable } from 'Utilities/hooks/useTableTools';\nimport { renderComponent } from 'Utilities/helpers';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport PolicyTypeDetailsRow from './PolicyTypeDetailsRow';\nimport { emptyRows } from 'Utilities/hooks/useTableTools/Components/NoResultsTable';\n\nconst NameCell = ({ name, disabled }) => {\n  return (\n    <>\n      {disabled && <InUseProfileLabel compact />}\n      {name}\n    </>\n  );\n};\n\nNameCell.propTypes = {\n  name: propTypes.string,\n  disabled: propTypes.boolean,\n};\n\nconst PolicyTypeTable = ({ profiles, onChange, selectedProfile }) => {\n  const columns = [\n    {\n      title: 'Policy name',\n      key: 'name',\n      transforms: [\n        info({\n          tooltip:\n            'In use policies have already been used and therefore can not be applied to another SCAP Policy under the selected OS.',\n        }),\n      ],\n      sortByProp: 'name',\n      renderFunc: renderComponent(NameCell),\n    },\n    {\n      title: 'Supported OS versions',\n      transforms: [fitContent],\n      sortByProp: 'supportedOsVersions',\n      renderFunc: (_data, _id, profile) =>\n        profile.supportedOsVersions.join(', '),\n    },\n  ];\n\n  return (\n    <TableToolsTable\n      items={profiles.map((profile) => ({\n        ...profile,\n        rowProps: {\n          selected: profile.id === selectedProfile?.id,\n          disableSelection: profile.disabled,\n        },\n      }))}\n      filters={{\n        filterConfig: [\n          {\n            type: conditionalFilterType.text,\n            label: 'Policy Name',\n            filter: (policyTypes, value) =>\n              policyTypes.filter((policyType) =>\n                policyType?.name.toLowerCase().includes(value.toLowerCase())\n              ),\n          },\n        ],\n      }}\n      columns={columns}\n      options={{\n        detailsComponent: PolicyTypeDetailsRow,\n        onRadioSelect: (_event, _value, _rowIdx, { itemId }) =>\n          onChange && onChange(profiles.find(({ id }) => id === itemId)),\n        sortBy: {\n          index: 2,\n          direction: 'asc',\n          property: 'name',\n        },\n        emptyRows: emptyRows('policy types', columns.length),\n      }}\n      variant=\"compact\"\n    />\n  );\n};\n\nPolicyTypeTable.propTypes = {\n  profiles: propTypes.array,\n  onChange: propTypes.func,\n  selectedProfile: propTypes.string,\n};\n\nexport default PolicyTypeTable;\n","import React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\n\nconst PolicyTypeTooltip = () => (\n  <Tooltip\n    position=\"right\"\n    content=\"Policy types are OpenSCAP policies that are supported by RHEL.\n        For each major version of RHEL, users can create one policy of each type.\"\n  >\n    <OutlinedQuestionCircleIcon className=\"grey-icon\" />\n  </Tooltip>\n);\n\nexport default PolicyTypeTooltip;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  Tile,\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport PolicyTypesTable from './Components/PolicyTypeTable';\nimport PolicyTypeTooltip from './Components/PolicyTypeTooltip';\n\nconst SUPPORTED_PROFILES = gql`\n  query supportedProfilesByOSMajor {\n    osMajorVersions {\n      edges {\n        node {\n          osMajorVersion\n          profiles {\n            id\n            name\n            refId\n            description\n            supportedOsVersions\n            benchmark {\n              id\n              refId\n            }\n          }\n        }\n      }\n    }\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          refId\n          benchmark {\n            refId\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const CreateSCAPPolicy = ({\n  change,\n  selectedProfile,\n  selectedOsMajorVersion,\n}) => {\n  const { data, error, loading } = useQuery(SUPPORTED_PROFILES, {\n    fetchPolicy: 'no-cache',\n  });\n  const isInUse = (profileRefId, benchmarkRedId) =>\n    !!data?.profiles?.edges\n      .map(({ node }) => node)\n      .find(\n        (profile) =>\n          profile.refId === profileRefId &&\n          benchmarkRedId === profile.benchmark.refId\n      );\n  const osMajorVersions = data?.osMajorVersions?.edges.map(({ node }) => node);\n  const selectedOsMajorVersionObject = osMajorVersions?.find(\n    ({ osMajorVersion }) => osMajorVersion === selectedOsMajorVersion\n  );\n  const profilesToSelect = selectedOsMajorVersionObject?.profiles.map(\n    (profile) => ({\n      ...profile,\n      disabled: isInUse(profile.refId, profile.benchmark.refId),\n    })\n  );\n\n  return (\n    <StateViewWithError stateValues={{ error, data, loading }}>\n      <StateViewPart stateKey=\"loading\">\n        <Spinner />\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <TextContent>\n          <Text component={TextVariants.h1} className=\"pf-u-mb-md\">\n            Create SCAP policy\n          </Text>\n          <Text className=\"pf-u-mb-md\">\n            Select the operating system and policy type for this policy.\n          </Text>\n        </TextContent>\n        <Form>\n          <FormGroup label=\"Operating system\" isRequired fieldId=\"benchmark\">\n            {osMajorVersions &&\n              osMajorVersions.map(({ osMajorVersion }) => (\n                <Tile\n                  key={`rhel${osMajorVersion}-select`}\n                  className=\"pf-u-mr-md\"\n                  title={`RHEL ${osMajorVersion}`}\n                  onClick={() => {\n                    change('osMajorVersion', osMajorVersion);\n                  }}\n                  isSelected={selectedOsMajorVersion === osMajorVersion}\n                  isStacked\n                />\n              ))}\n          </FormGroup>\n\n          {selectedOsMajorVersion && (\n            <FormGroup\n              isRequired\n              labelIcon={<PolicyTypeTooltip />}\n              label=\"Policy type\"\n              fieldId=\"policy-type\"\n            >\n              <PolicyTypesTable\n                aria-label=\"PolicyTypeTable\"\n                profiles={profilesToSelect}\n                onChange={(policy) => {\n                  change('profile', policy);\n                  change('benchmark', policy.benchmark.id);\n                  change('selectedRuleRefIds', undefined);\n                  change('systems', []);\n                }}\n                selectedProfile={selectedProfile}\n              />\n            </FormGroup>\n          )}\n        </Form>\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nCreateSCAPPolicy.propTypes = {\n  change: reduxFormPropTypes.change,\n  selectedProfile: propTypes.object,\n  selectedOsMajorVersion: propTypes.string,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    selectedProfile: selector(state, 'profile'),\n    selectedOsMajorVersion: selector(state, 'osMajorVersion'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(CreateSCAPPolicy);\n","import gql from 'graphql-tag';\n\nexport const BENCHMARKS_QUERY = gql`\n  query CP_Benchmarks($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        ruleTree\n        valueDefinitions {\n          defaultValue\n          description\n          id\n          refId\n          title\n          valueType\n        }\n        profiles {\n          id\n          refId\n          osMajorVersion\n        }\n        version\n      }\n    }\n  }\n`;\n\nexport const BENCHMARKS_RULES_TREES_QUERY = gql`\n  query CP_BenchmarksRuleTree($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        ruleTree\n      }\n    }\n  }\n`;\n\nexport const BENCHMARKS_VALUE_DEFINITIONS_QUERY = gql`\n  query CP_BenchmarksValueDefinitions($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        ruleTree\n        valueDefinitions {\n          defaultValue\n          description\n          id\n          refId\n          title\n          valueType\n        }\n        profiles {\n          id\n          refId\n          osMajorVersion\n        }\n        version\n      }\n    }\n  }\n`;\n\nexport const PROFILES_QUERY = gql`\n  query CP_Profiles($filter: String!) {\n    profiles(search: $filter) {\n      edges {\n        node {\n          id\n          refId\n          osMinorVersion\n          benchmark {\n            id\n            latestSupportedOsMinorVersions\n          }\n          rules {\n            refId\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { useMemo, useLayoutEffect } from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  Title,\n  Text,\n  TextContent,\n  TextVariants,\n  EmptyState,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\nimport useBenchmarksQuery from './hooks/useBenchmarksQuery';\nimport { PROFILES_QUERY } from './constants';\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nexport const EditPolicyProfilesRules = ({\n  policy,\n  selectedRuleRefIds,\n  change,\n  osMajorVersion,\n  osMinorVersionCounts,\n  ruleValues,\n}) => {\n  const columns = [Columns.Name, Columns.Severity, Columns.Remediation];\n  const osMinorVersions = osMinorVersionCounts\n    .map((i) => i.osMinorVersion)\n    .sort();\n  const {\n    data: benchmarksData,\n    error: benchmarksError,\n    loading: benchmarksLoading,\n  } = useBenchmarksQuery({\n    osMajorVersion,\n    osMinorVersions,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  const tabsData = useMemo(\n    () =>\n      osMinorVersionCounts\n        .map(({ osMinorVersion, count: systemCount }) => {\n          osMinorVersion = `${osMinorVersion}`;\n          let profile;\n          if (benchmarks) {\n            const benchmark = getBenchmarkBySupportedOsMinor(\n              benchmarks,\n              osMinorVersion\n            );\n            if (benchmark) {\n              profile = getBenchmarkProfile(benchmark, policy.refId);\n              if (profile) {\n                profile = {\n                  ...profile,\n                  benchmark: {\n                    ...profile.benchmark,\n                    ...benchmark,\n                  },\n                };\n              }\n            }\n          }\n\n          return {\n            profile,\n            systemCount,\n            newOsMinorVersion: osMinorVersion,\n          };\n        })\n        .filter(({ profile }) => !!profile),\n    [osMinorVersionCounts, benchmarks, policy]\n  );\n\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n  const profileIds = Object.keys(profileToOsMinorMap);\n  const filter = profileIds.map((i) => `id = ${i}`).join(' OR ');\n\n  const {\n    data: profilesData,\n    error: profilesError,\n    loading: profilesLoading,\n  } = useQuery(PROFILES_QUERY, {\n    variables: {\n      filter,\n    },\n    skip: profileIds.length === 0,\n    fetchPolicy: 'no-cache',\n  });\n\n  const error = benchmarksError || profilesError;\n  const dataState = profileIds?.length > 0 ? profilesData : undefined;\n  const loadingState = profilesLoading || benchmarksLoading ? true : undefined;\n  const noRuleSets = !error && !loadingState && profileIds?.length === 0;\n  const profiles = profilesData?.profiles.edges.map((p) => p.node);\n\n  const setSelectedRuleRefIds = (newSelection) => {\n    change('selectedRuleRefIds', newSelection);\n  };\n\n  const setRuleValues = (policyId, valueDefinition, valueValue) => {\n    const newRuleValues = {\n      ...(ruleValues || {}),\n      [policyId]: {\n        ...(ruleValues || {})[policyId],\n        [valueDefinition.refId]: valueValue,\n      },\n    };\n\n    change('ruleValues', newRuleValues);\n  };\n\n  useLayoutEffect(() => {\n    if (!loadingState) {\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      const newSelection = profilesWithRulesToSelection(\n        profilesWithOs,\n        selectedRuleRefIds,\n        { only: true }\n      );\n      setSelectedRuleRefIds(newSelection);\n    }\n  }, [JSON.stringify(profiles), loadingState]);\n\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-pb-md\">\n        <Text component={TextVariants.h1}>Rules</Text>\n        <Text>\n          Customize your <b>{policy.name}</b> SCAP policy by including and\n          excluding rules.\n        </Text>\n        <Text>\n          Each release of RHEL is supported with a unique and specific version\n          of the SCAP Security Guide (SSG). You must customize each version of\n          SSG for each release of RHEL.\n        </Text>\n      </TextContent>\n\n      <StateViewWithError\n        stateValues={{\n          error,\n          data: dataState,\n          loading: loadingState,\n          noRuleSets,\n        }}\n      >\n        <StateViewPart stateKey=\"noRuleSets\">\n          <EmptyState>\n            <Title headingLevel=\"h1\" size=\"xl\">\n              No rules can be configured\n            </Title>\n            <EmptyStateBody>\n              The policy type selected does not exist for the systems and OS\n              versions selected in the previous steps.\n            </EmptyStateBody>\n          </EmptyState>\n        </StateViewPart>\n        <StateViewPart stateKey=\"loading\">\n          <EmptyTable>\n            <Spinner />\n          </EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n          <TabbedRules\n            tabsData={tabsData}\n            selectedRuleRefIds={selectedRuleRefIds}\n            setRuleValues={setRuleValues}\n            ruleValues={ruleValues}\n            columns={columns}\n            remediationsEnabled={false}\n            selectedFilter\n            level={1}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            ouiaId=\"RHELVersions\"\n            resetLink={true}\n            rulesPageLink={true}\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </React.Fragment>\n  );\n};\n\nEditPolicyProfilesRules.propTypes = {\n  policy: propTypes.object,\n  change: reduxFormPropTypes.change,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  selectedRuleRefIds: propTypes.array,\n  ruleValues: propTypes.array,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    policy: selector(state, 'profile'),\n    osMajorVersion: selector(state, 'osMajorVersion'),\n    osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n    selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n    ruleValues: selector(state, 'ruleValues'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyProfilesRules);\n","import { useMemo, useCallback } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { logMultipleErrors } from 'Utilities/helpers';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport {\n  BENCHMARKS_QUERY,\n  BENCHMARKS_RULES_TREES_QUERY,\n  BENCHMARKS_VALUE_DEFINITIONS_QUERY,\n} from '../constants';\n\nconst compileData = (benchmarksData, ruleTreesData, valueDefinitionsData) => ({\n  benchmarks: {\n    nodes: benchmarksData?.benchmarks.nodes.map((node) => {\n      const ruleTree = ruleTreesData?.benchmarks.nodes.find(\n        ({ id }) => id === node.id\n      )?.ruleTree;\n      const valueDefinitions = valueDefinitionsData?.benchmarks.nodes.find(\n        ({ id }) => id === node.id\n      )?.valueDefinitions;\n\n      return {\n        ...node,\n        ruleTree,\n        valueDefinitions,\n      };\n    }),\n  },\n});\n\nconst useBenchmarksQuery = ({ osMajorVersion, osMinorVersions }) => {\n  const filter =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const ruleGroupsEnabled = useFeature('ruleGroups');\n  const valueEditingEnabled = useFeature('valueEditing');\n\n  const {\n    data: benchmarksData,\n    error: benchmarksError,\n    loading: benchmarksLoading,\n    refetch: refetchProfiles,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter,\n    },\n    skip: osMinorVersions.length === 0,\n    fetchPolicy: 'no-cache',\n  });\n\n  const {\n    data: ruleTreesData,\n    error: ruleTreesError,\n    loading: ruleTreesLoading,\n    refetch: refecthRuleTrees,\n  } = useQuery(BENCHMARKS_RULES_TREES_QUERY, {\n    variables: { filter },\n    skip: osMinorVersions.length === 0 || !ruleGroupsEnabled,\n    fetchPolicy: 'no-cache',\n  });\n\n  const {\n    data: valueDefinitionsData,\n    error: valueDefinitionsError,\n    loading: valueDefinitionsLoading,\n    refetch: refecthValueDefinitions,\n  } = useQuery(BENCHMARKS_VALUE_DEFINITIONS_QUERY, {\n    variables: { filter },\n    skip: osMinorVersions.length === 0 || !valueEditingEnabled,\n    fetchPolicy: 'no-cache',\n  });\n\n  const data = useMemo(\n    () => compileData(benchmarksData, ruleTreesData, valueDefinitionsData),\n    [benchmarksData, ruleTreesData, valueDefinitionsData]\n  );\n\n  const error = useMemo(\n    () =>\n      logMultipleErrors(benchmarksError, ruleTreesError, valueDefinitionsError),\n    [benchmarksError, ruleTreesError, valueDefinitionsError]\n  );\n\n  const loading =\n    benchmarksLoading || ruleTreesLoading || valueDefinitionsLoading;\n\n  const refetch = useCallback(() => {\n    refetchProfiles();\n    refecthRuleTrees();\n    refecthValueDefinitions();\n  }, [refetchProfiles, refecthRuleTrees, refecthValueDefinitions]);\n\n  return {\n    data,\n    error,\n    loading,\n    refetch,\n  };\n};\n\nexport default useBenchmarksQuery;\n","import React from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  reduxForm,\n  formValueSelector,\n} from 'redux-form';\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  WizardContextConsumer,\n} from '@patternfly/react-core';\nimport { SystemsTable } from 'SmartComponents';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { countOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n        <br />\n        Policies must be created with at least one system.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Choose a different operating system, or connect{' '}\n        <b>RHEL {osMajorVersion}</b> systems to Insights.\n      </Text>\n    </TextContent>\n    <WizardContextConsumer>\n      {({ goToStepById }) => (\n        <Button onClick={() => goToStepById(1)}>\n          Choose a different operating system\n        </Button>\n      )}\n    </WizardContextConsumer>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n        <br />\n        Systems can be added or removed at any time.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nexport const EditPolicySystems = ({\n  policy,\n  change,\n  osMajorVersion,\n  selectedSystems,\n}) => {\n  const onSystemSelect = (newSelectedSystems) => {\n    change('systems', newSelectedSystems);\n    change('osMinorVersionCounts', countOsMinorVersions(newSelectedSystems));\n  };\n  const osMinorVersions = policy.supportedOsVersions.map(\n    (version) => version.split('.')[1]\n  );\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-mb-md\">\n        <Text component={TextVariants.h1}>Systems</Text>\n      </TextContent>\n      <Form>\n        <FormGroup>\n          <SystemsTable\n            showOsMinorVersionFilter={[osMajorVersion]}\n            prependComponent={\n              <PrependComponent osMajorVersion={osMajorVersion} />\n            }\n            emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n            columns={[\n              {\n                ...Columns.Name,\n                props: {\n                  width: 40,\n                },\n                sortBy: ['name'],\n              },\n              Columns.inventoryColumn('tags'),\n              Columns.OperatingSystem,\n            ]}\n            remediationsEnabled={false}\n            compact\n            showActions={false}\n            defaultFilter={\n              osMajorVersion &&\n              `os_major_version = ${osMajorVersion} AND os_minor_version ^ (${osMinorVersions.join(\n                ','\n              )})`\n            }\n            enableExport={false}\n            preselectedSystems={selectedSystems}\n            onSelect={onSystemSelect}\n          />\n        </FormGroup>\n      </Form>\n    </React.Fragment>\n  );\n};\n\nEditPolicySystems.propTypes = {\n  osMajorVersion: propTypes.string,\n  policy: propTypes.object,\n  selectedSystems: propTypes.array,\n  change: reduxFormPropTypes.change,\n};\n\nEditPolicySystems.defaultProps = {\n  selectedSystems: [],\n};\n\nconst selector = formValueSelector('policyForm');\nconst mapStateToProps = (state) => ({\n  policy: selector(state, 'profile'),\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  selectedSystems: selector(state, 'systems'),\n});\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicySystems);\n","import React, { useEffect } from 'react';\nimport { compose } from 'redux';\nimport {\n  Field,\n  reduxForm,\n  formValueSelector,\n  propTypes as reduxFormPropTypes,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  ReduxFormTextInput,\n  ReduxFormTextArea,\n} from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport {\n  ProfileThresholdField,\n  PolicyBusinessObjectiveTooltip,\n} from 'PresentationalComponents';\n\nexport const EditPolicyDetails = ({ change, policy, refId }) => {\n  useEffect(() => {\n    if (policy && policy.refId !== refId) {\n      change('name', `${policy.name}`);\n      change('refId', `${policy.refId}`);\n      change('description', `${policy.description}`);\n    }\n  }, [policy]);\n\n  return (\n    <React.Fragment>\n      <TextContent>\n        <Text component={TextVariants.h1}>Details</Text>\n      </TextContent>\n      <br />\n      <Form id=\"editpolicydetails\">\n        <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n          <Field\n            component={ReduxFormTextInput}\n            type=\"text\"\n            isRequired={true}\n            id=\"name\"\n            name=\"name\"\n            aria-describedby=\"name\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            isDisabled\n            id=\"refId\"\n            name=\"refId\"\n            aria-describedby=\"refId\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Description\" fieldId=\"description\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextArea}\n            id=\"description\"\n            name=\"description\"\n            aria-describedby=\"description\"\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Business objective\"\n          labelIcon={<PolicyBusinessObjectiveTooltip />}\n          fieldId=\"businessObjective\"\n        >\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            id=\"businessObjective\"\n            name=\"businessObjective\"\n            aria-describedby=\"businessObjective\"\n            defaultValue={policy.businessObjective}\n          />\n        </FormGroup>\n        <ProfileThresholdField previousThreshold={100} />\n      </Form>\n    </React.Fragment>\n  );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n  policy: propTypes.object,\n  refId: propTypes.string,\n  change: reduxFormPropTypes.change,\n};\n\nconst mapStateToProps = (state) => {\n  const policy = selector(state, 'profile');\n  return {\n    policy,\n    refId: selector(state, 'refId'),\n    initialValues: {\n      name: `${policy.name}`,\n      refId: `${policy.refId}`,\n      description: `${policy.description}`,\n      benchmark: selector(state, 'benchmark'),\n      osMajorVersion: selector(state, 'osMajorVersion'),\n      profile: selector(state, 'profile'),\n    },\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyDetails);\n","import React from 'react';\nimport {\n  Label,\n  Text,\n  TextVariants,\n  TextContent,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\n\nconst ReviewCreatedPolicy = ({\n  name,\n  businessObjective,\n  complianceThreshold,\n  parentProfileName,\n  osMinorVersionCounts,\n  osMajorVersion,\n}) => (\n  <TextContent>\n    <Text component={TextVariants.h1}>Review</Text>\n    <Text>Review your SCAP policy before finishing.</Text>\n    <Text component={TextVariants.h3} style={{ marginTop: 0 }}>\n      {name}\n    </Text>\n    <TextList component={TextListVariants.dl}>\n      <TextListItem component={TextListItemVariants.dt}>\n        Policy type\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        {parentProfileName}\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dt}>\n        Compliance threshold\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        {complianceThreshold}%\n      </TextListItem>\n      {businessObjective && (\n        <React.Fragment>\n          <TextListItem component={TextListItemVariants.dt}>\n            Business objective\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {businessObjective}\n          </TextListItem>\n        </React.Fragment>\n      )}\n      <TextListItem component={TextListItemVariants.dt}>Systems</TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        <TextList component={TextListVariants.dl}>\n          {osMinorVersionCounts.map(({ osMinorVersion, count }) => (\n            <React.Fragment key={osMinorVersion}>\n              <TextListItem\n                component={TextListItemVariants.dt}\n                style={{ fontWeight: 'normal' }}\n              >\n                RHEL {osMajorVersion}.{osMinorVersion}\n              </TextListItem>\n              <TextListItem component={TextListItemVariants.dd}>\n                <Label color=\"grey\" isCompact={true}>\n                  {count} {count > 1 ? 'systems' : 'system'}\n                </Label>\n              </TextListItem>\n            </React.Fragment>\n          ))}\n        </TextList>\n      </TextListItem>\n    </TextList>\n  </TextContent>\n);\n\nReviewCreatedPolicy.propTypes = {\n  benchmarkId: propTypes.string,\n  refId: propTypes.string,\n  name: propTypes.string,\n  businessObjective: propTypes.string,\n  complianceThreshold: propTypes.number,\n  parentProfileName: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  osMajorVersion: propTypes.string.isRequired,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect((state) => ({\n  benchmarkId: selector(state, 'benchmark'),\n  refId: selector(state, 'refId'),\n  name: selector(state, 'name'),\n  businessObjective: selector(state, 'businessObjective'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  complianceThreshold:\n    parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n  parentProfileName: selector(state, 'profile').name,\n  rulesCount: selector(state, 'selectedRuleRefIds').length,\n}))(ReviewCreatedPolicy);\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Title,\n  Button,\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  List,\n  ListItem,\n} from '@patternfly/react-core';\nimport {\n  ProgressBar,\n  LinkWithPermission as Link,\n} from 'PresentationalComponents';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from '@apollo/client/react/hoc';\nimport { usePolicy } from 'Mutations';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nconst EmtpyStateWithErrors = ({ errors }) =>\n  errors && Array.isArray(errors) && errors.length > 0 ? (\n    <EmptyStateBody className=\"wizard-failed-errors\">\n      <List>\n        {errors.map((error) => (\n          <ListItem key={error}>{error}</ListItem>\n        ))}\n      </List>\n    </EmptyStateBody>\n  ) : null;\n\nEmtpyStateWithErrors.propTypes = {\n  errors: propTypes.array,\n};\n\nexport const FinishedCreatePolicy = ({\n  onWizardFinish,\n  cloneFromProfileId,\n  description,\n  name,\n  complianceThreshold,\n  businessObjective,\n  refId,\n  benchmarkId,\n  systems,\n  selectedRuleRefIds,\n  ruleValues: values,\n}) => {\n  const [percent, setPercent] = useState(0);\n  const [message, setMessage] = useState('This usually takes a minute or two.');\n  const [errors, setErrors] = useState(null);\n  const [failed, setFailed] = useState(false);\n  const updatePolicy = usePolicy();\n\n  const onProgress = (progress) => {\n    setPercent(progress * 100);\n  };\n\n  const submitForm = () => {\n    const newPolicy = {\n      cloneFromProfileId,\n      description,\n      name,\n      complianceThreshold,\n      businessObjective: { title: businessObjective },\n      refId,\n      benchmarkId,\n      hosts: systems,\n      selectedRuleRefIds,\n      values,\n    };\n\n    updatePolicy(null, newPolicy, onProgress)\n      .then(({ id }) => {\n        setPercent(100);\n        setMessage();\n        dispatchNotification({\n          variant: 'success',\n          title: `Created policy \"${name}\"`,\n          autoDismiss: true,\n          description: (\n            <span>\n              From the <strong>SCAP Policies</strong> list, open{' '}\n              <Link to={`/scappolicies/${id}`}>{name}</Link>.\n            </span>\n          ),\n        });\n      })\n      .catch((error) => {\n        setMessage(error.networkError?.message);\n        setErrors(error.networkError?.result?.errors);\n        setFailed(true);\n        dispatchNotification({\n          variant: 'danger',\n          title: 'Error creating policy',\n          description: error.message,\n        });\n      });\n  };\n\n  useEffect(() => {\n    submitForm();\n  }, []);\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={WrenchIcon} />\n        <br />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          Creating policy\n        </Title>\n        <EmptyStateBody>\n          <ProgressBar percent={percent} failed={failed} />\n        </EmptyStateBody>\n        <EmptyStateBody className={failed && 'wizard-failed-message'}>\n          {message}\n        </EmptyStateBody>\n        <EmtpyStateWithErrors error={errors} />\n        <EmptyStateSecondaryActions>\n          {(percent === 100 || failed) && (\n            <Button\n              variant={'primary'}\n              ouiaId=\"ReturnToAppButton\"\n              onClick={() => {\n                onWizardFinish();\n              }}\n            >\n              {failed ? 'Back' : 'Return to application'}\n            </Button>\n          )}\n        </EmptyStateSecondaryActions>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nFinishedCreatePolicy.propTypes = {\n  benchmarkId: propTypes.string.isRequired,\n  businessObjective: propTypes.object,\n  cloneFromProfileId: propTypes.string.isRequired,\n  refId: propTypes.string.isRequired,\n  name: propTypes.string.isRequired,\n  description: propTypes.string,\n  systems: propTypes.array,\n  complianceThreshold: propTypes.number,\n  onWizardFinish: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string).isRequired,\n  ruleValues: propTypes.object,\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => {\n    return {\n      benchmarkId: selector(state, 'benchmark'),\n      businessObjective: selector(state, 'businessObjective'),\n      cloneFromProfileId: selector(state, 'profile').id,\n      refId: selector(state, 'refId'),\n      name: selector(state, 'name'),\n      description: selector(state, 'description'),\n      complianceThreshold:\n        parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n      systems: selector(state, 'systems'),\n      selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n      ruleValues: selector(state, 'ruleValues'),\n    };\n  }),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: true,\n    forceUnregisterOnUnmount: true,\n  }),\n  withApollo\n)(FinishedCreatePolicy);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { formValueSelector, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport useNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\nimport { Wizard } from '@patternfly/react-core';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport { default as EditPolicyRules } from './EditPolicyProfilesRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport {\n  validateBenchmarkPage,\n  validateDetailsPage,\n  validateRulesPage,\n  validateSystemsPage,\n} from './validate';\n\nexport const CreatePolicyForm = ({\n  benchmark,\n  osMajorVersion,\n  complianceThreshold,\n  name,\n  profile,\n  refId,\n  selectedRuleRefIds,\n  systemIds,\n  reset,\n}) => {\n  const navigate = useNavigate();\n  const [stepIdReached, setStepIdReached] = useState(1);\n  const resetAnchor = () => {\n    const { location } = history;\n    if (location.hash) {\n      history.push({ ...location, hash: '' });\n    }\n  };\n\n  const onNext = ({ id }) => {\n    setStepIdReached(stepIdReached < id ? id : stepIdReached);\n    resetAnchor();\n  };\n\n  const onClose = () => {\n    reset();\n    navigate('/scappolicies');\n  };\n\n  const steps = [\n    {\n      id: 1,\n      name: 'Create SCAP policy',\n      component: <CreateSCAPPolicy />,\n      enableNext: validateBenchmarkPage(benchmark, osMajorVersion, profile),\n    },\n    {\n      id: 2,\n      name: 'Details',\n      component: <EditPolicyDetails />,\n      canJumpTo: stepIdReached >= 2,\n      enableNext: validateDetailsPage(name, refId, complianceThreshold),\n    },\n    {\n      id: 3,\n      name: 'Systems',\n      component: <EditPolicySystems />,\n      canJumpTo: stepIdReached >= 3,\n      enableNext: validateSystemsPage(systemIds),\n    },\n    {\n      id: 4,\n      name: 'Rules',\n      component: <EditPolicyRules />,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 4,\n      enableNext: validateRulesPage(selectedRuleRefIds),\n    },\n    {\n      id: 5,\n      name: 'Review',\n      component: <ReviewCreatedPolicy osMajorVersion={osMajorVersion} />,\n      nextButtonText: 'Finish',\n      canJumpTo:\n        validateRulesPage(selectedRuleRefIds) &&\n        systemIds?.length > 0 &&\n        stepIdReached >= 5,\n    },\n    {\n      id: 6,\n      name: 'Finished',\n      component: <FinishedCreatePolicy onWizardFinish={onClose} />,\n      isFinishedStep: true,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 6,\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <Wizard\n        width={1300}\n        className=\"compliance\"\n        isOpen\n        onNext={onNext}\n        onGoToStep={resetAnchor}\n        onBack={resetAnchor}\n        onClose={onClose}\n        title=\"Create SCAP policy\"\n        description=\"Create a new policy for managing SCAP compliance\"\n        steps={steps}\n      />\n    </React.Fragment>\n  );\n};\n\nCreatePolicyForm.propTypes = {\n  benchmark: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  complianceThreshold: propTypes.string,\n  businessObjective: propTypes.object,\n  dispatch: propTypes.func,\n  isOpen: propTypes.bool,\n  name: propTypes.string,\n  onWizardFinish: propTypes.func,\n  profile: propTypes.string,\n  refId: propTypes.string,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string),\n  systemIds: propTypes.arrayOf(propTypes.string),\n  reset: propTypes.func,\n};\n\nCreatePolicyForm.defaultProps = {\n  isOpen: false,\n};\n\nconst CreatePolicy = reduxForm({\n  form: 'policyForm',\n})(CreatePolicyForm);\n\nconst selector = formValueSelector('policyForm');\nexport default connect((state) => ({\n  benchmark: selector(state, 'benchmark'),\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  businessObjective: selector(state, 'businessObjective'),\n  complianceThreshold: selector(state, 'complianceThreshold') || 100,\n  name: selector(state, 'name'),\n  profile: selector(state, 'profile'),\n  refId: selector(state, 'refId'),\n  selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  systemIds: selector(state, 'systems'),\n}))(CreatePolicy);\n","import { Button, Checkbox, ModalVariant, Text } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport useNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\nimport { useMutation } from '@apollo/client';\nimport { DELETE_PROFILE } from 'Mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ComplianceModal } from 'PresentationalComponents';\nimport { dispatchAction } from 'Utilities/Dispatcher';\n\nconst DeletePolicy = () => {\n  const [deleteEnabled, setDeleteEnabled] = useState(false);\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const { name, id } = location.state.policy;\n  const onClose = () => {\n    navigate('/scappolicies');\n  };\n\n  const [deletePolicy] = useMutation(DELETE_PROFILE, {\n    onCompleted: () => {\n      dispatchAction(\n        addNotification({\n          variant: 'success',\n          title: `Deleted \"${name}\" and its associated reports`,\n        })\n      );\n      onClose();\n    },\n    onError: (error) => {\n      dispatchAction(\n        addNotification({\n          variant: 'danger',\n          title: 'Error removing policy',\n          description: error.message,\n        })\n      );\n      onClose();\n    },\n  });\n\n  return (\n    <ComplianceModal\n      variant={ModalVariant.small}\n      title=\"Delete policy?\"\n      titleIconVariant=\"warning\"\n      ouiaId=\"DeletePolicyModal\"\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"destroy\"\n          ouiaId=\"DeletePolicyButton\"\n          aria-label=\"delete\"\n          isDisabled={!deleteEnabled}\n          variant=\"danger\"\n          onClick={() => deletePolicy({ variables: { input: { id } } })}\n        >\n          Delete policy and associated reports\n        </Button>,\n        <Button\n          key=\"cancel\"\n          ouiaId=\"DeletePolicyCancelButton\"\n          variant=\"secondary\"\n          onClick={onClose}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <Text className=\"policy-delete-body-text\">\n        Deleting the policy <b>{name}</b> will also delete its associated\n        reports.\n      </Text>\n      <Checkbox\n        label=\"I understand this will delete the policy and all associated reports\"\n        id={`deleting-policy-check-${id}`}\n        isChecked={deleteEnabled}\n        onChange={setDeleteEnabled}\n      />\n    </ComplianceModal>\n  );\n};\n\nDeletePolicy.propTypes = {\n  policy: propTypes.object,\n};\n\nexport default DeletePolicy;\n","import { Button, ModalVariant, TextContent } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport useNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\nimport { useMutation } from '@apollo/client';\nimport { DELETE_REPORT } from 'Mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ComplianceModal } from 'PresentationalComponents';\nimport { dispatchAction } from 'Utilities/Dispatcher';\n\nconst DeleteReport = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { id } = location.state?.profile || {};\n  const onClose = () => {\n    history.push(location.state.background);\n  };\n\n  const onDelete = () => {\n    navigate('/reports');\n  };\n\n  const [deleteReport] = useMutation(DELETE_REPORT, {\n    onCompleted: () => {\n      dispatchAction(\n        addNotification({\n          variant: 'success',\n          title: 'Report deleted',\n          description:\n            'Systems associated with this policy will upload reports on the next check-in.',\n        })\n      );\n      onDelete();\n    },\n    onError: (error) => {\n      dispatchAction(\n        addNotification({\n          variant: 'danger',\n          title: 'Error removing report',\n          description: error.message,\n        })\n      );\n      onClose();\n    },\n  });\n  return (\n    <ComplianceModal\n      isOpen\n      variant={ModalVariant.small}\n      title=\"Delete report?\"\n      titleIconVariant=\"warning\"\n      ouiaId=\"DeleteReportModal\"\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"destroy\"\n          ouiaId=\"DeleteReportButton\"\n          aria-label=\"delete\"\n          variant=\"danger\"\n          onClick={() =>\n            deleteReport({\n              variables: {\n                input: {\n                  profileId: id,\n                },\n              },\n            })\n          }\n        >\n          Delete report\n        </Button>,\n        <Button\n          key=\"cancel\"\n          ouiaId=\"DeleteReportCancelButton\"\n          variant=\"secondary\"\n          onClick={() => onClose()}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        Deleting a report is permanent and cannot be undone.\n      </TextContent>\n    </ComplianceModal>\n  );\n};\n\nDeleteReport.propTypes = {\n  onClose: propTypes.func,\n  isModalOpen: propTypes.bool,\n  onDelete: propTypes.func,\n  policyId: propTypes.string,\n};\n\nDeleteReport.defaultProps = {\n  onDelete: () => {},\n  onClose: () => {},\n};\n\nexport default DeleteReport;\n","import gql from 'graphql-tag';\n\nexport const BENCHMARKS_QUERY = gql`\n  query EP_Benchmarks($filter: String!, $enableRuleTree: Boolean = false) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        ruleTree @include(if: $enableRuleTree)\n        valueDefinitions {\n          defaultValue\n          description\n          id\n          refId\n          title\n          valueType\n        }\n        profiles {\n          id\n          refId\n          ssgVersion\n        }\n      }\n    }\n  }\n`;\n\nexport const MULTIVERSION_QUERY = gql`\n  query EP_Profile($policyId: String!, $enableRuleTree: Boolean = false) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      external\n      description\n      totalHostCount\n      compliantHostCount\n      complianceThreshold\n      osMajorVersion\n      supportedOsVersions\n      lastScanned\n      policyType\n      policy {\n        id\n        name\n        refId\n        profiles {\n          id\n          parentProfileId\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          values\n          benchmark {\n            id\n            title\n            latestSupportedOsMinorVersions\n            osMajorVersion\n            version\n            ruleTree @include(if: $enableRuleTree)\n          }\n          rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n            values\n          }\n        }\n      }\n      businessObjective {\n        id\n        title\n      }\n      hosts {\n        id\n        osMinorVersion\n        osMajorVersion\n      }\n    }\n  }\n`;\n\nexport const RULE_VALUE_DEFINITIONS_QUERY = gql`\n  query EP_ProfileValueDefinitions(\n    $policyId: String!\n    $enableRuleTree: Boolean = false\n  ) {\n    profile(id: $policyId) {\n      id\n      policy {\n        id\n        refId\n        profiles {\n          id\n          parentProfileId\n          refId\n          benchmark {\n            id\n            ruleTree @include(if: $enableRuleTree)\n            valueDefinitions {\n              defaultValue\n              description\n              id\n              refId\n              title\n              valueType\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  Text,\n  TextContent,\n  Title,\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport { sortingByProp } from 'Utilities/helpers';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\nimport { BENCHMARKS_QUERY } from './constants';\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst EditPolicyRulesTabEmptyState = () => (\n  <EmptyState>\n    <Title headingLevel=\"h5\" size=\"lg\">\n      No rules can be configured\n    </Title>\n    <EmptyStateBody>\n      This policy has no associated systems, and therefore no rules can be\n      configured.\n    </EmptyStateBody>\n    <EmptyStateBody>\n      Add at least one system to configure rules for this policy.\n    </EmptyStateBody>\n  </EmptyState>\n);\n\nexport const toTabsData = (policy, osMinorVersionCounts, benchmarks) =>\n  Object.values(osMinorVersionCounts)\n    .sort(sortingByProp('osMinorVersion', 'desc'))\n    .map(({ osMinorVersion, count: systemCount }) => {\n      osMinorVersion = `${osMinorVersion}`;\n      let profile = policy.policy.profiles.find(\n        (profile) => profile.osMinorVersion === osMinorVersion\n      );\n      let osMajorVersion = policy.osMajorVersion;\n\n      if (!profile && benchmarks) {\n        const benchmark = getBenchmarkBySupportedOsMinor(\n          benchmarks,\n          osMinorVersion\n        );\n        if (benchmark) {\n          const benchmarkProfile = getBenchmarkProfile(benchmark, policy.refId);\n          if (benchmarkProfile) {\n            profile = policy.policy.profiles.find(\n              (profile) =>\n                profile.parentProfileId === benchmarkProfile.id &&\n                profile.osMinorVersion === osMinorVersion\n            );\n\n            profile = {\n              ...benchmarkProfile,\n              benchmark,\n              osMajorVersion,\n              ...profile,\n            };\n          }\n        }\n      }\n\n      return {\n        profile,\n        systemCount,\n        newOsMinorVersion: osMinorVersion,\n      };\n    })\n    .filter(({ profile, newOsMinorVersion }) => !!profile && newOsMinorVersion);\n\nexport const EditPolicyRulesTab = ({\n  policy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  osMinorVersionCounts,\n  setRuleValues,\n  ruleValues: ruleValuesProp,\n}) => {\n  const osMajorVersion = policy?.osMajorVersion;\n  const osMinorVersions = Object.keys(osMinorVersionCounts).sort();\n  const benchmarkSearch =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const {\n    data: benchmarksData,\n    error,\n    loading,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter: benchmarkSearch,\n    },\n    skip: osMinorVersions.length === 0,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  const tabsData = toTabsData(policy, osMinorVersionCounts, benchmarks);\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n\n  const dataState = !loading && tabsData?.length > 0 ? tabsData : undefined;\n\n  useEffect(() => {\n    if (policy.policy.profiles) {\n      const profiles = policy.policy.profiles;\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      setSelectedRuleRefIds((prevSelection) => {\n        const newSelection = profilesWithRulesToSelection(\n          profilesWithOs,\n          prevSelection\n        );\n        return newSelection;\n      });\n    }\n  }, [policy.policy.profiles]);\n\n  const ruleValues = (policy) => {\n    const mergeValues = (policyId, values) => {\n      return {\n        ...values,\n        ...(ruleValuesProp?.[policyId] || {}),\n      };\n    };\n\n    return Object.fromEntries(\n      policy?.policy?.profiles?.map(\n        ({ id, values, benchmark: { valueDefinitions } }) => [\n          id,\n          mergeValues(id, values, valueDefinitions),\n        ]\n      ) || []\n    );\n  };\n\n  return (\n    <StateViewWithError\n      stateValues={{\n        error,\n        data: !error && dataState,\n        loading,\n        empty: !loading && !dataState && !error,\n      }}\n    >\n      <StateViewPart stateKey=\"loading\">\n        <EmptyTable>\n          <Spinner />\n        </EmptyTable>\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <TextContent>\n          <Text>\n            Different release versions of RHEL are associated with different\n            versions of the SCAP Security Guide (SSG), therefore each release\n            must be customized independently.\n          </Text>\n        </TextContent>\n        {tabsData.length > 0 && (\n          <TabbedRules\n            resetLink\n            rulesPageLink\n            selectedFilter\n            remediationsEnabled={false}\n            columns={[Columns.Name, Columns.Severity, Columns.Remediation]}\n            tabsData={tabsData}\n            ruleValues={ruleValues(policy)}\n            selectedRuleRefIds={selectedRuleRefIds}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            setRuleValues={setRuleValues}\n            level={1}\n            ouiaId=\"RHELVersions\"\n          />\n        )}\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">\n        <EditPolicyRulesTabEmptyState />\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nEditPolicyRulesTab.propTypes = {\n  setNewRuleTabs: propTypes.func,\n  policy: propTypes.object,\n  osMinorVersionCounts: propTypes.shape({\n    osMinorVersion: propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    }),\n  }),\n  selectedRuleRefIds: propTypes.array,\n  setSelectedRuleRefIds: propTypes.func,\n  setRuleValues: propTypes.func,\n  ruleValues: propTypes.array,\n};\n\nexport default EditPolicyRulesTab;\n","import React from 'react';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { SystemsTable } from 'SmartComponents';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>Connect RHEL {osMajorVersion} systems to Insights.</Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst EditPolicySystemsTab = ({ policy, onSystemSelect, selectedSystems }) => {\n  const { id: policyId, osMajorVersion, supportedOsVersions } = policy;\n  const osMinorVersions = supportedOsVersions.map(\n    (version) => version.split('.')[1]\n  );\n  const osFilter =\n    osMajorVersion &&\n    `os_major_version = ${osMajorVersion} AND os_minor_version ^ (${osMinorVersions.join(\n      ','\n    )})`;\n  const defaultFilter = osFilter\n    ? `${osFilter} or policy_id = ${policyId}`\n    : `policy_id = ${policyId}`;\n\n  return (\n    <React.Fragment>\n      <SystemsTable\n        columns={[\n          Columns.Name,\n          Columns.inventoryColumn('tags'),\n          Columns.OperatingSystem,\n        ]}\n        showOsMinorVersionFilter={[osMajorVersion]}\n        prependComponent={<PrependComponent osMajorVersion={osMajorVersion} />}\n        emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n        compact\n        showActions={false}\n        defaultFilter={defaultFilter}\n        enableExport={false}\n        remediationsEnabled={false}\n        preselectedSystems={selectedSystems}\n        onSelect={onSystemSelect}\n      />\n    </React.Fragment>\n  );\n};\n\nEditPolicySystemsTab.propTypes = {\n  policy: propTypes.object,\n  newRuleTabs: propTypes.bool,\n  onSystemSelect: propTypes.func,\n  selectedSystems: propTypes.array,\n};\n\nexport default EditPolicySystemsTab;\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport useNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\n\nimport { Alert, AlertActionLink } from '@patternfly/react-core';\n\nconst NewRulesAlert = () => {\n  const navigate = useNavigate();\n\n  const location = useLocation();\n\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title=\"You selected a system that has a release version previously not included in this policy.\"\n      actionLinks={\n        <AlertActionLink\n          onClick={() => navigate({ ...location, hash: '#rules' })}\n        >\n          Open rule editing\n        </AlertActionLink>\n      }\n    >\n      <p>\n        If you have edited any rules for this policy, you will need to do so for\n        this release version as well.\n      </p>\n    </Alert>\n  );\n};\n\nexport default NewRulesAlert;\n","import React, { useCallback, useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { Form, Tab, TabTitleText } from '@patternfly/react-core';\nimport { RoutedTabs } from 'PresentationalComponents';\nimport EditPolicyRulesTab from './EditPolicyRulesTab';\nimport EditPolicySystemsTab from './EditPolicySystemsTab';\nimport NewRulesAlert from './components/NewRulesAlert';\nimport { mapCountOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport { profilesWithRulesToSelection } from 'PresentationalComponents/TabbedRules';\nimport { thresholdValid } from '../CreatePolicy/validate';\nimport { useNewRulesAlertState } from './hooks/index';\n\nconst profilesToOsMinorMap = (profiles, hosts) =>\n  (profiles || []).reduce((acc, profile) => {\n    if (profile.osMinorVersion !== '') {\n      acc[profile.osMinorVersion] ||= {\n        osMinorVersion: profile.osMinorVersion,\n        count: 0,\n      };\n    }\n\n    return acc;\n  }, mapCountOsMinorVersions(hosts || []));\n\nconst EditPolicyForm = ({\n  policy,\n  setUpdatedPolicy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  selectedSystems,\n  setSelectedSystems,\n  setRuleValues,\n  ruleValues,\n}) => {\n  const policyProfiles = policy?.policy?.profiles || [];\n  const [osMinorVersionCounts, setOsMinorVersionCounts] = useState({});\n  const [newRulesAlert, setNewRulesAlert] = useNewRulesAlertState(false);\n\n  const handleSystemSelect = useCallback(\n    (newSelectedSystems) => {\n      const policyMinorVersions = policy.hosts.map(\n        ({ osMinorVersion }) => osMinorVersion\n      );\n      const hasNewOsMinorVersions =\n        newSelectedSystems.filter(\n          ({ osMinorVersion }) => !policyMinorVersions.includes(osMinorVersion)\n        ).length > 0;\n\n      setSelectedSystems(newSelectedSystems);\n      setNewRulesAlert(hasNewOsMinorVersions);\n      setOsMinorVersionCounts(\n        profilesToOsMinorMap(policyProfiles, newSelectedSystems)\n      );\n    },\n    [policyProfiles, selectedRuleRefIds]\n  );\n\n  useEffect(() => {\n    if (policy) {\n      const complianceThresholdValid = thresholdValid(\n        policy.complianceThreshold\n      );\n      const profilesWithOsMinor = policyProfiles.filter(\n        ({ osMinorVersion }) => !!osMinorVersion\n      );\n      setUpdatedPolicy({\n        ...policy,\n        complianceThresholdValid,\n      });\n\n      setSelectedRuleRefIds(profilesWithRulesToSelection(profilesWithOsMinor));\n      handleSystemSelect(policy.hosts);\n    }\n  }, [policy]);\n\n  return (\n    <Form>\n      <RoutedTabs ouiaId=\"EditSystems\" defaultTab=\"systems\" id=\"policy-tabs\">\n        <Tab\n          eventKey=\"rules\"\n          ouiaId=\"Rules\"\n          title={<TabTitleText>Rules</TabTitleText>}\n        >\n          <EditPolicyRulesTab\n            policy={policy}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            setRuleValues={setRuleValues}\n            ruleValues={ruleValues}\n            selectedRuleRefIds={selectedRuleRefIds}\n            osMinorVersionCounts={osMinorVersionCounts}\n          />\n        </Tab>\n        <Tab\n          eventKey=\"systems\"\n          ouiaId=\"Systems\"\n          title={<TabTitleText>Systems</TabTitleText>}\n        >\n          <EditPolicySystemsTab\n            policy={policy}\n            selectedSystems={selectedSystems}\n            onSystemSelect={handleSystemSelect}\n          />\n          {newRulesAlert && <NewRulesAlert />}\n        </Tab>\n      </RoutedTabs>\n    </Form>\n  );\n};\n\nEditPolicyForm.propTypes = {\n  policy: propTypes.object,\n  updatedPolicy: propTypes.object,\n  setUpdatedPolicy: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.object),\n  setSelectedRuleRefIds: propTypes.func,\n  setSelectedSystems: propTypes.func,\n  selectedSystems: propTypes.array,\n  setRuleValues: propTypes.func,\n  ruleValues: propTypes.array,\n};\n\nexport default EditPolicyForm;\n","import { useState } from 'react';\n\nexport const useNewRulesAlertState = (...args) => useState(...args);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Spinner } from '@patternfly/react-core';\nimport { useParams } from 'react-router-dom';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport {\n  ComplianceModal,\n  StateViewWithError,\n  StateViewPart,\n} from 'PresentationalComponents';\nimport EditPolicyForm from './EditPolicyForm';\nimport { useOnSave, useLinkToPolicy } from './hooks';\nimport usePolicyQuery from 'Utilities/hooks/usePolicyQuery';\n\nexport const EditPolicy = ({ route }) => {\n  const { policy_id: policyId } = useParams();\n  const { data, error, loading } = usePolicyQuery({ policyId });\n  const policy = data?.profile;\n\n  const linkToPolicy = useLinkToPolicy();\n  const [updatedPolicy, setUpdatedPolicy] = useState(null);\n  const [selectedRuleRefIds, setSelectedRuleRefIds] = useState([]);\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const [ruleValues, setRuleValuesState] = useState({});\n\n  const saveEnabled = updatedPolicy && !updatedPolicy.complianceThresholdValid;\n  const updatedPolicyHostsAndRules = {\n    ...updatedPolicy,\n    selectedRuleRefIds,\n    hosts: selectedSystems,\n    values: ruleValues,\n  };\n  const [isSaving, onSave] = useOnSave(policy, updatedPolicyHostsAndRules);\n\n  const setRuleValues = (policyId, valueDefinition, valueValue) => {\n    const existingValues = Object.fromEntries(\n      policy?.policy.profiles.map((profile) => {\n        return [profile.id, profile.values];\n      }) || []\n    );\n\n    setRuleValuesState((currentValues) => ({\n      ...existingValues,\n      ...currentValues,\n      [policyId]: {\n        ...existingValues[policyId],\n        ...currentValues[policyId],\n        [valueDefinition.id]: valueValue,\n      },\n    }));\n  };\n\n  const actions = [\n    <Button\n      isDisabled={saveEnabled}\n      key=\"save\"\n      ouiaId=\"EditPolicySaveButton\"\n      variant=\"primary\"\n      spinnerAriaValueText=\"Saving\"\n      isLoading={isSaving}\n      onClick={onSave}\n    >\n      Save\n    </Button>,\n    <Button\n      key=\"cancel\"\n      ouiaId=\"EditPolicyCancelButton\"\n      variant=\"link\"\n      onClick={() => linkToPolicy()}\n    >\n      Cancel\n    </Button>,\n  ];\n\n  useTitleEntity(route, policy?.name);\n\n  return (\n    <ComplianceModal\n      isOpen\n      position={'top'}\n      style={{ minHeight: '350px' }}\n      width={1220}\n      variant={'large'}\n      ouiaId=\"EditPolicyModal\"\n      title={`Edit ${policy ? policy.name : ''}`}\n      onClose={() => linkToPolicy()}\n      actions={actions}\n    >\n      <StateViewWithError stateValues={{ policy, loading, error }}>\n        <StateViewPart stateKey=\"loading\">\n          <Spinner />\n        </StateViewPart>\n        <StateViewPart stateKey=\"policy\">\n          <EditPolicyForm\n            {...{\n              policy,\n              updatedPolicy,\n              setUpdatedPolicy,\n              selectedRuleRefIds,\n              setSelectedRuleRefIds,\n              selectedSystems,\n              setSelectedSystems,\n              setRuleValues,\n              ruleValues,\n            }}\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </ComplianceModal>\n  );\n};\n\nEditPolicy.propTypes = {\n  route: propTypes.object,\n};\n\nexport default EditPolicy;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\n\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Truncate from '@redhat-cloud-services/frontend-components/Truncate';\nimport {\n  UnsupportedSSGVersion,\n  ComplianceScore as PresentationalComplianceScore,\n  LinkWithPermission as Link,\n} from 'PresentationalComponents';\nimport {\n  // profilesRulesFailed,\n  complianceScoreData,\n  NEVER,\n} from 'Utilities/ruleHelpers';\n\nconst SystemLink = ({ id, children }) => (\n  <Link to={{ pathname: `/systems/${id}` }}>{children}</Link>\n);\n\nSystemLink.propTypes = {\n  id: propTypes.string,\n  children: propTypes.node,\n};\n\nexport const Name = ({\n  id,\n  name,\n  osMajorVersion,\n  osMinorVersion,\n  showOsInfo = false,\n  showLink = false,\n}) => {\n  const hasOsInfo = (osMajorVersion, osMinorVersion) =>\n    !!osMajorVersion && !!osMinorVersion && showOsInfo;\n\n  return (\n    <TextContent>\n      {showLink ? <SystemLink {...{ id }}>{name}</SystemLink> : name}\n\n      {hasOsInfo(osMajorVersion, osMinorVersion) && (\n        <Text component={TextVariants.small}>\n          RHEL {osMajorVersion}.{osMinorVersion}\n        </Text>\n      )}\n    </TextContent>\n  );\n};\n\nName.propTypes = {\n  id: propTypes.string,\n  name: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersion: propTypes.string,\n  showOsInfo: propTypes.bool,\n  showLink: propTypes.bool,\n};\n\nexport const profilesSsgVersions = (profiles) =>\n  profiles\n    .map((p) => p.ssgVersion)\n    .filter((version) => !!version)\n    .join(', ');\n\nexport const SSGVersion = ({ ssgVersion = 'Not available', supported }) =>\n  supported ? (\n    ssgVersion\n  ) : (\n    <UnsupportedSSGVersion messageVariant=\"singular\">\n      {ssgVersion}\n    </UnsupportedSSGVersion>\n  );\n\nSSGVersion.propTypes = {\n  supported: propTypes.bool,\n  ssgVersion: propTypes.string,\n};\n\nexport const SSGVersions = ({ testResultProfiles = [] }) =>\n  testResultProfiles.length !== 0\n    ? testResultProfiles.map((profile) => (\n        <SSGVersion\n          key={`ssgversion-${profile.id}`}\n          ssgVersion={profile?.benchmark?.version}\n          supported={profile?.supported}\n        />\n      ))\n    : 'Unknown';\n\nSSGVersions.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const Policies = ({ policies }) =>\n  (policies || []).length > 0 && (\n    <Truncate\n      inline\n      text={policies.map((p) => p.name).join(', ')}\n      length={215}\n    />\n  );\n\nPolicies.propTypes = {\n  policies: propTypes.array,\n};\n\nexport const FailedRules = ({ id, testResultProfiles }) => {\n  const rulesFailed = testResultProfiles.reduce(\n    (acc, { rulesFailed }) => acc + parseInt(rulesFailed || 0),\n    0\n  );\n\n  return (\n    <SystemLink {...{ id }}>{rulesFailed > 0 ? rulesFailed : 'N/A'}</SystemLink>\n  );\n};\n\nFailedRules.propTypes = {\n  id: propTypes.string,\n  testResultProfiles: propTypes.array,\n};\n\nexport { complianceScoreData };\nexport const ComplianceScore = ({ testResultProfiles }) => {\n  const { score, supported, compliant } = testResultProfiles[0] || {};\n  return testResultProfiles.length > 0 ? (\n    <PresentationalComplianceScore {...{ score, supported, compliant }} />\n  ) : (\n    'N/A'\n  );\n};\n\nComplianceScore.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nconst NeverScanned = () => (\n  <Tooltip\n    position=\"right\"\n    content={\n      <Fragment>\n        This system has never returned a report for this policy. This may be\n        because it is disconnected, or the insights-client on this system is not\n        configured to use Compliance.\n      </Fragment>\n    }\n  >\n    <div>\n      <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n      {' ' + NEVER}\n    </div>\n  </Tooltip>\n);\n\nexport const lastScanned = (profiles) => {\n  const dates = profiles.map((profile) => new Date(profile.lastScanned));\n  const last = new Date(\n    Math.max.apply(\n      null,\n      dates.filter((date) => isFinite(date))\n    )\n  );\n  const result =\n    last instanceof Date && isFinite(last) ? last : <NeverScanned />;\n\n  return result;\n};\n\nexport const LastScanned = ({ testResultProfiles: profiles }) => {\n  const lastScannedDate = lastScanned(profiles || []);\n\n  return lastScannedDate instanceof Date ? (\n    <DateFormat date={Date.parse(lastScannedDate)} type=\"relative\" />\n  ) : (\n    lastScannedDate\n  );\n};\n\nLastScanned.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const operatingSystemString = ({ osMinorVersion, osMajorVersion }) =>\n  `RHEL ${osMajorVersion}.${osMinorVersion}`;\n\nexport const OperatingSystem = (system) => operatingSystemString(system);\n","import React from 'react';\nimport { nowrap } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport { complianceScoreString } from 'PresentationalComponents';\nimport { renderComponent } from 'Utilities/helpers';\n\nimport {\n  Name as NameCell,\n  ComplianceScore as ComplianceScoreCell,\n  FailedRules as FailedRulesCell,\n  LastScanned as LastScannedCell,\n  Policies as PoliciesCell,\n  SSGVersions as SsgVersionCell,\n  complianceScoreData,\n  lastScanned,\n  operatingSystemString,\n  OperatingSystem as OperatingSystemCell,\n} from './Cells';\n\nconst disableSorting = { isStatic: true };\n\nexport const compileColumnRenderFunc = ({ cell, ...column }) => ({\n  ...column,\n  renderFunc: renderComponent(cell, column.props),\n});\n\nexport const customColumn = (column, props) =>\n  compileColumnRenderFunc({\n    ...column,\n    props: {\n      ...column.props,\n      ...props,\n    },\n  });\n\nexport const Name = compileColumnRenderFunc({\n  key: 'name',\n  title: 'Name',\n  sortBy: ['name'],\n  props: {\n    width: 40,\n  },\n  renderExport: (system) => `${system.name} (${operatingSystemString(system)})`,\n  cell: NameCell,\n});\n\nexport const customName = (props) => ({\n  ...Name,\n  props: {\n    ...Name.props,\n    ...props,\n  },\n  renderFunc: renderComponent(NameCell, props),\n});\n\nexport const SsgVersion = {\n  title: 'SSG version',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  sortBy: ['ssg_version'],\n  key: 'ssg_version',\n  renderExport: (testResultProfiles) =>\n    testResultProfiles\n      .map(\n        ({ supported, benchmark: { version } }) =>\n          `${!supported ? '!' : ''}${version}`\n      )\n      .join(', '),\n  renderFunc: renderComponent(SsgVersionCell),\n};\n\nexport const Policies = {\n  title: 'Policies',\n  transforms: [nowrap],\n  key: 'policies',\n  exportKey: 'policies',\n  renderExport: (policies) => policies.map(({ name }) => name).join(', '),\n  props: {\n    width: 40,\n    ...disableSorting,\n  },\n  renderFunc: renderComponent(PoliciesCell),\n};\n\nexport const FailedRules = {\n  title: 'Failed rules',\n  key: 'failedRules',\n  exportKey: 'profiles',\n  transforms: [nowrap],\n  props: {\n    width: 5,\n    ...disableSorting,\n  },\n  renderExport: (profiles) =>\n    profiles.reduce(\n      (failedRules, { rulesFailed }) => failedRules + rulesFailed,\n      0\n    ),\n  renderFunc: renderComponent(FailedRulesCell),\n};\n\nexport const ComplianceScore = {\n  title: 'Compliance score',\n  key: 'complianceScore',\n  exportKey: 'testResultProfiles',\n  transforms: [nowrap],\n  props: {\n    width: 5,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) =>\n    complianceScoreString(complianceScoreData(testResultProfiles)).trim(),\n  renderFunc: renderComponent(ComplianceScoreCell),\n};\n\nexport const LastScanned = {\n  title: 'Last scanned',\n  key: 'lastScanned',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  props: {\n    width: 10,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) => lastScanned(testResultProfiles),\n  renderFunc: renderComponent(LastScannedCell),\n};\n\nexport const OperatingSystem = compileColumnRenderFunc({\n  title: 'Operating system',\n  key: 'operatingSystem',\n  sortBy: ['osMajorVersion', 'osMinorVersion'],\n  transforms: [nowrap],\n  renderExport: (cell) => operatingSystemString(cell),\n  cell: OperatingSystemCell,\n});\n\nexport const OS = compileColumnRenderFunc({\n  title: (\n    <Tooltip content={<span>Operating System</span>}>\n      <span>OS</span>\n    </Tooltip>\n  ),\n  original: 'Operating System',\n  key: 'operatingSystem',\n  dataLabel: 'OS',\n  transforms: [nowrap],\n  sortBy: ['osMajorVersion', 'osMinorVersion'],\n  props: {\n    width: 10,\n  },\n  renderExport: (cell) => operatingSystemString(cell),\n  cell: OperatingSystemCell,\n});\n\nexport const inventoryColumn = (column, props) => ({\n  key: column,\n  ...props,\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Skeleton, {\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { init } from 'Store';\n\nimport {\n  DetailWrapper,\n  InventoryDetailHead,\n} from '@redhat-cloud-services/frontend-components/Inventory';\n\nconst InventoryDetails = ({ inventoryId }) => {\n  return (\n    <DetailWrapper\n      onLoad={({ mergeWithDetail }) =>\n        init().register({\n          ...mergeWithDetail(),\n        })\n      }\n      inventoryId={inventoryId}\n    >\n      <InventoryDetailHead fallback={<Skeleton size={SkeletonSize.md} />} />\n    </DetailWrapper>\n  );\n};\n\nInventoryDetails.propTypes = {\n  inventoryId: propTypes.string,\n};\n\nexport default InventoryDetails;\n","import { gql } from 'graphql-tag';\n\nexport const DEFAULT_SYSTEMS_PER_BATCH = 3;\nexport const DEFAULT_CONNCURRENT_REQUESTS_FOR_ISSUES = 3;\n\nexport const GET_SYSTEMS_ISSUES = gql`\n  query CRB_Systems(\n    $filter: String!\n    $policyId: ID\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          testResultProfiles(policyId: $policyId) {\n            id\n            refId\n            score\n            lastScanned\n            compliant\n            rulesFailed\n            rulesPassed\n            supported\n            osMajorVersion\n            rules {\n              id\n              refId\n              precedence\n              compliant\n              remediationAvailable\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\nimport { default as RemediationRemediationButton } from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport { useIssuesFetch } from './hooks';\nimport FallbackButton from './components/FallBackButton';\n\nconst RemediationButton = ({\n  rules,\n  systems,\n  policyId,\n  onRemediationCreated,\n  ...buttonProps\n}) => {\n  const { isLoading: isLoadingIssues, fetch } = useIssuesFetch(\n    policyId,\n    rules,\n    systems\n  );\n\n  return (\n    <RemediationRemediationButton\n      isDisabled={systems?.length === 0 || isLoadingIssues}\n      onRemediationCreated={(result) => {\n        dispatchNotification(result.getNotification());\n      }}\n      dataProvider={fetch}\n      buttonProps={{\n        ouiaId: 'RemediateButton',\n        isLoading: isLoadingIssues,\n      }}\n      fallback={<FallbackButton />}\n      {...buttonProps}\n    >\n      Remediate\n    </RemediationRemediationButton>\n  );\n};\n\nRemediationButton.propTypes = {\n  rules: propTypes.array,\n  systems: propTypes.array,\n  onRemediationCreated: propTypes.func,\n  policyId: propTypes.string,\n};\n\nexport default RemediationButton;\n","import { useCallback } from 'react';\nimport { useApolloClient } from '@apollo/client';\nimport usePromiseQueue from 'Utilities/hooks/usePromiseQueue';\nimport {\n  GET_SYSTEMS_ISSUES,\n  DEFAULT_SYSTEMS_PER_BATCH,\n  DEFAULT_CONNCURRENT_REQUESTS_FOR_ISSUES,\n} from './constants';\nimport { remediationData } from './helpers';\n\nexport const useIssuesFetch = (policyId, rules, systems) => {\n  const client = useApolloClient();\n  const { isResolving, results, resolve } = usePromiseQueue(\n    DEFAULT_CONNCURRENT_REQUESTS_FOR_ISSUES\n  );\n\n  const fetchFunction = useCallback(\n    async (perPage, page) => {\n      const systemIds =\n        systems.length > 0 ? `id ^ (${systems.join(',')})` : undefined;\n\n      return (\n        await client.query({\n          query: GET_SYSTEMS_ISSUES,\n          fetchPolicy: 'no-cache',\n          variables: {\n            perPage,\n            page,\n            filter: `(${systemIds}) AND policy_id = ${policyId}`,\n            policyId,\n          },\n        })\n      ).data.systems;\n    },\n    [systems, policyId]\n  );\n\n  const fetch = useCallback(\n    async (batchSize = DEFAULT_SYSTEMS_PER_BATCH) => {\n      const pages = Math.ceil(systems?.length / batchSize) || 1;\n      const results = await resolve(\n        [...new Array(pages)].map(\n          (_, pageIdx) => () => fetchFunction(batchSize, pageIdx + 1)\n        )\n      );\n\n      return results && remediationData(results);\n    },\n    [systems]\n  );\n\n  return {\n    isLoading: isResolving,\n    data: results && remediationData(results),\n    fetch,\n  };\n};\n","import gql from 'graphql-tag';\nimport pickBy from 'lodash/pickBy';\nimport {\n  systemsPolicyFilterConfiguration,\n  systemsOsFilterConfiguration,\n  systemsOsMinorFilterConfiguration,\n} from '@/constants';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { entitiesReducer } from 'Store/Reducers/SystemStore';\n\nexport const GET_MINIMAL_SYSTEMS = gql`\n  query ST_Systems(\n    $filter: String!\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n          osMinorVersion\n          culledTimestamp\n          staleWarningTimestamp\n          staleTimestamp\n          insightsId\n          lastScanned\n          updated\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_SYSTEMS_OSES = gql`\n  query ST_SystemOS($filter: String!) {\n    systems(search: $filter) {\n      osVersions\n    }\n  }\n`;\n\nexport const policyFilter = (policies, osFilter) => [\n  ...systemsPolicyFilterConfiguration(policies),\n  ...(osFilter ? systemsOsFilterConfiguration(policies) : []),\n];\n\nexport const osMinorVersionFilter = (...args) =>\n  systemsOsMinorFilterConfiguration(...args);\n\nexport const initFilterState = (filterConfig) =>\n  pickBy(filterConfig.initialDefaultState(), (value) => !!value);\n\nexport const defaultOnLoad =\n  (columns) =>\n  ({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n    getRegistry().register({\n      ...mergeWithEntities(entitiesReducer(INVENTORY_ACTION_TYPES, columns)),\n    });\n\nexport const ssgVersionFilter = (ssgVersions) => [\n  {\n    type: conditionalFilterType.checkbox,\n    label: 'SSG Version',\n    filterString: (value) => `ssg_version = ${value}`,\n    items: ssgVersions.map((ssgVersion) => ({\n      label: ssgVersion,\n      value: ssgVersion,\n    })),\n  },\n];\n","import React, { useEffect, useLayoutEffect, useState } from 'react';\nimport { useApolloClient, useQuery } from '@apollo/client';\nimport { useDispatch } from 'react-redux';\nimport { Spinner } from '@patternfly/react-core';\nimport debounce from '@redhat-cloud-services/frontend-components-utilities/debounce';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport { osMinorVersionFilter, GET_SYSTEMS_OSES } from './constants';\nimport useExport from 'Utilities/hooks/useTableTools/useExport';\nimport { useBulkSelect } from 'Utilities/hooks/useTableTools/useBulkSelect';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\nimport usePromiseQueue from 'Utilities/hooks/usePromiseQueue';\n\nconst groupByMajorVersion = (versions = [], showFilter = []) => {\n  const showVersion = (version) => {\n    if (showFilter.length > 0) {\n      return showFilter.map(String).includes(String(version));\n    } else {\n      return true;\n    }\n  };\n\n  return versions.reduce((acc, currentValue) => {\n    if (showVersion(currentValue.major)) {\n      acc[String(currentValue.major)] = [\n        ...new Set([...(acc[currentValue.major] || []), currentValue.minor]),\n      ];\n    }\n\n    return acc;\n  }, []);\n};\n\nexport const useOsMinorVersionFilter = (showFilter, fetchArguments = {}) => {\n  let { data } = useQuery(GET_SYSTEMS_OSES, {\n    skip: !showFilter,\n    ...fetchArguments,\n  });\n  const { osVersions } = data?.systems || {};\n\n  return showFilter\n    ? osMinorVersionFilter(groupByMajorVersion(osVersions, showFilter))\n    : [];\n};\n\nexport const useSystemsFilter = (\n  filterString,\n  showOnlySystemsWithTestResults,\n  defaultFilter\n) => {\n  const combindedFilter = [\n    ...(showOnlySystemsWithTestResults ? ['has_test_results = true'] : []),\n    ...(filterString?.length > 0 ? [filterString] : []),\n  ].join(' and ');\n  const filter = defaultFilter\n    ? `(${defaultFilter})` +\n      (combindedFilter ? ` and (${combindedFilter})` : '')\n    : combindedFilter;\n\n  return filter;\n};\n\nconst renameInventoryAttributes = ({\n  culledTimestamp,\n  staleWarningTimestamp,\n  staleTimestamp,\n  insightsId,\n  ...system\n}) => ({\n  ...system,\n  insights_id: insightsId,\n  culled_timestamp: culledTimestamp,\n  stale_warning_timestamp: staleWarningTimestamp,\n  stale_timestamp: staleTimestamp,\n});\n\nexport const useFetchSystems = ({\n  query,\n  onComplete,\n  variables = {},\n  onError,\n}) => {\n  const client = useApolloClient();\n\n  return (perPage, page, requestVariables = {}) =>\n    client\n      .query({\n        query,\n        fetchResults: true,\n        fetchPolicy: 'no-cache',\n        variables: {\n          perPage,\n          page,\n          ...variables,\n          ...requestVariables,\n        },\n      })\n      .then(({ data }) => {\n        const systems = data?.systems?.edges?.map((e) => e.node) || [];\n        const entities = systemsWithRuleObjectsFailed(systems).map(\n          renameInventoryAttributes\n        );\n        const result = {\n          entities,\n          meta: {\n            ...(requestVariables.tags && { tags: requestVariables.tags }),\n            totalCount: data?.systems?.totalCount || 0,\n          },\n        };\n\n        onComplete && onComplete(result);\n        return result;\n      })\n      .catch((error) => {\n        if (onError) {\n          onError(error);\n          return { entities: [], meta: { totalCount: 0 } };\n        } else {\n          throw error;\n        }\n      });\n};\n\nconst useFetchBatched = () => {\n  const { isResolving: isLoading, resolve } = usePromiseQueue();\n\n  return {\n    isLoading,\n    fetchBatched: (fetchFunction, total, filter, batchSize = 50) => {\n      const pages = Math.ceil(total / batchSize) || 1;\n\n      const results = resolve(\n        [...new Array(pages)].map(\n          (_, pageIdx) => () => fetchFunction(batchSize, pageIdx + 1, filter)\n        )\n      );\n\n      return results;\n    },\n  };\n};\n\nconst buildApiFilters = (filters = {}) => {\n  const { tagFilters, ...otherFilters } = filters;\n  const tagsApiFilter = tagFilters\n    ? {\n        tags: tagFilters.flatMap((tagFilter) =>\n          tagFilter.values.map(\n            (tag) =>\n              `${encodeURIComponent(tagFilter.key)}/${encodeURIComponent(\n                tag.tagKey\n              )}=${encodeURIComponent(tag.value)}`\n          )\n        ),\n      }\n    : {};\n\n  return {\n    ...otherFilters,\n    ...tagsApiFilter,\n  };\n};\n\nexport const useGetEntities = (fetchEntities, { selected, columns } = {}) => {\n  const appendDirection = (attributes, direction) =>\n    attributes.map((attribute) => `${attribute}:${direction}`);\n\n  const findColumnByKey = (key) =>\n    (columns || []).find((column) => column.key === key);\n\n  return async (\n    _ids,\n    { page = 1, per_page: perPage, orderBy, orderDirection, filters }\n  ) => {\n    const sortableColumn = findColumnByKey(orderBy);\n    const sortBy =\n      sortableColumn && sortableColumn.sortBy\n        ? appendDirection(sortableColumn.sortBy, orderDirection)\n        : undefined;\n    const filterForApi = buildApiFilters(filters);\n\n    const fetchedEntities = await fetchEntities(perPage, page, {\n      ...filterForApi,\n      sortBy,\n    });\n    const {\n      entities,\n      meta: { totalCount },\n    } = fetchedEntities || {};\n\n    return {\n      results: entities.map((entity) => ({\n        ...entity,\n        selected: (selected || []).map((id) => id).includes(entity.id),\n      })),\n      orderBy,\n      orderDirection,\n      total: totalCount,\n    };\n  };\n};\n\n// This hook is primarily meant to work around issues in the inventory\nexport const useInventoryUtilities = (\n  inventory,\n  selectedSystems,\n  activeFilters\n) => {\n  const dispatch = useDispatch();\n\n  // Resets the Inventory to a loading state\n  // and prevents previously shown columns and rows to appear\n  useLayoutEffect(() => {\n    dispatch({\n      type: 'INVENTORY_INIT',\n    });\n  }, []);\n\n  // Ensures rows are marked as selected\n  useEffect(() => {\n    dispatch({\n      type: 'SELECT_ENTITIES',\n      payload: {\n        selected: selectedSystems,\n      },\n    });\n  }, [selectedSystems]);\n\n  // Filters do not yet trigger the inventory to call getEntities\n  // and the page would not reset to page 1\n  const resetPage = () => {\n    Promise.resolve(\n      dispatch({\n        type: 'RESET_PAGE',\n      })\n    ).then(() => inventory?.current?.onRefreshData());\n  };\n\n  // The debounce is to not have filter updates collide or get out of order.\n  const debounceResetPage = debounce(resetPage, 50);\n\n  useEffect(() => {\n    debounceResetPage();\n  }, [activeFilters]);\n};\n\nconst toIdFilter = (ids) =>\n  ids?.length > 0 ? `id ^ (${ids.join(',')})` : undefined;\n\nexport const useSystemsExport = ({\n  columns,\n  selected,\n  total,\n  fetchArguments,\n}) => {\n  const { isLoading, fetchBatched } = useFetchBatched();\n  const selectionFilter = selected ? toIdFilter(selected) : undefined;\n  const fetchSystems = useFetchSystems({\n    query: fetchArguments.query,\n    variables: {\n      ...fetchArguments.variables,\n      ...(fetchArguments.tags && { tags: fetchArguments.tags }),\n      filter: selectionFilter\n        ? `${fetchArguments.variables.filter} and (${selectionFilter})`\n        : fetchArguments.variables.filter,\n    },\n    onError: () => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Couldn’t download export',\n        description: 'Reinitiate this export to try again.',\n      });\n    },\n  });\n\n  const selectedFilter = () =>\n    selected?.length > 0 ? toIdFilter(selected) : undefined;\n\n  const exporter = async () => {\n    const fetchedItems = await fetchBatched(\n      fetchSystems,\n      total,\n      selectedFilter()\n    );\n\n    return fetchedItems.flatMap((result) => result.entities);\n  };\n\n  const {\n    toolbarProps: { exportConfig },\n  } = useExport({\n    exporter,\n    columns,\n    isDisabled: total === 0 || isLoading,\n    onStart: () => {\n      dispatchNotification({\n        variant: 'info',\n        title: 'Preparing export',\n        description: 'Once complete, your download will start automatically.',\n      });\n    },\n    onComplete: () => {\n      dispatchNotification({\n        variant: 'success',\n        title: 'Downloading export',\n      });\n    },\n  });\n\n  return exportConfig;\n};\n\nexport const useSystemBulkSelect = ({\n  total,\n  onSelect,\n  preselected,\n  fetchArguments,\n  currentPageIds,\n}) => {\n  const { isLoading, fetchBatched } = useFetchBatched();\n  // This is meant as a compatibility layer and to be removed\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const fetchSystems = useFetchSystems({\n    ...fetchArguments,\n    onError: (error) => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error selecting systems',\n        description: error.message,\n      });\n    },\n  });\n\n  const fetchFunc = async (fetchIds) => {\n    if (fetchIds.length === 0) {\n      return [];\n    }\n\n    const idFilter = toIdFilter(fetchIds);\n    const results = await fetchBatched(fetchSystems, fetchIds.length, {\n      ...(idFilter && { filter: idFilter }),\n    });\n\n    return results.flatMap((result) => result.entities);\n  };\n\n  const onSelectCallback = async (selectedIds) => {\n    const systems = await fetchFunc(selectedIds);\n    setSelectedSystems(systems);\n    onSelect && onSelect(systems);\n  };\n\n  const itemIdsInTable = async () => {\n    const results = await fetchBatched(fetchSystems, total);\n    return results.flatMap((result) => result.entities.map(({ id }) => id));\n  };\n\n  const bulkSelect = useBulkSelect({\n    total,\n    onSelect: onSelectCallback,\n    preselected,\n    itemIdsInTable,\n    itemIdsOnPage: () => currentPageIds,\n  });\n\n  return {\n    selectedSystems,\n    ...bulkSelect,\n    toolbarProps: {\n      ...bulkSelect.toolbarProps,\n      bulkSelect: {\n        ...bulkSelect.toolbarProps.bulkSelect,\n        ...(isLoading\n          ? {\n              isDisabled: true,\n              toggleProps: {\n                children: [<Spinner size=\"md\" key=\"spinner\" />],\n              },\n            }\n          : {}),\n      },\n    },\n  };\n};\n","import React, { useMemo, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Spinner } from '@patternfly/react-core';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport useNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\n\nimport RemediationButton from '@/PresentationalComponents/ComplianceRemediationButton/RemediationButton';\nimport {\n  DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n  COMPLIANT_SYSTEMS_FILTER_CONFIGURATION,\n} from '@/constants';\nimport { ErrorPage, StateView, StateViewPart } from 'PresentationalComponents';\nimport useFilterConfig from 'Utilities/hooks/useTableTools/useFilterConfig';\nimport { policyFilter, defaultOnLoad, ssgVersionFilter } from './constants';\nimport {\n  useFetchSystems,\n  useGetEntities,\n  useOsMinorVersionFilter,\n  useInventoryUtilities,\n  useSystemsExport,\n  useSystemsFilter,\n  useSystemBulkSelect,\n} from './hooks';\nimport { constructQuery } from '../../Utilities/helpers';\nimport { COMPLIANCE_REPORT_TABLE_ADDITIONAL_FILTER } from '../../constants';\n\nexport const SystemsTable = ({\n  columns,\n  showAllSystems,\n  policyId,\n  showActions,\n  enableExport,\n  compliantFilter,\n  policies,\n  showOnlySystemsWithTestResults,\n  showOsFilter,\n  error,\n  showComplianceSystemsInfo,\n  compact,\n  remediationsEnabled,\n  systemProps,\n  defaultFilter,\n  emptyStateComponent,\n  prependComponent,\n  showOsMinorVersionFilter,\n  preselectedSystems,\n  onSelect: onSelectProp,\n  noSystemsTable,\n  tableProps,\n  ssgVersions,\n  dedicatedAction,\n  ruleSeverityFilter,\n}) => {\n  const inventory = useRef(null);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [perPage, setPerPage] = useState(50);\n  const [currentTags, setCurrentTags] = useState([]);\n  const navigateToInventory = useNavigate('inventory');\n  const osMinorVersionFilter = useOsMinorVersionFilter(\n    showOsMinorVersionFilter,\n    {\n      variables: {\n        filter: defaultFilter,\n        ...(policyId && { policyId }),\n      },\n    }\n  );\n\n  const {\n    toolbarProps: conditionalFilter,\n    filterString,\n    activeFilterValues,\n  } = useFilterConfig({\n    filters: {\n      filterConfig: [\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(policies?.length > 0 ? policyFilter(policies, showOsFilter) : []),\n        ...(ssgVersions ? ssgVersionFilter(ssgVersions) : []),\n        ...osMinorVersionFilter,\n        ...(ruleSeverityFilter\n          ? COMPLIANCE_REPORT_TABLE_ADDITIONAL_FILTER\n          : []),\n      ],\n    },\n  });\n  const systemsFilter = useSystemsFilter(\n    filterString(),\n    showOnlySystemsWithTestResults,\n    defaultFilter\n  );\n\n  const constructedQuery = useMemo(() => constructQuery(columns), [columns]);\n\n  const systemFetchArguments = useMemo(\n    () => ({\n      query: constructedQuery.query,\n      variables: {\n        ...constructedQuery.fragments,\n        tags: currentTags,\n        filter: systemsFilter,\n        ...(policyId && { policyId }),\n      },\n    }),\n    [constructedQuery, currentTags, systemsFilter, policyId]\n  );\n\n  const preselection = useMemo(\n    () => preselectedSystems.map(({ id }) => id),\n    [preselectedSystems]\n  );\n\n  const {\n    selectedIds,\n    tableProps: bulkSelectTableProps,\n    toolbarProps: bulkSelectToolBarProps,\n  } = useSystemBulkSelect({\n    total,\n    perPage,\n    onSelect: onSelectProp,\n    preselected: preselection,\n    fetchArguments: systemFetchArguments,\n    currentPageIds: items.map(({ id }) => id),\n  });\n\n  useInventoryUtilities(inventory, selectedIds, activeFilterValues);\n\n  const onComplete = (result) => {\n    setTotal(result.meta.totalCount);\n    setItems(result.entities);\n    setPerPage(result.perPage);\n    setIsLoaded(true);\n    setCurrentTags && setCurrentTags(result.meta.tags);\n\n    if (\n      emptyStateComponent &&\n      result.meta.totalCount === 0 &&\n      activeFilterValues.length === 0 &&\n      (typeof result?.meta?.tags === 'undefined' ||\n        result?.meta?.tags?.length === 0)\n    ) {\n      setIsEmpty(true);\n    }\n  };\n\n  const fetchSystems = useFetchSystems({\n    ...systemFetchArguments,\n    onComplete,\n  });\n  const getEntities = useGetEntities(fetchSystems, {\n    selected: selectedIds,\n    columns,\n  });\n  const exportConfig = useSystemsExport({\n    columns,\n    filter: systemsFilter,\n    selected: selectedIds,\n    total,\n    fetchArguments: {\n      ...systemFetchArguments,\n    },\n  });\n\n  const mergedColumns = (defaultColumns) =>\n    columns.map((column) => {\n      const isStringCol = typeof column === 'string';\n      const key = isStringCol ? column : column.key;\n      const defaultColumn = defaultColumns.find(\n        (defaultCol) => defaultCol.key === key\n      );\n      return {\n        ...defaultColumn,\n        ...(isStringCol ? { key: column } : column),\n        props: {\n          ...defaultColumn?.props,\n          ...column?.props,\n        },\n      };\n    });\n\n  return (\n    <StateView\n      stateValues={{\n        error,\n        noError: error === undefined && !isEmpty,\n        empty: isEmpty,\n      }}\n    >\n      <StateViewPart stateKey=\"error\">\n        {!!prependComponent && prependComponent}\n        <ErrorPage error={error} />\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">{emptyStateComponent}</StateViewPart>\n      <StateViewPart stateKey=\"noError\">\n        {!!prependComponent && isLoaded && prependComponent}\n        {showComplianceSystemsInfo && (\n          <Alert\n            isInline\n            variant=\"info\"\n            ouiaId=\"SystemsListIsDifferentAlert\"\n            title={\n              'The list of systems in this view is different than those that appear in the Inventory. ' +\n              'Only systems currently associated with or reporting against compliance policies are displayed.'\n            }\n          />\n        )}\n        <InventoryTable\n          {...systemProps}\n          disableDefaultColumns\n          columns={mergedColumns}\n          noSystemsTable={noSystemsTable}\n          ref={inventory}\n          getEntities={getEntities}\n          hideFilters={{ all: true, tags: false }}\n          showTags\n          onLoad={defaultOnLoad(columns)}\n          tableProps={{\n            ...bulkSelectTableProps,\n            isStickyHeader: true,\n            ...tableProps,\n          }}\n          fallback={<Spinner />}\n          variant={compact ? TableVariant.compact : ''}\n          {...bulkSelectToolBarProps}\n          {...(!showAllSystems && {\n            ...conditionalFilter,\n            ...(remediationsEnabled && {\n              dedicatedAction: (\n                <RemediationButton policyId={policyId} systems={selectedIds} />\n              ),\n            }),\n          })}\n          {...(dedicatedAction ? { dedicatedAction: dedicatedAction } : {})}\n          {...(enableExport && { exportConfig })}\n          {...(showActions && {\n            actions: [\n              {\n                title: 'View in inventory',\n                onClick: (_event, _index, { id }) =>\n                  navigateToInventory('/' + id),\n              },\n            ],\n          })}\n        />\n      </StateViewPart>\n    </StateView>\n  );\n};\n\nSystemsTable.propTypes = {\n  columns: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.shape({}), PropTypes.string])\n  ),\n  policies: PropTypes.arrayOf(PropTypes.shape({})),\n  showAllSystems: PropTypes.bool,\n  policyId: PropTypes.string,\n  query: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  showActions: PropTypes.bool,\n  enableExport: PropTypes.bool,\n  compliantFilter: PropTypes.bool,\n  showOnlySystemsWithTestResults: PropTypes.bool,\n  showOsFilter: PropTypes.bool,\n  showComplianceSystemsInfo: PropTypes.bool,\n  error: PropTypes.object,\n  compact: PropTypes.bool,\n  remediationsEnabled: PropTypes.bool,\n  defaultFilter: PropTypes.string,\n  systemProps: PropTypes.shape({\n    isFullView: PropTypes.bool,\n  }),\n  emptyStateComponent: PropTypes.node,\n  prependComponent: PropTypes.node,\n  showOsMinorVersionFilter: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  preselectedSystems: PropTypes.array,\n  onSelect: PropTypes.func,\n  noSystemsTable: PropTypes.node,\n  tableProps: PropTypes.object,\n  ssgVersions: PropTypes.array,\n  dedicatedAction: PropTypes.object,\n  ruleSeverityFilter: PropTypes.bool,\n};\n\nSystemsTable.defaultProps = {\n  policyId: '',\n  showActions: true,\n  enableExport: true,\n  compliantFilter: false,\n  showOnlySystemsWithTestResults: false,\n  showComplianceSystemsInfo: false,\n  compact: false,\n  remediationsEnabled: true,\n  preselectedSystems: [],\n  ruleSeverityFilter: false,\n};\n\nexport default SystemsTable;\n","import gql from 'graphql-tag';\n\nexport const POLICY_QUERY = gql`\n  query PQ_Profile($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      external\n      description\n      totalHostCount\n      compliantHostCount\n      complianceThreshold\n      osMajorVersion\n      supportedOsVersions\n      lastScanned\n      policyType\n      policy {\n        id\n        name\n        refId\n        profiles {\n          id\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          parentProfileId\n          benchmark {\n            id\n            title\n            latestSupportedOsMinorVersions\n            osMajorVersion\n            version\n            profiles {\n              id\n              refId\n              ssgVersion\n            }\n          }\n          rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            references\n            identifier\n            precedence\n            values\n          }\n        }\n      }\n      businessObjective {\n        id\n        title\n      }\n      hosts {\n        id\n        osMinorVersion\n        osMajorVersion\n      }\n    }\n  }\n`;\n\nexport const POLICY_RULE_TREES_QUERY = gql`\n  query PQ_Profile($policyId: String!) {\n    profile(id: $policyId) {\n      policy {\n        profiles {\n          id\n          benchmark {\n            ruleTree\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const POLICY_VALUE_DEFINITONS_QUERY = gql`\n  query PQ_Profile($policyId: String!) {\n    profile(id: $policyId) {\n      policy {\n        profiles {\n          id\n          values\n          benchmark {\n            valueDefinitions {\n              id\n              refId\n              title\n              valueType\n              defaultValue\n              description\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { useMemo, useCallback } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { logMultipleErrors } from 'Utilities/helpers';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport {\n  POLICY_QUERY,\n  POLICY_RULE_TREES_QUERY,\n  POLICY_VALUE_DEFINITONS_QUERY,\n} from './constants';\nimport { compileData } from './helpers';\n\nconst usePolicyQuery = ({ policyId, skip: skipCondition }) => {\n  const ruleGroupsEnabled = useFeature('ruleGroups');\n  const valueEditingEnabled = useFeature('valueEditing');\n  const skip = policyId === 'new' || skipCondition;\n\n  const {\n    data: policyData,\n    error: policyError,\n    loading: policyLoading,\n    refetch: refecthPolicy,\n  } = useQuery(POLICY_QUERY, {\n    variables: { policyId },\n    skip,\n    fetchPolicy: 'no-cache',\n  });\n\n  const {\n    data: ruleTreesData,\n    error: ruleTreesError,\n    loading: ruleTreesLoading,\n    refetch: refecthRuleTrees,\n  } = useQuery(POLICY_RULE_TREES_QUERY, {\n    variables: { policyId },\n    skip: !ruleGroupsEnabled || skip,\n    fetchPolicy: 'no-cache',\n  });\n\n  const {\n    data: valueDefinitionsData,\n    error: valueDefinitionsError,\n    loading: valueDefinitionsLoading,\n    refetch: refecthValueDefinitions,\n  } = useQuery(POLICY_VALUE_DEFINITONS_QUERY, {\n    variables: { policyId },\n    skip: !valueEditingEnabled || skip,\n    fetchPolicy: 'no-cache',\n  });\n\n  const data = useMemo(\n    () => compileData(policyData, ruleTreesData, valueDefinitionsData),\n    [policyData, ruleTreesData, valueDefinitionsData]\n  );\n\n  const error = useMemo(\n    () => logMultipleErrors(policyError, ruleTreesError, valueDefinitionsError),\n    [policyError, ruleTreesError, valueDefinitionsError]\n  );\n\n  const loading = policyLoading || ruleTreesLoading || valueDefinitionsLoading;\n\n  const refetch = useCallback(() => {\n    if (!skip) {\n      refecthPolicy();\n      refecthRuleTrees();\n      refecthValueDefinitions();\n    }\n  }, [refecthPolicy, refecthRuleTrees, refecthValueDefinitions]);\n\n  return policyId === 'new'\n    ? { data: true, refetch: () => {} }\n    : {\n        data,\n        error,\n        loading,\n        refetch,\n      };\n};\n\nexport default usePolicyQuery;\n","export const compileData = (policyData, ruleTreesData, valueDefinitionsData) =>\n  policyData && {\n    profile: {\n      ...policyData.profile,\n      policy: {\n        ...(policyData?.profile.policy || {}),\n        profiles:\n          policyData?.profile.policy.profiles?.map((profile) => {\n            const ruleTree =\n              ruleTreesData?.profile.policy.profiles.find(\n                ({ id }) => id === profile.id\n              )?.benchmark.ruleTree || {};\n\n            const valueDefinitions =\n              valueDefinitionsData?.profile.policy.profiles.find(\n                ({ id }) => id === profile.id\n              )?.benchmark.valueDefinitions || [];\n\n            const values = valueDefinitionsData?.profile.policy.profiles.find(\n              ({ id }) => id === profile.id\n            )?.values;\n\n            return {\n              ...profile,\n              values,\n              benchmark: {\n                ...profile.benchmark,\n                ruleTree,\n                valueDefinitions,\n              },\n            };\n          }) || [],\n      },\n    },\n  };\n","import { useCallback, useState } from 'react';\nimport pAll from 'p-all';\n\nconst DEFAULT_CONCURRENT_PROMISES = 2;\n\nconst usePromiseQueue = (limit = DEFAULT_CONCURRENT_PROMISES) => {\n  const [isResolving, setIsResolving] = useState(false);\n  const [promiseResults, setPromiseResults] = useState();\n\n  const resolve = useCallback(\n    async (fns) => {\n      await setPromiseResults(undefined);\n      await setIsResolving(true);\n      const results = await pAll(fns, {\n        concurrency: limit,\n      });\n\n      await setIsResolving(false);\n      await setPromiseResults(results);\n\n      return results;\n    },\n    [limit]\n  );\n\n  return {\n    isResolving,\n    results: promiseResults,\n    resolve,\n  };\n};\n\nexport default usePromiseQueue;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { sortingByProp } from 'Utilities/helpers';\n\nconst selectRows = (rows, selected) =>\n  rows.map((row) => ({\n    ...row,\n    selected: selected.includes(row.id),\n  }));\n\nexport const entitiesReducer = () =>\n  applyReducerHash({\n    ['INVENTORY_INIT']: () => ({\n      rows: [],\n      total: 0,\n    }),\n    ['RESET_PAGE']: (state) => ({\n      ...state,\n      page: 1,\n    }),\n    ['SELECT_ENTITIES']: (state, { payload: { selected } }) => ({\n      ...state,\n      rows: selectRows(state.rows, selected),\n    }),\n  });\n\nexport const mapCountOsMinorVersions = (systems) => {\n  if (!systems) {\n    return {};\n  }\n\n  return systems.reduce((acc, { osMinorVersion }) => {\n    if (osMinorVersion !== undefined && osMinorVersion !== null) {\n      (acc[osMinorVersion] = acc[osMinorVersion] || {\n        osMinorVersion,\n        count: 0,\n      }).count++;\n    }\n\n    return acc;\n  }, {});\n};\n\nexport const countOsMinorVersions = (systems) =>\n  Object.values(mapCountOsMinorVersions(systems)).sort(\n    sortingByProp('osMinorVersion', 'desc')\n  );\n"],"names":["QUERY","gql","_templateObject","_taggedTemplateLiteral","ComplianceSystems","_data$profiles","_useQuery","useQuery","data","error","loading","policies","profiles","edges","map","_ref","node","React","PageHeader","className","PageHeaderTitle","title","StateViewWithError","stateValues","StateViewPart","stateKey","SystemsTable","columns","Columns","showLink","props","isStatic","transforms","nowrap","defaultFilter","systemProps","isFullView","showOsMinorVersionFilter","policy","osMajorVersion","showComplianceSystemsInfo","enableEditPolicy","remediationsEnabled","PolicyTypeDetailsRow","description","item","key","Text","style","margin","propTypes","NameCell","name","disabled","InUseProfileLabel","compact","PolicyTypeTable","_ref2","onChange","selectedProfile","info","tooltip","sortByProp","renderFunc","renderComponent","fitContent","_data","_id","profile","supportedOsVersions","join","TableToolsTable","items","_objectSpread","rowProps","selected","id","disableSelection","filters","filterConfig","type","conditionalFilterType","text","label","filter","policyTypes","value","policyType","toLowerCase","includes","options","detailsComponent","onRadioSelect","_event","_value","_rowIdx","_ref3","itemId","find","_ref4","sortBy","index","direction","property","emptyRows","length","variant","Tooltip","position","content","OutlinedQuestionCircleIcon","SUPPORTED_PROFILES","CreateSCAPPolicy","_data$osMajorVersions","change","selectedOsMajorVersion","fetchPolicy","osMajorVersions","selectedOsMajorVersionObject","profilesToSelect","profileRefId","refId","benchmarkRedId","benchmark","Spinner","TextContent","component","TextVariants","h1","Form","FormGroup","isRequired","fieldId","_ref5","Tile","concat","onClick","isSelected","isStacked","labelIcon","PolicyTypeTooltip","PolicyTypesTable","undefined","reduxFormPropTypes","selector","formValueSelector","compose","connect","state","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","BENCHMARKS_QUERY","BENCHMARKS_RULES_TREES_QUERY","_templateObject2","BENCHMARKS_VALUE_DEFINITIONS_QUERY","_templateObject3","PROFILES_QUERY","_templateObject4","EditPolicyProfilesRules","_benchmarksData$bench","selectedRuleRefIds","osMinorVersionCounts","ruleValues","_useBenchmarksQuery","osMinorVersions","ruleGroupsEnabled","useFeature","valueEditingEnabled","variables","skip","benchmarksData","benchmarksError","benchmarksLoading","refetchProfiles","refetch","_useQuery2","ruleTreesData","ruleTreesError","ruleTreesLoading","refecthRuleTrees","_useQuery3","valueDefinitionsData","valueDefinitionsError","valueDefinitionsLoading","refecthValueDefinitions","useMemo","benchmarks","nodes","_ruleTreesData$benchm","_valueDefinitionsData","ruleTree","valueDefinitions","compileData","logMultipleErrors","useCallback","useBenchmarksQuery","i","osMinorVersion","sort","tabsData","systemCount","count","_benchmark$latestSupp","latestSupportedOsMinorVersions","getBenchmarkBySupportedOsMinor","benchmarkProfile","getBenchmarkProfile","newOsMinorVersion","profileToOsMinorMap","tabsDataToOsMinorMap","profileIds","Object","keys","profilesData","profilesError","profilesLoading","dataState","loadingState","noRuleSets","p","setSelectedRuleRefIds","newSelection","useLayoutEffect","profilesWithOs","extendProfilesByOsMinor","profilesWithRulesToSelection","only","JSON","stringify","EmptyState","Title","headingLevel","size","EmptyStateBody","EmptyTable","TabbedRules","setRuleValues","policyId","valueDefinition","valueValue","newRuleValues","_defineProperty","selectedFilter","level","ouiaId","resetLink","rulesPageLink","WizardContextConsumer","goToStepById","Button","PrependComponent","EditPolicySystems","selectedSystems","version","split","prependComponent","emptyStateComponent","width","showActions","enableExport","preselectedSystems","onSelect","newSelectedSystems","countOsMinorVersions","defaultProps","EditPolicyDetails","useEffect","Field","ReduxFormTextInput","isDisabled","ReduxFormTextArea","PolicyBusinessObjectiveTooltip","defaultValue","businessObjective","ProfileThresholdField","previousThreshold","initialValues","ReviewCreatedPolicy","complianceThreshold","parentProfileName","h3","marginTop","TextList","TextListVariants","dl","TextListItem","TextListItemVariants","dt","dd","fontWeight","Label","color","isCompact","benchmarkId","parseFloat","rulesCount","EmtpyStateWithErrors","errors","Array","isArray","List","ListItem","FinishedCreatePolicy","onWizardFinish","cloneFromProfileId","systems","values","_useState","useState","_useState2","_slicedToArray","percent","setPercent","_useState3","_useState4","message","setMessage","_useState5","_useState6","setErrors","_useState7","_useState8","failed","setFailed","updatePolicy","usePolicy","onProgress","progress","hosts","then","dispatchNotification","autoDismiss","Link","to","catch","_error$networkError","_error$networkError2","networkError","result","Bullseye","EmptyStateVariant","full","EmptyStateIcon","icon","WrenchIcon","ProgressBar","EmptyStateSecondaryActions","withApollo","CreatePolicyForm","systemIds","reset","navigate","useNavigate","stepIdReached","setStepIdReached","resetAnchor","location","history","hash","push","onClose","steps","enableNext","validateBenchmarkPage","canJumpTo","validateDetailsPage","validateSystemsPage","EditPolicyRules","validateRulesPage","nextButtonText","isFinishedStep","Wizard","isOpen","onNext","onGoToStep","onBack","dispatch","CreatePolicy","DeletePolicy","deleteEnabled","setDeleteEnabled","useLocation","_location$state$polic","_useMutation","useMutation","DELETE_PROFILE","onCompleted","dispatchAction","addNotification","onError","deletePolicy","ComplianceModal","ModalVariant","small","titleIconVariant","actions","input","Checkbox","isChecked","DeleteReport","_location$state","background","DELETE_REPORT","deleteReport","profileId","isModalOpen","onDelete","EditPolicyRulesTabEmptyState","EditPolicyRulesTab","ruleValuesProp","benchmarkSearch","sortingByProp","parentProfileId","toTabsData","prevSelection","empty","_policy$policy","mergeValues","fromEntries","setNewRuleTabs","EditPolicySystemsTab","onSystemSelect","osFilter","newRuleTabs","Alert","isInline","actionLinks","AlertActionLink","EditPolicyForm","setUpdatedPolicy","setSelectedSystems","policyProfiles","setOsMinorVersionCounts","_useNewRulesAlertStat","apply","arguments","useNewRulesAlertState","_useNewRulesAlertStat2","newRulesAlert","setNewRulesAlert","handleSystemSelect","policyMinorVersions","hasNewOsMinorVersions","reduce","acc","_profile$osMinorVersi","mapCountOsMinorVersions","complianceThresholdValid","thresholdValid","profilesWithOsMinor","RoutedTabs","defaultTab","Tab","eventKey","TabTitleText","NewRulesAlert","updatedPolicy","EditPolicy","route","useParams","policy_id","_usePolicyQuery","usePolicyQuery","linkToPolicy","useLinkToPolicy","setRuleValuesState","saveEnabled","updatedPolicyHostsAndRules","_useOnSave","useOnSave","_useOnSave2","isSaving","onSave","spinnerAriaValueText","isLoading","useTitleEntity","minHeight","existingValues","currentValues","SystemLink","children","pathname","Name","_ref2$showOsInfo","showOsInfo","_ref2$showLink","hasOsInfo","SSGVersion","_ref3$ssgVersion","ssgVersion","supported","UnsupportedSSGVersion","messageVariant","SSGVersions","_ref4$testResultProfi","testResultProfiles","_profile$benchmark","Policies","Truncate","inline","FailedRules","_ref6","rulesFailed","_ref7","parseInt","ComplianceScore","_ref8","_ref9","score","compliant","PresentationalComplianceScore","NeverScanned","Fragment","ExclamationTriangleIcon","NEVER","lastScanned","dates","Date","last","Math","max","date","isFinite","LastScanned","_ref10","lastScannedDate","DateFormat","parse","operatingSystemString","_ref11","OperatingSystem","system","disableSorting","compileColumnRenderFunc","cell","column","_objectWithoutProperties","_excluded","renderExport","customName","SsgVersion","exportKey","SsgVersionCell","PoliciesCell","failedRules","FailedRulesCell","complianceScoreString","complianceScoreData","trim","ComplianceScoreCell","LastScannedCell","OperatingSystemCell","OS","original","dataLabel","inventoryColumn","InventoryDetails","inventoryId","DetailWrapper","onLoad","mergeWithDetail","init","register","InventoryDetailHead","fallback","Skeleton","SkeletonSize","md","GET_SYSTEMS_ISSUES","RemediationButton","rules","buttonProps","onRemediationCreated","_useIssuesFetch","client","useApolloClient","_usePromiseQueue","usePromiseQueue","isResolving","results","resolve","fetchFunction","_asyncToGenerator","_regeneratorRuntime","_callee","perPage","page","_context","prev","next","query","abrupt","sent","stop","_x","_x2","fetch","_callee2","batchSize","pages","_args2","_context2","ceil","_toConsumableArray","_","pageIdx","remediationData","useIssuesFetch","isLoadingIssues","RemediationRemediationButton","_extends","getNotification","dataProvider","FallbackButton","GET_SYSTEMS_OSES","policyFilter","systemsPolicyFilterConfiguration","systemsOsFilterConfiguration","defaultOnLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","getRegistry","entitiesReducer","ssgVersionFilter","ssgVersions","checkbox","filterString","useOsMinorVersionFilter","showFilter","fetchArguments","osVersions","systemsOsMinorFilterConfiguration","osMinorVersionFilter","currentValue","major","String","Set","minor","groupByMajorVersion","renameInventoryAttributes","culledTimestamp","staleWarningTimestamp","staleTimestamp","insightsId","insights_id","culled_timestamp","stale_warning_timestamp","stale_timestamp","useFetchSystems","onComplete","_ref3$variables","requestVariables","fetchResults","_data$systems","_data$systems2","e","entities","systemsWithRuleObjectsFailed","meta","tags","totalCount","useFetchBatched","fetchBatched","total","buildApiFilters","tagFilters","otherFilters","_excluded2","tagsApiFilter","flatMap","tagFilter","tag","encodeURIComponent","tagKey","toIdFilter","ids","showAllSystems","compliantFilter","showOnlySystemsWithTestResults","showOsFilter","onSelectProp","noSystemsTable","tableProps","dedicatedAction","ruleSeverityFilter","inventory","useRef","isEmpty","setIsEmpty","isLoaded","setIsLoaded","setItems","setTotal","_useState9","_useState10","setPerPage","_useState11","_useState12","currentTags","setCurrentTags","navigateToInventory","_useFilterConfig","useFilterConfig","DEFAULT_SYSTEMS_FILTER_CONFIGURATION","COMPLIANT_SYSTEMS_FILTER_CONFIGURATION","COMPLIANCE_REPORT_TABLE_ADDITIONAL_FILTER","conditionalFilter","toolbarProps","activeFilterValues","systemsFilter","combindedFilter","useSystemsFilter","constructedQuery","constructQuery","systemFetchArguments","fragments","_useSystemBulkSelect","preselected","currentPageIds","_useFetchBatched2","fetchSystems","fetchFunc","_ref12","_callee3","fetchIds","idFilter","_context3","_x3","onSelectCallback","_ref13","_callee4","selectedIds","_context4","_x4","itemIdsInTable","_ref14","_callee5","_context5","_ref15","bulkSelect","useBulkSelect","itemIdsOnPage","toggleProps","useSystemBulkSelect","bulkSelectTableProps","bulkSelectToolBarProps","activeFilters","useDispatch","payload","debounceResetPage","debounce","Promise","_inventory$current","current","onRefreshData","useInventoryUtilities","getEntities","fetchEntities","appendDirection","attributes","attribute","findColumnByKey","_ids","_ref6$page","orderBy","orderDirection","sortableColumn","filterForApi","fetchedEntities","per_page","entity","useGetEntities","_result$meta","_result$meta2","exportConfig","_useFetchBatched","selectionFilter","exporter","fetchedItems","useExport","onStart","useSystemsExport","StateView","noError","ErrorPage","InventoryTable","disableDefaultColumns","defaultColumns","isStringCol","defaultColumn","defaultCol","ref","hideFilters","all","showTags","isStickyHeader","TableVariant","_index","PropTypes","POLICY_QUERY","POLICY_RULE_TREES_QUERY","POLICY_VALUE_DEFINITONS_QUERY","skipCondition","policyData","policyError","policyLoading","refecthPolicy","_policyData$profile$p","_ruleTreesData$profil","_valueDefinitionsData2","limit","setIsResolving","promiseResults","setPromiseResults","fns","pAll","concurrency","selectRows","rows","row","_applyReducerHash","applyReducerHash"],"sourceRoot":""}