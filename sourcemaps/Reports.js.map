{"version":3,"sources":["webpack:///./src/SmartComponents/Reports/Reports.js"],"names":["QUERY","gql","Reports","reportCards","pageHeader","useQuery","fetchPolicy","data","error","loading","profiles","edges","map","profile","node","filter","totalHostCount","beta","window","location","pathname","split","length","className","title","i","sm","md","lg","xl","key","style","paddingBottom","stateValues","stateKey","gutter","routerParams"],"mappings":"ygCAmBA,IAAMA,EAAQC,IAAH,KAiCEC,EAAU,WAAM,IAErBC,EACAC,EAHqB,EACQC,YAASL,EAAO,CAAEM,YAAa,sBAAxDC,EADiB,EACjBA,KAAMC,EADW,EACXA,MAAOC,EADI,EACJA,QAIrB,IAAKA,GAAWF,EAAM,CAClB,IAAMG,EAAWH,EAAKG,SAASC,MAAMC,KAAI,SAAAC,GAAO,OAAIA,EAAQC,QAAMC,QAAO,SAACF,GAAD,OAAaA,EAAQG,eAAiB,KACzGC,EAAkD,SAA3CC,OAAOC,SAASC,SAASC,MAAM,KAAK,GAE7CX,EAASY,QACTlB,EAAa,kBAAC,aAAD,CAAYmB,UAAYN,EAAO,mBAAqB,sBAC7D,kBAAC,kBAAD,CAAiBO,MAAM,uBACrBP,EAAO,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OAG7Bd,EAAcO,EAASE,KACnB,SAACC,EAASY,GAAV,OACI,kBAAC,IAAD,CAAUC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,IAAKL,GACzC,kBAAC,IAAD,CACIK,IAAKL,EACLZ,QAASA,UAKzBT,EAAa,kBAAC,aAAD,CAAY2B,MAAO,CAAEC,cAAe,KAAM,kBAAC,kBAAD,CAAiBR,MAAM,gBAC9ErB,EAAc,kBAAC,IAAD,CAA8BqB,MAAO,+BAI3D,OAAO,kBAAC,IAAD,CAAoBS,YAAc,CAAEzB,QAAOD,OAAME,YACpD,kBAAC,IAAD,CAAeyB,SAAS,WACpB,kBAAC,aAAD,KACI,kBAAC,kBAAD,CAAiBV,MAAM,gBAE3B,kBAAC,OAAD,KACI,yBAAKD,UAAU,mBACX,kBAAC,IAAD,CAAMY,OAAO,MACT,kBAAC,IAAD,UAKhB,kBAAC,IAAD,CAAeD,SAAS,QAClB9B,EACF,kBAAC,OAAD,KACI,yBAAKmB,UAAU,mBACX,kBAAC,IAAD,CAAMY,OAAO,MACPhC,QAQXiC,cAAalC","file":"js/Reports.js","sourcesContent":["import React from 'react';\nimport {\n    ComplianceTabs,\n    ReportTabs,\n    LoadingComplianceCards,\n    ReportCard,\n    CompliancePoliciesEmptyState,\n    StateViewWithError,\n    StateViewPart\n} from 'PresentationalComponents';\nimport { PageHeader, PageHeaderTitle, Main } from '@redhat-cloud-services/frontend-components';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport {\n    Grid,\n    GridItem\n} from '@patternfly/react-core';\n\nconst QUERY = gql`\n{\n    profiles(search: \"has_test_results = true\", limit: 1000){\n        edges {\n            node {\n                id\n                name\n                refId\n                description\n                totalHostCount\n                compliantHostCount\n                majorOsVersion\n                complianceThreshold\n                businessObjective {\n                    id\n                    title\n                }\n                policy {\n                    id\n                    benchmark {\n                        version\n                    }\n                }\n                benchmark {\n                    version\n                }\n            }\n        }\n\n    }\n}\n`;\n\nexport const Reports = () => {\n    const { data, error, loading } = useQuery(QUERY, { fetchPolicy: 'cache-and-network' });\n    let reportCards;\n    let pageHeader;\n\n    if (!loading && data) {\n        const profiles = data.profiles.edges.map(profile => profile.node).filter((profile) => profile.totalHostCount > 0);\n        const beta = window.location.pathname.split('/')[1] === 'beta';\n\n        if (profiles.length) {\n            pageHeader = <PageHeader className={ beta ? 'beta-page-header' : 'stable-page-header' }>\n                <PageHeaderTitle title=\"Compliance reports\" />\n                { beta ? <ReportTabs/> : <ComplianceTabs/> }\n\n            </PageHeader>;\n            reportCards = profiles.map(\n                (profile, i) =>\n                    <GridItem sm={12} md={12} lg={6} xl={4} key={i}>\n                        <ReportCard\n                            key={i}\n                            profile={profile}\n                        />\n                    </GridItem>\n            );\n        } else {\n            pageHeader = <PageHeader style={{ paddingBottom: 22 }}><PageHeaderTitle title=\"Compliance\" /></PageHeader>;\n            reportCards = <CompliancePoliciesEmptyState title={'No policies are reporting'} />;\n        }\n    }\n\n    return <StateViewWithError stateValues={ { error, data, loading } }>\n        <StateViewPart stateKey='loading'>\n            <PageHeader>\n                <PageHeaderTitle title=\"Compliance\" />\n            </PageHeader>\n            <Main>\n                <div className=\"policies-donuts\">\n                    <Grid gutter='md'>\n                        <LoadingComplianceCards/>\n                    </Grid>\n                </div>\n            </Main>\n        </StateViewPart>\n        <StateViewPart stateKey='data'>\n            { pageHeader }\n            <Main>\n                <div className=\"policies-donuts\">\n                    <Grid gutter='md'>\n                        { reportCards }\n                    </Grid>\n                </div>\n            </Main>\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nexport default routerParams(Reports);\n"],"sourceRoot":""}