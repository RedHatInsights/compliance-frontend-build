{"version":3,"file":"js/SystemDetails.1649772650991.638125a5b4a16503afb5.js","mappings":"mWAoBMA,GAAQC,EAAAA,EAAAA,IAAH,mIASEC,EAAgB,SAAC,GAAc,MAAZC,EAAY,EAAZA,MACtBC,GAAgBC,EAAAA,EAAAA,aAAhBD,YACR,GAAiCE,EAAAA,EAAAA,GAASN,EAAO,CAC/CO,UAAW,CAAEH,YAAAA,KADPI,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,QAGfC,EAAaH,MAAAA,GAAH,UAAGA,EAAMI,cAAT,aAAG,EAAcC,KAIjC,OAFAC,EAAAA,EAAAA,GAAeX,EAAOQ,GAGpB,kBAAC,KAAD,CAAoBI,YAAa,CAAEN,MAAAA,EAAOD,KAAAA,EAAME,QAAAA,IAC9C,kBAAC,KAAD,CAAeM,SAAS,QACtB,kBAAC,IAAD,KACE,kBAAC,EAAAC,WAAD,CAAYC,OAAO,+BACjB,kBAAC,KAAD,CAAoBC,GAAG,KAAvB,cACA,kBAAC,KAAD,CAAoBA,GAAG,YAAvB,WACA,kBAAC,EAAAC,eAAD,CAAgBC,UAAQ,GAAEV,IAE5B,kBAAC,KAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,gBAAD,CAAyBW,YAAU,EAAClB,YAAaA,MAGrD,kBAAC,KAAD,CAAeY,SAAS,WACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUO,KAAMC,EAAAA,EAAAA,SAO1BtB,EAAcuB,UAAY,CACxBtB,MAAOsB,IAAAA,QAGT","sources":["webpack:///./src/SmartComponents/SystemDetails/SystemDetails.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { useParams } from 'react-router-dom';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Skeleton, {\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { SystemDetails as ComplianceSystemDetails } from './ComplianceDetail';\nimport {\n  BreadcrumbLinkItem,\n  StateViewWithError,\n  StateViewPart,\n} from 'PresentationalComponents';\nimport { InventoryDetails } from 'SmartComponents';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\n\nconst QUERY = gql`\n  query System($inventoryId: String!) {\n    system(id: $inventoryId) {\n      id\n      name\n    }\n  }\n`;\n\nexport const SystemDetails = ({ route }) => {\n  const { inventoryId } = useParams();\n  const { data, error, loading } = useQuery(QUERY, {\n    variables: { inventoryId },\n  });\n  const systemName = data?.system?.name;\n\n  useTitleEntity(route, systemName);\n\n  return (\n    <StateViewWithError stateValues={{ error, data, loading }}>\n      <StateViewPart stateKey=\"data\">\n        <PageHeader>\n          <Breadcrumb ouiaId=\"SystemDetailsPathBreadcrumb\">\n            <BreadcrumbLinkItem to=\"/\">Compliance</BreadcrumbLinkItem>\n            <BreadcrumbLinkItem to=\"/systems\">Systems</BreadcrumbLinkItem>\n            <BreadcrumbItem isActive>{systemName}</BreadcrumbItem>\n          </Breadcrumb>\n          <InventoryDetails />\n        </PageHeader>\n        <Main>\n          <ComplianceSystemDetails hidePassed inventoryId={inventoryId} />\n        </Main>\n      </StateViewPart>\n      <StateViewPart stateKey=\"loading\">\n        <PageHeader>\n          <Skeleton size={SkeletonSize.md} />\n        </PageHeader>\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nSystemDetails.propTypes = {\n  route: propTypes.object,\n};\n\nexport default SystemDetails;\n"],"names":["QUERY","gql","SystemDetails","route","inventoryId","useParams","useQuery","variables","data","error","loading","systemName","system","name","useTitleEntity","stateValues","stateKey","Breadcrumb","ouiaId","to","BreadcrumbItem","isActive","hidePassed","size","SkeletonSize","propTypes"],"sourceRoot":""}