{"version":3,"file":"js/244.111b1824e3c0e97631e8.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/plus-circle-icon.js","webpack:///./src/PresentationalComponents/SystemPolicyCard/components/UnsupportedSSGVersion.js","webpack:///./src/PresentationalComponents/SystemPolicyCard/components/CompliantIcon.js","webpack:///./src/PresentationalComponents/SystemPolicyCard/SystemPolicyCard.js","webpack:///./src/PresentationalComponents/SystemPolicyCards/components/LoadingPolicyCards.js","webpack:///./src/PresentationalComponents/SystemPolicyCards/SystemPolicyCards.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/NotConnected/NotConnected.js","webpack:///./src/SmartComponents/SystemDetails/NoPoliciesState.js","webpack:///./src/SmartComponents/SystemDetails/NoReportsState.js","webpack:///./src/SmartComponents/SystemDetails/EmptyState.js","webpack:///./src/SmartComponents/SystemDetails/ComplianceDetail.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const PlusCircleIconConfig = {\n  name: 'PlusCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PlusCircleIcon = createIcon(PlusCircleIconConfig);\n\nexport default PlusCircleIcon;","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Popover, Alert } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { supportedConfigsLink } from '@/constants';\n\nconst UnsupportedSSGVersion = ({ ssgVersion, style, ...props }) => {\n  const bodyContent =\n    'This system was using an incompatible version of the SSG at the time this report was generated.' +\n    ' Assessment of rules failed/passed on this system is a best-guess effort and may not be accurate.';\n  const footerContent = (\n    <a target=\"_blank\" rel=\"noopener noreferrer\" href={supportedConfigsLink}>\n      Supported SSG versions\n    </a>\n  );\n\n  return (\n    <Alert\n      variant=\"warning\"\n      isInline\n      style={style}\n      title={\n        <React.Fragment>\n          Unsupported SSG version ({ssgVersion})\n          <Popover position=\"right\" {...{ bodyContent, footerContent }}>\n            <OutlinedQuestionCircleIcon\n              style={{\n                marginLeft: '.5em',\n                cursor: 'pointer',\n                color: 'var(--pf-global--Color--200)',\n              }}\n            />\n          </Popover>\n        </React.Fragment>\n      }\n      {...props}\n    />\n  );\n};\n\nUnsupportedSSGVersion.propTypes = {\n  ssgVersion: propTypes.string,\n  style: propTypes.object,\n};\n\nexport default UnsupportedSSGVersion;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n} from '@patternfly/react-icons';\n\nconst CompliantIcon = ({ compliant }) =>\n  compliant ? (\n    <div className=\"ins-c-policy-card ins-m-compliant\">\n      <CheckCircleIcon /> Compliant\n    </div>\n  ) : (\n    <div className=\"ins-c-policy-card ins-m-noncompliant\">\n      <ExclamationCircleIcon /> Not compliant\n    </div>\n  );\n\nCompliantIcon.propTypes = {\n  compliant: propTypes.bool,\n};\nexport default CompliantIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  Text,\n  TextContent,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Truncate from '@redhat-cloud-services/frontend-components/Truncate';\nimport UnsupportedSSGVersion from './components/UnsupportedSSGVersion';\nimport CompliantIcon from './components/CompliantIcon';\n\nconst SystemPolicyCard = ({ policy, style, onClick, isSelected }) => {\n  const {\n    rulesFailed,\n    compliant,\n    lastScanned,\n    score,\n    benchmark: { version: ssgVersion },\n    supported,\n    name,\n    policyType,\n  } = policy;\n  const passedPercentage = ((value, fixed = 0, withPercent = true) =>\n    value.toFixed(fixed) + (withPercent ? '%' : ''))(score);\n\n  const truncateDefaults = { expandOnMouseOver: true, hideExpandText: true };\n\n  return (\n    <Card\n      ouiaId=\"PolicyCard\"\n      onClick={(event) => {\n        event.stopPropagation();\n        onClick(policy);\n      }}\n      isSelected={isSelected}\n      style={style}\n    >\n      <CardBody>\n        <TextContent className=\"margin-bottom-md\">\n          <Text\n            ouiaId=\"PolicyCardName\"\n            className=\"margin-bottom-top-none\"\n            component={TextVariants.h4}\n          >\n            <Truncate text={name} length={110} {...truncateDefaults} />\n          </Text>\n          <Text\n            ouiaId=\"PolicyCardType\"\n            style={{ color: 'var(--pf-global--Color--200)' }}\n            component={TextVariants.small}\n          >\n            <Truncate text={policyType} length={110} {...truncateDefaults} />\n          </Text>\n        </TextContent>\n        <div className=\"margin-bottom-md\">\n          {supported && <CompliantIcon compliant={compliant} />}\n          <Text\n            ouiaId=\"PolicyCardFailedRulesScore\"\n            component={TextVariants.small}\n          >\n            {rulesFailed} rule{rulesFailed === 1 ? '' : 's'} failed{' '}\n            <Tooltip\n              position=\"bottom\"\n              maxWidth=\"22em\"\n              content={\n                'The system compliance score is calculated by OpenSCAP and ' +\n                'is a normalized weighted sum of rules selected for this policy.'\n              }\n            >\n              <span>\n                (Score: {supported ? passedPercentage : 'Unsupported'})\n              </span>\n            </Tooltip>\n          </Text>\n        </div>\n        <Text className=\"margin-bottom-none\" component={TextVariants.small}>\n          <Text ouiaId=\"PolicyCardSSGVersion\">SSG version: {ssgVersion}</Text>\n          <Text ouiaId=\"PolicyCardLastScanned\">\n            Last scanned:{' '}\n            {lastScanned !== 'Never' ? (\n              <DateFormat date={Date.parse(lastScanned)} type=\"relative\" />\n            ) : (\n              lastScanned\n            )}\n          </Text>\n        </Text>\n      </CardBody>\n      {!supported && (\n        <CardFooter style={{ padding: '0' }}>\n          <UnsupportedSSGVersion\n            ouiaId=\"PolicyCardUnsupportedSSG\"\n            ssgVersion={ssgVersion}\n            style={{\n              paddingTop: 'var(--pf-c-alert--PaddingTop)',\n              paddingRight: 'var(--pf-c-card--child--PaddingRight)',\n              paddingLeft: 'var(--pf-c-card--child--PaddingLeft)',\n              paddingBottom: 'var(--pf-c-alert--PaddingBottom)',\n            }}\n          />\n        </CardFooter>\n      )}\n    </Card>\n  );\n};\n\nSystemPolicyCard.propTypes = {\n  policy: PropTypes.shape({\n    rulesPassed: PropTypes.number,\n    rulesFailed: PropTypes.number,\n    score: PropTypes.number,\n    lastScanned: PropTypes.string,\n    refId: PropTypes.string,\n    name: PropTypes.string,\n    policyType: PropTypes.string,\n    compliant: PropTypes.bool,\n    benchmark: PropTypes.object,\n    supported: PropTypes.bool,\n  }),\n  style: PropTypes.object,\n  onClick: PropTypes.func,\n  isSelected: PropTypes.bool,\n};\n\nexport default SystemPolicyCard;\n","import React from 'react';\nimport { GridItem, Card, CardBody } from '@patternfly/react-core';\nimport { Instagram } from 'react-content-loader';\n\nconst LoadingPolicyCards = () =>\n  [...Array(3)].map((_item, i) => (\n    <GridItem span={4} key={i}>\n      <Card>\n        <CardBody>\n          <Instagram />\n        </CardBody>\n      </Card>\n    </GridItem>\n  ));\n\nexport default LoadingPolicyCards;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport SystemPolicyCard from '../SystemPolicyCard';\nimport LoadingPolicyCards from './components/LoadingPolicyCards';\n\nconst SystemPolicyCards = ({\n  policies = [],\n  selectedPolicies,\n  onCardClick,\n  loading,\n}) => {\n  const policiesToShow = policies.filter(\n    (policy) => policy.rulesFailed + policy.rulesPassed > 0\n  );\n\n  return (\n    <Grid hasGutter>\n      {loading ? (\n        <LoadingPolicyCards />\n      ) : (\n        policiesToShow.map((policy, i) => (\n          <GridItem sm={12} md={12} lg={6} xl={4} key={i}>\n            <SystemPolicyCard\n              policy={policy}\n              style={{ height: '100%' }}\n              onClick={(policy) => onCardClick(policy)}\n              isSelected={selectedPolicies?.find(\n                (policyId) => policyId === policy.id\n              )}\n            />\n          </GridItem>\n        ))\n      )}\n    </Grid>\n  );\n};\n\nSystemPolicyCards.propTypes = {\n  policies: propTypes.array,\n  loading: propTypes.bool,\n  onCardClick: propTypes.func,\n  selectedPolicies: propTypes.string,\n};\n\nexport default SystemPolicyCards;\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Button, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { DisconnectedIcon } from '@patternfly/react-icons';\nvar NotConnected = function (_a) {\n    var _b = _a.titleText, titleText = _b === void 0 ? 'This system isn’t connected to Insights yet' : _b, _c = _a.bodyText, bodyText = _c === void 0 ? 'To get started, activate the Insights client for this system.' : _c, _d = _a.buttonText, buttonText = _d === void 0 ? 'Learn how to activate the Insights client' : _d;\n    return (_jsxs(EmptyState, { children: [_jsx(EmptyStateIcon, { icon: DisconnectedIcon }), _jsx(Title, __assign({ headingLevel: \"h5\", size: \"lg\" }, { children: titleText })), _jsx(EmptyStateBody, { children: bodyText }), _jsx(Button, __assign({ variant: \"primary\", component: \"a\", href: \"https://access.redhat.com/products/red-hat-insights/\", target: \"_blank\", rel: \"noopener noreferrer\", className: \"pf-u-mt-lg\" }, { children: buttonText }))] }));\n};\nexport default NotConnected;\n//# sourceMappingURL=NotConnected.js.map","import React from 'react';\nimport {\n  LinkButton,\n  LinkWithPermission as Link,\n} from 'PresentationalComponents';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport {\n  Title,\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStatePrimary,\n  EmptyStateSecondaryActions,\n  EmptyStateIcon,\n} from '@patternfly/react-core';\n\nconst NoPoliciesState = () => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        This system is not part of any SCAP policies defined within Compliance.\n      </Title>\n      <EmptyStateBody>\n        To assess and monitor compliance against a SCAP policy for this system,\n        add it to an existing policy or create a new policy.\n      </EmptyStateBody>\n      <EmptyStatePrimary>\n        <Link\n          to=\"/scappolicies/new\"\n          Component={LinkButton}\n          componentProps={{\n            variant: 'primary',\n            ouiaId: 'CreateNewPolicyButton',\n          }}\n        >\n          Create new policy\n        </Link>\n      </EmptyStatePrimary>\n      <EmptyStateSecondaryActions>\n        <Link variant=\"plain\" to=\"/scappolicies\">\n          View compliance policies\n        </Link>\n      </EmptyStateSecondaryActions>\n    </EmptyState>\n  </Bullseye>\n);\n\nexport default NoPoliciesState;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { CloudSecurityIcon } from '@patternfly/react-icons';\nimport {\n  Title,\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n} from '@patternfly/react-core';\n\nconst NoReportsState = ({ system }) => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon\n        icon={CloudSecurityIcon}\n        title=\"Compliance\"\n        size=\"xl\"\n        style={{\n          fontWeight: '500',\n          color: 'var(--pf-global--primary-color--100)',\n        }}\n      />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        No results reported\n      </Title>\n      <EmptyStateBody>\n        This system is part of {system?.policies?.length}\n        {system?.policies?.length > 1 ? ' policies' : ' policy'}, but has not\n        returned any results.\n      </EmptyStateBody>\n      <EmptyStateBody>\n        Reports are returned when the system checks into Insights. By default,\n        systems check in every 24 hours.\n      </EmptyStateBody>\n    </EmptyState>\n  </Bullseye>\n);\n\nNoReportsState.propTypes = {\n  system: propTypes.shape({\n    policies: propTypes.array,\n  }),\n};\n\nexport default NoReportsState;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\nimport NoPoliciesState from './NoPoliciesState';\nimport NoReportsState from './NoReportsState';\n\nconst EmptyState = ({ system }) => {\n  if (!system?.insightsId) {\n    return <NotConnected />;\n  } else {\n    if (!system?.hasPolicy) {\n      return <NoPoliciesState system={system} />;\n    } else if (system?.hasPolicy && system?.testResultProfiles?.length === 0) {\n      return <NoReportsState system={system} />;\n    }\n  }\n};\n\nEmptyState.propTypes = {\n  system: propTypes.object,\n};\n\nexport default EmptyState;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport SystemPolicyCards from '../../PresentationalComponents/SystemPolicyCards';\nimport RulesTable from '@/PresentationalComponents/RulesTable/RulesTable';\nimport ComplianceEmptyState from 'PresentationalComponents/ComplianceEmptyState';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport './compliance.scss';\nimport { ErrorCard } from 'PresentationalComponents';\n\nimport EmptyState from './EmptyState';\n\nconst QUERY = gql`\n  query CD_System($systemId: String!) {\n    system(id: $systemId) {\n      id\n      name\n      hasPolicy\n      insightsId\n      policies {\n        id\n      }\n      testResultProfiles {\n        id\n        name\n        policyType\n        refId\n        compliant\n        rulesFailed\n        rulesPassed\n        lastScanned\n        score\n        supported\n        osMajorVersion\n        benchmark {\n          version\n          ruleTree\n        }\n        policy {\n          id\n        }\n        rules {\n          id\n          title\n          severity\n          rationale\n          refId\n          description\n          compliant\n          remediationAvailable\n          references\n          identifier\n          precedence\n        }\n      }\n    }\n  }\n`;\n\nconst SystemQuery = ({ data: { system }, loading, hidePassed }) => {\n  const [selectedPolicy, setSelectedPolicy] = useState(\n    system.testResultProfiles[0]?.id\n  );\n  const policies = system?.testResultProfiles;\n\n  return (\n    <>\n      <SystemPolicyCards policies={policies} loading={loading} />\n      <br />\n      {system?.testResultProfiles?.length ? (\n        <>\n          {system.testResultProfiles.length > 1 && (\n            <Tabs\n              activeKey={selectedPolicy}\n              style={{ background: 'var(--pf-global--BackgroundColor--100)' }}\n            >\n              {system.testResultProfiles.map((policy, idx) => {\n                return (\n                  <Tab\n                    key={'policy-tab-' + idx}\n                    eventKey={policy.id}\n                    title={<TabTitleText> {policy.name} </TabTitleText>}\n                    onClick={() => {\n                      setSelectedPolicy(policy.id);\n                    }}\n                  />\n                );\n              })}\n            </Tabs>\n          )}\n          <RulesTable\n            ansibleSupportFilter\n            hidePassed={hidePassed}\n            showFailedCounts\n            system={{\n              ...system,\n              supported:\n                (system?.testResultProfiles || []).filter(\n                  (profile) => profile.supported\n                ).length > 0,\n            }}\n            profileRules={system?.testResultProfiles\n              .filter((policy) => selectedPolicy === policy.id)\n              .map((profile) => ({\n                system,\n                profile,\n                rules: profile.rules,\n              }))}\n            loading={loading}\n            options={{\n              sortBy: {\n                index: 4,\n                direction: 'asc',\n                property: 'severity',\n              },\n            }}\n          />\n        </>\n      ) : (\n        <EmptyState system={system} />\n      )}\n    </>\n  );\n};\n\nSystemQuery.propTypes = {\n  data: propTypes.shape({\n    system: propTypes.shape({\n      hasPolicy: propTypes.bool,\n      policies: propTypes.shape({\n        id: propTypes.string,\n      }),\n      profiles: propTypes.array,\n      testResultProfiles: propTypes.array,\n    }),\n  }),\n  loading: propTypes.bool,\n  hidePassed: propTypes.bool,\n};\n\nSystemQuery.defaultProps = {\n  loading: true,\n};\n\nexport const Details = ({ inventoryId, hidePassed, ...props }) => {\n  const { data, error, loading } = useQuery(QUERY, {\n    variables: { systemId: inventoryId },\n    fetchPolicy: 'no-cache',\n  });\n  const is404 = error?.networkError?.statusCode === 404;\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  if (error && !is404) {\n    // network errors other than 404 are unexpected\n    return <ErrorCard />;\n  }\n\n  return (\n    <div className=\"ins-c-compliance__scope\">\n      {!data?.system || is404 ? (\n        <ComplianceEmptyState title=\"No policies are reporting for this system\" />\n      ) : (\n        <SystemQuery\n          {...props}\n          hidePassed={hidePassed}\n          data={data}\n          loading={loading}\n        />\n      )}\n    </div>\n  );\n};\n\nDetails.propTypes = {\n  inventoryId: propTypes.string,\n  hidePassed: propTypes.bool,\n};\n\nexport default Details;\n"],"names":["PlusCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","PlusCircleIcon","UnsupportedSSGVersion","_ref","ssgVersion","style","props","_objectWithoutProperties","_excluded","footerContent","React","target","rel","href","supportedConfigsLink","Alert","_extends","variant","isInline","title","Popover","position","bodyContent","OutlinedQuestionCircleIcon","marginLeft","cursor","color","propTypes","CompliantIcon","compliant","className","CheckCircleIcon","ExclamationCircleIcon","SystemPolicyCard","policy","onClick","isSelected","rulesFailed","lastScanned","score","benchmark","version","supported","policyType","passedPercentage","value","fixed","arguments","length","undefined","withPercent","toFixed","truncateDefaults","expandOnMouseOver","hideExpandText","Card","ouiaId","event","stopPropagation","CardBody","TextContent","Text","component","TextVariants","h4","Truncate","text","small","Tooltip","maxWidth","content","DateFormat","date","Date","parse","type","CardFooter","padding","paddingTop","paddingRight","paddingLeft","paddingBottom","PropTypes","rulesPassed","refId","_toConsumableArray","Array","map","_item","i","GridItem","span","key","Instagram","SystemPolicyCards","_ref$policies","policies","selectedPolicies","onCardClick","loading","policiesToShow","filter","Grid","hasGutter","LoadingPolicyCards","sm","md","lg","xl","find","policyId","id","__assign","Object","assign","t","s","n","p","prototype","hasOwnProperty","call","apply","this","_a","_b","titleText","_c","bodyText","_d","buttonText","EmptyState","children","EmptyStateIcon","icon","DisconnectedIcon","Title","headingLevel","size","EmptyStateBody","Button","Bullseye","EmptyStatePrimary","Link","to","Component","LinkButton","componentProps","EmptyStateSecondaryActions","NoReportsState","_system$policies","_system$policies2","system","CloudSecurityIcon","fontWeight","_system$testResultPro","insightsId","hasPolicy","testResultProfiles","NoPoliciesState","NotConnected","QUERY","gql","_templateObject","_taggedTemplateLiteral","SystemQuery","_system$testResultPro2","data","hidePassed","_useState","useState","_useState2","_slicedToArray","selectedPolicy","setSelectedPolicy","Tabs","activeKey","background","idx","Tab","eventKey","TabTitleText","RulesTable","ansibleSupportFilter","showFailedCounts","_objectSpread","profile","profileRules","rules","options","sortBy","index","direction","property","profiles","defaultProps","Details","_ref2","_error$networkError","inventoryId","_useQuery","useQuery","variables","systemId","fetchPolicy","error","is404","networkError","statusCode","Spinner","ErrorCard","ComplianceEmptyState"],"sourceRoot":""}