{"version":3,"file":"js/650.a2e3193c3d6bfec591fb.js","mappings":"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","sources":["webpack:///./src/SmartComponents/ComplianceSystems/ComplianceSystems.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeDetailsRow.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeTable.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeTooltip.js","webpack:///./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/constants.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyProfilesRules.js","webpack:///./src/SmartComponents/CreatePolicy/hooks/useBenchmarksQuery.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack:///./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack:///./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack:///./src/SmartComponents/DeletePolicy/DeletePolicy.js","webpack:///./src/SmartComponents/DeleteReport/DeleteReport.js","webpack:///./src/SmartComponents/EditPolicy/constants.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyRulesTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicySystemsTab.js","webpack:///./src/SmartComponents/EditPolicy/components/NewRulesAlert.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyForm.js","webpack:///./src/SmartComponents/EditPolicy/hooks/index.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicy.js","webpack:///./src/SmartComponents/SystemsTable/Cells.js","webpack:///./src/SmartComponents/SystemsTable/Columns.js","webpack:///./src/SmartComponents/InventoryDetails/InventoryDetails.js","webpack:///./src/PresentationalComponents/ComplianceRemediationButton/constants.js","webpack:///./src/PresentationalComponents/ComplianceRemediationButton/RemediationButton.js","webpack:///./src/PresentationalComponents/ComplianceRemediationButton/hooks.js","webpack:///./src/SmartComponents/SystemsTable/constants.js","webpack:///./src/SmartComponents/SystemsTable/hooks.js","webpack:///./src/SmartComponents/SystemsTable/SystemsTable.js","webpack:///./src/Utilities/hooks/usePolicyQuery/constants.js","webpack:///./src/Utilities/hooks/usePolicyQuery/usePolicyQuery.js","webpack:///./src/Utilities/hooks/usePolicyQuery/helpers.js","webpack:///./src/Utilities/hooks/usePromiseQueue.js","webpack:///./src/store/Reducers/SystemStore.js"],"sourcesContent":["/* eslint-disable react/display-name */\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { nowrap } from '@patternfly/react-table';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport { SystemsTable } from 'SmartComponents';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst QUERY = gql`\n  {\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n        }\n      }\n    }\n  }\n`;\n\nconst DEFAULT_FILTER = 'has_test_results = true or has_policy = true';\n\nexport const ComplianceSystems = () => {\n  const { data, error, loading } = useQuery(QUERY);\n  const policies = data?.profiles?.edges.map(({ node }) => node);\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"page-header\">\n        <PageHeaderTitle title=\"Compliance systems\" />\n      </PageHeader>\n      <section className=\"pf-c-page__main-section\">\n        <StateViewWithError stateValues={{ error, data, loading }}>\n          <StateViewPart stateKey=\"data\">\n            {policies && (\n              <SystemsTable\n                columns={[\n                  Columns.customName({\n                    showLink: true,\n                  }),\n                  Columns.inventoryColumn('tags'),\n                  Columns.OS,\n                  Columns.Policies,\n                  Columns.inventoryColumn('updated', {\n                    props: { isStatic: true },\n                    transforms: [nowrap],\n                  }),\n                ]}\n                defaultFilter={DEFAULT_FILTER}\n                systemProps={{\n                  isFullView: true,\n                }}\n                showOsMinorVersionFilter={policies.map(\n                  (policy) => policy.osMajorVersion\n                )}\n                showComplianceSystemsInfo\n                enableEditPolicy={false}\n                remediationsEnabled={false}\n                policies={policies}\n              />\n            )}\n          </StateViewPart>\n        </StateViewWithError>\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default ComplianceSystems;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Text } from '@patternfly/react-core';\n\nconst PolicyTypeDetailsRow = ({ item: { description }, key }) => {\n  return (\n    <Text key={key} style={{ margin: 'var(--pf-global--spacer--lg) 0' }}>\n      {description}\n    </Text>\n  );\n};\n\nPolicyTypeDetailsRow.propTypes = {\n  item: propTypes.object,\n  key: propTypes.string,\n};\n\nexport default PolicyTypeDetailsRow;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { fitContent, info } from '@patternfly/react-table';\nimport { InUseProfileLabel } from 'PresentationalComponents';\nimport { TableToolsTable } from 'Utilities/hooks/useTableTools';\nimport { renderComponent } from 'Utilities/helpers';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport PolicyTypeDetailsRow from './PolicyTypeDetailsRow';\nimport { emptyRows } from 'Utilities/hooks/useTableTools/Components/NoResultsTable';\n\nconst NameCell = ({ name, disabled }) => {\n  return (\n    <>\n      {disabled && <InUseProfileLabel compact />}\n      {name}\n    </>\n  );\n};\n\nNameCell.propTypes = {\n  name: propTypes.string,\n  disabled: propTypes.boolean,\n};\n\nconst PolicyTypeTable = ({ profiles, onChange, selectedProfile }) => {\n  const columns = [\n    {\n      title: 'Policy name',\n      key: 'name',\n      transforms: [\n        info({\n          tooltip:\n            'In use policies have already been used and therefore can not be applied to another SCAP Policy under the selected OS.',\n        }),\n      ],\n      sortByProp: 'name',\n      renderFunc: renderComponent(NameCell),\n    },\n    {\n      title: 'Supported OS versions',\n      transforms: [fitContent],\n      sortByProp: 'supportedOsVersions',\n      renderFunc: (_data, _id, profile) =>\n        profile.supportedOsVersions.join(', '),\n    },\n  ];\n\n  return (\n    <TableToolsTable\n      items={profiles.map((profile) => ({\n        ...profile,\n        rowProps: {\n          selected: profile.id === selectedProfile?.id,\n          disableSelection: profile.disabled,\n        },\n      }))}\n      filters={{\n        filterConfig: [\n          {\n            type: conditionalFilterType.text,\n            label: 'Policy Name',\n            filter: (policyTypes, value) =>\n              policyTypes.filter((policyType) =>\n                policyType?.name.toLowerCase().includes(value.toLowerCase())\n              ),\n          },\n        ],\n      }}\n      columns={columns}\n      options={{\n        detailsComponent: PolicyTypeDetailsRow,\n        onRadioSelect: (_event, _value, _rowIdx, { itemId }) =>\n          onChange && onChange(profiles.find(({ id }) => id === itemId)),\n        sortBy: {\n          index: 2,\n          direction: 'asc',\n          property: 'name',\n        },\n        emptyRows: emptyRows('policy types', columns.length),\n      }}\n      variant=\"compact\"\n    />\n  );\n};\n\nPolicyTypeTable.propTypes = {\n  profiles: propTypes.array,\n  onChange: propTypes.func,\n  selectedProfile: propTypes.string,\n};\n\nexport default PolicyTypeTable;\n","import React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\n\nconst PolicyTypeTooltip = () => (\n  <Tooltip\n    position=\"right\"\n    content=\"Policy types are OpenSCAP policies that are supported by RHEL.\n        For each major version of RHEL, users can create one policy of each type.\"\n  >\n    <OutlinedQuestionCircleIcon className=\"grey-icon\" />\n  </Tooltip>\n);\n\nexport default PolicyTypeTooltip;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  Tile,\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport PolicyTypesTable from './Components/PolicyTypeTable';\nimport PolicyTypeTooltip from './Components/PolicyTypeTooltip';\n\nconst SUPPORTED_PROFILES = gql`\n  query supportedProfilesByOSMajor {\n    osMajorVersions {\n      edges {\n        node {\n          osMajorVersion\n          profiles {\n            id\n            name\n            refId\n            description\n            supportedOsVersions\n            benchmark {\n              id\n              refId\n            }\n          }\n        }\n      }\n    }\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          refId\n          benchmark {\n            refId\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const CreateSCAPPolicy = ({\n  change,\n  selectedProfile,\n  selectedOsMajorVersion,\n}) => {\n  const { data, error, loading } = useQuery(SUPPORTED_PROFILES, {\n    fetchPolicy: 'no-cache',\n  });\n  const isInUse = (profileRefId, benchmarkRedId) =>\n    !!data?.profiles?.edges\n      .map(({ node }) => node)\n      .find(\n        (profile) =>\n          profile.refId === profileRefId &&\n          benchmarkRedId === profile.benchmark.refId\n      );\n  const osMajorVersions = data?.osMajorVersions?.edges.map(({ node }) => node);\n  const selectedOsMajorVersionObject = osMajorVersions?.find(\n    ({ osMajorVersion }) => osMajorVersion === selectedOsMajorVersion\n  );\n  const profilesToSelect = selectedOsMajorVersionObject?.profiles.map(\n    (profile) => ({\n      ...profile,\n      disabled: isInUse(profile.refId, profile.benchmark.refId),\n    })\n  );\n\n  return (\n    <StateViewWithError stateValues={{ error, data, loading }}>\n      <StateViewPart stateKey=\"loading\">\n        <Spinner />\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <TextContent>\n          <Text component={TextVariants.h1} className=\"pf-u-mb-md\">\n            Create SCAP policy\n          </Text>\n          <Text className=\"pf-u-mb-md\">\n            Select the operating system and policy type for this policy.\n          </Text>\n        </TextContent>\n        <Form>\n          <FormGroup label=\"Operating system\" isRequired fieldId=\"benchmark\">\n            {osMajorVersions &&\n              osMajorVersions.map(({ osMajorVersion }) => (\n                <Tile\n                  key={`rhel${osMajorVersion}-select`}\n                  className=\"pf-u-mr-md\"\n                  title={`RHEL ${osMajorVersion}`}\n                  onClick={() => {\n                    change('osMajorVersion', osMajorVersion);\n                  }}\n                  isSelected={selectedOsMajorVersion === osMajorVersion}\n                  isStacked\n                />\n              ))}\n          </FormGroup>\n\n          {selectedOsMajorVersion && (\n            <FormGroup\n              isRequired\n              labelIcon={<PolicyTypeTooltip />}\n              label=\"Policy type\"\n              fieldId=\"policy-type\"\n            >\n              <PolicyTypesTable\n                aria-label=\"PolicyTypeTable\"\n                profiles={profilesToSelect}\n                onChange={(policy) => {\n                  change('profile', policy);\n                  change('benchmark', policy.benchmark.id);\n                  change('selectedRuleRefIds', undefined);\n                  change('systems', []);\n                }}\n                selectedProfile={selectedProfile}\n              />\n            </FormGroup>\n          )}\n        </Form>\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nCreateSCAPPolicy.propTypes = {\n  change: reduxFormPropTypes.change,\n  selectedProfile: propTypes.object,\n  selectedOsMajorVersion: propTypes.string,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    selectedProfile: selector(state, 'profile'),\n    selectedOsMajorVersion: selector(state, 'osMajorVersion'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(CreateSCAPPolicy);\n","import gql from 'graphql-tag';\n\nexport const BENCHMARKS_QUERY = gql`\n  query CP_Benchmarks($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        ruleTree\n        valueDefinitions {\n          defaultValue\n          description\n          id\n          refId\n          title\n          valueType\n        }\n        profiles {\n          id\n          refId\n          osMajorVersion\n        }\n        version\n      }\n    }\n  }\n`;\n\nexport const BENCHMARKS_RULES_TREES_QUERY = gql`\n  query CP_BenchmarksRuleTree($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        ruleTree\n      }\n    }\n  }\n`;\n\nexport const BENCHMARKS_VALUE_DEFINITIONS_QUERY = gql`\n  query CP_BenchmarksValueDefinitions($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        ruleTree\n        valueDefinitions {\n          defaultValue\n          description\n          id\n          refId\n          title\n          valueType\n        }\n        profiles {\n          id\n          refId\n          osMajorVersion\n        }\n        version\n      }\n    }\n  }\n`;\n\nexport const PROFILES_QUERY = gql`\n  query CP_Profiles($filter: String!) {\n    profiles(search: $filter) {\n      edges {\n        node {\n          id\n          refId\n          osMinorVersion\n          benchmark {\n            id\n            latestSupportedOsMinorVersions\n          }\n          rules {\n            refId\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { useMemo, useLayoutEffect } from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  Title,\n  Text,\n  TextContent,\n  TextVariants,\n  EmptyState,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\nimport useBenchmarksQuery from './hooks/useBenchmarksQuery';\nimport { PROFILES_QUERY } from './constants';\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nexport const EditPolicyProfilesRules = ({\n  policy,\n  selectedRuleRefIds,\n  change,\n  osMajorVersion,\n  osMinorVersionCounts,\n  ruleValues,\n}) => {\n  const columns = [Columns.Name, Columns.Severity, Columns.Remediation];\n  const osMinorVersions = osMinorVersionCounts\n    .map((i) => i.osMinorVersion)\n    .sort();\n  const {\n    data: benchmarksData,\n    error: benchmarksError,\n    loading: benchmarksLoading,\n  } = useBenchmarksQuery({\n    osMajorVersion,\n    osMinorVersions,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  const tabsData = useMemo(\n    () =>\n      osMinorVersionCounts\n        .map(({ osMinorVersion, count: systemCount }) => {\n          osMinorVersion = `${osMinorVersion}`;\n          let profile;\n          if (benchmarks) {\n            const benchmark = getBenchmarkBySupportedOsMinor(\n              benchmarks,\n              osMinorVersion\n            );\n            if (benchmark) {\n              profile = getBenchmarkProfile(benchmark, policy.refId);\n              if (profile) {\n                profile = {\n                  ...profile,\n                  benchmark: {\n                    ...profile.benchmark,\n                    ...benchmark,\n                  },\n                };\n              }\n            }\n          }\n\n          return {\n            profile,\n            systemCount,\n            newOsMinorVersion: osMinorVersion,\n          };\n        })\n        .filter(({ profile }) => !!profile),\n    [osMinorVersionCounts, benchmarks, policy]\n  );\n\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n  const profileIds = Object.keys(profileToOsMinorMap);\n  const filter = profileIds.map((i) => `id = ${i}`).join(' OR ');\n\n  const {\n    data: profilesData,\n    error: profilesError,\n    loading: profilesLoading,\n  } = useQuery(PROFILES_QUERY, {\n    variables: {\n      filter,\n    },\n    skip: profileIds.length === 0,\n    fetchPolicy: 'no-cache',\n  });\n\n  const error = benchmarksError || profilesError;\n  const dataState = profileIds?.length > 0 ? profilesData : undefined;\n  const loadingState = profilesLoading || benchmarksLoading ? true : undefined;\n  const noRuleSets = !error && !loadingState && profileIds?.length === 0;\n  const profiles = profilesData?.profiles.edges.map((p) => p.node);\n\n  const setSelectedRuleRefIds = (newSelection) => {\n    change('selectedRuleRefIds', newSelection);\n  };\n\n  const setRuleValues = (policyId, valueDefinition, valueValue) => {\n    const newRuleValues = {\n      ...(ruleValues || {}),\n      [policyId]: {\n        ...(ruleValues || {})[policyId],\n        [valueDefinition.refId]: valueValue,\n      },\n    };\n\n    change('ruleValues', newRuleValues);\n  };\n\n  useLayoutEffect(() => {\n    if (!loadingState) {\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      const newSelection = profilesWithRulesToSelection(\n        profilesWithOs,\n        selectedRuleRefIds,\n        { only: true }\n      );\n      setSelectedRuleRefIds(newSelection);\n    }\n  }, [JSON.stringify(profiles), loadingState]);\n\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-pb-md\">\n        <Text component={TextVariants.h1}>Rules</Text>\n        <Text>\n          Customize your <b>{policy.name}</b> SCAP policy by including and\n          excluding rules.\n        </Text>\n        <Text>\n          Each release of RHEL is supported with a unique and specific version\n          of the SCAP Security Guide (SSG). You must customize each version of\n          SSG for each release of RHEL.\n        </Text>\n      </TextContent>\n\n      <StateViewWithError\n        stateValues={{\n          error,\n          data: dataState,\n          loading: loadingState,\n          noRuleSets,\n        }}\n      >\n        <StateViewPart stateKey=\"noRuleSets\">\n          <EmptyState>\n            <Title headingLevel=\"h1\" size=\"xl\">\n              No rules can be configured\n            </Title>\n            <EmptyStateBody>\n              The policy type selected does not exist for the systems and OS\n              versions selected in the previous steps.\n            </EmptyStateBody>\n          </EmptyState>\n        </StateViewPart>\n        <StateViewPart stateKey=\"loading\">\n          <EmptyTable>\n            <Spinner />\n          </EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n          <TabbedRules\n            tabsData={tabsData}\n            selectedRuleRefIds={selectedRuleRefIds}\n            setRuleValues={setRuleValues}\n            ruleValues={ruleValues}\n            columns={columns}\n            remediationsEnabled={false}\n            selectedFilter\n            level={1}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            ouiaId=\"RHELVersions\"\n            resetLink={true}\n            rulesPageLink={true}\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </React.Fragment>\n  );\n};\n\nEditPolicyProfilesRules.propTypes = {\n  policy: propTypes.object,\n  change: reduxFormPropTypes.change,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  selectedRuleRefIds: propTypes.array,\n  ruleValues: propTypes.array,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    policy: selector(state, 'profile'),\n    osMajorVersion: selector(state, 'osMajorVersion'),\n    osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n    selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n    ruleValues: selector(state, 'ruleValues'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyProfilesRules);\n","import { useMemo, useCallback } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { logMultipleErrors } from 'Utilities/helpers';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport {\n  BENCHMARKS_QUERY,\n  BENCHMARKS_RULES_TREES_QUERY,\n  BENCHMARKS_VALUE_DEFINITIONS_QUERY,\n} from '../constants';\n\nconst compileData = (benchmarksData, ruleTreesData, valueDefinitionsData) => ({\n  benchmarks: {\n    nodes: benchmarksData?.benchmarks.nodes.map((node) => {\n      const ruleTree = ruleTreesData?.benchmarks.nodes.find(\n        ({ id }) => id === node.id\n      )?.ruleTree;\n      const valueDefinitions = valueDefinitionsData?.benchmarks.nodes.find(\n        ({ id }) => id === node.id\n      )?.valueDefinitions;\n\n      return {\n        ...node,\n        ruleTree,\n        valueDefinitions,\n      };\n    }),\n  },\n});\n\nconst useBenchmarksQuery = ({ osMajorVersion, osMinorVersions }) => {\n  const filter =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const ruleGroupsEnabled = useFeature('ruleGroups');\n  const valueEditingEnabled = useFeature('valueEditing');\n\n  const {\n    data: benchmarksData,\n    error: benchmarksError,\n    loading: benchmarksLoading,\n    refetch: refetchProfiles,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter,\n    },\n    skip: osMinorVersions.length === 0,\n    fetchPolicy: 'no-cache',\n  });\n\n  const {\n    data: ruleTreesData,\n    error: ruleTreesError,\n    loading: ruleTreesLoading,\n    refetch: refecthRuleTrees,\n  } = useQuery(BENCHMARKS_RULES_TREES_QUERY, {\n    variables: { filter },\n    skip: osMinorVersions.length === 0 || !ruleGroupsEnabled,\n    fetchPolicy: 'no-cache',\n  });\n\n  const {\n    data: valueDefinitionsData,\n    error: valueDefinitionsError,\n    loading: valueDefinitionsLoading,\n    refetch: refecthValueDefinitions,\n  } = useQuery(BENCHMARKS_VALUE_DEFINITIONS_QUERY, {\n    variables: { filter },\n    skip: osMinorVersions.length === 0 || !valueEditingEnabled,\n    fetchPolicy: 'no-cache',\n  });\n\n  const data = useMemo(\n    () => compileData(benchmarksData, ruleTreesData, valueDefinitionsData),\n    [benchmarksData, ruleTreesData, valueDefinitionsData]\n  );\n\n  const error = useMemo(\n    () =>\n      logMultipleErrors(benchmarksError, ruleTreesError, valueDefinitionsError),\n    [benchmarksError, ruleTreesError, valueDefinitionsError]\n  );\n\n  const loading =\n    benchmarksLoading || ruleTreesLoading || valueDefinitionsLoading;\n\n  const refetch = useCallback(() => {\n    refetchProfiles();\n    refecthRuleTrees();\n    refecthValueDefinitions();\n  }, [refetchProfiles, refecthRuleTrees, refecthValueDefinitions]);\n\n  return {\n    data,\n    error,\n    loading,\n    refetch,\n  };\n};\n\nexport default useBenchmarksQuery;\n","import React from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  reduxForm,\n  formValueSelector,\n} from 'redux-form';\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  WizardContextConsumer,\n} from '@patternfly/react-core';\nimport { SystemsTable } from 'SmartComponents';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { countOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n        <br />\n        Policies must be created with at least one system.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Choose a different operating system, or connect{' '}\n        <b>RHEL {osMajorVersion}</b> systems to Insights.\n      </Text>\n    </TextContent>\n    <WizardContextConsumer>\n      {({ goToStepById }) => (\n        <Button onClick={() => goToStepById(1)}>\n          Choose a different operating system\n        </Button>\n      )}\n    </WizardContextConsumer>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n        <br />\n        Systems can be added or removed at any time.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nexport const EditPolicySystems = ({\n  policy,\n  change,\n  osMajorVersion,\n  selectedSystems,\n}) => {\n  const onSystemSelect = (newSelectedSystems) => {\n    change('systems', newSelectedSystems);\n    change('osMinorVersionCounts', countOsMinorVersions(newSelectedSystems));\n  };\n  const osMinorVersions = policy.supportedOsVersions.map(\n    (version) => version.split('.')[1]\n  );\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-mb-md\">\n        <Text component={TextVariants.h1}>Systems</Text>\n      </TextContent>\n      <Form>\n        <FormGroup>\n          <SystemsTable\n            showOsMinorVersionFilter={[osMajorVersion]}\n            prependComponent={\n              <PrependComponent osMajorVersion={osMajorVersion} />\n            }\n            emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n            columns={[\n              {\n                ...Columns.Name,\n                props: {\n                  width: 40,\n                },\n                sortBy: ['name'],\n              },\n              Columns.inventoryColumn('tags'),\n              Columns.OperatingSystem,\n            ]}\n            remediationsEnabled={false}\n            compact\n            showActions={false}\n            defaultFilter={\n              osMajorVersion &&\n              `os_major_version = ${osMajorVersion} AND os_minor_version ^ (${osMinorVersions.join(\n                ','\n              )})`\n            }\n            enableExport={false}\n            preselectedSystems={selectedSystems}\n            onSelect={onSystemSelect}\n          />\n        </FormGroup>\n      </Form>\n    </React.Fragment>\n  );\n};\n\nEditPolicySystems.propTypes = {\n  osMajorVersion: propTypes.string,\n  policy: propTypes.object,\n  selectedSystems: propTypes.array,\n  change: reduxFormPropTypes.change,\n};\n\nEditPolicySystems.defaultProps = {\n  selectedSystems: [],\n};\n\nconst selector = formValueSelector('policyForm');\nconst mapStateToProps = (state) => ({\n  policy: selector(state, 'profile'),\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  selectedSystems: selector(state, 'systems'),\n});\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicySystems);\n","import React, { useEffect } from 'react';\nimport { compose } from 'redux';\nimport {\n  Field,\n  reduxForm,\n  formValueSelector,\n  propTypes as reduxFormPropTypes,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  ReduxFormTextInput,\n  ReduxFormTextArea,\n} from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport {\n  ProfileThresholdField,\n  PolicyBusinessObjectiveTooltip,\n} from 'PresentationalComponents';\n\nexport const EditPolicyDetails = ({ change, policy, refId }) => {\n  useEffect(() => {\n    if (policy && policy.refId !== refId) {\n      change('name', `${policy.name}`);\n      change('refId', `${policy.refId}`);\n      change('description', `${policy.description}`);\n    }\n  }, [policy]);\n\n  return (\n    <React.Fragment>\n      <TextContent>\n        <Text component={TextVariants.h1}>Details</Text>\n      </TextContent>\n      <br />\n      <Form id=\"editpolicydetails\">\n        <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n          <Field\n            component={ReduxFormTextInput}\n            type=\"text\"\n            isRequired={true}\n            id=\"name\"\n            name=\"name\"\n            aria-describedby=\"name\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            isDisabled\n            id=\"refId\"\n            name=\"refId\"\n            aria-describedby=\"refId\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Description\" fieldId=\"description\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextArea}\n            id=\"description\"\n            name=\"description\"\n            aria-describedby=\"description\"\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Business objective\"\n          labelIcon={<PolicyBusinessObjectiveTooltip />}\n          fieldId=\"businessObjective\"\n        >\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            id=\"businessObjective\"\n            name=\"businessObjective\"\n            aria-describedby=\"businessObjective\"\n            defaultValue={policy.businessObjective}\n          />\n        </FormGroup>\n        <ProfileThresholdField previousThreshold={100} />\n      </Form>\n    </React.Fragment>\n  );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n  policy: propTypes.object,\n  refId: propTypes.string,\n  change: reduxFormPropTypes.change,\n};\n\nconst mapStateToProps = (state) => {\n  const policy = selector(state, 'profile');\n  return {\n    policy,\n    refId: selector(state, 'refId'),\n    initialValues: {\n      name: `${policy.name}`,\n      refId: `${policy.refId}`,\n      description: `${policy.description}`,\n      benchmark: selector(state, 'benchmark'),\n      osMajorVersion: selector(state, 'osMajorVersion'),\n      profile: selector(state, 'profile'),\n    },\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyDetails);\n","import React from 'react';\nimport {\n  Label,\n  Text,\n  TextVariants,\n  TextContent,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\n\nconst ReviewCreatedPolicy = ({\n  name,\n  businessObjective,\n  complianceThreshold,\n  parentProfileName,\n  osMinorVersionCounts,\n  osMajorVersion,\n}) => (\n  <TextContent>\n    <Text component={TextVariants.h1}>Review</Text>\n    <Text>Review your SCAP policy before finishing.</Text>\n    <Text component={TextVariants.h3} style={{ marginTop: 0 }}>\n      {name}\n    </Text>\n    <TextList component={TextListVariants.dl}>\n      <TextListItem component={TextListItemVariants.dt}>\n        Policy type\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        {parentProfileName}\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dt}>\n        Compliance threshold\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        {complianceThreshold}%\n      </TextListItem>\n      {businessObjective && (\n        <React.Fragment>\n          <TextListItem component={TextListItemVariants.dt}>\n            Business objective\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {businessObjective}\n          </TextListItem>\n        </React.Fragment>\n      )}\n      <TextListItem component={TextListItemVariants.dt}>Systems</TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        <TextList component={TextListVariants.dl}>\n          {osMinorVersionCounts.map(({ osMinorVersion, count }) => (\n            <React.Fragment key={osMinorVersion}>\n              <TextListItem\n                component={TextListItemVariants.dt}\n                style={{ fontWeight: 'normal' }}\n              >\n                RHEL {osMajorVersion}.{osMinorVersion}\n              </TextListItem>\n              <TextListItem component={TextListItemVariants.dd}>\n                <Label color=\"grey\" isCompact={true}>\n                  {count} {count > 1 ? 'systems' : 'system'}\n                </Label>\n              </TextListItem>\n            </React.Fragment>\n          ))}\n        </TextList>\n      </TextListItem>\n    </TextList>\n  </TextContent>\n);\n\nReviewCreatedPolicy.propTypes = {\n  benchmarkId: propTypes.string,\n  refId: propTypes.string,\n  name: propTypes.string,\n  businessObjective: propTypes.string,\n  complianceThreshold: propTypes.number,\n  parentProfileName: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  osMajorVersion: propTypes.string.isRequired,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect((state) => ({\n  benchmarkId: selector(state, 'benchmark'),\n  refId: selector(state, 'refId'),\n  name: selector(state, 'name'),\n  businessObjective: selector(state, 'businessObjective'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  complianceThreshold:\n    parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n  parentProfileName: selector(state, 'profile').name,\n  rulesCount: selector(state, 'selectedRuleRefIds').length,\n}))(ReviewCreatedPolicy);\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Title,\n  Button,\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  List,\n  ListItem,\n} from '@patternfly/react-core';\nimport {\n  ProgressBar,\n  LinkWithPermission as Link,\n} from 'PresentationalComponents';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from '@apollo/client/react/hoc';\nimport { usePolicy } from 'Mutations';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nconst EmtpyStateWithErrors = ({ errors }) =>\n  errors && Array.isArray(errors) && errors.length > 0 ? (\n    <EmptyStateBody className=\"wizard-failed-errors\">\n      <List>\n        {errors.map((error) => (\n          <ListItem key={error}>{error}</ListItem>\n        ))}\n      </List>\n    </EmptyStateBody>\n  ) : null;\n\nEmtpyStateWithErrors.propTypes = {\n  errors: propTypes.array,\n};\n\nexport const FinishedCreatePolicy = ({\n  onWizardFinish,\n  cloneFromProfileId,\n  description,\n  name,\n  complianceThreshold,\n  businessObjective,\n  refId,\n  benchmarkId,\n  systems,\n  selectedRuleRefIds,\n  ruleValues: values,\n}) => {\n  const [percent, setPercent] = useState(0);\n  const [message, setMessage] = useState('This usually takes a minute or two.');\n  const [errors, setErrors] = useState(null);\n  const [failed, setFailed] = useState(false);\n  const updatePolicy = usePolicy();\n\n  const onProgress = (progress) => {\n    setPercent(progress * 100);\n  };\n\n  const submitForm = () => {\n    const newPolicy = {\n      cloneFromProfileId,\n      description,\n      name,\n      complianceThreshold,\n      businessObjective: { title: businessObjective },\n      refId,\n      benchmarkId,\n      hosts: systems,\n      selectedRuleRefIds,\n      values,\n    };\n\n    updatePolicy(null, newPolicy, onProgress)\n      .then(({ id }) => {\n        setPercent(100);\n        setMessage();\n        dispatchNotification({\n          variant: 'success',\n          title: `Created policy \"${name}\"`,\n          autoDismiss: true,\n          description: (\n            <span>\n              From the <strong>SCAP Policies</strong> list, open{' '}\n              <Link to={`/scappolicies/${id}`}>{name}</Link>.\n            </span>\n          ),\n        });\n      })\n      .catch((error) => {\n        setMessage(error.networkError?.message);\n        setErrors(error.networkError?.result?.errors);\n        setFailed(true);\n        dispatchNotification({\n          variant: 'danger',\n          title: 'Error creating policy',\n          description: error.message,\n        });\n      });\n  };\n\n  useEffect(() => {\n    submitForm();\n  }, []);\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={WrenchIcon} />\n        <br />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          Creating policy\n        </Title>\n        <EmptyStateBody>\n          <ProgressBar percent={percent} failed={failed} />\n        </EmptyStateBody>\n        <EmptyStateBody className={failed && 'wizard-failed-message'}>\n          {message}\n        </EmptyStateBody>\n        <EmtpyStateWithErrors error={errors} />\n        <EmptyStateSecondaryActions>\n          {(percent === 100 || failed) && (\n            <Button\n              variant={'primary'}\n              ouiaId=\"ReturnToAppButton\"\n              onClick={() => {\n                onWizardFinish();\n              }}\n            >\n              {failed ? 'Back' : 'Return to application'}\n            </Button>\n          )}\n        </EmptyStateSecondaryActions>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nFinishedCreatePolicy.propTypes = {\n  benchmarkId: propTypes.string.isRequired,\n  businessObjective: propTypes.object,\n  cloneFromProfileId: propTypes.string.isRequired,\n  refId: propTypes.string.isRequired,\n  name: propTypes.string.isRequired,\n  description: propTypes.string,\n  systems: propTypes.array,\n  complianceThreshold: propTypes.number,\n  onWizardFinish: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string).isRequired,\n  ruleValues: propTypes.object,\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => {\n    return {\n      benchmarkId: selector(state, 'benchmark'),\n      businessObjective: selector(state, 'businessObjective'),\n      cloneFromProfileId: selector(state, 'profile').id,\n      refId: selector(state, 'refId'),\n      name: selector(state, 'name'),\n      description: selector(state, 'description'),\n      complianceThreshold:\n        parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n      systems: selector(state, 'systems'),\n      selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n      ruleValues: selector(state, 'ruleValues'),\n    };\n  }),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: true,\n    forceUnregisterOnUnmount: true,\n  }),\n  withApollo\n)(FinishedCreatePolicy);\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { formValueSelector, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport { default as EditPolicyRules } from './EditPolicyProfilesRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport {\n  validateBenchmarkPage,\n  validateDetailsPage,\n  validateRulesPage,\n  validateSystemsPage,\n} from './validate';\n\nexport const CreatePolicyForm = ({\n  benchmark,\n  osMajorVersion,\n  complianceThreshold,\n  name,\n  profile,\n  refId,\n  selectedRuleRefIds,\n  systemIds,\n  reset,\n}) => {\n  const history = useHistory();\n  const [stepIdReached, setStepIdReached] = useState(1);\n  const resetAnchor = () => {\n    const { location } = history;\n    if (location.hash) {\n      history.push({ ...location, hash: '' });\n    }\n  };\n\n  const onNext = ({ id }) => {\n    setStepIdReached(stepIdReached < id ? id : stepIdReached);\n    resetAnchor();\n  };\n\n  const onClose = () => {\n    reset();\n    history.push('/scappolicies');\n  };\n\n  const steps = [\n    {\n      id: 1,\n      name: 'Create SCAP policy',\n      component: <CreateSCAPPolicy />,\n      enableNext: validateBenchmarkPage(benchmark, osMajorVersion, profile),\n    },\n    {\n      id: 2,\n      name: 'Details',\n      component: <EditPolicyDetails />,\n      canJumpTo: stepIdReached >= 2,\n      enableNext: validateDetailsPage(name, refId, complianceThreshold),\n    },\n    {\n      id: 3,\n      name: 'Systems',\n      component: <EditPolicySystems />,\n      canJumpTo: stepIdReached >= 3,\n      enableNext: validateSystemsPage(systemIds),\n    },\n    {\n      id: 4,\n      name: 'Rules',\n      component: <EditPolicyRules />,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 4,\n      enableNext: validateRulesPage(selectedRuleRefIds),\n    },\n    {\n      id: 5,\n      name: 'Review',\n      component: <ReviewCreatedPolicy osMajorVersion={osMajorVersion} />,\n      nextButtonText: 'Finish',\n      canJumpTo:\n        validateRulesPage(selectedRuleRefIds) &&\n        systemIds?.length > 0 &&\n        stepIdReached >= 5,\n    },\n    {\n      id: 6,\n      name: 'Finished',\n      component: <FinishedCreatePolicy onWizardFinish={onClose} />,\n      isFinishedStep: true,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 6,\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <Wizard\n        width={1300}\n        className=\"compliance\"\n        isOpen\n        onNext={onNext}\n        onGoToStep={resetAnchor}\n        onBack={resetAnchor}\n        onClose={onClose}\n        title=\"Create SCAP policy\"\n        description=\"Create a new policy for managing SCAP compliance\"\n        steps={steps}\n      />\n    </React.Fragment>\n  );\n};\n\nCreatePolicyForm.propTypes = {\n  benchmark: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  complianceThreshold: propTypes.string,\n  businessObjective: propTypes.object,\n  dispatch: propTypes.func,\n  isOpen: propTypes.bool,\n  name: propTypes.string,\n  onWizardFinish: propTypes.func,\n  profile: propTypes.string,\n  refId: propTypes.string,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string),\n  systemIds: propTypes.arrayOf(propTypes.string),\n  reset: propTypes.func,\n};\n\nCreatePolicyForm.defaultProps = {\n  isOpen: false,\n};\n\nconst CreatePolicy = reduxForm({\n  form: 'policyForm',\n})(CreatePolicyForm);\n\nconst selector = formValueSelector('policyForm');\nexport default connect((state) => ({\n  benchmark: selector(state, 'benchmark'),\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  businessObjective: selector(state, 'businessObjective'),\n  complianceThreshold: selector(state, 'complianceThreshold') || 100,\n  name: selector(state, 'name'),\n  profile: selector(state, 'profile'),\n  refId: selector(state, 'refId'),\n  selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  systemIds: selector(state, 'systems'),\n}))(CreatePolicy);\n","import { Button, Checkbox, ModalVariant, Text } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { DELETE_PROFILE } from 'Mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ComplianceModal } from 'PresentationalComponents';\nimport { dispatchAction } from 'Utilities/Dispatcher';\n\nconst DeletePolicy = () => {\n  const [deleteEnabled, setDeleteEnabled] = useState(false);\n  const location = useLocation();\n  const history = useHistory();\n  const { name, id } = location.state.policy;\n  const onClose = () => {\n    history.push('/scappolicies');\n  };\n\n  const [deletePolicy] = useMutation(DELETE_PROFILE, {\n    onCompleted: () => {\n      dispatchAction(\n        addNotification({\n          variant: 'success',\n          title: `Deleted \"${name}\" and its associated reports`,\n        })\n      );\n      onClose();\n    },\n    onError: (error) => {\n      dispatchAction(\n        addNotification({\n          variant: 'danger',\n          title: 'Error removing policy',\n          description: error.message,\n        })\n      );\n      onClose();\n    },\n  });\n\n  return (\n    <ComplianceModal\n      variant={ModalVariant.small}\n      title=\"Delete policy?\"\n      titleIconVariant=\"warning\"\n      ouiaId=\"DeletePolicyModal\"\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"destroy\"\n          ouiaId=\"DeletePolicyButton\"\n          aria-label=\"delete\"\n          isDisabled={!deleteEnabled}\n          variant=\"danger\"\n          onClick={() => deletePolicy({ variables: { input: { id } } })}\n        >\n          Delete policy and associated reports\n        </Button>,\n        <Button\n          key=\"cancel\"\n          ouiaId=\"DeletePolicyCancelButton\"\n          variant=\"secondary\"\n          onClick={onClose}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <Text className=\"policy-delete-body-text\">\n        Deleting the policy <b>{name}</b> will also delete its associated\n        reports.\n      </Text>\n      <Checkbox\n        label=\"I understand this will delete the policy and all associated reports\"\n        id={`deleting-policy-check-${id}`}\n        isChecked={deleteEnabled}\n        onChange={setDeleteEnabled}\n      />\n    </ComplianceModal>\n  );\n};\n\nDeletePolicy.propTypes = {\n  policy: propTypes.object,\n};\n\nexport default DeletePolicy;\n","import { Button, ModalVariant, TextContent } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { DELETE_REPORT } from 'Mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ComplianceModal } from 'PresentationalComponents';\nimport { dispatchAction } from 'Utilities/Dispatcher';\n\nconst DeleteReport = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const { id } = location.state?.profile;\n  const onClose = () => {\n    history.push(location.state.background);\n  };\n\n  const onDelete = () => {\n    history.push('/reports');\n  };\n\n  const [deleteReport] = useMutation(DELETE_REPORT, {\n    onCompleted: () => {\n      dispatchAction(\n        addNotification({\n          variant: 'success',\n          title: 'Report deleted',\n          description:\n            'Systems associated with this policy will upload reports on the next check-in.',\n        })\n      );\n      onDelete();\n    },\n    onError: (error) => {\n      dispatchAction(\n        addNotification({\n          variant: 'danger',\n          title: 'Error removing report',\n          description: error.message,\n        })\n      );\n      onClose();\n    },\n  });\n  return (\n    <ComplianceModal\n      isOpen\n      variant={ModalVariant.small}\n      title=\"Delete report?\"\n      titleIconVariant=\"warning\"\n      ouiaId=\"DeleteReportModal\"\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"destroy\"\n          ouiaId=\"DeleteReportButton\"\n          aria-label=\"delete\"\n          variant=\"danger\"\n          onClick={() =>\n            deleteReport({\n              variables: {\n                input: {\n                  profileId: id,\n                },\n              },\n            })\n          }\n        >\n          Delete report\n        </Button>,\n        <Button\n          key=\"cancel\"\n          ouiaId=\"DeleteReportCancelButton\"\n          variant=\"secondary\"\n          onClick={() => onClose()}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        Deleting a report is permanent and cannot be undone.\n      </TextContent>\n    </ComplianceModal>\n  );\n};\n\nDeleteReport.propTypes = {\n  onClose: propTypes.func,\n  isModalOpen: propTypes.bool,\n  onDelete: propTypes.func,\n  policyId: propTypes.string,\n};\n\nDeleteReport.defaultProps = {\n  onDelete: () => {},\n  onClose: () => {},\n};\n\nexport default DeleteReport;\n","import gql from 'graphql-tag';\n\nexport const BENCHMARKS_QUERY = gql`\n  query EP_Benchmarks($filter: String!, $enableRuleTree: Boolean = false) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        ruleTree @include(if: $enableRuleTree)\n        valueDefinitions {\n          defaultValue\n          description\n          id\n          refId\n          title\n          valueType\n        }\n        profiles {\n          id\n          refId\n          ssgVersion\n        }\n      }\n    }\n  }\n`;\n\nexport const MULTIVERSION_QUERY = gql`\n  query EP_Profile($policyId: String!, $enableRuleTree: Boolean = false) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      external\n      description\n      totalHostCount\n      compliantHostCount\n      complianceThreshold\n      osMajorVersion\n      supportedOsVersions\n      lastScanned\n      policyType\n      policy {\n        id\n        name\n        refId\n        profiles {\n          id\n          parentProfileId\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          values\n          benchmark {\n            id\n            title\n            latestSupportedOsMinorVersions\n            osMajorVersion\n            version\n            ruleTree @include(if: $enableRuleTree)\n          }\n          rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n            values\n          }\n        }\n      }\n      businessObjective {\n        id\n        title\n      }\n      hosts {\n        id\n        osMinorVersion\n        osMajorVersion\n      }\n    }\n  }\n`;\n\nexport const RULE_VALUE_DEFINITIONS_QUERY = gql`\n  query EP_ProfileValueDefinitions(\n    $policyId: String!\n    $enableRuleTree: Boolean = false\n  ) {\n    profile(id: $policyId) {\n      id\n      policy {\n        id\n        refId\n        profiles {\n          id\n          parentProfileId\n          refId\n          benchmark {\n            id\n            ruleTree @include(if: $enableRuleTree)\n            valueDefinitions {\n              defaultValue\n              description\n              id\n              refId\n              title\n              valueType\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  Text,\n  TextContent,\n  Title,\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport { sortingByProp } from 'Utilities/helpers';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\nimport { BENCHMARKS_QUERY } from './constants';\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst EditPolicyRulesTabEmptyState = () => (\n  <EmptyState>\n    <Title headingLevel=\"h5\" size=\"lg\">\n      No rules can be configured\n    </Title>\n    <EmptyStateBody>\n      This policy has no associated systems, and therefore no rules can be\n      configured.\n    </EmptyStateBody>\n    <EmptyStateBody>\n      Add at least one system to configure rules for this policy.\n    </EmptyStateBody>\n  </EmptyState>\n);\n\nexport const toTabsData = (policy, osMinorVersionCounts, benchmarks) =>\n  Object.values(osMinorVersionCounts)\n    .sort(sortingByProp('osMinorVersion', 'desc'))\n    .map(({ osMinorVersion, count: systemCount }) => {\n      osMinorVersion = `${osMinorVersion}`;\n      let profile = policy.policy.profiles.find(\n        (profile) => profile.osMinorVersion === osMinorVersion\n      );\n      let osMajorVersion = policy.osMajorVersion;\n\n      if (!profile && benchmarks) {\n        const benchmark = getBenchmarkBySupportedOsMinor(\n          benchmarks,\n          osMinorVersion\n        );\n        if (benchmark) {\n          const benchmarkProfile = getBenchmarkProfile(benchmark, policy.refId);\n          if (benchmarkProfile) {\n            profile = policy.policy.profiles.find(\n              (profile) =>\n                profile.parentProfileId === benchmarkProfile.id &&\n                profile.osMinorVersion === osMinorVersion\n            );\n\n            profile = {\n              ...benchmarkProfile,\n              benchmark,\n              osMajorVersion,\n              ...profile,\n            };\n          }\n        }\n      }\n\n      return {\n        profile,\n        systemCount,\n        newOsMinorVersion: osMinorVersion,\n      };\n    })\n    .filter(({ profile, newOsMinorVersion }) => !!profile && newOsMinorVersion);\n\nexport const EditPolicyRulesTab = ({\n  policy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  osMinorVersionCounts,\n  setRuleValues,\n  ruleValues: ruleValuesProp,\n}) => {\n  const osMajorVersion = policy?.osMajorVersion;\n  const osMinorVersions = Object.keys(osMinorVersionCounts).sort();\n  const benchmarkSearch =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const {\n    data: benchmarksData,\n    error,\n    loading,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter: benchmarkSearch,\n    },\n    skip: osMinorVersions.length === 0,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  const tabsData = toTabsData(policy, osMinorVersionCounts, benchmarks);\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n\n  const dataState = !loading && tabsData?.length > 0 ? tabsData : undefined;\n\n  useEffect(() => {\n    if (policy.policy.profiles) {\n      const profiles = policy.policy.profiles;\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      setSelectedRuleRefIds((prevSelection) => {\n        const newSelection = profilesWithRulesToSelection(\n          profilesWithOs,\n          prevSelection\n        );\n        return newSelection;\n      });\n    }\n  }, [policy.policy.profiles]);\n\n  const ruleValues = (policy) => {\n    const mergeValues = (policyId, values) => {\n      return {\n        ...values,\n        ...(ruleValuesProp?.[policyId] || {}),\n      };\n    };\n\n    return Object.fromEntries(\n      policy?.policy?.profiles?.map(\n        ({ id, values, benchmark: { valueDefinitions } }) => [\n          id,\n          mergeValues(id, values, valueDefinitions),\n        ]\n      ) || []\n    );\n  };\n\n  return (\n    <StateViewWithError\n      stateValues={{\n        error,\n        data: !error && dataState,\n        loading,\n        empty: !loading && !dataState && !error,\n      }}\n    >\n      <StateViewPart stateKey=\"loading\">\n        <EmptyTable>\n          <Spinner />\n        </EmptyTable>\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <TextContent>\n          <Text>\n            Different release versions of RHEL are associated with different\n            versions of the SCAP Security Guide (SSG), therefore each release\n            must be customized independently.\n          </Text>\n        </TextContent>\n        {tabsData.length > 0 && (\n          <TabbedRules\n            resetLink\n            rulesPageLink\n            selectedFilter\n            remediationsEnabled={false}\n            columns={[Columns.Name, Columns.Severity, Columns.Remediation]}\n            tabsData={tabsData}\n            ruleValues={ruleValues(policy)}\n            selectedRuleRefIds={selectedRuleRefIds}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            setRuleValues={setRuleValues}\n            level={1}\n            ouiaId=\"RHELVersions\"\n          />\n        )}\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">\n        <EditPolicyRulesTabEmptyState />\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nEditPolicyRulesTab.propTypes = {\n  setNewRuleTabs: propTypes.func,\n  policy: propTypes.object,\n  osMinorVersionCounts: propTypes.shape({\n    osMinorVersion: propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    }),\n  }),\n  selectedRuleRefIds: propTypes.array,\n  setSelectedRuleRefIds: propTypes.func,\n  setRuleValues: propTypes.func,\n  ruleValues: propTypes.array,\n};\n\nexport default EditPolicyRulesTab;\n","import React from 'react';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { SystemsTable } from 'SmartComponents';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>Connect RHEL {osMajorVersion} systems to Insights.</Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst EditPolicySystemsTab = ({ policy, onSystemSelect, selectedSystems }) => {\n  const { id: policyId, osMajorVersion, supportedOsVersions } = policy;\n  const osMinorVersions = supportedOsVersions.map(\n    (version) => version.split('.')[1]\n  );\n  const osFilter =\n    osMajorVersion &&\n    `os_major_version = ${osMajorVersion} AND os_minor_version ^ (${osMinorVersions.join(\n      ','\n    )})`;\n  const defaultFilter = osFilter\n    ? `${osFilter} or policy_id = ${policyId}`\n    : `policy_id = ${policyId}`;\n\n  return (\n    <React.Fragment>\n      <SystemsTable\n        columns={[\n          Columns.Name,\n          Columns.inventoryColumn('tags'),\n          Columns.OperatingSystem,\n        ]}\n        showOsMinorVersionFilter={[osMajorVersion]}\n        prependComponent={<PrependComponent osMajorVersion={osMajorVersion} />}\n        emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n        compact\n        showActions={false}\n        defaultFilter={defaultFilter}\n        enableExport={false}\n        remediationsEnabled={false}\n        preselectedSystems={selectedSystems}\n        onSelect={onSystemSelect}\n      />\n    </React.Fragment>\n  );\n};\n\nEditPolicySystemsTab.propTypes = {\n  policy: propTypes.object,\n  newRuleTabs: propTypes.bool,\n  onSystemSelect: propTypes.func,\n  selectedSystems: propTypes.array,\n};\n\nexport default EditPolicySystemsTab;\n","import React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { Alert, AlertActionLink } from '@patternfly/react-core';\n\nconst NewRulesAlert = () => {\n  const history = useHistory();\n  const location = useLocation();\n\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title=\"You selected a system that has a release version previously not included in this policy.\"\n      actionLinks={\n        <AlertActionLink\n          onClick={() => history.push({ ...location, hash: '#rules' })}\n        >\n          Open rule editing\n        </AlertActionLink>\n      }\n    >\n      <p>\n        If you have edited any rules for this policy, you will need to do so for\n        this release version as well.\n      </p>\n    </Alert>\n  );\n};\n\nexport default NewRulesAlert;\n","import React, { useCallback, useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { Form, Tab, TabTitleText } from '@patternfly/react-core';\nimport { RoutedTabs } from 'PresentationalComponents';\nimport EditPolicyRulesTab from './EditPolicyRulesTab';\nimport EditPolicySystemsTab from './EditPolicySystemsTab';\nimport NewRulesAlert from './components/NewRulesAlert';\nimport { mapCountOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport { profilesWithRulesToSelection } from 'PresentationalComponents/TabbedRules';\nimport { thresholdValid } from '../CreatePolicy/validate';\nimport { useNewRulesAlertState } from './hooks/index';\n\nconst profilesToOsMinorMap = (profiles, hosts) =>\n  (profiles || []).reduce((acc, profile) => {\n    if (profile.osMinorVersion !== '') {\n      acc[profile.osMinorVersion] ||= {\n        osMinorVersion: profile.osMinorVersion,\n        count: 0,\n      };\n    }\n\n    return acc;\n  }, mapCountOsMinorVersions(hosts || []));\n\nconst EditPolicyForm = ({\n  policy,\n  setUpdatedPolicy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  selectedSystems,\n  setSelectedSystems,\n  setRuleValues,\n  ruleValues,\n}) => {\n  const policyProfiles = policy?.policy?.profiles || [];\n  const [osMinorVersionCounts, setOsMinorVersionCounts] = useState({});\n  const [newRulesAlert, setNewRulesAlert] = useNewRulesAlertState(false);\n\n  const handleSystemSelect = useCallback(\n    (newSelectedSystems) => {\n      const policyMinorVersions = policy.hosts.map(\n        ({ osMinorVersion }) => osMinorVersion\n      );\n      const hasNewOsMinorVersions =\n        newSelectedSystems.filter(\n          ({ osMinorVersion }) => !policyMinorVersions.includes(osMinorVersion)\n        ).length > 0;\n\n      setSelectedSystems(newSelectedSystems);\n      setNewRulesAlert(hasNewOsMinorVersions);\n      setOsMinorVersionCounts(\n        profilesToOsMinorMap(policyProfiles, newSelectedSystems)\n      );\n    },\n    [policyProfiles, selectedRuleRefIds]\n  );\n\n  useEffect(() => {\n    if (policy) {\n      const complianceThresholdValid = thresholdValid(\n        policy.complianceThreshold\n      );\n      const profilesWithOsMinor = policyProfiles.filter(\n        ({ osMinorVersion }) => !!osMinorVersion\n      );\n      setUpdatedPolicy({\n        ...policy,\n        complianceThresholdValid,\n      });\n\n      setSelectedRuleRefIds(profilesWithRulesToSelection(profilesWithOsMinor));\n      handleSystemSelect(policy.hosts);\n    }\n  }, [policy]);\n\n  return (\n    <Form>\n      <RoutedTabs ouiaId=\"EditSystems\" defaultTab=\"systems\" id=\"policy-tabs\">\n        <Tab\n          eventKey=\"rules\"\n          ouiaId=\"Rules\"\n          title={<TabTitleText>Rules</TabTitleText>}\n        >\n          <EditPolicyRulesTab\n            policy={policy}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            setRuleValues={setRuleValues}\n            ruleValues={ruleValues}\n            selectedRuleRefIds={selectedRuleRefIds}\n            osMinorVersionCounts={osMinorVersionCounts}\n          />\n        </Tab>\n        <Tab\n          eventKey=\"systems\"\n          ouiaId=\"Systems\"\n          title={<TabTitleText>Systems</TabTitleText>}\n        >\n          <EditPolicySystemsTab\n            policy={policy}\n            selectedSystems={selectedSystems}\n            onSystemSelect={handleSystemSelect}\n          />\n          {newRulesAlert && <NewRulesAlert />}\n        </Tab>\n      </RoutedTabs>\n    </Form>\n  );\n};\n\nEditPolicyForm.propTypes = {\n  policy: propTypes.object,\n  updatedPolicy: propTypes.object,\n  setUpdatedPolicy: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.object),\n  setSelectedRuleRefIds: propTypes.func,\n  setSelectedSystems: propTypes.func,\n  selectedSystems: propTypes.array,\n  setRuleValues: propTypes.func,\n  ruleValues: propTypes.array,\n};\n\nexport default EditPolicyForm;\n","import { useState } from 'react';\n\nexport const useNewRulesAlertState = (...args) => useState(...args);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Spinner } from '@patternfly/react-core';\nimport { useParams } from 'react-router-dom';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport {\n  ComplianceModal,\n  StateViewWithError,\n  StateViewPart,\n} from 'PresentationalComponents';\nimport EditPolicyForm from './EditPolicyForm';\nimport { useOnSave, useLinkToPolicy } from './hooks';\nimport usePolicyQuery from 'Utilities/hooks/usePolicyQuery';\n\nexport const EditPolicy = ({ route }) => {\n  const { policy_id: policyId } = useParams();\n  const { data, error, loading } = usePolicyQuery({ policyId });\n  const policy = data?.profile;\n\n  const linkToPolicy = useLinkToPolicy();\n  const [updatedPolicy, setUpdatedPolicy] = useState(null);\n  const [selectedRuleRefIds, setSelectedRuleRefIds] = useState([]);\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const [ruleValues, setRuleValuesState] = useState({});\n\n  const saveEnabled = updatedPolicy && !updatedPolicy.complianceThresholdValid;\n  const updatedPolicyHostsAndRules = {\n    ...updatedPolicy,\n    selectedRuleRefIds,\n    hosts: selectedSystems,\n    values: ruleValues,\n  };\n  const [isSaving, onSave] = useOnSave(policy, updatedPolicyHostsAndRules);\n\n  const setRuleValues = (policyId, valueDefinition, valueValue) => {\n    const existingValues = Object.fromEntries(\n      policy?.policy.profiles.map((profile) => {\n        return [profile.id, profile.values];\n      }) || []\n    );\n\n    setRuleValuesState((currentValues) => ({\n      ...existingValues,\n      ...currentValues,\n      [policyId]: {\n        ...existingValues[policyId],\n        ...currentValues[policyId],\n        [valueDefinition.id]: valueValue,\n      },\n    }));\n  };\n\n  const actions = [\n    <Button\n      isDisabled={saveEnabled}\n      key=\"save\"\n      ouiaId=\"EditPolicySaveButton\"\n      variant=\"primary\"\n      spinnerAriaValueText=\"Saving\"\n      isLoading={isSaving}\n      onClick={onSave}\n    >\n      Save\n    </Button>,\n    <Button\n      key=\"cancel\"\n      ouiaId=\"EditPolicyCancelButton\"\n      variant=\"link\"\n      onClick={() => linkToPolicy()}\n    >\n      Cancel\n    </Button>,\n  ];\n\n  useTitleEntity(route, policy?.name);\n\n  return (\n    <ComplianceModal\n      isOpen\n      position={'top'}\n      style={{ minHeight: '350px' }}\n      width={1220}\n      variant={'large'}\n      ouiaId=\"EditPolicyModal\"\n      title={`Edit ${policy ? policy.name : ''}`}\n      onClose={() => linkToPolicy()}\n      actions={actions}\n    >\n      <StateViewWithError stateValues={{ policy, loading, error }}>\n        <StateViewPart stateKey=\"loading\">\n          <Spinner />\n        </StateViewPart>\n        <StateViewPart stateKey=\"policy\">\n          <EditPolicyForm\n            {...{\n              policy,\n              updatedPolicy,\n              setUpdatedPolicy,\n              selectedRuleRefIds,\n              setSelectedRuleRefIds,\n              selectedSystems,\n              setSelectedSystems,\n              setRuleValues,\n              ruleValues,\n            }}\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </ComplianceModal>\n  );\n};\n\nEditPolicy.propTypes = {\n  route: propTypes.object,\n};\n\nexport default EditPolicy;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\n\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Truncate from '@redhat-cloud-services/frontend-components/Truncate';\nimport {\n  UnsupportedSSGVersion,\n  ComplianceScore as PresentationalComplianceScore,\n  LinkWithPermission as Link,\n} from 'PresentationalComponents';\nimport {\n  // profilesRulesFailed,\n  complianceScoreData,\n  NEVER,\n} from 'Utilities/ruleHelpers';\n\nconst SystemLink = ({ id, children }) => (\n  <Link to={{ pathname: `/systems/${id}` }}>{children}</Link>\n);\n\nSystemLink.propTypes = {\n  id: propTypes.string,\n  children: propTypes.node,\n};\n\nexport const Name = ({\n  id,\n  name,\n  osMajorVersion,\n  osMinorVersion,\n  showOsInfo = false,\n  showLink = false,\n}) => {\n  const hasOsInfo = (osMajorVersion, osMinorVersion) =>\n    !!osMajorVersion && !!osMinorVersion && showOsInfo;\n\n  return (\n    <TextContent>\n      {showLink ? <SystemLink {...{ id }}>{name}</SystemLink> : name}\n\n      {hasOsInfo(osMajorVersion, osMinorVersion) && (\n        <Text component={TextVariants.small}>\n          RHEL {osMajorVersion}.{osMinorVersion}\n        </Text>\n      )}\n    </TextContent>\n  );\n};\n\nName.propTypes = {\n  id: propTypes.string,\n  name: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersion: propTypes.string,\n  showOsInfo: propTypes.bool,\n  showLink: propTypes.bool,\n};\n\nexport const profilesSsgVersions = (profiles) =>\n  profiles\n    .map((p) => p.ssgVersion)\n    .filter((version) => !!version)\n    .join(', ');\n\nexport const SSGVersion = ({ ssgVersion = 'Not available', supported }) =>\n  supported ? (\n    ssgVersion\n  ) : (\n    <UnsupportedSSGVersion messageVariant=\"singular\">\n      {ssgVersion}\n    </UnsupportedSSGVersion>\n  );\n\nSSGVersion.propTypes = {\n  supported: propTypes.bool,\n  ssgVersion: propTypes.string,\n};\n\nexport const SSGVersions = ({ testResultProfiles = [] }) =>\n  testResultProfiles.length !== 0\n    ? testResultProfiles.map((profile) => (\n        <SSGVersion\n          key={`ssgversion-${profile.id}`}\n          ssgVersion={profile?.benchmark?.version}\n          supported={profile?.supported}\n        />\n      ))\n    : 'Unknown';\n\nSSGVersions.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const Policies = ({ policies }) =>\n  (policies || []).length > 0 && (\n    <Truncate\n      inline\n      text={policies.map((p) => p.name).join(', ')}\n      length={215}\n    />\n  );\n\nPolicies.propTypes = {\n  policies: propTypes.array,\n};\n\nexport const FailedRules = ({ id, testResultProfiles }) => {\n  const rulesFailed = testResultProfiles.reduce(\n    (acc, { rulesFailed }) => acc + parseInt(rulesFailed || 0),\n    0\n  );\n\n  return (\n    <SystemLink {...{ id }}>{rulesFailed > 0 ? rulesFailed : 'N/A'}</SystemLink>\n  );\n};\n\nFailedRules.propTypes = {\n  id: propTypes.string,\n  testResultProfiles: propTypes.array,\n};\n\nexport { complianceScoreData };\nexport const ComplianceScore = ({ testResultProfiles }) => {\n  const { score, supported, compliant } = testResultProfiles[0] || {};\n  return testResultProfiles.length > 0 ? (\n    <PresentationalComplianceScore {...{ score, supported, compliant }} />\n  ) : (\n    'N/A'\n  );\n};\n\nComplianceScore.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nconst NeverScanned = () => (\n  <Tooltip\n    position=\"right\"\n    content={\n      <Fragment>\n        This system has never returned a report for this policy. This may be\n        because it is disconnected, or the insights-client on this system is not\n        configured to use Compliance.\n      </Fragment>\n    }\n  >\n    <div>\n      <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n      {' ' + NEVER}\n    </div>\n  </Tooltip>\n);\n\nexport const lastScanned = (profiles) => {\n  const dates = profiles.map((profile) => new Date(profile.lastScanned));\n  const last = new Date(\n    Math.max.apply(\n      null,\n      dates.filter((date) => isFinite(date))\n    )\n  );\n  const result =\n    last instanceof Date && isFinite(last) ? last : <NeverScanned />;\n\n  return result;\n};\n\nexport const LastScanned = ({ testResultProfiles: profiles }) => {\n  const lastScannedDate = lastScanned(profiles || []);\n\n  return lastScannedDate instanceof Date ? (\n    <DateFormat date={Date.parse(lastScannedDate)} type=\"relative\" />\n  ) : (\n    lastScannedDate\n  );\n};\n\nLastScanned.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const operatingSystemString = ({ osMinorVersion, osMajorVersion }) =>\n  `RHEL ${osMajorVersion}.${osMinorVersion}`;\n\nexport const OperatingSystem = (system) => operatingSystemString(system);\n","import React from 'react';\nimport { nowrap } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport { complianceScoreString } from 'PresentationalComponents';\nimport { renderComponent } from 'Utilities/helpers';\n\nimport {\n  Name as NameCell,\n  ComplianceScore as ComplianceScoreCell,\n  FailedRules as FailedRulesCell,\n  LastScanned as LastScannedCell,\n  Policies as PoliciesCell,\n  SSGVersions as SsgVersionCell,\n  complianceScoreData,\n  lastScanned,\n  operatingSystemString,\n  OperatingSystem as OperatingSystemCell,\n} from './Cells';\n\nconst disableSorting = { isStatic: true };\n\nexport const compileColumnRenderFunc = ({ cell, ...column }) => ({\n  ...column,\n  renderFunc: renderComponent(cell, column.props),\n});\n\nexport const customColumn = (column, props) =>\n  compileColumnRenderFunc({\n    ...column,\n    props: {\n      ...column.props,\n      ...props,\n    },\n  });\n\nexport const Name = compileColumnRenderFunc({\n  key: 'name',\n  title: 'Name',\n  sortBy: ['name'],\n  props: {\n    width: 40,\n  },\n  renderExport: (system) => `${system.name} (${operatingSystemString(system)})`,\n  cell: NameCell,\n});\n\nexport const customName = (props) => ({\n  ...Name,\n  props: {\n    ...Name.props,\n    ...props,\n  },\n  renderFunc: renderComponent(NameCell, props),\n});\n\nexport const SsgVersion = {\n  title: 'SSG version',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  sortBy: ['ssg_version'],\n  key: 'ssg_version',\n  renderExport: (testResultProfiles) =>\n    testResultProfiles\n      .map(\n        ({ supported, benchmark: { version } }) =>\n          `${!supported ? '!' : ''}${version}`\n      )\n      .join(', '),\n  renderFunc: renderComponent(SsgVersionCell),\n};\n\nexport const Policies = {\n  title: 'Policies',\n  transforms: [nowrap],\n  key: 'policies',\n  exportKey: 'policies',\n  renderExport: (policies) => policies.map(({ name }) => name).join(', '),\n  props: {\n    width: 40,\n    ...disableSorting,\n  },\n  renderFunc: renderComponent(PoliciesCell),\n};\n\nexport const FailedRules = {\n  title: 'Failed rules',\n  key: 'failedRules',\n  exportKey: 'profiles',\n  transforms: [nowrap],\n  props: {\n    width: 5,\n    ...disableSorting,\n  },\n  renderExport: (profiles) =>\n    profiles.reduce(\n      (failedRules, { rulesFailed }) => failedRules + rulesFailed,\n      0\n    ),\n  renderFunc: renderComponent(FailedRulesCell),\n};\n\nexport const ComplianceScore = {\n  title: 'Compliance score',\n  key: 'complianceScore',\n  exportKey: 'testResultProfiles',\n  transforms: [nowrap],\n  props: {\n    width: 5,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) =>\n    complianceScoreString(complianceScoreData(testResultProfiles)).trim(),\n  renderFunc: renderComponent(ComplianceScoreCell),\n};\n\nexport const LastScanned = {\n  title: 'Last scanned',\n  key: 'lastScanned',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  props: {\n    width: 10,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) => lastScanned(testResultProfiles),\n  renderFunc: renderComponent(LastScannedCell),\n};\n\nexport const OperatingSystem = compileColumnRenderFunc({\n  title: 'Operating system',\n  key: 'operatingSystem',\n  sortBy: ['osMajorVersion', 'osMinorVersion'],\n  transforms: [nowrap],\n  renderExport: (cell) => operatingSystemString(cell),\n  cell: OperatingSystemCell,\n});\n\nexport const OS = compileColumnRenderFunc({\n  title: (\n    <Tooltip content={<span>Operating System</span>}>\n      <span>OS</span>\n    </Tooltip>\n  ),\n  original: 'Operating System',\n  key: 'operatingSystem',\n  dataLabel: 'OS',\n  transforms: [nowrap],\n  sortBy: ['osMajorVersion', 'osMinorVersion'],\n  props: {\n    width: 10,\n  },\n  renderExport: (cell) => operatingSystemString(cell),\n  cell: OperatingSystemCell,\n});\n\nexport const inventoryColumn = (column, props) => ({\n  key: column,\n  ...props,\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Skeleton, {\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { registryDecorator } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport {\n  DetailWrapper,\n  InventoryDetailHead,\n} from '@redhat-cloud-services/frontend-components/Inventory';\n\n@registryDecorator()\nclass InventoryDetails extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <DetailWrapper\n        onLoad={({ mergeWithDetail }) =>\n          this.getRegistry().register({\n            ...mergeWithDetail(),\n          })\n        }\n        inventoryId={this.props.inventoryId}\n      >\n        <InventoryDetailHead fallback={<Skeleton size={SkeletonSize.md} />} />\n      </DetailWrapper>\n    );\n  }\n}\n\nInventoryDetails.propTypes = {\n  entity: propTypes.object,\n  inventoryId: propTypes.string,\n};\n\nconst ConnectedInventoryDetails = (props) => {\n  return <InventoryDetails {...props} />;\n};\n\nexport default ConnectedInventoryDetails;\n","import { gql } from 'graphql-tag';\n\nexport const DEFAULT_SYSTEMS_PER_BATCH = 3;\nexport const DEFAULT_CONNCURRENT_REQUESTS_FOR_ISSUES = 3;\n\nexport const GET_SYSTEMS_ISSUES = gql`\n  query CRB_Systems(\n    $filter: String!\n    $policyId: ID\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          testResultProfiles(policyId: $policyId) {\n            id\n            refId\n            score\n            lastScanned\n            compliant\n            rulesFailed\n            rulesPassed\n            supported\n            osMajorVersion\n            rules {\n              id\n              refId\n              precedence\n              compliant\n              remediationAvailable\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\nimport { default as RemediationRemediationButton } from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport { useIssuesFetch } from './hooks';\nimport FallbackButton from './components/FallBackButton';\n\nconst RemediationButton = ({\n  rules,\n  systems,\n  policyId,\n  onRemediationCreated,\n  ...buttonProps\n}) => {\n  const { isLoading: isLoadingIssues, fetch } = useIssuesFetch(\n    policyId,\n    rules,\n    systems\n  );\n\n  return (\n    <RemediationRemediationButton\n      isDisabled={systems?.length === 0 || isLoadingIssues}\n      onRemediationCreated={(result) => {\n        dispatchNotification(result.getNotification());\n      }}\n      dataProvider={fetch}\n      buttonProps={{\n        ouiaId: 'RemediateButton',\n        isLoading: isLoadingIssues,\n      }}\n      fallback={<FallbackButton />}\n      {...buttonProps}\n    >\n      Remediate\n    </RemediationRemediationButton>\n  );\n};\n\nRemediationButton.propTypes = {\n  rules: propTypes.array,\n  systems: propTypes.array,\n  onRemediationCreated: propTypes.func,\n  policyId: propTypes.string,\n};\n\nexport default RemediationButton;\n","import { useCallback } from 'react';\nimport { useApolloClient } from '@apollo/client';\nimport usePromiseQueue from 'Utilities/hooks/usePromiseQueue';\nimport {\n  GET_SYSTEMS_ISSUES,\n  DEFAULT_SYSTEMS_PER_BATCH,\n  DEFAULT_CONNCURRENT_REQUESTS_FOR_ISSUES,\n} from './constants';\nimport { remediationData } from './helpers';\n\nexport const useIssuesFetch = (policyId, rules, systems) => {\n  const client = useApolloClient();\n  const { isResolving, results, resolve } = usePromiseQueue(\n    DEFAULT_CONNCURRENT_REQUESTS_FOR_ISSUES\n  );\n\n  const fetchFunction = useCallback(\n    async (perPage, page) => {\n      const systemIds =\n        systems.length > 0 ? `id ^ (${systems.join(',')})` : undefined;\n\n      return (\n        await client.query({\n          query: GET_SYSTEMS_ISSUES,\n          fetchPolicy: 'no-cache',\n          variables: {\n            perPage,\n            page,\n            filter: `(${systemIds}) AND policy_id = ${policyId}`,\n            policyId,\n          },\n        })\n      ).data.systems;\n    },\n    [systems, policyId]\n  );\n\n  const fetch = useCallback(\n    async (batchSize = DEFAULT_SYSTEMS_PER_BATCH) => {\n      const pages = Math.ceil(systems?.length / batchSize) || 1;\n      const results = await resolve(\n        [...new Array(pages)].map(\n          (_, pageIdx) => () => fetchFunction(batchSize, pageIdx + 1)\n        )\n      );\n\n      return results && remediationData(results);\n    },\n    [systems]\n  );\n\n  return {\n    isLoading: isResolving,\n    data: results && remediationData(results),\n    fetch,\n  };\n};\n","import gql from 'graphql-tag';\nimport pickBy from 'lodash/pickBy';\nimport {\n  systemsPolicyFilterConfiguration,\n  systemsOsFilterConfiguration,\n  systemsOsMinorFilterConfiguration,\n} from '@/constants';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { entitiesReducer } from 'Store/Reducers/SystemStore';\n\nexport const GET_MINIMAL_SYSTEMS = gql`\n  query ST_Systems(\n    $filter: String!\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n          osMinorVersion\n          culledTimestamp\n          staleWarningTimestamp\n          staleTimestamp\n          insightsId\n          lastScanned\n          updated\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_SYSTEMS_OSES = gql`\n  query ST_SystemOS($filter: String!) {\n    systems(search: $filter) {\n      osVersions\n    }\n  }\n`;\n\nexport const policyFilter = (policies, osFilter) => [\n  ...systemsPolicyFilterConfiguration(policies),\n  ...(osFilter ? systemsOsFilterConfiguration(policies) : []),\n];\n\nexport const osMinorVersionFilter = (...args) =>\n  systemsOsMinorFilterConfiguration(...args);\n\nexport const initFilterState = (filterConfig) =>\n  pickBy(filterConfig.initialDefaultState(), (value) => !!value);\n\nexport const defaultOnLoad =\n  (columns) =>\n  ({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n    getRegistry().register({\n      ...mergeWithEntities(entitiesReducer(INVENTORY_ACTION_TYPES, columns)),\n    });\n\nexport const ssgVersionFilter = (ssgVersions) => [\n  {\n    type: conditionalFilterType.checkbox,\n    label: 'SSG Version',\n    filterString: (value) => `ssg_version = ${value}`,\n    items: ssgVersions.map((ssgVersion) => ({\n      label: ssgVersion,\n      value: ssgVersion,\n    })),\n  },\n];\n","import React, { useEffect, useLayoutEffect, useState } from 'react';\nimport { useApolloClient, useQuery } from '@apollo/client';\nimport { useDispatch } from 'react-redux';\nimport { Spinner } from '@patternfly/react-core';\nimport debounce from '@redhat-cloud-services/frontend-components-utilities/debounce';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport { osMinorVersionFilter, GET_SYSTEMS_OSES } from './constants';\nimport useExport from 'Utilities/hooks/useTableTools/useExport';\nimport { useBulkSelect } from 'Utilities/hooks/useTableTools/useBulkSelect';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\nimport usePromiseQueue from 'Utilities/hooks/usePromiseQueue';\n\nconst groupByMajorVersion = (versions = [], showFilter = []) => {\n  const showVersion = (version) => {\n    if (showFilter.length > 0) {\n      return showFilter.map(String).includes(String(version));\n    } else {\n      return true;\n    }\n  };\n\n  return versions.reduce((acc, currentValue) => {\n    if (showVersion(currentValue.major)) {\n      acc[String(currentValue.major)] = [\n        ...new Set([...(acc[currentValue.major] || []), currentValue.minor]),\n      ];\n    }\n\n    return acc;\n  }, []);\n};\n\nexport const useOsMinorVersionFilter = (showFilter, fetchArguments = {}) => {\n  let { data } = useQuery(GET_SYSTEMS_OSES, {\n    skip: !showFilter,\n    ...fetchArguments,\n  });\n  const { osVersions } = data?.systems || {};\n\n  return showFilter\n    ? osMinorVersionFilter(groupByMajorVersion(osVersions, showFilter))\n    : [];\n};\n\nexport const useSystemsFilter = (\n  filterString,\n  showOnlySystemsWithTestResults,\n  defaultFilter\n) => {\n  const combindedFilter = [\n    ...(showOnlySystemsWithTestResults ? ['has_test_results = true'] : []),\n    ...(filterString?.length > 0 ? [filterString] : []),\n  ].join(' and ');\n  const filter = defaultFilter\n    ? `(${defaultFilter})` +\n      (combindedFilter ? ` and (${combindedFilter})` : '')\n    : combindedFilter;\n\n  return filter;\n};\n\nconst renameInventoryAttributes = ({\n  culledTimestamp,\n  staleWarningTimestamp,\n  staleTimestamp,\n  insightsId,\n  ...system\n}) => ({\n  ...system,\n  insights_id: insightsId,\n  culled_timestamp: culledTimestamp,\n  stale_warning_timestamp: staleWarningTimestamp,\n  stale_timestamp: staleTimestamp,\n});\n\nexport const useFetchSystems = ({\n  query,\n  onComplete,\n  variables = {},\n  onError,\n}) => {\n  const client = useApolloClient();\n\n  return (perPage, page, requestVariables = {}) =>\n    client\n      .query({\n        query,\n        fetchResults: true,\n        fetchPolicy: 'no-cache',\n        variables: {\n          perPage,\n          page,\n          ...variables,\n          ...requestVariables,\n        },\n      })\n      .then(({ data }) => {\n        const systems = data?.systems?.edges?.map((e) => e.node) || [];\n        const entities = systemsWithRuleObjectsFailed(systems).map(\n          renameInventoryAttributes\n        );\n        const result = {\n          entities,\n          meta: {\n            ...(requestVariables.tags && { tags: requestVariables.tags }),\n            totalCount: data?.systems?.totalCount || 0,\n          },\n        };\n\n        onComplete && onComplete(result);\n        return result;\n      })\n      .catch((error) => {\n        if (onError) {\n          onError(error);\n          return { entities: [], meta: { totalCount: 0 } };\n        } else {\n          throw error;\n        }\n      });\n};\n\nconst useFetchBatched = () => {\n  const { isResolving: isLoading, resolve } = usePromiseQueue();\n\n  return {\n    isLoading,\n    fetchBatched: (fetchFunction, total, filter, batchSize = 50) => {\n      const pages = Math.ceil(total / batchSize) || 1;\n\n      const results = resolve(\n        [...new Array(pages)].map(\n          (_, pageIdx) => () => fetchFunction(batchSize, pageIdx + 1, filter)\n        )\n      );\n\n      return results;\n    },\n  };\n};\n\nconst buildApiFilters = (filters = {}) => {\n  const { tagFilters, ...otherFilters } = filters;\n  const tagsApiFilter = tagFilters\n    ? {\n        tags: tagFilters.flatMap((tagFilter) =>\n          tagFilter.values.map(\n            (tag) =>\n              `${encodeURIComponent(tagFilter.key)}/${encodeURIComponent(\n                tag.tagKey\n              )}=${encodeURIComponent(tag.value)}`\n          )\n        ),\n      }\n    : {};\n\n  return {\n    ...otherFilters,\n    ...tagsApiFilter,\n  };\n};\n\nexport const useGetEntities = (fetchEntities, { selected, columns } = {}) => {\n  const appendDirection = (attributes, direction) =>\n    attributes.map((attribute) => `${attribute}:${direction}`);\n\n  const findColumnByKey = (key) =>\n    (columns || []).find((column) => column.key === key);\n\n  return async (\n    _ids,\n    { page = 1, per_page: perPage, orderBy, orderDirection, filters }\n  ) => {\n    const sortableColumn = findColumnByKey(orderBy);\n    const sortBy =\n      sortableColumn && sortableColumn.sortBy\n        ? appendDirection(sortableColumn.sortBy, orderDirection)\n        : undefined;\n    const filterForApi = buildApiFilters(filters);\n\n    const fetchedEntities = await fetchEntities(perPage, page, {\n      ...filterForApi,\n      sortBy,\n    });\n    const {\n      entities,\n      meta: { totalCount },\n    } = fetchedEntities || {};\n\n    return {\n      results: entities.map((entity) => ({\n        ...entity,\n        selected: (selected || []).map((id) => id).includes(entity.id),\n      })),\n      orderBy,\n      orderDirection,\n      total: totalCount,\n    };\n  };\n};\n\n// This hook is primarily meant to work around issues in the inventory\nexport const useInventoryUtilities = (\n  inventory,\n  selectedSystems,\n  activeFilters\n) => {\n  const dispatch = useDispatch();\n\n  // Resets the Inventory to a loading state\n  // and prevents previously shown columns and rows to appear\n  useLayoutEffect(() => {\n    dispatch({\n      type: 'INVENTORY_INIT',\n    });\n  }, []);\n\n  // Ensures rows are marked as selected\n  useEffect(() => {\n    dispatch({\n      type: 'SELECT_ENTITIES',\n      payload: {\n        selected: selectedSystems,\n      },\n    });\n  }, [selectedSystems]);\n\n  // Filters do not yet trigger the inventory to call getEntities\n  // and the page would not reset to page 1\n  const resetPage = () => {\n    Promise.resolve(\n      dispatch({\n        type: 'RESET_PAGE',\n      })\n    ).then(() => inventory?.current?.onRefreshData());\n  };\n\n  // The debounce is to not have filter updates collide or get out of order.\n  const debounceResetPage = debounce(resetPage, 50);\n\n  useEffect(() => {\n    debounceResetPage();\n  }, [activeFilters]);\n};\n\nconst toIdFilter = (ids) =>\n  ids?.length > 0 ? `id ^ (${ids.join(',')})` : undefined;\n\nexport const useSystemsExport = ({\n  columns,\n  selected,\n  total,\n  fetchArguments,\n}) => {\n  const { isLoading, fetchBatched } = useFetchBatched();\n  const selectionFilter = selected ? toIdFilter(selected) : undefined;\n  const fetchSystems = useFetchSystems({\n    query: fetchArguments.query,\n    variables: {\n      ...fetchArguments.variables,\n      ...(fetchArguments.tags && { tags: fetchArguments.tags }),\n      filter: selectionFilter\n        ? `${fetchArguments.variables.filter} and (${selectionFilter})`\n        : fetchArguments.variables.filter,\n    },\n    onError: () => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Couldn’t download export',\n        description: 'Reinitiate this export to try again.',\n      });\n    },\n  });\n\n  const selectedFilter = () =>\n    selected?.length > 0 ? toIdFilter(selected) : undefined;\n\n  const exporter = async () => {\n    const fetchedItems = await fetchBatched(\n      fetchSystems,\n      total,\n      selectedFilter()\n    );\n\n    return fetchedItems.flatMap((result) => result.entities);\n  };\n\n  const {\n    toolbarProps: { exportConfig },\n  } = useExport({\n    exporter,\n    columns,\n    isDisabled: total === 0 || isLoading,\n    onStart: () => {\n      dispatchNotification({\n        variant: 'info',\n        title: 'Preparing export',\n        description: 'Once complete, your download will start automatically.',\n      });\n    },\n    onComplete: () => {\n      dispatchNotification({\n        variant: 'success',\n        title: 'Downloading export',\n      });\n    },\n  });\n\n  return exportConfig;\n};\n\nexport const useSystemBulkSelect = ({\n  total,\n  onSelect,\n  preselected,\n  fetchArguments,\n  currentPageIds,\n}) => {\n  const { isLoading, fetchBatched } = useFetchBatched();\n  // This is meant as a compatibility layer and to be removed\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const fetchSystems = useFetchSystems({\n    ...fetchArguments,\n    onError: (error) => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error selecting systems',\n        description: error.message,\n      });\n    },\n  });\n\n  const fetchFunc = async (fetchIds) => {\n    if (fetchIds.length === 0) {\n      return [];\n    }\n\n    const idFilter = toIdFilter(fetchIds);\n    const results = await fetchBatched(fetchSystems, fetchIds.length, {\n      ...(idFilter && { filter: idFilter }),\n    });\n\n    return results.flatMap((result) => result.entities);\n  };\n\n  const onSelectCallback = async (selectedIds) => {\n    const systems = await fetchFunc(selectedIds);\n    setSelectedSystems(systems);\n    onSelect && onSelect(systems);\n  };\n\n  const itemIdsInTable = async () => {\n    const results = await fetchBatched(fetchSystems, total);\n    return results.flatMap((result) => result.entities.map(({ id }) => id));\n  };\n\n  const bulkSelect = useBulkSelect({\n    total,\n    onSelect: onSelectCallback,\n    preselected,\n    itemIdsInTable,\n    itemIdsOnPage: () => currentPageIds,\n  });\n\n  return {\n    selectedSystems,\n    ...bulkSelect,\n    toolbarProps: {\n      ...bulkSelect.toolbarProps,\n      bulkSelect: {\n        ...bulkSelect.toolbarProps.bulkSelect,\n        ...(isLoading\n          ? {\n              isDisabled: true,\n              toggleProps: {\n                children: [<Spinner size=\"md\" key=\"spinner\" />],\n              },\n            }\n          : {}),\n      },\n    },\n  };\n};\n","import React, { useMemo, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Spinner } from '@patternfly/react-core';\nimport { TableVariant } from '@patternfly/react-table';\n// eslint-disable-next-line max-len\nimport RemediationButton from '@/PresentationalComponents/ComplianceRemediationButton/RemediationButton';\nimport {\n  DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n  COMPLIANT_SYSTEMS_FILTER_CONFIGURATION,\n} from '@/constants';\nimport { ErrorPage, StateView, StateViewPart } from 'PresentationalComponents';\nimport useFilterConfig from 'Utilities/hooks/useTableTools/useFilterConfig';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { policyFilter, defaultOnLoad, ssgVersionFilter } from './constants';\nimport {\n  useFetchSystems,\n  useGetEntities,\n  useOsMinorVersionFilter,\n  useInventoryUtilities,\n  useSystemsExport,\n  useSystemsFilter,\n  useSystemBulkSelect,\n} from './hooks';\nimport { constructQuery } from '../../Utilities/helpers';\nimport { COMPLIANCE_REPORT_TABLE_ADDITIONAL_FILTER } from '../../constants';\n\nexport const SystemsTable = ({\n  columns,\n  showAllSystems,\n  policyId,\n  showActions,\n  enableExport,\n  compliantFilter,\n  policies,\n  showOnlySystemsWithTestResults,\n  showOsFilter,\n  error,\n  showComplianceSystemsInfo,\n  compact,\n  remediationsEnabled,\n  systemProps,\n  defaultFilter,\n  emptyStateComponent,\n  prependComponent,\n  showOsMinorVersionFilter,\n  preselectedSystems,\n  onSelect: onSelectProp,\n  noSystemsTable,\n  tableProps,\n  ssgVersions,\n  dedicatedAction,\n  ruleSeverityFilter,\n}) => {\n  const inventory = useRef(null);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [perPage, setPerPage] = useState(50);\n  const [currentTags, setCurrentTags] = useState([]);\n\n  const osMinorVersionFilter = useOsMinorVersionFilter(\n    showOsMinorVersionFilter,\n    {\n      variables: {\n        filter: defaultFilter,\n        ...(policyId && { policyId }),\n      },\n    }\n  );\n\n  const {\n    toolbarProps: conditionalFilter,\n    filterString,\n    activeFilterValues,\n  } = useFilterConfig({\n    filters: {\n      filterConfig: [\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(policies?.length > 0 ? policyFilter(policies, showOsFilter) : []),\n        ...(ssgVersions ? ssgVersionFilter(ssgVersions) : []),\n        ...osMinorVersionFilter,\n        ...(ruleSeverityFilter\n          ? COMPLIANCE_REPORT_TABLE_ADDITIONAL_FILTER\n          : []),\n      ],\n    },\n  });\n  const systemsFilter = useSystemsFilter(\n    filterString(),\n    showOnlySystemsWithTestResults,\n    defaultFilter\n  );\n\n  const constructedQuery = useMemo(() => constructQuery(columns), [columns]);\n\n  const systemFetchArguments = useMemo(\n    () => ({\n      query: constructedQuery.query,\n      variables: {\n        ...constructedQuery.fragments,\n        tags: currentTags,\n        filter: systemsFilter,\n        ...(policyId && { policyId }),\n      },\n    }),\n    [constructedQuery, currentTags, systemsFilter, policyId]\n  );\n\n  const preselection = useMemo(\n    () => preselectedSystems.map(({ id }) => id),\n    [preselectedSystems]\n  );\n\n  const {\n    selectedIds,\n    tableProps: bulkSelectTableProps,\n    toolbarProps: bulkSelectToolBarProps,\n  } = useSystemBulkSelect({\n    total,\n    perPage,\n    onSelect: onSelectProp,\n    preselected: preselection,\n    fetchArguments: systemFetchArguments,\n    currentPageIds: items.map(({ id }) => id),\n  });\n\n  useInventoryUtilities(inventory, selectedIds, activeFilterValues);\n\n  const onComplete = (result) => {\n    setTotal(result.meta.totalCount);\n    setItems(result.entities);\n    setPerPage(result.perPage);\n    setIsLoaded(true);\n    setCurrentTags && setCurrentTags(result.meta.tags);\n\n    if (\n      emptyStateComponent &&\n      result.meta.totalCount === 0 &&\n      activeFilterValues.length === 0 &&\n      (typeof result?.meta?.tags === 'undefined' ||\n        result?.meta?.tags?.length === 0)\n    ) {\n      setIsEmpty(true);\n    }\n  };\n\n  const fetchSystems = useFetchSystems({\n    ...systemFetchArguments,\n    onComplete,\n  });\n  const getEntities = useGetEntities(fetchSystems, {\n    selected: selectedIds,\n    columns,\n  });\n  const exportConfig = useSystemsExport({\n    columns,\n    filter: systemsFilter,\n    selected: selectedIds,\n    total,\n    fetchArguments: {\n      ...systemFetchArguments,\n    },\n  });\n\n  const mergedColumns = (defaultColumns) =>\n    columns.map((column) => {\n      const isStringCol = typeof column === 'string';\n      const key = isStringCol ? column : column.key;\n      const defaultColumn = defaultColumns.find(\n        (defaultCol) => defaultCol.key === key\n      );\n      return {\n        ...defaultColumn,\n        ...(isStringCol ? { key: column } : column),\n        props: {\n          ...defaultColumn?.props,\n          ...column?.props,\n        },\n      };\n    });\n\n  return (\n    <StateView\n      stateValues={{\n        error,\n        noError: error === undefined && !isEmpty,\n        empty: isEmpty,\n      }}\n    >\n      <StateViewPart stateKey=\"error\">\n        {!!prependComponent && prependComponent}\n        <ErrorPage error={error} />\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">{emptyStateComponent}</StateViewPart>\n      <StateViewPart stateKey=\"noError\">\n        {!!prependComponent && isLoaded && prependComponent}\n        {showComplianceSystemsInfo && (\n          <Alert\n            isInline\n            variant=\"info\"\n            ouiaId=\"SystemsListIsDifferentAlert\"\n            title={\n              'The list of systems in this view is different than those that appear in the Inventory. ' +\n              'Only systems currently associated with or reporting against compliance policies are displayed.'\n            }\n          />\n        )}\n        <InventoryTable\n          {...systemProps}\n          disableDefaultColumns\n          columns={mergedColumns}\n          noSystemsTable={noSystemsTable}\n          ref={inventory}\n          getEntities={getEntities}\n          hideFilters={{ all: true, tags: false }}\n          showTags\n          onLoad={defaultOnLoad(columns)}\n          tableProps={{\n            ...bulkSelectTableProps,\n            isStickyHeader: true,\n            ...tableProps,\n          }}\n          fallback={<Spinner />}\n          variant={compact ? TableVariant.compact : ''}\n          {...bulkSelectToolBarProps}\n          {...(!showAllSystems && {\n            ...conditionalFilter,\n            ...(remediationsEnabled && {\n              dedicatedAction: (\n                <RemediationButton policyId={policyId} systems={selectedIds} />\n              ),\n            }),\n          })}\n          {...(dedicatedAction ? { dedicatedAction: dedicatedAction } : {})}\n          {...(enableExport && { exportConfig })}\n          {...(showActions && {\n            actions: [\n              {\n                title: 'View in inventory',\n                onClick: (_event, _index, { id }) => {\n                  window.location.href = `${window.location.origin}/insights/inventory/${id}`;\n                },\n              },\n            ],\n          })}\n        />\n      </StateViewPart>\n    </StateView>\n  );\n};\n\nSystemsTable.propTypes = {\n  columns: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.shape({}), PropTypes.string])\n  ),\n  policies: PropTypes.arrayOf(PropTypes.shape({})),\n  showAllSystems: PropTypes.bool,\n  policyId: PropTypes.string,\n  query: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  showActions: PropTypes.bool,\n  enableExport: PropTypes.bool,\n  compliantFilter: PropTypes.bool,\n  showOnlySystemsWithTestResults: PropTypes.bool,\n  showOsFilter: PropTypes.bool,\n  showComplianceSystemsInfo: PropTypes.bool,\n  error: PropTypes.object,\n  compact: PropTypes.bool,\n  remediationsEnabled: PropTypes.bool,\n  defaultFilter: PropTypes.string,\n  systemProps: PropTypes.shape({\n    isFullView: PropTypes.bool,\n  }),\n  emptyStateComponent: PropTypes.node,\n  prependComponent: PropTypes.node,\n  showOsMinorVersionFilter: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  preselectedSystems: PropTypes.array,\n  onSelect: PropTypes.func,\n  noSystemsTable: PropTypes.node,\n  tableProps: PropTypes.object,\n  ssgVersions: PropTypes.array,\n  dedicatedAction: PropTypes.object,\n  ruleSeverityFilter: PropTypes.bool,\n};\n\nSystemsTable.defaultProps = {\n  policyId: '',\n  showActions: true,\n  enableExport: true,\n  compliantFilter: false,\n  showOnlySystemsWithTestResults: false,\n  showComplianceSystemsInfo: false,\n  compact: false,\n  remediationsEnabled: true,\n  preselectedSystems: [],\n  ruleSeverityFilter: false,\n};\n\nexport default SystemsTable;\n","import gql from 'graphql-tag';\n\nexport const POLICY_QUERY = gql`\n  query PQ_Profile($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      external\n      description\n      totalHostCount\n      compliantHostCount\n      complianceThreshold\n      osMajorVersion\n      supportedOsVersions\n      lastScanned\n      policyType\n      policy {\n        id\n        name\n        refId\n        profiles {\n          id\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          parentProfileId\n          benchmark {\n            id\n            title\n            latestSupportedOsMinorVersions\n            osMajorVersion\n            version\n            profiles {\n              id\n              refId\n              ssgVersion\n            }\n          }\n          rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            references\n            identifier\n            precedence\n            values\n          }\n        }\n      }\n      businessObjective {\n        id\n        title\n      }\n      hosts {\n        id\n        osMinorVersion\n        osMajorVersion\n      }\n    }\n  }\n`;\n\nexport const POLICY_RULE_TREES_QUERY = gql`\n  query PQ_Profile($policyId: String!) {\n    profile(id: $policyId) {\n      policy {\n        profiles {\n          id\n          benchmark {\n            ruleTree\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const POLICY_VALUE_DEFINITONS_QUERY = gql`\n  query PQ_Profile($policyId: String!) {\n    profile(id: $policyId) {\n      policy {\n        profiles {\n          id\n          values\n          benchmark {\n            valueDefinitions {\n              id\n              refId\n              title\n              valueType\n              defaultValue\n              description\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { useMemo, useCallback } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { logMultipleErrors } from 'Utilities/helpers';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport {\n  POLICY_QUERY,\n  POLICY_RULE_TREES_QUERY,\n  POLICY_VALUE_DEFINITONS_QUERY,\n} from './constants';\nimport { compileData } from './helpers';\n\nconst usePolicyQuery = ({ policyId, skip: skipCondition }) => {\n  const ruleGroupsEnabled = useFeature('ruleGroups');\n  const valueEditingEnabled = useFeature('valueEditing');\n  const skip = policyId === 'new' || skipCondition;\n\n  const {\n    data: policyData,\n    error: policyError,\n    loading: policyLoading,\n    refetch: refecthPolicy,\n  } = useQuery(POLICY_QUERY, {\n    variables: { policyId },\n    skip,\n    fetchPolicy: 'no-cache',\n  });\n\n  const {\n    data: ruleTreesData,\n    error: ruleTreesError,\n    loading: ruleTreesLoading,\n    refetch: refecthRuleTrees,\n  } = useQuery(POLICY_RULE_TREES_QUERY, {\n    variables: { policyId },\n    skip: !ruleGroupsEnabled || skip,\n    fetchPolicy: 'no-cache',\n  });\n\n  const {\n    data: valueDefinitionsData,\n    error: valueDefinitionsError,\n    loading: valueDefinitionsLoading,\n    refetch: refecthValueDefinitions,\n  } = useQuery(POLICY_VALUE_DEFINITONS_QUERY, {\n    variables: { policyId },\n    skip: !valueEditingEnabled || skip,\n    fetchPolicy: 'no-cache',\n  });\n\n  const data = useMemo(\n    () => compileData(policyData, ruleTreesData, valueDefinitionsData),\n    [policyData, ruleTreesData, valueDefinitionsData]\n  );\n\n  const error = useMemo(\n    () => logMultipleErrors(policyError, ruleTreesError, valueDefinitionsError),\n    [policyError, ruleTreesError, valueDefinitionsError]\n  );\n\n  const loading = policyLoading || ruleTreesLoading || valueDefinitionsLoading;\n\n  const refetch = useCallback(() => {\n    if (!skip) {\n      refecthPolicy();\n      refecthRuleTrees();\n      refecthValueDefinitions();\n    }\n  }, [refecthPolicy, refecthRuleTrees, refecthValueDefinitions]);\n\n  return policyId === 'new'\n    ? { data: true, refetch: () => {} }\n    : {\n        data,\n        error,\n        loading,\n        refetch,\n      };\n};\n\nexport default usePolicyQuery;\n","export const compileData = (policyData, ruleTreesData, valueDefinitionsData) =>\n  policyData && {\n    profile: {\n      ...policyData.profile,\n      policy: {\n        ...(policyData?.profile.policy || {}),\n        profiles:\n          policyData?.profile.policy.profiles?.map((profile) => {\n            const ruleTree =\n              ruleTreesData?.profile.policy.profiles.find(\n                ({ id }) => id === profile.id\n              )?.benchmark.ruleTree || {};\n\n            const valueDefinitions =\n              valueDefinitionsData?.profile.policy.profiles.find(\n                ({ id }) => id === profile.id\n              )?.benchmark.valueDefinitions || [];\n\n            const values = valueDefinitionsData?.profile.policy.profiles.find(\n              ({ id }) => id === profile.id\n            )?.values;\n\n            return {\n              ...profile,\n              values,\n              benchmark: {\n                ...profile.benchmark,\n                ruleTree,\n                valueDefinitions,\n              },\n            };\n          }) || [],\n      },\n    },\n  };\n","import { useCallback, useState } from 'react';\nimport pAll from 'p-all';\n\nconst DEFAULT_CONCURRENT_PROMISES = 2;\n\nconst usePromiseQueue = (limit = DEFAULT_CONCURRENT_PROMISES) => {\n  const [isResolving, setIsResolving] = useState(false);\n  const [promiseResults, setPromiseResults] = useState();\n\n  const resolve = useCallback(\n    async (fns) => {\n      await setPromiseResults(undefined);\n      await setIsResolving(true);\n      const results = await pAll(fns, {\n        concurrency: limit,\n      });\n\n      await setIsResolving(false);\n      await setPromiseResults(results);\n\n      return results;\n    },\n    [limit]\n  );\n\n  return {\n    isResolving,\n    results: promiseResults,\n    resolve,\n  };\n};\n\nexport default usePromiseQueue;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { sortingByProp } from 'Utilities/helpers';\n\nconst selectRows = (rows, selected) =>\n  rows.map((row) => ({\n    ...row,\n    selected: selected.includes(row.id),\n  }));\n\nexport const entitiesReducer = () =>\n  applyReducerHash({\n    ['INVENTORY_INIT']: () => ({\n      rows: [],\n      total: 0,\n    }),\n    ['RESET_PAGE']: (state) => ({\n      ...state,\n      page: 1,\n    }),\n    ['SELECT_ENTITIES']: (state, { payload: { selected } }) => ({\n      ...state,\n      rows: selectRows(state.rows, selected),\n    }),\n  });\n\nexport const mapCountOsMinorVersions = (systems) => {\n  if (!systems) {\n    return {};\n  }\n\n  return systems.reduce((acc, { osMinorVersion }) => {\n    if (osMinorVersion !== undefined && osMinorVersion !== null) {\n      (acc[osMinorVersion] = acc[osMinorVersion] || {\n        osMinorVersion,\n        count: 0,\n      }).count++;\n    }\n\n    return acc;\n  }, {});\n};\n\nexport const countOsMinorVersions = (systems) =>\n  Object.values(mapCountOsMinorVersions(systems)).sort(\n    sortingByProp('osMinorVersion', 'desc')\n  );\n"],"names":["QUERY","gql","_templateObject","_taggedTemplateLiteral","ComplianceSystems","_data$profiles","_useQuery","useQuery","data","error","loading","policies","profiles","edges","map","_ref","node","React","PageHeader","className","PageHeaderTitle","title","StateViewWithError","stateValues","StateViewPart","stateKey","SystemsTable","columns","Columns","showLink","props","isStatic","transforms","nowrap","defaultFilter","systemProps","isFullView","showOsMinorVersionFilter","policy","osMajorVersion","showComplianceSystemsInfo","enableEditPolicy","remediationsEnabled","PolicyTypeDetailsRow","description","item","key","Text","style","margin","propTypes","NameCell","name","disabled","InUseProfileLabel","compact","PolicyTypeTable","_ref2","onChange","selectedProfile","info","tooltip","sortByProp","renderFunc","renderComponent","fitContent","_data","_id","profile","supportedOsVersions","join","TableToolsTable","items","_objectSpread","rowProps","selected","id","disableSelection","filters","filterConfig","type","conditionalFilterType","label","filter","policyTypes","value","policyType","toLowerCase","includes","options","detailsComponent","onRadioSelect","_event","_value","_rowIdx","_ref3","itemId","find","_ref4","sortBy","index","direction","property","emptyRows","length","variant","Tooltip","position","content","OutlinedQuestionCircleIcon","SUPPORTED_PROFILES","CreateSCAPPolicy","_data$osMajorVersions","change","selectedOsMajorVersion","fetchPolicy","osMajorVersions","selectedOsMajorVersionObject","profilesToSelect","profileRefId","refId","benchmarkRedId","benchmark","Spinner","TextContent","component","TextVariants","Form","FormGroup","isRequired","fieldId","_ref5","Tile","concat","onClick","isSelected","isStacked","labelIcon","PolicyTypeTooltip","PolicyTypesTable","undefined","reduxFormPropTypes","selector","formValueSelector","compose","connect","state","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","BENCHMARKS_QUERY","BENCHMARKS_RULES_TREES_QUERY","_templateObject2","BENCHMARKS_VALUE_DEFINITIONS_QUERY","_templateObject3","PROFILES_QUERY","_templateObject4","EditPolicyProfilesRules","_benchmarksData$bench","selectedRuleRefIds","osMinorVersionCounts","ruleValues","_useBenchmarksQuery","osMinorVersions","ruleGroupsEnabled","useFeature","valueEditingEnabled","variables","skip","benchmarksData","benchmarksError","benchmarksLoading","refetchProfiles","refetch","_useQuery2","ruleTreesData","ruleTreesError","ruleTreesLoading","refecthRuleTrees","_useQuery3","valueDefinitionsData","valueDefinitionsError","valueDefinitionsLoading","refecthValueDefinitions","useMemo","benchmarks","nodes","_ruleTreesData$benchm","_valueDefinitionsData","ruleTree","valueDefinitions","compileData","logMultipleErrors","useCallback","useBenchmarksQuery","i","osMinorVersion","sort","tabsData","systemCount","count","_benchmark$latestSupp","latestSupportedOsMinorVersions","getBenchmarkBySupportedOsMinor","benchmarkProfile","getBenchmarkProfile","newOsMinorVersion","profileToOsMinorMap","tabsDataToOsMinorMap","profileIds","Object","keys","profilesData","profilesError","profilesLoading","dataState","loadingState","noRuleSets","p","setSelectedRuleRefIds","newSelection","useLayoutEffect","profilesWithOs","extendProfilesByOsMinor","profilesWithRulesToSelection","only","JSON","stringify","EmptyState","Title","headingLevel","size","EmptyStateBody","EmptyTable","TabbedRules","setRuleValues","policyId","valueDefinition","valueValue","newRuleValues","_defineProperty","selectedFilter","level","ouiaId","resetLink","rulesPageLink","WizardContextConsumer","goToStepById","Button","PrependComponent","EditPolicySystems","selectedSystems","version","split","prependComponent","emptyStateComponent","width","showActions","enableExport","preselectedSystems","onSelect","newSelectedSystems","countOsMinorVersions","defaultProps","EditPolicyDetails","useEffect","Field","ReduxFormTextInput","isDisabled","ReduxFormTextArea","PolicyBusinessObjectiveTooltip","defaultValue","businessObjective","ProfileThresholdField","previousThreshold","initialValues","ReviewCreatedPolicy","complianceThreshold","parentProfileName","marginTop","TextList","TextListVariants","TextListItem","TextListItemVariants","fontWeight","Label","color","isCompact","benchmarkId","parseFloat","rulesCount","EmtpyStateWithErrors","errors","Array","isArray","List","ListItem","FinishedCreatePolicy","onWizardFinish","cloneFromProfileId","systems","values","_useState","useState","_useState2","_slicedToArray","percent","setPercent","_useState3","_useState4","message","setMessage","_useState5","_useState6","setErrors","_useState7","_useState8","failed","setFailed","updatePolicy","usePolicy","onProgress","progress","hosts","then","dispatchNotification","autoDismiss","Link","to","catch","_error$networkError","_error$networkError2","_error$networkError2$","networkError","result","Bullseye","EmptyStateVariant","EmptyStateIcon","icon","WrenchIcon","ProgressBar","EmptyStateSecondaryActions","withApollo","CreatePolicyForm","systemIds","reset","history","useHistory","stepIdReached","setStepIdReached","resetAnchor","location","hash","push","onClose","steps","enableNext","validateBenchmarkPage","canJumpTo","validateDetailsPage","validateSystemsPage","EditPolicyRules","validateRulesPage","nextButtonText","isFinishedStep","Wizard","isOpen","onNext","onGoToStep","onBack","dispatch","CreatePolicy","DeletePolicy","deleteEnabled","setDeleteEnabled","useLocation","_location$state$polic","_useMutation","useMutation","DELETE_PROFILE","onCompleted","dispatchAction","addNotification","onError","deletePolicy","ComplianceModal","ModalVariant","titleIconVariant","actions","input","Checkbox","isChecked","DeleteReport","_location$state","background","DELETE_REPORT","deleteReport","profileId","isModalOpen","onDelete","EditPolicyRulesTabEmptyState","EditPolicyRulesTab","ruleValuesProp","benchmarkSearch","sortingByProp","parentProfileId","toTabsData","prevSelection","empty","_policy$policy","_policy$policy$profil","mergeValues","fromEntries","setNewRuleTabs","EditPolicySystemsTab","onSystemSelect","osFilter","newRuleTabs","Alert","isInline","actionLinks","AlertActionLink","EditPolicyForm","setUpdatedPolicy","setSelectedSystems","policyProfiles","setOsMinorVersionCounts","_useNewRulesAlertStat","arguments","useNewRulesAlertState","_useNewRulesAlertStat2","newRulesAlert","setNewRulesAlert","handleSystemSelect","policyMinorVersions","hasNewOsMinorVersions","reduce","acc","_profile$osMinorVersi","mapCountOsMinorVersions","complianceThresholdValid","thresholdValid","profilesWithOsMinor","RoutedTabs","defaultTab","Tab","eventKey","TabTitleText","NewRulesAlert","updatedPolicy","EditPolicy","route","useParams","policy_id","_usePolicyQuery","usePolicyQuery","linkToPolicy","useLinkToPolicy","setRuleValuesState","saveEnabled","updatedPolicyHostsAndRules","_useOnSave","useOnSave","_useOnSave2","isSaving","onSave","spinnerAriaValueText","isLoading","useTitleEntity","minHeight","existingValues","currentValues","SystemLink","children","pathname","Name","_ref2$showOsInfo","showOsInfo","_ref2$showLink","hasOsInfo","SSGVersion","_ref3$ssgVersion","ssgVersion","supported","UnsupportedSSGVersion","messageVariant","SSGVersions","_ref4$testResultProfi","testResultProfiles","_profile$benchmark","Policies","Truncate","inline","text","FailedRules","_ref6","rulesFailed","_ref7","parseInt","ComplianceScore","_ref8","_ref9","score","compliant","PresentationalComplianceScore","NeverScanned","Fragment","ExclamationTriangleIcon","NEVER","lastScanned","dates","Date","last","Math","max","apply","date","isFinite","LastScanned","_ref10","lastScannedDate","DateFormat","parse","operatingSystemString","_ref11","OperatingSystem","system","disableSorting","compileColumnRenderFunc","cell","column","_objectWithoutProperties","_excluded","renderExport","customName","SsgVersion","exportKey","SsgVersionCell","PoliciesCell","failedRules","FailedRulesCell","complianceScoreString","complianceScoreData","trim","ComplianceScoreCell","LastScannedCell","OperatingSystemCell","OS","original","dataLabel","inventoryColumn","InventoryDetails","registryDecorator","_dec","_class","_React$Component","_inherits","_super","_classCallCheck","call","_createClass","_this","DetailWrapper","onLoad","mergeWithDetail","getRegistry","register","inventoryId","this","InventoryDetailHead","fallback","Skeleton","SkeletonSize","entity","DEFAULT_SYSTEMS_PER_BATCH","GET_SYSTEMS_ISSUES","RemediationButton","rules","buttonProps","onRemediationCreated","_useIssuesFetch","client","useApolloClient","_usePromiseQueue","usePromiseQueue","isResolving","results","resolve","fetchFunction","_asyncToGenerator","_regeneratorRuntime","_callee","perPage","page","_context","prev","next","query","abrupt","sent","stop","_x","_x2","fetch","_callee2","batchSize","pages","_args2","_context2","ceil","_toConsumableArray","_","pageIdx","remediationData","useIssuesFetch","isLoadingIssues","RemediationRemediationButton","_extends","getNotification","dataProvider","FallbackButton","GET_SYSTEMS_OSES","policyFilter","systemsPolicyFilterConfiguration","systemsOsFilterConfiguration","osMinorVersionFilter","systemsOsMinorFilterConfiguration","defaultOnLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","entitiesReducer","ssgVersionFilter","ssgVersions","filterString","groupByMajorVersion","showFilter","currentValue","major","String","Set","minor","useOsMinorVersionFilter","fetchArguments","osVersions","renameInventoryAttributes","culledTimestamp","staleWarningTimestamp","staleTimestamp","insightsId","insights_id","culled_timestamp","stale_warning_timestamp","stale_timestamp","useFetchSystems","onComplete","_ref3$variables","requestVariables","fetchResults","_data$systems","_data$systems$edges","_data$systems2","e","entities","systemsWithRuleObjectsFailed","meta","tags","totalCount","useFetchBatched","fetchBatched","total","buildApiFilters","tagFilters","otherFilters","_excluded2","tagsApiFilter","flatMap","tagFilter","tag","encodeURIComponent","tagKey","toIdFilter","ids","showAllSystems","compliantFilter","showOnlySystemsWithTestResults","showOsFilter","onSelectProp","noSystemsTable","tableProps","dedicatedAction","ruleSeverityFilter","inventory","useRef","isEmpty","setIsEmpty","isLoaded","setIsLoaded","setItems","setTotal","_useState9","_useState10","setPerPage","_useState11","_useState12","currentTags","setCurrentTags","_useFilterConfig","useFilterConfig","DEFAULT_SYSTEMS_FILTER_CONFIGURATION","COMPLIANT_SYSTEMS_FILTER_CONFIGURATION","COMPLIANCE_REPORT_TABLE_ADDITIONAL_FILTER","conditionalFilter","toolbarProps","activeFilterValues","systemsFilter","combindedFilter","useSystemsFilter","constructedQuery","constructQuery","systemFetchArguments","fragments","_useSystemBulkSelect","preselected","currentPageIds","_useFetchBatched2","fetchSystems","fetchFunc","_ref12","_callee3","fetchIds","idFilter","_context3","_x3","onSelectCallback","_ref13","_callee4","selectedIds","_context4","_x4","itemIdsInTable","_ref14","_callee5","_context5","_ref15","bulkSelect","useBulkSelect","itemIdsOnPage","toggleProps","useSystemBulkSelect","bulkSelectTableProps","bulkSelectToolBarProps","activeFilters","useDispatch","payload","debounceResetPage","debounce","Promise","_inventory$current","current","onRefreshData","useInventoryUtilities","getEntities","fetchEntities","appendDirection","attributes","attribute","findColumnByKey","_ids","_ref6$page","orderBy","orderDirection","sortableColumn","filterForApi","fetchedEntities","per_page","useGetEntities","_result$meta","_result$meta2","_result$meta2$tags","exportConfig","_useFetchBatched","selectionFilter","exporter","fetchedItems","useExport","onStart","useSystemsExport","StateView","noError","ErrorPage","InventoryTable","disableDefaultColumns","defaultColumns","isStringCol","defaultColumn","defaultCol","ref","hideFilters","all","showTags","isStickyHeader","TableVariant","_index","window","href","origin","PropTypes","POLICY_QUERY","POLICY_RULE_TREES_QUERY","POLICY_VALUE_DEFINITONS_QUERY","skipCondition","policyData","policyError","policyLoading","refecthPolicy","_policyData$profile$p","_ruleTreesData$profil","_valueDefinitionsData2","DEFAULT_CONCURRENT_PROMISES","limit","setIsResolving","promiseResults","setPromiseResults","fns","pAll","concurrency","selectRows","rows","row","_applyReducerHash","applyReducerHash"],"sourceRoot":""}