{"version":3,"sources":["webpack:///./src/SmartComponents/PolicyDetails/EditRulesButtonToolbarItem.js","webpack:///./src/SmartComponents/PolicyDetails/PolicyRulesTab.js","webpack:///./src/SmartComponents/PolicyDetails/PolicySystemsTab.js","webpack:///./src/SmartComponents/PolicyDetails/PolicyMultiversionRules.js","webpack:///./src/SmartComponents/PolicyDetails/PolicyDetails.js"],"names":["EditRulesButtonToolbarItem","policy","anchor","useAnchor","ToolbarItem","to","id","state","hash","backgroundLocation","Button","variant","ouiaId","propTypes","PolicyRulesTab","loading","Alert","isInline","title","PageSection","PageSectionVariants","Text","component","TextVariants","benchmark","version","SystemRulesTable","remediationsEnabled","columns","selectRulesTableColumns","profileRules","profile","refId","name","rules","toolbarItems","PolicySystemsTab","Columns","showLink","showOsMinorVersionFilter","majorOsVersion","query","GET_SYSTEMS","policyId","defaultFilter","showActions","noSystemsTable","hosts","length","complianceThreshold","systemTableProps","PolicyMultiversionRules","profilesForTabs","profiles","filter","osMinorVersion","systemCounts","mapCountOsMinorVersions","tabsData","sort","sortingByProp","map","systemCount","count","level","QUERY","gql","PolicyDetails","route","defaultTab","useParams","policy_id","location","useLocation","useQuery","variables","data","error","refetch","hasOsMinorProfiles","find","useEffect","useTitleEntity","stateValues","stateKey","PageHeader","Main","Spinner","Fragment","className","Breadcrumb","BreadcrumbItem","isActive","Grid","gutter","GridItem","xl2","xl","lg","md","sm","PageHeaderTitle","aria-label","Tab","eventKey"],"mappings":"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","file":"js/PolicyDetails.dc346bdbbc7303467b29.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { ToolbarItem, Button } from '@patternfly/react-core';\nimport { BackgroundLink } from 'PresentationalComponents';\nimport { useAnchor } from 'Utilities/Router';\n\nconst EditRulesButtonToolbarItem = ({ policy }) => {\n    let anchor = useAnchor();\n\n    return (\n        <ToolbarItem>\n            <BackgroundLink\n                to={ `/scappolicies/${ policy.id }/edit` }\n                state={ { policy } }\n                hash={ anchor }\n                backgroundLocation={ { hash: anchor } }>\n                <Button variant='primary' ouiaId='EditRulesButton'>Edit rules</Button>\n            </BackgroundLink>\n        </ToolbarItem>\n    );\n};\n\nEditRulesButtonToolbarItem.propTypes = {\n    policy: propTypes.object.isRequired\n};\n\nexport default EditRulesButtonToolbarItem;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Alert, Text, TextVariants, PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport SystemRulesTable, {\n    selectColumns as selectRulesTableColumns\n} from '@redhat-cloud-services/frontend-components-inventory-compliance/SystemRulesTable';\nimport EditRulesButtonToolbarItem from './EditRulesButtonToolbarItem';\n\nconst PolicyRulesTab = ({ loading, policy }) => (\n    <React.Fragment>\n        <Alert isInline ouiaId='RuleEditingAvailableAlert' variant='info' title='Rule editing is now available.'>\n            SCAP policies created before April 19th, 2021 with rule editing will use the full default\n            set of rules for the policy with the most accurate benchmark for systems within the policy.\n            Click the &quot;Edit rules&quot; or &quot;Edit policy&quot; button to edit rules.\n        </Alert>\n        <PageSection variant={PageSectionVariants.light}>\n            <Text component={TextVariants.p}>\n                <strong>What rules are shown on this list?&nbsp;</strong>\n                This view shows rules that are from the latest SSG version ({ policy.benchmark.version }).\n                If you are using a different version of SSG for systems in this policy,\n                those rules will be different and can be viewed on the systems details page.\n            </Text>\n        </PageSection>\n        <SystemRulesTable\n            remediationsEnabled={false}\n            columns={ selectRulesTableColumns(['Name', 'Severity', 'Ansible']) }\n            loading={ loading }\n            profileRules={[{\n                profile: { refId: policy.refId, name: policy.name },\n                rules: policy.rules\n            }]}\n            toolbarItems={ <EditRulesButtonToolbarItem policy={ policy } /> }\n        />\n    </React.Fragment>\n);\n\nPolicyRulesTab.propTypes = {\n    loading: propTypes.bool,\n    policy: propTypes.shape({\n        name: propTypes.string,\n        refId: propTypes.string,\n        rules: propTypes.array,\n        benchmark: propTypes.object\n    })\n};\n\nexport default PolicyRulesTab;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport { NoSystemsTableWithWarning } from 'PresentationalComponents';\nimport { InventoryTable } from 'SmartComponents';\nimport { GET_SYSTEMS } from '../SystemsTable/constants';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst PolicySystemsTab = ({ policy }) => (\n    <InventoryTable\n        columns={[\n            Columns.customName({\n                showLink: true\n            }),\n            Columns.SsgVersion,\n            Columns.OperatingSystem\n        ]}\n        showOsMinorVersionFilter={ [policy.majorOsVersion] }\n        query={GET_SYSTEMS}\n        policyId={ policy.id }\n        defaultFilter={`policy_id = ${policy.id}`}\n        showActions={ false }\n        remediationsEnabled={ false }\n        noSystemsTable={ policy?.hosts?.length === 0 && <NoSystemsTableWithWarning /> }\n        complianceThreshold={ policy.complianceThreshold } />\n);\n\nPolicySystemsTab.propTypes = {\n    policy: propTypes.shape({\n        id: propTypes.string.isRequired,\n        complianceThreshold: propTypes.number.isRequired,\n        majorOsVersion: propTypes.string.isRequired,\n        hosts: propTypes.array.isRequired\n    }),\n    systemTableProps: propTypes.object\n};\n\nexport default PolicySystemsTab;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { TabbedRules } from 'PresentationalComponents';\nimport { mapCountOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport { sortingByProp } from 'Utilities/helpers';\nimport EditRulesButtonToolbarItem from './EditRulesButtonToolbarItem';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\n\nconst PolicyMultiversionRules = ({ policy }) => {\n    const { hosts, policy: { profiles } } = policy;\n    const profilesForTabs = profiles.filter((profile) => !!profile.osMinorVersion);\n    const systemCounts = mapCountOsMinorVersions(hosts);\n\n    const tabsData = profilesForTabs.sort(sortingByProp('osMinorVersion', 'desc')).map((profile) => (\n        {\n            profile,\n            systemCount: systemCounts[profile.osMinorVersion]?.count || 0\n        }\n    ));\n\n    return <React.Fragment>\n        <PageSection variant={ PageSectionVariants.light }>\n            <TabbedRules\n                tabsData={ tabsData }\n                columns={ [Columns.Name, Columns.Severity, Columns.Ansible] }\n                level={ 1 }\n                toolbarItems={ <EditRulesButtonToolbarItem policy={ policy } /> } />\n        </PageSection>\n    </React.Fragment>;\n};\n\nPolicyMultiversionRules.propTypes = {\n    policy: propTypes.object.isRequired\n};\n\nexport default PolicyMultiversionRules;\n","import React, { Fragment, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { Breadcrumb, BreadcrumbItem, Button, Grid, GridItem, Tab } from '@patternfly/react-core';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n    PolicyDetailsDescription, PolicyDetailsContentLoader, RoutedTabSwitcher as TabSwitcher, ContentTab,\n    StateViewWithError, StateViewPart, RoutedTabs, BreadcrumbLinkItem, BackgroundLink\n} from 'PresentationalComponents';\nimport { useAnchor } from 'Utilities/Router';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport '@/Charts.scss';\nimport PolicyRulesTab from './PolicyRulesTab';\nimport PolicySystemsTab from './PolicySystemsTab';\nimport PolicyMultiversionRules from './PolicyMultiversionRules';\nimport './PolicyDetails.scss';\n\nexport const QUERY = gql`\nquery Profile($policyId: String!){\n    profile(id: $policyId) {\n        id\n        name\n        refId\n        external\n        description\n        totalHostCount\n        compliantHostCount\n        complianceThreshold\n        majorOsVersion\n        lastScanned\n        policyType\n        policy {\n            id\n            name\n            refId\n            profiles {\n                id\n                ssgVersion\n                name\n                refId\n                osMinorVersion\n                osMajorVersion\n                benchmark {\n                    id\n                    title\n                    latestSupportedOsMinorVersions\n                    osMajorVersion\n                }\n                rules {\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n        businessObjective {\n            id\n            title\n        }\n        hosts {\n            id\n            osMinorVersion\n        }\n        benchmark {\n            id\n            title\n            version\n        }\n        rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n        }\n    }\n}\n`;\n\nexport const PolicyDetails = ({ route }) => {\n    const defaultTab = 'details';\n    const { policy_id: policyId } = useParams();\n    const location = useLocation();\n    const anchor = useAnchor();\n    let { data, error, loading, refetch } = useQuery(QUERY, {\n        variables: { policyId }\n    });\n    let policy;\n    let hasOsMinorProfiles = true;\n    if (data && !loading) {\n        policy = data.profile;\n        hasOsMinorProfiles = !!policy.policy.profiles.find((profile) => !!profile.osMinorVersion);\n    }\n\n    useEffect(() => {\n        refetch();\n    }, [location, refetch]);\n\n    useTitleEntity(route, policy?.name);\n\n    return <StateViewWithError stateValues={ { error, data, loading } }>\n        <StateViewPart stateKey='loading'>\n            <PageHeader><PolicyDetailsContentLoader/></PageHeader>\n            <Main><Spinner/></Main>\n        </StateViewPart>\n        <StateViewPart stateKey='data'>\n            { policy && <Fragment>\n                <PageHeader className='page-header-tabs'>\n                    <Breadcrumb ouiaId=\"PolicyDetailsPathBreadcrumb\">\n                        <BreadcrumbLinkItem to='/'>\n                            Compliance\n                        </BreadcrumbLinkItem>\n                        <BreadcrumbLinkItem to='/scappolicies'>\n                            SCAP policies\n                        </BreadcrumbLinkItem>\n                        <BreadcrumbItem isActive>{policy.name}</BreadcrumbItem>\n                    </Breadcrumb>\n                    <Grid gutter='lg'>\n                        <GridItem xl2={11} xl={10} lg={12} md={12} sm={12}>\n                            <PageHeaderTitle title={policy.name} />\n                        </GridItem>\n                        <GridItem className='policy-details-button' xl2={1} xl={2} lg={2} md={3} sm={3}>\n                            <BackgroundLink\n                                to={ `/scappolicies/${ policy.id }/edit` }\n                                state={ { policy } }\n                                hash={ anchor }\n                                backgroundLocation={ { hash: 'details' } }>\n                                <Button variant='secondary' ouiaId=\"EditPolicyButton\">Edit policy</Button>\n                            </BackgroundLink>\n                        </GridItem>\n                    </Grid>\n                    <RoutedTabs aria-label=\"Policy Tabs\" ouiaId=\"PolicyDetailsTabs\" defaultTab={ defaultTab }>\n                        <Tab title='Details' id='policy-details' eventKey='details' />\n                        <Tab title='Rules' id='policy-rules' eventKey='rules' />\n                        <Tab title='Systems' id='policy-systems' eventKey='systems' />\n                    </RoutedTabs>\n                </PageHeader>\n                <Main>\n                    <TabSwitcher defaultTab={ defaultTab }>\n                        <ContentTab eventKey='details'>\n                            <PolicyDetailsDescription policy={ policy } />\n                        </ContentTab>\n                        <ContentTab eventKey='rules'>\n                            { hasOsMinorProfiles\n                                ? <PolicyMultiversionRules policy={ policy } />\n                                : <PolicyRulesTab policy={ policy } /> }\n                        </ContentTab>\n                        <ContentTab eventKey='systems'>\n                            <PolicySystemsTab policy={ policy } />\n                        </ContentTab>\n                    </TabSwitcher>\n                </Main>\n            </Fragment> }\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nPolicyDetails.propTypes = {\n    route: propTypes.object\n};\n\nexport default PolicyDetails;\n"],"sourceRoot":""}