{"version":3,"sources":["webpack:///./src/SmartComponents/Reports/Reports.js"],"names":["QUERY","gql","Reports","reportCards","useQuery","fetchPolicy","data","error","loading","pageHeader","style","paddingBottom","title","createPolicyLink","to","variant","profiles","edges","map","profile","node","filter","totalHostCount","length","className","i","sm","md","lg","xl","key","mainButton","Fragment","stateValues","stateKey","hasGutter"],"mappings":"skCAmBA,IAAMA,EAAQC,IAAH,KAmCEC,EAAU,WAAM,IAErBC,EAFqB,EACQC,mBAASJ,EAAO,CAAEK,YAAa,sBAAxDC,EADiB,EACjBA,KAAMC,EADW,EACXA,MAAOC,EADI,EACJA,QAEjBC,EAAa,kBAAC,aAAD,CAAYC,MAAO,CAAEC,cAAe,KAAM,kBAAC,kBAAD,CAAiBC,MAAM,wBAC5EC,EAAmB,kBAAC,IAAD,CAAgBC,GAAG,qBACxC,kBAAC,SAAD,CAAQC,QAAQ,WAAhB,sBAGJ,IAAKP,GAAWF,EAAM,CAClB,IAAMU,EAAWV,EAAKU,SAASC,MAAMC,KAAI,SAAAC,GAAO,OAAIA,EAAQC,QAAMC,QAAO,SAACF,GAAD,OAAaA,EAAQG,eAAiB,KAE3GN,EAASO,QACTd,EAAa,kBAAC,aAAD,CAAYe,UAAU,oBAC/B,kBAAC,kBAAD,CAAiBZ,MAAM,uBACvB,kBAAC,IAAD,OAEJT,EAAca,EAASE,KACnB,SAACC,EAASM,GAAV,OACI,kBAAC,WAAD,CAAUC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,IAAKL,GACzC,kBAAC,IAAD,CACIK,IAAKL,EACLN,QAASA,SAKzBhB,EAAc,kBAAC,uBAAD,CACVS,MAAO,4BACPmB,WAAalB,IAIzB,OAAO,kBAAC,IAAMmB,SAAP,KACDvB,EACF,kBAAC,OAAD,KACI,kBAAC,IAAD,CAAoBwB,YAAc,CAAE1B,QAAOD,OAAME,YAC7C,kBAAC,IAAD,CAAe0B,SAAS,WACpB,yBAAKV,UAAU,mBACX,kBAAC,OAAD,CAAMW,WAAS,GACX,kBAAC,IAAD,SAIZ,kBAAC,IAAD,CAAeD,SAAS,QACpB,yBAAKV,UAAU,mBACX,kBAAC,OAAD,CAAMW,WAAS,GACThC,SASfD","file":"js/Reports-baeddd21ff206db890c3.js","sourcesContent":["import React from 'react';\nimport {\n    BackgroundLink,\n    LoadingComplianceCards,\n    ReportCard,\n    ReportTabs,\n    StateViewWithError,\n    StateViewPart\n} from 'PresentationalComponents';\nimport { ComplianceEmptyState } from '@redhat-cloud-services/frontend-components-inventory-compliance';\nimport { PageHeader, PageHeaderTitle, Main } from '@redhat-cloud-services/frontend-components';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport {\n    Button,\n    Grid,\n    GridItem\n} from '@patternfly/react-core';\n\nconst QUERY = gql`\n{\n    profiles(search: \"has_test_results = true\", limit: 1000){\n        edges {\n            node {\n                id\n                name\n                refId\n                description\n                totalHostCount\n                compliantHostCount\n                majorOsVersion\n                complianceThreshold\n                businessObjective {\n                    id\n                    title\n                }\n                policy {\n                    id\n                    benchmark {\n                        id\n                        version\n                    }\n                }\n                benchmark {\n                    id\n                    version\n                }\n            }\n        }\n\n    }\n}\n`;\n\nexport const Reports = () => {\n    const { data, error, loading } = useQuery(QUERY, { fetchPolicy: 'cache-and-network' });\n    let reportCards;\n    let pageHeader = <PageHeader style={{ paddingBottom: 22 }}><PageHeaderTitle title=\"Compliance reports\" /></PageHeader>;\n    const createPolicyLink = <BackgroundLink to='/scappolicies/new'>\n        <Button variant='primary'>Create new policy</Button>\n    </BackgroundLink>;\n\n    if (!loading && data) {\n        const profiles = data.profiles.edges.map(profile => profile.node).filter((profile) => profile.totalHostCount > 0);\n\n        if (profiles.length) {\n            pageHeader = <PageHeader className='page-header-tabs'>\n                <PageHeaderTitle title=\"Compliance reports\" />\n                <ReportTabs />\n            </PageHeader>;\n            reportCards = profiles.map(\n                (profile, i) =>\n                    <GridItem sm={12} md={12} lg={6} xl={4} key={i}>\n                        <ReportCard\n                            key={i}\n                            profile={profile}\n                        />\n                    </GridItem>\n            );\n        } else {\n            reportCards = <ComplianceEmptyState\n                title={'No policies are reporting'}\n                mainButton={ createPolicyLink } />;\n        }\n    }\n\n    return <React.Fragment>\n        { pageHeader }\n        <Main>\n            <StateViewWithError stateValues={ { error, data, loading } }>\n                <StateViewPart stateKey='loading'>\n                    <div className=\"policies-donuts\">\n                        <Grid hasGutter>\n                            <LoadingComplianceCards/>\n                        </Grid>\n                    </div>\n                </StateViewPart>\n                <StateViewPart stateKey='data'>\n                    <div className=\"policies-donuts\">\n                        <Grid hasGutter>\n                            { reportCards }\n                        </Grid>\n                    </div>\n                </StateViewPart>\n            </StateViewWithError>\n        </Main>\n    </React.Fragment>;\n};\n\nexport default Reports;\n"],"sourceRoot":""}