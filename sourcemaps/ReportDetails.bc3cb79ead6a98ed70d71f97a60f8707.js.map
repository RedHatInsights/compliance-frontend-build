{"version":3,"sources":["webpack:///./src/SmartComponents/ReportDetails/ReportDetails.js","webpack:///./src/SmartComponents/ReportDownload/Components/ExportPDFForm.js","webpack:///./src/SmartComponents/ReportDownload/constants.js","webpack:///./src/SmartComponents/ReportDownload/hooks/helpers.js","webpack:///./src/SmartComponents/ReportDownload/hooks/useQueryExportData.js","webpack:///./src/SmartComponents/ReportDownload/hooks/usePDFBuilder.js","webpack:///./src/SmartComponents/ReportDownload/hooks/usePDFExport.js","webpack:///./src/SmartComponents/ReportDownload/__mocks__/DownloadButton.js","webpack:///./src/SmartComponents/ReportDownload/ReportDownload.js"],"names":["QUERY","gql","ReportDetails","chartColorScale","policyName","legendData","compliancePercentage","pageTitle","route","policyId","useParams","report_id","pdfReportEnabled","useFeature","useQuery","variables","fetchPolicy","data","error","loading","donutValues","donutId","profile","policy","name","compliantHostCount","testResultHostCount","replace","x","y","black300","blue300","blue200","pluralize","fixedPercentage","Math","floor","useTitleEntity","stateValues","stateKey","Breadcrumb","ouiaId","to","BreadcrumbItem","isActive","Grid","hasGutter","GridItem","sm","md","lg","xl","title","policyType","className","state","id","Button","variant","isInline","identifier","subTitle","themeVariant","ChartThemeVariant","colorScale","style","fontSize","constrainToVisibleArea","innerRadius","width","legendPosition","legendOrientation","padding","bottom","left","right","top","unsupportedHostCount","Text","showHelpIcon","span","showOsMinorVersionFilter","majorOsVersion","columns","Columns","showLink","showOsInfo","query","GET_SYSTEMS","showOnlySystemsWithTestResults","compliantFilter","defaultFilter","propTypes","ExportPDFForm","setExportSetting","exportSettings","Form","FormGroup","fieldId","label","Checkbox","aria-label","onChange","isChecked","nonCompliantSystems","unsupportedSystems","compliantSystems","topTenFailedRules","TextArea","value","userNotes","DEFAULT_EXPORT_SETTINGS","undefined","GET_PROFILE","scannedProfiles","profiles","filter","lastScanned","hasProfiles","testResultProfiles","length","isSystemSupported","system","every","supported","compliantSystemsData","systems","hasScannedProfiles","hasOnlyCompliantScannedProfiles","compliant","isSystemCompliant","nonCompliantSystemsData","hasNonCompliantProfiles","isSystemNonCompliant","unsupportedSystemsData","isSystemUnsupported","getFailedRulesWithCounts","failedRulesWithCounts","supportedSystemsData","forEach","rules","rule","refId","systemCount","countIfFailed","topTenFailedRulesData","topTenByCount","failedRulesWithCountsArray","Object","values","sort","ruleWithCount","slice","orderByArray","SEVERITY_LEVELS","fetchBatched","fetchFunction","total","batchSize","pages","ceil","Promise","all","Array","map","_","pageIdx","queryExportData","totalHostCount","onComplete","onError","client","useApolloClient","prepareForExport","perPage","page","fetchResults","then","results","flatMap","edges","e","node","exportData","catch","useQueryExportData","dispatchNotification","description","buildPDFPages","resolve","key","console","log","DownloadButton","asyncFunction","buttonProps","restProps","onClick","ReportDownload","linkToReport","useLinkToBackground","useState","setExportSettings","exportPDF","usePDFExport","exportFileName","Date","toISOString","split","actions","groupName","fileName","event","preventDefault","window","history","back","Modal","isOpen","onClose","Spinner","setting"],"mappings":"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","file":"js/ReportDetails.b5902a09c463ef746b99.js","sourcesContent":["/* eslint-disable react/display-name */\nimport React from 'react';\nimport black300 from '@patternfly/react-tokens/dist/esm/global_palette_black_300';\nimport blue200 from '@patternfly/react-tokens/dist/esm/chart_color_blue_200';\nimport blue300 from '@patternfly/react-tokens/dist/esm/chart_color_blue_300';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { ChartDonut, ChartThemeVariant } from '@patternfly/react-charts';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Grid,\n  GridItem,\n  Text,\n} from '@patternfly/react-core';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { fixedPercentage, pluralize } from 'Utilities/TextHelper';\nimport {\n  BackgroundLink,\n  BreadcrumbLinkItem,\n  ReportDetailsContentLoader,\n  ReportDetailsDescription,\n  StateViewWithError,\n  StateViewPart,\n  UnsupportedSSGVersion,\n  SubPageTitle,\n} from 'PresentationalComponents';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport { InventoryTable } from 'SmartComponents';\nimport '@/Charts.scss';\nimport './ReportDetails.scss';\nimport { GET_SYSTEMS } from '../SystemsTable/constants';\nimport * as Columns from '../SystemsTable/Columns';\n\nexport const QUERY = gql`\n  query Profile($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      testResultHostCount\n      compliantHostCount\n      unsupportedHostCount\n      complianceThreshold\n      majorOsVersion\n      lastScanned\n      policyType\n      policy {\n        id\n        name\n      }\n      benchmark {\n        id\n        version\n      }\n      businessObjective {\n        id\n        title\n      }\n    }\n  }\n`;\n\nexport const ReportDetails = ({ route }) => {\n  const { report_id: policyId } = useParams();\n  const pdfReportEnabled = useFeature('pdfReport');\n  const { data, error, loading } = useQuery(QUERY, {\n    variables: { policyId },\n    fetchPolicy: 'no-cache',\n  });\n  let donutValues = [];\n  let donutId = 'loading-donut';\n  let chartColorScale;\n  let profile = {};\n  let policyName;\n  let legendData;\n  let compliancePercentage;\n  let pageTitle;\n\n  if (!loading && data) {\n    profile = data.profile;\n    policyName = profile.policy.name;\n    pageTitle = `Report: ${policyName}`;\n    const compliantHostCount = profile.compliantHostCount;\n    const testResultHostCount = profile.testResultHostCount;\n    donutId = profile.name.replace(/ /g, '');\n    donutValues = [\n      { x: 'Compliant', y: testResultHostCount ? compliantHostCount : '0' },\n      { x: 'Non-compliant', y: testResultHostCount - compliantHostCount },\n    ];\n    chartColorScale = (testResultHostCount === 0 && [black300.value]) || [\n      blue300.value,\n      blue200.value,\n    ];\n    legendData = [\n      {\n        name:\n          donutValues[0].y +\n          ' ' +\n          pluralize(donutValues[0].y, 'system') +\n          ' compliant',\n      },\n      {\n        name:\n          donutValues[1].y +\n          ' ' +\n          pluralize(donutValues[1].y, 'system') +\n          ' non-compliant',\n      },\n    ];\n    compliancePercentage = testResultHostCount\n      ? fixedPercentage(\n          Math.floor(\n            100 * (donutValues[0].y / (donutValues[0].y + donutValues[1].y))\n          )\n        )\n      : 0;\n  }\n\n  useTitleEntity(route, policyName);\n\n  return (\n    <StateViewWithError stateValues={{ error, data, loading }}>\n      <StateViewPart stateKey=\"loading\">\n        <PageHeader>\n          <ReportDetailsContentLoader />\n        </PageHeader>\n        <Main>\n          <EmptyTable>\n            <Spinner />\n          </EmptyTable>\n        </Main>\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <PageHeader>\n          <Breadcrumb ouiaId=\"ReportDetailsPathBreadcrumb\">\n            <BreadcrumbLinkItem to=\"/\">Compliance</BreadcrumbLinkItem>\n            <BreadcrumbLinkItem to=\"/reports\">Reports</BreadcrumbLinkItem>\n            <BreadcrumbItem isActive>{pageTitle}</BreadcrumbItem>\n          </Breadcrumb>\n          <Grid hasGutter>\n            <GridItem sm={9} md={9} lg={9} xl={9}>\n              <PageHeaderTitle title={pageTitle} />\n              <SubPageTitle>{profile.policyType}</SubPageTitle>\n            </GridItem>\n            <GridItem\n              className=\"report-details-button\"\n              sm={3}\n              md={3}\n              lg={3}\n              xl={3}\n            >\n              {pdfReportEnabled && (\n                <BackgroundLink\n                  state={{ profile }}\n                  to={`/reports/${profile.id}/pdf`}\n                >\n                  <Button\n                    ouiaId=\"ReportDetailsDownloadReportPDFLink\"\n                    variant=\"primary\"\n                    className=\"pf-u-mr-md\"\n                  >\n                    Download PDF\n                  </Button>\n                </BackgroundLink>\n              )}\n              <BackgroundLink\n                state={{ profile }}\n                to={`/reports/${profile.id}/delete`}\n              >\n                <Button\n                  variant=\"link\"\n                  ouiaId=\"ReportDetailsDeleteReportLink\"\n                  isInline\n                >\n                  Delete report\n                </Button>\n              </BackgroundLink>\n            </GridItem>\n          </Grid>\n          <Grid hasGutter>\n            <GridItem sm={12} md={12} lg={12} xl={6}>\n              <div className=\"chart-inline\">\n                <div className=\"chart-container\">\n                  <ChartDonut\n                    data={donutValues}\n                    identifier={donutId}\n                    title={compliancePercentage}\n                    subTitle=\"Compliant\"\n                    themeVariant={ChartThemeVariant.light}\n                    colorScale={chartColorScale}\n                    style={{ fontSize: 20 }}\n                    constrainToVisibleArea={true}\n                    innerRadius={88}\n                    width={462}\n                    legendPosition=\"right\"\n                    legendData={legendData}\n                    legendOrientation=\"vertical\"\n                    padding={{\n                      bottom: 20,\n                      left: 0,\n                      right: 250,\n                      top: 20,\n                    }}\n                  />\n                </div>\n              </div>\n              {profile.unsupportedHostCount > 0 && (\n                <Text>\n                  <UnsupportedSSGVersion showHelpIcon>\n                    <strong className=\"ins-c-warning-text\">\n                      {profile.unsupportedHostCount} systems not supported\n                    </strong>\n                  </UnsupportedSSGVersion>\n                </Text>\n              )}\n            </GridItem>\n            <GridItem sm={12} md={12} lg={12} xl={6}>\n              <ReportDetailsDescription profile={profile} />\n            </GridItem>\n          </Grid>\n        </PageHeader>\n        <Main>\n          <Grid hasGutter>\n            <GridItem span={12}>\n              <InventoryTable\n                showOsMinorVersionFilter={[profile.majorOsVersion]}\n                columns={[\n                  Columns.customName({\n                    showLink: true,\n                    showOsInfo: true,\n                  }),\n                  Columns.inventoryColumn('tags'),\n                  Columns.SsgVersion,\n                  Columns.FailedRules,\n                  Columns.ComplianceScore,\n                  Columns.LastScanned,\n                ]}\n                query={GET_SYSTEMS}\n                showOnlySystemsWithTestResults\n                compliantFilter\n                defaultFilter={`with_results_for_policy_id = ${profile.id}`}\n                policyId={profile.id}\n              />\n            </GridItem>\n          </Grid>\n        </Main>\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nReportDetails.propTypes = {\n  route: propTypes.object,\n};\n\nexport default ReportDetails;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextArea,\n  Checkbox,\n} from '@patternfly/react-core';\n\nconst ExportPDFForm = ({ policy, setExportSetting, exportSettings }) => {\n  return (\n    <Form>\n      <FormGroup isInline fieldId=\"simple-form-checkbox-group\" label=\"Policy\">\n        <Text>{policy.name}</Text>\n      </FormGroup>\n\n      <FormGroup\n        fieldId=\"simple-form-checkbox-group\"\n        label=\"System data to include\"\n      >\n        <Checkbox\n          label=\"Non-compliant systems\"\n          id=\"non-compliant-systems-export-setting\"\n          aria-label=\"Non-compliant systems\"\n          onChange={setExportSetting('nonCompliantSystems')}\n          isChecked={exportSettings.nonCompliantSystems}\n        />\n        <Checkbox\n          label=\"Systems with unsupported configuration\"\n          id=\"unsupported-systems-export-setting\"\n          aria-label=\"Systems with unsupported configuration\"\n          onChange={setExportSetting('unsupportedSystems')}\n          isChecked={exportSettings.unsupportedSystems}\n        />\n        <Checkbox\n          id=\"compliant-systems-export-setting\"\n          onChange={setExportSetting('compliantSystems')}\n          isChecked={exportSettings.compliantSystems}\n          label=\"Compliant systems\"\n          aria-label=\"Compliant systems\"\n        />\n      </FormGroup>\n\n      <FormGroup label=\"Rule data to include\" fieldId=\"checkbox01\">\n        <Checkbox\n          id=\"failed-rules-export-setting\"\n          label=\"Top failed rules (Up to 10)\"\n          aria-label=\"Rule data to include\"\n          onChange={setExportSetting('topTenFailedRules')}\n          isChecked={exportSettings.topTenFailedRules}\n        />\n      </FormGroup>\n\n      <FormGroup label=\"User notes (optional)\" fieldId=\"checkbox01\">\n        <TextArea\n          aria-label=\"User notes (optional)\"\n          onChange={setExportSetting('userNotes')}\n          value={exportSettings.userNotes}\n        />\n      </FormGroup>\n    </Form>\n  );\n};\n\nExportPDFForm.propTypes = {\n  policy: propTypes.object,\n  exportSettings: propTypes.object,\n  setExportSetting: propTypes.func,\n};\n\nexport default ExportPDFForm;\n","import gql from 'graphql-tag';\n\nexport const DEFAULT_EXPORT_SETTINGS = {\n  compliantSystems: false,\n  nonCompliantSystems: true,\n  unsupportedSystems: true,\n  topTenFailedRules: true,\n  userNotes: undefined,\n};\n\nexport const GET_SYSTEMS = gql`\n  query getSystems(\n    $filter: String!\n    $policyId: ID\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n          osMinorVersion\n          testResultProfiles(policyId: $policyId) {\n            id\n            name\n            refId\n            lastScanned\n            compliant\n            external\n            score\n            supported\n            ssgVersion\n            majorOsVersion\n            rules {\n              refId\n              title\n              compliant\n              remediationAvailable\n            }\n          }\n          policies(policyId: $policyId) {\n            id\n            name\n          }\n          tags {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_PROFILE = gql`\n  query Profile($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      testResultHostCount\n      compliantHostCount\n      unsupportedHostCount\n      complianceThreshold\n      majorOsVersion\n      lastScanned\n      policyType\n      totalHostCount\n      policy {\n        id\n        name\n      }\n      benchmark {\n        id\n        version\n      }\n      businessObjective {\n        id\n        title\n      }\n    }\n  }\n`;\n","import { orderByArray } from 'Utilities/helpers';\nimport { SEVERITY_LEVELS } from '@/constants';\n\nconst scannedProfiles = (profiles) =>\n  profiles?.filter((profile) => profile.lastScanned != 'Never') || [];\n\nconst isSystemCompliant = (system) => {\n  const hasScannedProfiles =\n    scannedProfiles(system.testResultProfiles).length > 0;\n  const hasOnlyCompliantScannedProfiles = scannedProfiles(\n    system.testResultProfiles\n  ).every((profile) => profile.compliant);\n\n  return hasScannedProfiles && hasOnlyCompliantScannedProfiles;\n};\n\nconst isSystemNonCompliant = (system) => {\n  const hasScannedProfiles =\n    scannedProfiles(system.testResultProfiles).length > 0;\n  const hasNonCompliantProfiles =\n    scannedProfiles(system.testResultProfiles).filter(\n      (profile) => !profile.compliant\n    ).length > 0;\n\n  return hasScannedProfiles && hasNonCompliantProfiles;\n};\n\nconst hasProfiles = ({ testResultProfiles }) =>\n  scannedProfiles(testResultProfiles).length > 0;\n\nconst isSystemSupported = (system) =>\n  hasProfiles(system) &&\n  scannedProfiles(system.testResultProfiles).every(\n    (profile) => profile.supported\n  );\n\nconst isSystemUnsupported = (system) =>\n  hasProfiles(system) &&\n  scannedProfiles(system.testResultProfiles).every(\n    (profile) => !profile.supported\n  );\n\nexport const compliantSystemsData = (systems) =>\n  systems.filter(\n    (system) => isSystemSupported(system) && isSystemCompliant(system)\n  );\n\nexport const nonCompliantSystemsData = (systems) =>\n  systems.filter(\n    (system) => isSystemSupported(system) && isSystemNonCompliant(system)\n  );\n\nexport const unsupportedSystemsData = (systems) =>\n  systems.filter((system) => isSystemUnsupported(system));\n\nexport const supportedSystemsData = (systems) =>\n  systems.filter((system) => isSystemSupported(system));\n\nconst topTenFromRulesWithCounts = (failedRulesWithCounts) => {\n  const failedRulesWithCountsArray = Object.values(failedRulesWithCounts);\n\n  const topTenByCount = failedRulesWithCountsArray\n    .sort((ruleWithCount) => ruleWithCount.systemCount)\n    .slice(0, 10);\n\n  const topTenIsSingleCount =\n    topTenByCount.filter((ruleWithCount) => ruleWithCount.systemCount === 1)\n      .length === 10;\n\n  const topTenBySeverity = topTenIsSingleCount\n    ? orderByArray(\n        failedRulesWithCountsArray,\n        'severity',\n        SEVERITY_LEVELS,\n        'asc'\n      ).slice(0, 10)\n    : undefined;\n\n  return topTenBySeverity ? topTenBySeverity : topTenByCount;\n};\n\nconst getFailedRulesWithCounts = (systems) => {\n  const failedRulesWithCounts = {};\n  const countIfFailed = (rule) => {\n    if (!rule.compliant) {\n      const failedRuleCount = failedRulesWithCounts[rule.refId];\n      if (failedRuleCount) {\n        failedRulesWithCounts[rule.refId]['systemCount']++;\n      } else {\n        failedRulesWithCounts[rule.refId] = {\n          systemCount: 1,\n          ...rule,\n        };\n      }\n    }\n  };\n\n  supportedSystemsData(systems).forEach((system) => {\n    system.testResultProfiles.forEach((profile) => {\n      profile.rules.forEach((rule) => countIfFailed(rule));\n    });\n  });\n\n  return failedRulesWithCounts;\n};\n\nexport const topTenFailedRulesData = (systems) =>\n  topTenFromRulesWithCounts(getFailedRulesWithCounts(systems));\n","import { useApolloClient } from '@apollo/client';\nimport { GET_SYSTEMS } from '../constants';\nimport {\n  compliantSystemsData,\n  nonCompliantSystemsData,\n  unsupportedSystemsData,\n  topTenFailedRulesData,\n} from './helpers';\n\nconst fetchBatched = (fetchFunction, total, batchSize = 100) => {\n  const pages = Math.ceil(total / batchSize) || 1;\n  return Promise.all(\n    [...new Array(pages)].map((_, pageIdx) =>\n      fetchFunction(batchSize, pageIdx + 1)\n    )\n  );\n};\n\n// Hook that provides a wrapper function for a preconfigured GraphQL client to fetch export data\nconst useQueryExportData = (\n  exportSettings,\n  { id: policyId, totalHostCount },\n  { onComplete, onError } = {\n    onComplete: () => undefined,\n    onError: () => undefined,\n  }\n) => {\n  const client = useApolloClient();\n\n  const prepareForExport = (systems) => ({\n    ...(exportSettings.compliantSystems && {\n      compliantSystems: compliantSystemsData(systems),\n    }),\n    ...(exportSettings.nonCompliantSystems && {\n      nonCompliantSystems: nonCompliantSystemsData(systems),\n    }),\n    ...(exportSettings.unsupportedSystems && {\n      unsupportedSystems: unsupportedSystemsData(systems),\n    }),\n    ...(exportSettings.topTenFailedRules && {\n      topTenFailedRules: topTenFailedRulesData(systems),\n    }),\n    ...(exportSettings.userNotes && { userNotes: exportSettings.userNotes }),\n  });\n  const fetchFunction = (perPage, page) =>\n    client.query({\n      query: GET_SYSTEMS,\n      fetchResults: true,\n      fetchPolicy: 'no-cache',\n      variables: {\n        perPage,\n        page,\n        filter: '',\n        policyId,\n      },\n    });\n\n  return () =>\n    fetchBatched(fetchFunction, totalHostCount)\n      .then((results) =>\n        results.flatMap(({ data }) => data.systems.edges.map((e) => e.node))\n      )\n      .then((systems) => {\n        const exportData = prepareForExport(systems);\n        onComplete && onComplete(exportData);\n        return exportData;\n      })\n      .catch((error) => {\n        if (onError) {\n          onError(error);\n          return [];\n        } else {\n          throw error;\n        }\n      });\n};\n\nexport default useQueryExportData;\n","import React from 'react';\n\n// (Eventually) responsible for rendering sections and splitting into pages\nconst usePDFBuilder = () => {\n  const buildPages = (data) =>\n    Promise.resolve([<div key=\"pdfreport\" {...data} />]);\n  return buildPages;\n};\n\nexport default usePDFBuilder;\n","import { dispatchNotification } from 'Utilities/Dispatcher';\nimport useQueryExportData from './useQueryExportData';\nimport usePDFBuilder from './usePDFBuilder';\n\n// Hook to provide a function that fetches the necessary data to export\n// and compile it into pages for the pdf-generator DownloadButton\nconst usePDFExport = (exportSettings, policy) => {\n  const queryExportData = useQueryExportData(exportSettings, policy, {\n    onError: () => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Couldn’t download export',\n        description: 'Reinitiate this export to try again.',\n      });\n    },\n    onComplete: () => {\n      dispatchNotification({\n        variant: 'success',\n        title: 'Downloading export',\n      });\n    },\n  });\n  const buildPDFPages = usePDFBuilder();\n\n  const exportPDF = async () => {\n    dispatchNotification({\n      variant: 'info',\n      title: 'Preparing export',\n      description: 'Once complete, your download will start automatically.',\n    });\n    const data = await queryExportData();\n    console.log('DATA:', data);\n    const pages = await buildPDFPages(data);\n    return pages;\n  };\n\n  return exportPDF;\n};\n\nexport default usePDFExport;\n","import React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nconst DownloadButton = ({\n  asyncFunction,\n  label,\n  buttonProps,\n  ...restProps\n}) => (\n  <Button\n    {...buttonProps}\n    {...restProps}\n    variant=\"primary\"\n    onClick={() => asyncFunction()}\n  >\n    {label}\n  </Button>\n);\n\nDownloadButton.propTypes = {\n  asyncFunction: propTypes.func,\n  label: propTypes.label,\n  buttonProps: propTypes.object,\n};\n\nexport default DownloadButton;\n","import React, { useState } from 'react';\nimport { Button, Modal, Spinner } from '@patternfly/react-core';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport { useLinkToBackground } from 'Utilities/Router';\nimport ExportPDFForm from './Components/ExportPDFForm';\nimport usePDFExport from './hooks/usePDFExport';\nimport { GET_PROFILE, DEFAULT_EXPORT_SETTINGS } from './constants';\n// We use the mock for the tests here as well till fixes have been made to the DownloadButton component\n// import DownloadButton from '@redhat-cloud-services/frontend-components-pdf-generator/DownloadButton';\nimport DownloadButton from './__mocks__/DownloadButton';\n\n// Provides that export settings modal accessible in the report details\nexport const ReportDownload = () => {\n  const { report_id: policyId } = useParams();\n  const linkToReport = useLinkToBackground('/reports/' + policyId);\n  const { data, loading, error } = useQuery(GET_PROFILE, {\n    variables: { policyId },\n  });\n  const policy = data?.profile;\n  const [exportSettings, setExportSettings] = useState(DEFAULT_EXPORT_SETTINGS);\n  const setExportSetting = (setting) => {\n    return (value) => {\n      setExportSettings({\n        ...exportSettings,\n        [setting]: value,\n      });\n    };\n  };\n  const exportPDF = policy\n    ? usePDFExport(exportSettings, policy)\n    : () => Promise.resolve([]);\n  const exportFileName = `compliance-report--${\n    new Date().toISOString().split('T')[0]\n  }`;\n\n  const actions = [\n    <DownloadButton\n      groupName=\"Red Hat Insights\"\n      key=\"export\"\n      label=\"Export report\"\n      fileName={exportFileName}\n      asyncFunction={() => {\n        console.log(exportPDF());\n        return Promise.resolve([]);\n      }}\n      buttonProps={{\n        ouiaId: 'ExportReportButton',\n        variant: 'primary',\n      }}\n    />,\n    <Button\n      variant=\"secondary\"\n      key=\"cancel\"\n      ouiaId=\"ExportReportCancelButton\"\n      onClick={(event) => {\n        event.preventDefault();\n        window.history.back();\n      }}\n    >\n      Cancel\n    </Button>,\n  ];\n\n  return (\n    <Modal\n      isOpen\n      width=\"440px\"\n      ouiaId=\"DownloadReportModal\"\n      title=\"Compliance report\"\n      onClose={linkToReport}\n      actions={actions}\n    >\n      <StateViewWithError stateValues={{ error, data, loading }}>\n        <StateViewPart stateKey=\"loading\">\n          <Spinner />\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n          <ExportPDFForm {...{ policy, setExportSetting, exportSettings }} />\n        </StateViewPart>\n      </StateViewWithError>\n    </Modal>\n  );\n};\n\nexport default ReportDownload;\n"],"sourceRoot":""}