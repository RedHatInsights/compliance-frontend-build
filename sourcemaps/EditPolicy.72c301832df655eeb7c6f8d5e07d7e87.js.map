{"version":3,"file":"js/EditPolicy.62a095051ecc2aa11bd3.js","mappings":"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","sources":["webpack:///./src/SmartComponents/ComplianceSystems/ComplianceSystems.js","webpack:///./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyProfilesRules.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack:///./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack:///./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyDetailsTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyRulesTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicySystemsTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyForm.js","webpack:///./src/SmartComponents/EditPolicy/hooks.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicy.js","webpack:///./src/SmartComponents/SystemsTable/Cells.js","webpack:///./src/SmartComponents/SystemsTable/Columns.js","webpack:///./src/SmartComponents/SystemsTable/constants.js","webpack:///./src/SmartComponents/InventoryDetails/InventoryDetails.js","webpack:///./src/SmartComponents/SystemsTable/hooks.js","webpack:///./src/SmartComponents/SystemsTable/SystemsTable.js","webpack:///./src/store/Reducers/SystemStore.js"],"sourcesContent":["/* eslint-disable react/display-name */\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport { SystemsTable } from 'SmartComponents';\nimport { GET_SYSTEMS } from '../SystemsTable/constants';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst QUERY = gql`\n  {\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          name\n          refId\n          majorOsVersion\n        }\n      }\n    }\n  }\n`;\n\nconst DEFAULT_FILTER = 'has_test_results = true or has_policy = true';\n\nexport const ComplianceSystems = () => {\n  const { data, error, loading } = useQuery(QUERY);\n  const policies = data?.profiles?.edges.map(({ node }) => node);\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"page-header\">\n        <PageHeaderTitle title=\"Systems\" />\n      </PageHeader>\n      <Main>\n        <StateViewWithError stateValues={{ error, data, loading }}>\n          <StateViewPart stateKey=\"data\">\n            {policies && (\n              <SystemsTable\n                columns={[\n                  Columns.customName({\n                    showLink: true,\n                    showOsInfo: true,\n                  }),\n                  Columns.inventoryColumn('tags'),\n                  Columns.Policies,\n                  Columns.inventoryColumn('updated', { isStatic: true }),\n                ]}\n                query={GET_SYSTEMS}\n                defaultFilter={DEFAULT_FILTER}\n                systemProps={{\n                  isFullView: true,\n                }}\n                showOsMinorVersionFilter={policies.map(\n                  (policy) => policy.majorOsVersion\n                )}\n                showComplianceSystemsInfo\n                enableEditPolicy={false}\n                remediationsEnabled={false}\n                policies={policies}\n              />\n            )}\n          </StateViewPart>\n        </StateViewWithError>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default ComplianceSystems;\n","import React from 'react';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  Tile,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ProfileTypeSelect } from 'PresentationalComponents';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\n\nconst BENCHMARKS_AND_PROFILES = gql`\n  query benchmarksAndProfiles {\n    latestBenchmarks {\n      id\n      title\n      refId\n      version\n      osMajorVersion\n      profiles {\n        id\n        name\n        refId\n        description\n        complianceThreshold\n      }\n    }\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          refId\n          benchmark {\n            refId\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst PolicyTooltip = () => (\n  <Tooltip\n    position=\"right\"\n    content=\"Policy types are OpenSCAP policies that are supported by RHEL.\n        For each major version of RHEL, users can create one policy of each type.\"\n  >\n    <OutlinedQuestionCircleIcon className=\"grey-icon\" />\n  </Tooltip>\n);\n\nexport const CreateSCAPPolicy = ({\n  change,\n  selectedBenchmarkId,\n  selectedProfile,\n}) => {\n  const { data, error, loading } = useQuery(BENCHMARKS_AND_PROFILES, {\n    fetchPolicy: 'no-cache',\n  });\n\n  const inUseProfileRefIds = (profiles, benchmark) =>\n    profiles\n      .filter((profile) => benchmark.refId === profile.node.benchmark.refId)\n      .map((profile) => profile.node.refId);\n\n  if (error) {\n    return error;\n  }\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  const benchmarks = data.latestBenchmarks;\n  let selectedBenchmark;\n  let validProfiles;\n  if (selectedBenchmarkId) {\n    selectedBenchmark = benchmarks.find(\n      (benchmark) => benchmark.id === selectedBenchmarkId\n    );\n    const userProfileRefIds = inUseProfileRefIds(\n      data.profiles.edges,\n      selectedBenchmark\n    );\n    validProfiles = selectedBenchmark.profiles.map((profile) => ({\n      ...profile,\n      disabled: userProfileRefIds.includes(profile.refId),\n    }));\n  }\n\n  const setBenchmark = ({ id, osMajorVersion }) => {\n    if (selectedBenchmark?.osMajorVersion !== osMajorVersion) {\n      change('systems', []);\n    }\n\n    change('benchmark', id);\n    change('osMajorVersion', osMajorVersion);\n  };\n\n  return (\n    <React.Fragment>\n      <TextContent>\n        <Text component={TextVariants.h1} className=\"pf-u-mb-md\">\n          Create SCAP policy\n        </Text>\n        <Text className=\"pf-u-mb-md\">\n          Select the operating system and policy type for this policy.\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroup label=\"Operating system\" isRequired fieldId=\"benchmark\">\n          {benchmarks &&\n            benchmarks\n              .sort((a, b) => a.refId.localeCompare(b.refId))\n              .map((benchmark) => {\n                const { id, osMajorVersion } = benchmark;\n                return (\n                  <Tile\n                    key={id}\n                    className=\"pf-u-mr-md\"\n                    title={`RHEL ${osMajorVersion}`}\n                    onClick={() => setBenchmark(benchmark)}\n                    isSelected={selectedBenchmarkId === id}\n                    isStacked\n                  />\n                );\n              })}\n        </FormGroup>\n        <FormGroup\n          isRequired\n          labelIcon={<PolicyTooltip />}\n          label=\"Policy type\"\n          fieldId=\"policy-type\"\n        >\n          <ProfileTypeSelect\n            profiles={selectedBenchmark && validProfiles}\n            onChange={(value) => {\n              change('selectedRuleRefIds', undefined);\n              change('profile', value);\n            }}\n            selectedProfile={selectedProfile}\n          />\n        </FormGroup>\n      </Form>\n    </React.Fragment>\n  );\n};\n\nCreateSCAPPolicy.propTypes = {\n  selectedBenchmarkId: propTypes.string,\n  change: reduxFormPropTypes.change,\n  selectedProfile: propTypes.object,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    selectedBenchmarkId: selector(state, 'benchmark'),\n    selectedProfile: selector(state, 'profile'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(CreateSCAPPolicy);\n","import React, { useLayoutEffect } from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  Title,\n  Text,\n  TextContent,\n  TextVariants,\n  EmptyState,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\n\nconst PROFILES_QUERY = gql`\n  query Profiles($filter: String!) {\n    profiles(search: $filter) {\n      edges {\n        node {\n          id\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          policy {\n            id\n          }\n          policyType\n          benchmark {\n            id\n            refId\n            latestSupportedOsMinorVersions\n            osMajorVersion\n          }\n          ssgVersion\n          rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst BENCHMARKS_QUERY = gql`\n  query Benchmarks($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        profiles {\n          id\n          refId\n          osMajorVersion\n          ssgVersion\n        }\n      }\n    }\n  }\n`;\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nexport const EditPolicyProfilesRules = ({\n  policy,\n  selectedRuleRefIds,\n  change,\n  osMajorVersion,\n  osMinorVersionCounts,\n}) => {\n  const columns = [Columns.Name, Columns.Severity, Columns.Remediaton];\n  const osMinorVersions = osMinorVersionCounts\n    .map((i) => i.osMinorVersion)\n    .sort();\n  const benchmarkSearch =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const {\n    data: benchmarksData,\n    error: benchmarksError,\n    loading: benchmarksLoading,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter: benchmarkSearch,\n    },\n    skip: osMinorVersions.length === 0,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  let tabsData = osMinorVersionCounts.map(\n    ({ osMinorVersion, count: systemCount }) => {\n      osMinorVersion = `${osMinorVersion}`;\n      let profile;\n      if (benchmarks) {\n        const benchmark = getBenchmarkBySupportedOsMinor(\n          benchmarks,\n          osMinorVersion\n        );\n        if (benchmark) {\n          profile = getBenchmarkProfile(benchmark, policy.refId);\n          if (profile) {\n            profile = {\n              ...profile,\n              benchmark,\n            };\n          }\n        }\n      }\n\n      return {\n        profile,\n        systemCount,\n        newOsMinorVersion: osMinorVersion,\n      };\n    }\n  );\n  tabsData = tabsData.filter(({ profile }) => !!profile);\n\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n  const profileIds = Object.keys(profileToOsMinorMap);\n  const filter = profileIds.map((i) => `id = ${i}`).join(' OR ');\n  const skipProfilesQuery = benchmarksLoading || filter.length === 0;\n  const {\n    data: profilesData,\n    error: profilesError,\n    loading: profilesLoading,\n  } = useQuery(PROFILES_QUERY, {\n    variables: {\n      filter,\n    },\n    skip: skipProfilesQuery,\n  });\n  const error = benchmarksError || profilesError;\n  const dataState = profileIds?.length > 0 ? profilesData : undefined;\n  const loadingState = profilesLoading || benchmarksLoading ? true : undefined;\n  const noRuleSets = !error && !loadingState && profileIds?.length === 0;\n  const profiles = skipProfilesQuery\n    ? []\n    : profilesData?.profiles.edges.map((p) => p.node);\n\n  const setSelectedRuleRefIds = (newSelection) => {\n    change('selectedRuleRefIds', newSelection);\n  };\n\n  useLayoutEffect(() => {\n    if (!loadingState) {\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      const newSelection = profilesWithRulesToSelection(\n        profilesWithOs,\n        selectedRuleRefIds,\n        { only: true }\n      );\n      setSelectedRuleRefIds(newSelection);\n    }\n  }, [JSON.stringify(profiles), loadingState]);\n\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-pb-md\">\n        <Text component={TextVariants.h1}>Rules</Text>\n        <Text>\n          Customize your <b>{policy.name}</b> SCAP policy by including and\n          excluding rules.\n        </Text>\n        <Text>\n          Each release of RHEL is supported with a unique and specific version\n          of the SCAP Security Guide (SSG). You must customize each version of\n          SSG for each release of RHEL.\n        </Text>\n      </TextContent>\n\n      <StateViewWithError\n        stateValues={{\n          error,\n          data: dataState,\n          loading: loadingState,\n          noRuleSets,\n        }}\n      >\n        <StateViewPart stateKey=\"noRuleSets\">\n          <EmptyState>\n            <Title headingLevel=\"h1\" size=\"xl\">\n              No rules can be configured\n            </Title>\n            <EmptyStateBody>\n              The policy type selected does not exist for the systems and OS\n              versions selected in the previous steps.\n            </EmptyStateBody>\n          </EmptyState>\n        </StateViewPart>\n        <StateViewPart stateKey=\"loading\">\n          <EmptyTable>\n            <Spinner />\n          </EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n          <TabbedRules\n            tabsData={tabsData}\n            selectedRuleRefIds={selectedRuleRefIds}\n            columns={columns}\n            remediationsEnabled={false}\n            selectedFilter\n            level={1}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            ouiaId=\"RHELVersions\"\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </React.Fragment>\n  );\n};\n\nEditPolicyProfilesRules.propTypes = {\n  policy: propTypes.object,\n  change: reduxFormPropTypes.change,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  selectedRuleRefIds: propTypes.array,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    policy: JSON.parse(selector(state, 'profile')),\n    osMajorVersion: selector(state, 'osMajorVersion'),\n    osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n    selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyProfilesRules);\n","import React from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  reduxForm,\n  formValueSelector,\n} from 'redux-form';\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  WizardContextConsumer,\n} from '@patternfly/react-core';\nimport { SystemsTable } from 'SmartComponents';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { countOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n        <br />\n        Policies must be created with at least one system.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Choose a different operating system, or connect{' '}\n        <b>RHEL {osMajorVersion}</b> systems to Insights.\n      </Text>\n    </TextContent>\n    <WizardContextConsumer>\n      {({ goToStepById }) => (\n        <Button onClick={() => goToStepById(1)}>\n          Choose a different operating system\n        </Button>\n      )}\n    </WizardContextConsumer>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n        <br />\n        Systems can be added or removed at any time.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nexport const EditPolicySystems = ({\n  change,\n  osMajorVersion,\n  selectedSystems,\n}) => {\n  const onSystemSelect = (newSelectedSystems) => {\n    change('systems', newSelectedSystems);\n    change('osMinorVersionCounts', countOsMinorVersions(newSelectedSystems));\n  };\n\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-mb-md\">\n        <Text component={TextVariants.h1}>Systems</Text>\n      </TextContent>\n      <Form>\n        <FormGroup>\n          <SystemsTable\n            showOsMinorVersionFilter={[osMajorVersion]}\n            prependComponent={\n              <PrependComponent osMajorVersion={osMajorVersion} />\n            }\n            emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n            columns={[\n              {\n                ...Columns.Name,\n                props: {\n                  width: 40,\n                },\n                sortBy: ['name'],\n              },\n              Columns.inventoryColumn('tags'),\n              {\n                ...Columns.OperatingSystem,\n                props: {},\n                sortBy: ['osMajorVersion', 'osMinorVersion'],\n              },\n            ]}\n            remediationsEnabled={false}\n            compact\n            showActions={false}\n            query={GET_SYSTEMS_WITHOUT_FAILED_RULES}\n            defaultFilter={\n              osMajorVersion && `os_major_version = ${osMajorVersion}`\n            }\n            enableExport={false}\n            preselectedSystems={selectedSystems}\n            onSelect={onSystemSelect}\n          />\n        </FormGroup>\n      </Form>\n    </React.Fragment>\n  );\n};\n\nEditPolicySystems.propTypes = {\n  osMajorVersion: propTypes.string,\n  selectedSystems: propTypes.array,\n  change: reduxFormPropTypes.change,\n};\n\nEditPolicySystems.defaultProps = {\n  selectedSystems: [],\n};\n\nconst selector = formValueSelector('policyForm');\nconst mapStateToProps = (state) => ({\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  selectedSystems: selector(state, 'systems'),\n});\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicySystems);\n","import React, { useEffect } from 'react';\nimport { compose } from 'redux';\nimport {\n  Field,\n  reduxForm,\n  formValueSelector,\n  propTypes as reduxFormPropTypes,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  ReduxFormTextInput,\n  ReduxFormTextArea,\n} from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport {\n  ProfileThresholdField,\n  PolicyBusinessObjectiveTooltip,\n} from 'PresentationalComponents';\n\nexport const EditPolicyDetails = ({ change, policy, refId }) => {\n  useEffect(() => {\n    if (policy && policy.refId !== refId) {\n      change('name', `${policy.name}`);\n      change('refId', `${policy.refId}`);\n      change('description', `${policy.description}`);\n    }\n  }, [policy]);\n\n  return (\n    <React.Fragment>\n      <TextContent>\n        <Text component={TextVariants.h1}>Details</Text>\n      </TextContent>\n      <br />\n      <Form id=\"editpolicydetails\">\n        <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n          <Field\n            component={ReduxFormTextInput}\n            type=\"text\"\n            isRequired={true}\n            id=\"name\"\n            name=\"name\"\n            aria-describedby=\"name\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            isDisabled\n            id=\"refId\"\n            name=\"refId\"\n            aria-describedby=\"refId\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Description\" fieldId=\"description\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextArea}\n            id=\"description\"\n            name=\"description\"\n            aria-describedby=\"description\"\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Business objective\"\n          labelIcon={<PolicyBusinessObjectiveTooltip />}\n          fieldId=\"businessObjective\"\n        >\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            id=\"businessObjective\"\n            name=\"businessObjective\"\n            aria-describedby=\"businessObjective\"\n            defaultValue={policy.businessObjective}\n          />\n        </FormGroup>\n        <ProfileThresholdField previousThreshold={policy.complianceThreshold} />\n      </Form>\n    </React.Fragment>\n  );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n  policy: propTypes.object,\n  refId: propTypes.string,\n  change: reduxFormPropTypes.change,\n};\n\nconst mapStateToProps = (state) => {\n  const policy = JSON.parse(selector(state, 'profile'));\n  return {\n    policy,\n    refId: selector(state, 'refId'),\n    initialValues: {\n      name: `${policy.name}`,\n      refId: `${policy.refId}`,\n      description: `${policy.description}`,\n      benchmark: selector(state, 'benchmark'),\n      osMajorVersion: selector(state, 'osMajorVersion'),\n      profile: selector(state, 'profile'),\n    },\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyDetails);\n","import React from 'react';\nimport {\n  Text,\n  TextVariants,\n  TextContent,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useQuery } from '@apollo/client';\n\nconst REVIEW = gql`\n  query review($benchmarkId: String!) {\n    benchmark(id: $benchmarkId) {\n      id\n      osMajorVersion\n    }\n  }\n`;\n\nconst ReviewCreatedPolicy = ({\n  benchmarkId,\n  name,\n  businessObjective,\n  complianceThreshold,\n  parentProfileName,\n  osMinorVersionCounts,\n}) => {\n  const { data, error, loading } = useQuery(REVIEW, {\n    variables: { benchmarkId },\n  });\n\n  if (error) {\n    return error;\n  }\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  const {\n    benchmark: { osMajorVersion },\n  } = data;\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.h1}>Review</Text>\n      <Text>Review your SCAP policy before finishing.</Text>\n      <Text component={TextVariants.h3} style={{ marginTop: 0 }}>\n        {name}\n      </Text>\n      <TextList component={TextListVariants.dl}>\n        <TextListItem component={TextListItemVariants.dt}>\n          Policy type\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>\n          {parentProfileName}\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dt}>\n          Compliance threshold\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>\n          {complianceThreshold}%\n        </TextListItem>\n        {businessObjective && (\n          <React.Fragment>\n            <TextListItem component={TextListItemVariants.dt}>\n              Business objective\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {businessObjective}\n            </TextListItem>\n          </React.Fragment>\n        )}\n        <TextListItem component={TextListItemVariants.dt}>Systems</TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>\n          <TextList component={TextListVariants.dl}>\n            {osMinorVersionCounts.map(({ osMinorVersion, count }) => (\n              <React.Fragment key={osMinorVersion}>\n                <TextListItem\n                  component={TextListItemVariants.dt}\n                  style={{ fontWeight: 'normal' }}\n                >\n                  RHEL {osMajorVersion}.{osMinorVersion}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  {count} {count > 1 ? 'systems' : 'system'}\n                </TextListItem>\n              </React.Fragment>\n            ))}\n          </TextList>\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n\nReviewCreatedPolicy.propTypes = {\n  benchmarkId: propTypes.string,\n  refId: propTypes.string,\n  name: propTypes.string,\n  businessObjective: propTypes.string,\n  complianceThreshold: propTypes.number,\n  parentProfileName: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect((state) => ({\n  benchmarkId: selector(state, 'benchmark'),\n  refId: selector(state, 'refId'),\n  name: selector(state, 'name'),\n  businessObjective: selector(state, 'businessObjective'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  complianceThreshold:\n    parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n  parentProfileName: JSON.parse(selector(state, 'profile')).name,\n  rulesCount: selector(state, 'selectedRuleRefIds').length,\n}))(ReviewCreatedPolicy);\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Title,\n  Button,\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  List,\n  ListItem,\n} from '@patternfly/react-core';\nimport { ProgressBar } from 'PresentationalComponents';\nimport { Link } from 'react-router-dom';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from '@apollo/client/react/hoc';\nimport { usePolicy } from 'Mutations';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nconst EmtpyStateWithErrors = ({ errors }) =>\n  errors && Array.isArray(errors) && errors.length > 0 ? (\n    <EmptyStateBody className=\"wizard-failed-errors\">\n      <List>\n        {errors.map((error) => (\n          <ListItem key={error}>{error}</ListItem>\n        ))}\n      </List>\n    </EmptyStateBody>\n  ) : null;\n\nEmtpyStateWithErrors.propTypes = {\n  errors: propTypes.array,\n};\n\nexport const FinishedCreatePolicy = ({\n  onWizardFinish,\n  cloneFromProfileId,\n  description,\n  name,\n  complianceThreshold,\n  businessObjective,\n  refId,\n  benchmarkId,\n  systems,\n  selectedRuleRefIds,\n}) => {\n  const [percent, setPercent] = useState(0);\n  const [message, setMessage] = useState('This usually takes a minute or two.');\n  const [errors, setErrors] = useState(null);\n  const [failed, setFailed] = useState(false);\n  const updatePolicy = usePolicy();\n\n  const onProgress = (progress) => {\n    setPercent(progress * 100);\n  };\n\n  useEffect(() => {\n    const newPolicy = {\n      cloneFromProfileId,\n      description,\n      name,\n      complianceThreshold,\n      businessObjective: { title: businessObjective },\n      refId,\n      benchmarkId,\n      hosts: systems,\n      selectedRuleRefIds,\n    };\n\n    updatePolicy(null, newPolicy, onProgress)\n      .then(({ id }) => {\n        setPercent(100);\n        setMessage();\n        dispatchNotification({\n          variant: 'success',\n          title: `Created policy \"${name}\"`,\n          autoDismiss: true,\n          description: (\n            <span>\n              From the <strong>SCAP Policies</strong> list, open{' '}\n              <Link to={`/scappolicies/${id}`}>{name}</Link>.\n            </span>\n          ),\n        });\n      })\n      .catch((error) => {\n        setMessage(error.networkError?.message);\n        setErrors(error.networkError?.result?.errors);\n        setFailed(true);\n        dispatchNotification({\n          variant: 'danger',\n          title: 'Error creating policy',\n          description: error.message,\n        });\n      });\n  }, []);\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={WrenchIcon} />\n        <br />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          Creating policy\n        </Title>\n        <EmptyStateBody>\n          <ProgressBar percent={percent} failed={failed} />\n        </EmptyStateBody>\n        <EmptyStateBody className={failed && 'wizard-failed-message'}>\n          {message}\n        </EmptyStateBody>\n        <EmtpyStateWithErrors error={errors} />\n        <EmptyStateSecondaryActions>\n          {(percent === 100 || failed) && (\n            <Button\n              variant={'primary'}\n              ouiaId=\"ReturnToAppButton\"\n              onClick={() => {\n                onWizardFinish();\n              }}\n            >\n              {failed ? 'Back' : 'Return to application'}\n            </Button>\n          )}\n        </EmptyStateSecondaryActions>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nFinishedCreatePolicy.propTypes = {\n  benchmarkId: propTypes.string.isRequired,\n  businessObjective: propTypes.object,\n  cloneFromProfileId: propTypes.string.isRequired,\n  refId: propTypes.string.isRequired,\n  name: propTypes.string.isRequired,\n  description: propTypes.string,\n  systems: propTypes.array,\n  complianceThreshold: propTypes.number,\n  onWizardFinish: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string).isRequired,\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    benchmarkId: selector(state, 'benchmark'),\n    businessObjective: selector(state, 'businessObjective'),\n    cloneFromProfileId: JSON.parse(selector(state, 'profile')).id,\n    refId: selector(state, 'refId'),\n    name: selector(state, 'name'),\n    description: selector(state, 'description'),\n    complianceThreshold:\n      parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n    systems: selector(state, 'systems'),\n    selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: true,\n    forceUnregisterOnUnmount: true,\n  }),\n  withApollo\n)(FinishedCreatePolicy);\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { formValueSelector, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport { default as EditPolicyRules } from './EditPolicyProfilesRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport {\n  validateBenchmarkPage,\n  validateDetailsPage,\n  validateRulesPage,\n  validateSystemsPage,\n} from './validate';\n\nexport const CreatePolicyForm = ({\n  benchmark,\n  osMajorVersion,\n  complianceThreshold,\n  name,\n  profile,\n  refId,\n  selectedRuleRefIds,\n  systemIds,\n  reset,\n}) => {\n  const history = useHistory();\n  const [stepIdReached, setStepIdReached] = useState(1);\n  const resetAnchor = () => {\n    const { location } = history;\n    if (location.hash) {\n      history.push({ ...location, hash: '' });\n    }\n  };\n\n  const onNext = ({ id }) => {\n    setStepIdReached(stepIdReached < id ? id : stepIdReached);\n    resetAnchor();\n  };\n\n  const onClose = () => {\n    reset();\n    history.push('/scappolicies');\n  };\n\n  const steps = [\n    {\n      id: 1,\n      name: 'Create SCAP policy',\n      component: <CreateSCAPPolicy />,\n      enableNext: validateBenchmarkPage(benchmark, osMajorVersion, profile),\n    },\n    {\n      id: 2,\n      name: 'Details',\n      component: <EditPolicyDetails />,\n      canJumpTo: stepIdReached >= 2,\n      enableNext: validateDetailsPage(name, refId, complianceThreshold),\n    },\n    {\n      id: 3,\n      name: 'Systems',\n      component: <EditPolicySystems />,\n      canJumpTo: stepIdReached >= 3,\n      enableNext: validateSystemsPage(systemIds),\n    },\n    {\n      id: 4,\n      name: 'Rules',\n      component: <EditPolicyRules />,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 4,\n      enableNext: validateRulesPage(selectedRuleRefIds),\n    },\n    {\n      id: 5,\n      name: 'Review',\n      component: <ReviewCreatedPolicy />,\n      nextButtonText: 'Finish',\n      canJumpTo:\n        validateRulesPage(selectedRuleRefIds) &&\n        systemIds?.length > 0 &&\n        stepIdReached >= 5,\n    },\n    {\n      id: 6,\n      name: 'Finished',\n      component: <FinishedCreatePolicy onWizardFinish={onClose} />,\n      isFinishedStep: true,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 6,\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <Wizard\n        className=\"compliance\"\n        isOpen\n        onNext={onNext}\n        onGoToStep={resetAnchor}\n        onBack={resetAnchor}\n        onClose={onClose}\n        title=\"Create SCAP policy\"\n        description=\"Create a new policy for managing SCAP compliance\"\n        steps={steps}\n      />\n    </React.Fragment>\n  );\n};\n\nCreatePolicyForm.propTypes = {\n  benchmark: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  complianceThreshold: propTypes.string,\n  businessObjective: propTypes.object,\n  dispatch: propTypes.func,\n  isOpen: propTypes.bool,\n  name: propTypes.string,\n  onWizardFinish: propTypes.func,\n  profile: propTypes.string,\n  refId: propTypes.string,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string),\n  systemIds: propTypes.arrayOf(propTypes.string),\n  reset: propTypes.func,\n};\n\nCreatePolicyForm.defaultProps = {\n  isOpen: false,\n};\n\nconst CreatePolicy = reduxForm({\n  form: 'policyForm',\n})(CreatePolicyForm);\n\nconst selector = formValueSelector('policyForm');\nexport default connect((state) => ({\n  benchmark: selector(state, 'benchmark'),\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  businessObjective: selector(state, 'businessObjective'),\n  complianceThreshold: selector(state, 'complianceThreshold') || '100.0',\n  name: selector(state, 'name'),\n  profile: selector(state, 'profile'),\n  refId: selector(state, 'refId'),\n  selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  systemIds: selector(state, 'systems'),\n}))(CreatePolicy);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { FormGroup, TextArea, TextInput } from '@patternfly/react-core';\nimport {\n  PolicyThresholdTooltip,\n  PolicyBusinessObjectiveTooltip,\n} from 'PresentationalComponents';\nimport { thresholdValid } from '../CreatePolicy/validate';\n\nexport const useThresholdValidate = () => {\n  const [validThreshold, setValidThreshold] = useState(true);\n  return [\n    validThreshold,\n    (threshold) => {\n      const valid = thresholdValid(threshold);\n      setValidThreshold(valid);\n      return valid;\n    },\n  ];\n};\n\nconst EditPolicyDetailsTab = ({ policy, setUpdatedPolicy }) => {\n  const [validThreshold, validateThreshold] = useThresholdValidate();\n\n  return (\n    <div className=\"pf-c-form\">\n      <FormGroup label=\"Policy description\" isRequired fieldId=\"description\">\n        <TextArea\n          style={{ width: 800, height: 110 }}\n          isRequired\n          type=\"text\"\n          id=\"description\"\n          name=\"description\"\n          aria-describedby=\"description\"\n          defaultValue={policy.description}\n          onChange={(value) => {\n            setUpdatedPolicy((policy) => ({\n              ...policy,\n              description: value,\n            }));\n          }}\n        />\n      </FormGroup>\n\n      <FormGroup\n        label=\"Business objective\"\n        labelIcon={<PolicyBusinessObjectiveTooltip />}\n        fieldId=\"business-objective\"\n      >\n        <TextInput\n          type=\"text\"\n          style={{ width: 300 }}\n          id=\"business-objective\"\n          name=\"business-objective\"\n          aria-describedby=\"business-objective\"\n          defaultValue={policy?.businessObjective?.title}\n          onChange={(value) => {\n            setUpdatedPolicy((policy) => ({\n              ...policy,\n              businessObjective: {\n                ...policy.businessObjective,\n                title: value,\n              },\n            }));\n          }}\n        />\n      </FormGroup>\n\n      <FormGroup\n        validated={validThreshold ? 'default' : 'error'}\n        label=\"Compliance threshold (%)\"\n        labelIcon={<PolicyThresholdTooltip />}\n        fieldId=\"policy-threshold\"\n        helperTextInvalid=\"Threshold has to be a number between 0 and 100\"\n        helperText=\"A value of 95% or higher is recommended\"\n      >\n        <TextInput\n          type=\"number\"\n          style={{ width: 150 }}\n          name=\"compliance-threshold\"\n          id=\"compliance-threshold\"\n          defaultValue={policy.complianceThreshold}\n          aria-describedby=\"policy-threshold\"\n          onChange={(value) => {\n            setUpdatedPolicy((policy) => ({\n              ...policy,\n              complianceThreshold: value,\n              complianceThresholdValid: validateThreshold(value),\n            }));\n          }}\n        />\n      </FormGroup>\n    </div>\n  );\n};\n\nEditPolicyDetailsTab.propTypes = {\n  policy: propTypes.shape({\n    description: propTypes.string,\n    businessObjective: propTypes.object,\n    complianceThreshold: propTypes.oneOfType([\n      propTypes.string,\n      propTypes.number,\n    ]),\n  }),\n  setUpdatedPolicy: propTypes.func,\n};\n\nexport default EditPolicyDetailsTab;\n","import React, { useLayoutEffect } from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  Text,\n  TextContent,\n  Title,\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport { sortingByProp } from 'Utilities/helpers';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\n\nconst PROFILES_QUERY = gql`\n  query Profiles($filter: String!) {\n    profiles(search: $filter) {\n      edges {\n        node {\n          id\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          policy {\n            id\n          }\n          policyType\n          benchmark {\n            id\n            refId\n            latestSupportedOsMinorVersions\n            osMajorVersion\n          }\n          ssgVersion\n          rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst BENCHMARKS_QUERY = gql`\n  query Benchmarks($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        profiles {\n          id\n          refId\n          ssgVersion\n        }\n      }\n    }\n  }\n`;\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst EditPolicyRulesTabEmptyState = () => (\n  <EmptyState>\n    <Title headingLevel=\"h5\" size=\"lg\">\n      No rules can be configured\n    </Title>\n    <EmptyStateBody>\n      This policy has no associated systems, and therefore no rules can be\n      configured.\n    </EmptyStateBody>\n    <EmptyStateBody>\n      Add at least one system to configure rules for this policy.\n    </EmptyStateBody>\n  </EmptyState>\n);\n\nexport const toTabsData = (policy, osMinorVersionCounts, benchmarks) =>\n  Object.values(osMinorVersionCounts)\n    .sort(sortingByProp('osMinorVersion', 'desc'))\n    .map(({ osMinorVersion, count: systemCount }) => {\n      osMinorVersion = `${osMinorVersion}`;\n      let profile = policy.policy.profiles.find(\n        (profile) => profile.osMinorVersion === osMinorVersion\n      );\n      let osMajorVersion = policy.osMajorVersion;\n\n      if (!profile && benchmarks) {\n        const benchmark = getBenchmarkBySupportedOsMinor(\n          benchmarks,\n          osMinorVersion\n        );\n        if (benchmark) {\n          const benchmarkProfile = getBenchmarkProfile(benchmark, policy.refId);\n          if (benchmarkProfile) {\n            profile = policy.policy.profiles.find(\n              (profile) =>\n                profile.parentProfileId === benchmarkProfile.id &&\n                profile.osMinorVersion === osMinorVersion\n            );\n\n            profile = {\n              ...benchmarkProfile,\n              benchmark,\n              osMajorVersion,\n              ...profile,\n            };\n          }\n        }\n      }\n\n      return {\n        profile,\n        systemCount,\n        newOsMinorVersion: osMinorVersion,\n      };\n    })\n    .filter(({ profile, newOsMinorVersion }) => !!profile && newOsMinorVersion);\n\nexport const EditPolicyRulesTab = ({\n  policy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  osMinorVersionCounts,\n  setNewRuleTabs,\n}) => {\n  const osMajorVersion = policy?.osMajorVersion;\n  const osMinorVersions = Object.keys(osMinorVersionCounts).sort();\n  const benchmarkSearch =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const {\n    data: benchmarksData,\n    error: benchmarksError,\n    loading: benchmarksLoading,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter: benchmarkSearch,\n    },\n    skip: osMinorVersions.length === 0,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  const tabsData = toTabsData(policy, osMinorVersionCounts, benchmarks);\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n  const filter = Object.keys(profileToOsMinorMap)\n    .map((i) => `id = ${i}`)\n    .join(' OR ');\n  const {\n    data: profilesData,\n    error: profilesError,\n    loading: profilesLoading,\n  } = useQuery(PROFILES_QUERY, {\n    variables: {\n      filter,\n    },\n    skip: filter.length === 0,\n  });\n  const loadingState = profilesLoading || benchmarksLoading ? true : undefined;\n  const dataState =\n    !loadingState && tabsData?.length > 0 ? profilesData : undefined;\n\n  if (!loadingState) {\n    setNewRuleTabs(\n      !!tabsData.find((tab) =>\n        policy.policy.profiles.find(\n          (profile) => profile.osMinorVersion !== tab.newOsMinorVersion\n        )\n      )\n    );\n  }\n\n  useLayoutEffect(() => {\n    if (profilesData) {\n      const profiles = profilesData?.profiles.edges.map((p) => p.node) || [];\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      setSelectedRuleRefIds((prevSelection) =>\n        profilesWithRulesToSelection(profilesWithOs, prevSelection)\n      );\n    }\n  }, [profilesData]);\n  const error = benchmarksError || profilesError;\n\n  return (\n    <StateViewWithError\n      stateValues={{\n        error,\n        data: !error && dataState,\n        loading: loadingState,\n        empty: !loadingState && !dataState && !error,\n      }}\n    >\n      <StateViewPart stateKey=\"loading\">\n        <EmptyTable>\n          <Spinner />\n        </EmptyTable>\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <TextContent>\n          <Text>\n            Different release versions of RHEL are associated with different\n            versions of the SCAP Security Guide (SSG), therefore each release\n            must be customized independently.\n          </Text>\n        </TextContent>\n        <TabbedRules\n          columns={[Columns.Name, Columns.Severity, Columns.Remediaton]}\n          tabsData={tabsData}\n          selectedRuleRefIds={selectedRuleRefIds}\n          setSelectedRuleRefIds={setSelectedRuleRefIds}\n          remediationsEnabled={false}\n          selectedFilter\n          level={1}\n          ouiaId=\"RHELVersions\"\n        />\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">\n        <EditPolicyRulesTabEmptyState />\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nEditPolicyRulesTab.propTypes = {\n  setNewRuleTabs: propTypes.func,\n  policy: propTypes.object,\n  osMinorVersionCounts: propTypes.shape({\n    osMinorVersion: propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    }),\n  }),\n  selectedRuleRefIds: propTypes.array,\n  setSelectedRuleRefIds: propTypes.func,\n};\n\nexport default EditPolicyRulesTab;\n","import React from 'react';\nimport {\n  Alert,\n  AlertActionLink,\n  Text,\n  TextContent,\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { SystemsTable } from 'SmartComponents';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\nimport { useHistory } from 'react-router-dom';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>Connect RHEL {osMajorVersion} systems to Insights.</Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst EditPolicySystemsTab = ({\n  policy: { id: policyId, osMajorVersion },\n  newRuleTabs,\n  onSystemSelect,\n  selectedSystems,\n}) => {\n  const { push, location } = useHistory();\n\n  return (\n    <React.Fragment>\n      <SystemsTable\n        columns={[\n          Columns.Name,\n          Columns.inventoryColumn('tags'),\n          Columns.OperatingSystem,\n        ]}\n        showOsMinorVersionFilter={[osMajorVersion]}\n        prependComponent={<PrependComponent osMajorVersion={osMajorVersion} />}\n        emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n        compact\n        showActions={false}\n        query={GET_SYSTEMS_WITHOUT_FAILED_RULES}\n        defaultFilter={\n          osMajorVersion &&\n          `os_major_version = ${osMajorVersion} or policy_id = ${policyId}`\n        }\n        enableExport={false}\n        remediationsEnabled={false}\n        preselectedSystems={selectedSystems}\n        onSelect={onSystemSelect}\n      />\n      {newRuleTabs && (\n        <Alert\n          variant=\"info\"\n          isInline\n          title=\"You selected a system that has a release version previously not included in this policy.\"\n          actionLinks={\n            <AlertActionLink\n              onClick={() => push({ ...location, hash: '#rules' })}\n            >\n              Open rule editing\n            </AlertActionLink>\n          }\n        >\n          <p>\n            If you have edited any rules for this policy, you will need to do so\n            for this release version as well.\n          </p>\n        </Alert>\n      )}\n    </React.Fragment>\n  );\n};\n\nEditPolicySystemsTab.propTypes = {\n  policy: propTypes.object,\n  newRuleTabs: propTypes.bool,\n  onSystemSelect: propTypes.func,\n  selectedSystems: propTypes.array,\n};\n\nexport default EditPolicySystemsTab;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { Form, Tab, TabTitleText } from '@patternfly/react-core';\nimport { RoutedTabs } from 'PresentationalComponents';\nimport EditPolicyDetailsTab from './EditPolicyDetailsTab';\nimport EditPolicyRulesTab from './EditPolicyRulesTab';\nimport EditPolicySystemsTab from './EditPolicySystemsTab';\nimport { mapCountOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport { profilesWithRulesToSelection } from 'PresentationalComponents/TabbedRules';\n\nconst profilesToOsMinorMap = (profiles, hosts) =>\n  (profiles || []).reduce((acc, profile) => {\n    if (profile.osMinorVersion !== '') {\n      acc[profile.osMinorVersion] ||= {\n        osMinorVersion: profile.osMinorVersion,\n        count: 0,\n      };\n    }\n\n    return acc;\n  }, mapCountOsMinorVersions(hosts || []));\n\nexport const EditPolicyForm = ({\n  policy,\n  setUpdatedPolicy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  selectedSystems,\n  setSelectedSystems,\n}) => {\n  const policyProfiles = policy?.policy?.profiles || [];\n  const [osMinorVersionCounts, setOsMinorVersionCounts] = useState({});\n  const [newRuleTabs, setNewRuleTabs] = useState(false);\n\n  const handleSystemSelect = (selectedSystems) => {\n    setSelectedSystems(selectedSystems);\n\n    setOsMinorVersionCounts(\n      profilesToOsMinorMap(policyProfiles, selectedSystems)\n    );\n  };\n\n  const updateSelectedRuleRefIds = () => {\n    if (policy) {\n      // existing policy profiles and their rule sets\n      const profilesWithOsMinor = policyProfiles.filter(\n        ({ osMinorVersion }) => !!osMinorVersion\n      );\n      setSelectedRuleRefIds(profilesWithRulesToSelection(profilesWithOsMinor));\n    }\n  };\n\n  useEffect(() => {\n    if (policy) {\n      const complianceThresholdValid =\n        policy.complianceThreshold < 101 && policy.complianceThreshold > 0;\n      setUpdatedPolicy({\n        ...policy,\n        complianceThresholdValid,\n      });\n      updateSelectedRuleRefIds();\n      handleSystemSelect(policy.hosts);\n    }\n  }, [policy]);\n\n  return (\n    <Form>\n      <RoutedTabs ouiaId=\"EditPolicy\" defaultTab=\"details\">\n        <Tab\n          eventKey=\"details\"\n          ouiaId=\"Details\"\n          title={<TabTitleText>Details</TabTitleText>}\n        >\n          <EditPolicyDetailsTab\n            policy={policy}\n            setUpdatedPolicy={setUpdatedPolicy}\n          />\n        </Tab>\n\n        <Tab\n          eventKey=\"rules\"\n          ouiaId=\"Rules\"\n          title={<TabTitleText>Rules</TabTitleText>}\n        >\n          <EditPolicyRulesTab\n            policy={policy}\n            setNewRuleTabs={setNewRuleTabs}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            selectedRuleRefIds={selectedRuleRefIds}\n            osMinorVersionCounts={osMinorVersionCounts}\n          />\n        </Tab>\n\n        <Tab\n          eventKey=\"systems\"\n          ouiaId=\"Systems\"\n          title={<TabTitleText>Systems</TabTitleText>}\n        >\n          <EditPolicySystemsTab\n            policy={policy}\n            newRuleTabs={newRuleTabs}\n            selectedSystems={selectedSystems}\n            onSystemSelect={handleSystemSelect}\n          />\n        </Tab>\n      </RoutedTabs>\n    </Form>\n  );\n};\n\nEditPolicyForm.propTypes = {\n  policy: propTypes.object,\n  setUpdatedPolicy: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.object),\n  setSelectedRuleRefIds: propTypes.func,\n  setSelectedSystems: propTypes.func,\n  selectedSystems: propTypes.array,\n};\n\nexport default EditPolicyForm;\n","import { useState } from 'react';\nimport { usePolicy } from 'Mutations';\nimport { useLinkToBackground, useAnchor } from 'Utilities/Router';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nexport const useLinkToPolicy = () => {\n  const anchor = useAnchor();\n  const linkToBackground = useLinkToBackground('/scappolicies');\n  return () => {\n    linkToBackground({ hash: anchor });\n  };\n};\n\nexport const useOnSave = (policy, updatedPolicyHostsAndRules) => {\n  const updatePolicy = usePolicy();\n  const linkToPolicy = useLinkToPolicy();\n  const [isSaving, setIsSaving] = useState(false);\n  const onSave = () => {\n    if (isSaving) {\n      return Promise.resolve({});\n    }\n\n    setIsSaving(true);\n    updatePolicy(policy, updatedPolicyHostsAndRules)\n      .then(() => {\n        setIsSaving(false);\n        dispatchNotification({\n          variant: 'success',\n          title: 'Policy updated',\n          autoDismiss: true,\n        });\n        linkToPolicy();\n      })\n      .catch((error) => {\n        setIsSaving(false);\n        dispatchNotification({\n          variant: 'danger',\n          title: 'Error updating policy',\n          description: error.message,\n        });\n        linkToPolicy();\n      });\n  };\n\n  return [isSaving, onSave];\n};\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Button, Spinner } from '@patternfly/react-core';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport {\n  ComplianceModal,\n  StateViewWithError,\n  StateViewPart,\n} from 'PresentationalComponents';\nimport EditPolicyForm from './EditPolicyForm';\nimport { useOnSave, useLinkToPolicy } from './hooks';\n\nexport const MULTIVERSION_QUERY = gql`\n  query Profile($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      external\n      description\n      totalHostCount\n      compliantHostCount\n      complianceThreshold\n      majorOsVersion\n      osMajorVersion\n      lastScanned\n      policyType\n      policy {\n        id\n        name\n        refId\n        profiles {\n          id\n          ssgVersion\n          parentProfileId\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          benchmark {\n            id\n            title\n            latestSupportedOsMinorVersions\n            osMajorVersion\n          }\n          rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n        }\n      }\n      businessObjective {\n        id\n        title\n      }\n      hosts {\n        id\n        osMinorVersion\n        osMajorVersion\n      }\n    }\n  }\n`;\n\nexport const EditPolicy = ({ route }) => {\n  const { policy_id: policyId } = useParams();\n  const { data, loading, error } = useQuery(MULTIVERSION_QUERY, {\n    variables: { policyId },\n  });\n  const policy = data?.profile;\n  const linkToPolicy = useLinkToPolicy();\n  const [updatedPolicy, setUpdatedPolicy] = useState(null);\n  const [selectedRuleRefIds, setSelectedRuleRefIds] = useState([]);\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const saveEnabled = updatedPolicy && !updatedPolicy.complianceThresholdValid;\n  const updatedPolicyHostsAndRules = {\n    ...updatedPolicy,\n    selectedRuleRefIds,\n    hosts: selectedSystems,\n  };\n  const [isSaving, onSave] = useOnSave(policy, updatedPolicyHostsAndRules);\n\n  const actions = [\n    <Button\n      isDisabled={saveEnabled}\n      key=\"save\"\n      ouiaId=\"EditPolicySaveButton\"\n      variant=\"primary\"\n      spinnerAriaValueText=\"Saving\"\n      isLoading={isSaving}\n      onClick={onSave}\n    >\n      Save\n    </Button>,\n    <Button\n      key=\"cancel\"\n      ouiaId=\"EditPolicyCancelButton\"\n      variant=\"link\"\n      onClick={() => linkToPolicy()}\n    >\n      Cancel\n    </Button>,\n  ];\n\n  useTitleEntity(route, policy?.name);\n\n  return (\n    <ComplianceModal\n      isOpen\n      position={'top'}\n      style={{ minHeight: '350px' }}\n      variant={'large'}\n      ouiaId=\"EditPolicyModal\"\n      title={`Edit ${policy ? policy.name : ''}`}\n      onClose={() => linkToPolicy()}\n      actions={actions}\n    >\n      <StateViewWithError stateValues={{ policy, loading, error }}>\n        <StateViewPart stateKey=\"loading\">\n          <Spinner />\n        </StateViewPart>\n        <StateViewPart stateKey=\"policy\">\n          <EditPolicyForm\n            {...{\n              policy,\n              updatedPolicy,\n              setUpdatedPolicy,\n              selectedRuleRefIds,\n              setSelectedRuleRefIds,\n              selectedSystems,\n              setSelectedSystems,\n            }}\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </ComplianceModal>\n  );\n};\n\nEditPolicy.propTypes = {\n  route: propTypes.object,\n};\n\nexport default EditPolicy;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Truncate from '@redhat-cloud-services/frontend-components/Truncate';\nimport {\n  UnsupportedSSGVersion,\n  ComplianceScore as complianceScore,\n} from 'PresentationalComponents';\nimport {\n  profilesRulesFailed,\n  complianceScoreData,\n  NEVER,\n} from 'Utilities/ruleHelpers';\n\nconst SystemLink = ({ id, children }) => (\n  <Link to={{ pathname: `/systems/${id}` }}>{children}</Link>\n);\n\nSystemLink.propTypes = {\n  id: propTypes.string,\n  children: propTypes.node,\n};\n\nexport const Name = ({\n  id,\n  name,\n  osMajorVersion,\n  osMinorVersion,\n  showOsInfo = false,\n  showLink = false,\n}) => {\n  const hasOsInfo = (osMajorVersion, osMinorVersion) =>\n    !!osMajorVersion && !!osMinorVersion && showOsInfo;\n\n  return (\n    <TextContent>\n      {showLink ? <SystemLink {...{ id }}>{name}</SystemLink> : name}\n\n      {hasOsInfo(osMajorVersion, osMinorVersion) && (\n        <Text component={TextVariants.small}>\n          RHEL {osMajorVersion}.{osMinorVersion}\n        </Text>\n      )}\n    </TextContent>\n  );\n};\n\nName.propTypes = {\n  id: propTypes.string,\n  name: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersion: propTypes.string,\n  showOsInfo: propTypes.bool,\n  showLink: propTypes.bool,\n};\n\nexport const profilesSsgVersions = (profiles) =>\n  profiles\n    .map((p) => p.ssgVersion)\n    .filter((version) => !!version)\n    .join(', ');\n\nexport const SSGVersion = ({ ssgVersion = 'Not available', supported }) =>\n  supported ? (\n    ssgVersion\n  ) : (\n    <UnsupportedSSGVersion messageVariant=\"singular\">\n      {ssgVersion}\n    </UnsupportedSSGVersion>\n  );\n\nSSGVersion.propTypes = {\n  supported: propTypes.bool,\n  ssgVersion: propTypes.string,\n};\n\nexport const SSGVersions = ({ testResultProfiles = [] }) =>\n  testResultProfiles.length !== 0\n    ? testResultProfiles.map((profile) => (\n        <SSGVersion key={`ssgversion-${profile.id}`} {...profile} />\n      ))\n    : 'Not available';\n\nSSGVersions.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const DetailsLink = ({ id, testResultProfiles = [] }) =>\n  testResultProfiles.length > 0 ? (\n    <SystemLink {...{ id }}>View Report</SystemLink>\n  ) : (\n    ''\n  );\n\nDetailsLink.propTypes = {\n  id: propTypes.string,\n  testResultProfiles: propTypes.array,\n};\n\nexport const Policies = ({ policies }) =>\n  (policies || []).length > 0 && (\n    <Truncate\n      inline\n      text={policies.map((p) => p.name).join(', ')}\n      length={215}\n    />\n  );\n\nPolicies.propTypes = {\n  policies: propTypes.array,\n};\n\nexport const FailedRules = ({ id, testResultProfiles }) => {\n  const rulesFailed = profilesRulesFailed(testResultProfiles).length;\n  return <SystemLink {...{ id }}>{rulesFailed}</SystemLink>;\n};\n\nFailedRules.propTypes = {\n  id: propTypes.string,\n  testResultProfiles: propTypes.array,\n};\n\nexport { complianceScoreData };\nexport const ComplianceScore = ({ testResultProfiles }) =>\n  complianceScore(complianceScoreData(testResultProfiles));\n\nComplianceScore.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const lastScanned = (profiles) => {\n  const dates = profiles.map((profile) => new Date(profile.lastScanned));\n  const last = new Date(\n    Math.max.apply(\n      null,\n      dates.filter((date) => isFinite(date))\n    )\n  );\n  const result = last instanceof Date && isFinite(last) ? last : NEVER;\n\n  return result;\n};\n\nexport const LastScanned = ({ testResultProfiles: profiles }) => {\n  const lastScannedDate = lastScanned(profiles || []);\n\n  return lastScannedDate instanceof Date ? (\n    <DateFormat date={Date.parse(lastScannedDate)} type=\"relative\" />\n  ) : (\n    lastScannedDate\n  );\n};\n\nLastScanned.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const operatingSystemString = ({ osMinorVersion, osMajorVersion }) =>\n  `RHEL ${osMajorVersion}.${osMinorVersion}`;\n\nexport const OperatingSystem = (system) => operatingSystemString(system);\n","import { nowrap } from '@patternfly/react-table';\nimport { complianceScoreString } from 'PresentationalComponents';\nimport { profilesRulesFailed } from 'Utilities/ruleHelpers';\nimport { renderComponent } from 'Utilities/helpers';\n\nimport {\n  Name as NameCell,\n  ComplianceScore as ComplianceScoreCell,\n  DetailsLink as DetailsLinkCell,\n  FailedRules as FailedRulesCell,\n  LastScanned as LastScannedCell,\n  Policies as PoliciesCell,\n  SSGVersions as SsgVersionCell,\n  complianceScoreData,\n  lastScanned,\n  operatingSystemString,\n  OperatingSystem as OperatingSystemCell,\n} from './Cells';\n\nconst disableSorting = { isStatic: true };\n\nexport const compileColumnRenderFunc = ({ cell, ...column }) => ({\n  ...column,\n  renderFunc: renderComponent(cell, column.props),\n});\n\nexport const customColumn = (column, props) =>\n  compileColumnRenderFunc({\n    ...column,\n    props: {\n      ...column.props,\n      ...props,\n    },\n  });\n\nexport const Name = compileColumnRenderFunc({\n  key: 'name',\n  title: 'Name',\n  props: {\n    width: 40,\n    ...disableSorting,\n  },\n  renderExport: (system) => `${system.name} (${operatingSystemString(system)})`,\n  cell: NameCell,\n});\n\nexport const customName = (props) => ({\n  ...Name,\n  props: {\n    ...Name.props,\n    ...props,\n  },\n  renderFunc: renderComponent(NameCell, props),\n});\n\nexport const SsgVersion = {\n  title: 'SSG version',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  props: disableSorting,\n  renderExport: (testResultProfiles) =>\n    testResultProfiles\n      .map(\n        ({ supported, ssgVersion }) => `${!supported ? '!' : ''}${ssgVersion}`\n      )\n      .join(', '),\n  renderFunc: renderComponent(SsgVersionCell),\n};\n\nexport const Policies = {\n  title: 'Policies',\n  transforms: [nowrap],\n  exportKey: 'policies',\n  renderExport: (policies) => policies.map(({ name }) => name).join(', '),\n  props: {\n    width: 40,\n    ...disableSorting,\n  },\n  renderFunc: renderComponent(PoliciesCell),\n};\n\nexport const DetailsLink = {\n  title: '',\n  export: false,\n  props: {\n    width: 20,\n    ...disableSorting,\n  },\n  renderFunc: renderComponent(DetailsLinkCell),\n};\n\nexport const FailedRules = {\n  title: 'Failed rules',\n  exportKey: 'testResultProfiles',\n  transforms: [nowrap],\n  props: {\n    width: 5,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) =>\n    profilesRulesFailed(testResultProfiles).length,\n  renderFunc: renderComponent(FailedRulesCell),\n};\n\nexport const ComplianceScore = {\n  title: 'Compliance score',\n  exportKey: 'testResultProfiles',\n  transforms: [nowrap],\n  props: {\n    width: 5,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) =>\n    complianceScoreString(complianceScoreData(testResultProfiles)).trim(),\n  renderFunc: renderComponent(ComplianceScoreCell),\n};\n\nexport const LastScanned = {\n  title: 'Last scanned',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  props: {\n    width: 10,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) => lastScanned(testResultProfiles),\n  renderFunc: renderComponent(LastScannedCell),\n};\n\nexport const OperatingSystem = compileColumnRenderFunc({\n  title: 'Operating system',\n  key: 'operatingSystem',\n  transforms: [nowrap],\n  props: disableSorting,\n  renderExport: (cell) => operatingSystemString(cell),\n  cell: OperatingSystemCell,\n});\n\nexport const inventoryColumn = (column, props) => ({\n  key: column,\n  props,\n});\n","import gql from 'graphql-tag';\nimport pickBy from 'lodash/pickBy';\nimport {\n  systemsPolicyFilterConfiguration,\n  systemsOsFilterConfiguration,\n  systemsOsMinorFilterConfiguration,\n} from '@/constants';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { entitiesReducer } from 'Store/Reducers/SystemStore';\n\nexport const GET_SYSTEMS = gql`\n  query getSystems(\n    $filter: String!\n    $policyId: ID\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n          osMinorVersion\n          culledTimestamp\n          staleWarningTimestamp\n          staleTimestamp\n          insightsId\n          lastScanned\n          testResultProfiles(policyId: $policyId) {\n            id\n            name\n            refId\n            lastScanned\n            compliant\n            external\n            score\n            supported\n            ssgVersion\n            majorOsVersion\n            rules {\n              refId\n              title\n              compliant\n              remediationAvailable\n            }\n          }\n          policies(policyId: $policyId) {\n            id\n            name\n          }\n          tags {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_SYSTEMS_WITHOUT_FAILED_RULES = gql`\n  query getSystems(\n    $filter: String!\n    $policyId: ID\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n          osMinorVersion\n          culledTimestamp\n          staleWarningTimestamp\n          staleTimestamp\n          insightsId\n          lastScanned\n          testResultProfiles(policyId: $policyId) {\n            id\n            name\n            lastScanned\n            external\n            compliant\n            score\n            supported\n            ssgVersion\n            policy {\n              id\n            }\n          }\n          policies(policyId: $policyId) {\n            id\n            name\n          }\n          tags {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_MINIMAL_SYSTEMS = gql`\n  query getSystems(\n    $filter: String!\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n          osMinorVersion\n          culledTimestamp\n          staleWarningTimestamp\n          staleTimestamp\n          insightsId\n          lastScanned\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_SYSTEMS_TAGS = gql`\n  query getSystems($filter: String!, $limit: Int) {\n    systems(search: $filter, limit: $limit) {\n      tags {\n        namespace\n        key\n        value\n      }\n    }\n  }\n`;\n\nexport const GET_SYSTEMS_OSES = gql`\n  query getSystems($filter: String!) {\n    systems(search: $filter) {\n      osVersions {\n        name\n        major\n        minor\n      }\n    }\n  }\n`;\n\nexport const policyFilter = (policies, osFilter) => [\n  ...systemsPolicyFilterConfiguration(policies),\n  ...(osFilter ? systemsOsFilterConfiguration(policies) : []),\n];\n\nexport const osMinorVersionFilter = (...args) =>\n  systemsOsMinorFilterConfiguration(...args);\n\nexport const initFilterState = (filterConfig) =>\n  pickBy(filterConfig.initialDefaultState(), (value) => !!value);\n\nexport const defaultOnLoad =\n  (columns) =>\n  ({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n    getRegistry().register({\n      ...mergeWithEntities(entitiesReducer(INVENTORY_ACTION_TYPES, columns)),\n    });\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Skeleton, {\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { registryDecorator } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport {\n  InventoryDetail,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\n\n@registryDecorator()\nclass InventoryDetails extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <DetailWrapper\n        onLoad={({ mergeWithDetail }) =>\n          this.getRegistry().register({\n            ...mergeWithDetail(),\n          })\n        }\n      >\n        <InventoryDetail\n          fallback={<Skeleton size={SkeletonSize.md} />}\n          hideBack\n        />\n      </DetailWrapper>\n    );\n  }\n}\n\nInventoryDetails.propTypes = {\n  entity: propTypes.object,\n};\n\nconst ConnectedInventoryDetails = (props) => {\n  return <InventoryDetails {...props} />;\n};\n\nexport default ConnectedInventoryDetails;\n","import { useEffect, useLayoutEffect, useState } from 'react';\nimport { useApolloClient, useQuery } from '@apollo/client';\nimport { useDispatch } from 'react-redux';\nimport debounce from '@redhat-cloud-services/frontend-components-utilities/debounce';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport {\n  osMinorVersionFilter,\n  GET_MINIMAL_SYSTEMS,\n  GET_SYSTEMS_TAGS,\n  GET_SYSTEMS_OSES,\n} from './constants';\nimport useExport from 'Utilities/hooks/useTableTools/useExport';\nimport { useBulkSelect } from 'Utilities/hooks/useTableTools/useBulkSelect';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nconst groupByMajorVersion = (versions = [], showFilter = []) => {\n  const showVersion = (version) => {\n    if (showFilter.length > 0) {\n      return showFilter.map(String).includes(String(version));\n    } else {\n      return true;\n    }\n  };\n\n  return versions.reduce((acc, currentValue) => {\n    if (showVersion(currentValue.major)) {\n      acc[String(currentValue.major)] = [\n        ...new Set([...(acc[currentValue.major] || []), currentValue.minor]),\n      ];\n    }\n\n    return acc;\n  }, []);\n};\n\nexport const useOsMinorVersionFilter = (showFilter, fetchArguments = {}) => {\n  let { data } = useQuery(GET_SYSTEMS_OSES, {\n    skip: !showFilter,\n    ...fetchArguments,\n  });\n  const { osVersions } = data?.systems || {};\n\n  return showFilter\n    ? osMinorVersionFilter(groupByMajorVersion(osVersions, showFilter))\n    : [];\n};\n\nexport const useSystemsFilter = (\n  filterString,\n  showOnlySystemsWithTestResults,\n  defaultFilter\n) => {\n  const combindedFilter = [\n    ...(showOnlySystemsWithTestResults ? ['has_test_results = true'] : []),\n    ...(filterString?.length > 0 ? [filterString] : []),\n  ].join(' and ');\n  const filter = defaultFilter\n    ? `(${defaultFilter})` +\n      (combindedFilter ? ` and (${combindedFilter})` : '')\n    : combindedFilter;\n\n  return filter;\n};\n\nconst renameInventoryAttributes = ({\n  culledTimestamp,\n  staleWarningTimestamp,\n  staleTimestamp,\n  insightsId,\n  lastScanned,\n  ...system\n}) => ({\n  ...system,\n  updated: lastScanned,\n  culled_timestamp: culledTimestamp,\n  stale_warning_timestamp: staleWarningTimestamp,\n  stale_timestamp: staleTimestamp,\n  insights_id: insightsId,\n});\n\nexport const useFetchSystems = ({\n  query,\n  onComplete,\n  variables = {},\n  onError,\n}) => {\n  const client = useApolloClient();\n\n  return (perPage, page, requestVariables = {}) =>\n    client\n      .query({\n        query,\n        fetchResults: true,\n        fetchPolicy: 'no-cache',\n        variables: {\n          perPage,\n          page,\n          ...variables,\n          ...requestVariables,\n        },\n      })\n      .then(({ data }) => {\n        const systems = data?.systems?.edges?.map((e) => e.node) || [];\n        const entities = systemsWithRuleObjectsFailed(systems).map(\n          renameInventoryAttributes\n        );\n        const result = {\n          entities,\n          meta: {\n            ...(requestVariables.tags && { tags: requestVariables.tags }),\n            totalCount: data?.systems?.totalCount || 0,\n          },\n        };\n\n        onComplete && onComplete(result);\n        return result;\n      })\n      .catch((error) => {\n        if (onError) {\n          onError(error);\n          return { entities: [], meta: { totalCount: 0 } };\n        } else {\n          throw error;\n        }\n      });\n};\n\nconst fetchBatched = (fetchFunction, total, filter, batchSize = 100) => {\n  const pages = Math.ceil(total / batchSize) || 1;\n  return Promise.all(\n    [...new Array(pages)].map((_, pageIdx) =>\n      fetchFunction(batchSize, pageIdx + 1, filter)\n    )\n  );\n};\n\nconst buildApiFilters = (filters = {}) => {\n  const { tagFilters, ...otherFilters } = filters;\n  const tagsApiFilter = tagFilters\n    ? {\n        tags: tagFilters.flatMap((tagFilter) =>\n          tagFilter.values.map(\n            (tag) =>\n              `${encodeURIComponent(tagFilter.key)}/${encodeURIComponent(\n                tag.tagKey\n              )}=${encodeURIComponent(tag.value)}`\n          )\n        ),\n      }\n    : {};\n\n  return {\n    ...otherFilters,\n    ...tagsApiFilter,\n  };\n};\n\nexport const useGetEntities = (fetchEntities, { selected, columns } = {}) => {\n  const appendDirection = (attributes, direction) =>\n    attributes.map((attribute) => `${attribute}:${direction}`);\n\n  const findColumnByKey = (key) =>\n    (columns || []).find((column) => column.key === key);\n\n  return async (\n    _ids,\n    { page = 1, per_page: perPage, orderBy, orderDirection, filters }\n  ) => {\n    const sortableColumn = findColumnByKey(orderBy);\n    const sortBy =\n      sortableColumn && sortableColumn.sortBy\n        ? appendDirection(sortableColumn.sortBy, orderDirection)\n        : undefined;\n    const filterForApi = buildApiFilters(filters);\n\n    const fetchedEntities = await fetchEntities(perPage, page, {\n      ...filterForApi,\n      sortBy,\n    });\n    const {\n      entities,\n      meta: { totalCount },\n    } = fetchedEntities || {};\n\n    return {\n      results: entities.map((entity) => ({\n        ...entity,\n        selected: (selected || []).map((id) => id).includes(entity.id),\n      })),\n      orderBy,\n      orderDirection,\n      total: totalCount,\n    };\n  };\n};\n\n// This hook is primarily meant to work around issues in the inventory\nexport const useInventoryUtilities = (\n  inventory,\n  selectedSystems,\n  activeFilters\n) => {\n  const dispatch = useDispatch();\n\n  // Resets the Inventory to a loading state\n  // and prevents previously shown columns and rows to appear\n  useLayoutEffect(() => {\n    dispatch({\n      type: 'INVENTORY_INIT',\n    });\n  }, []);\n\n  // Ensures rows are marked as selected\n  useEffect(() => {\n    dispatch({\n      type: 'SELECT_ENTITIES',\n      payload: {\n        selected: selectedSystems,\n      },\n    });\n  }, [selectedSystems]);\n\n  // Filters do not yet trigger the inventory to call getEntities\n  // and the page would not reset to page 1\n  const resetPage = () => {\n    Promise.resolve(\n      dispatch({\n        type: 'RESET_PAGE',\n      })\n    ).then(() => inventory?.current?.onRefreshData());\n  };\n\n  // The debounce is to not have filter updates collide or get out of order.\n  const debounceResetPage = debounce(resetPage, 50);\n\n  useEffect(() => {\n    debounceResetPage();\n  }, [activeFilters]);\n};\n\nconst toIdFilter = (ids) =>\n  ids?.length > 0 ? `id ^ (${ids.join(',')})` : undefined;\n\nexport const useSystemsExport = ({\n  columns,\n  selected,\n  total,\n  fetchArguments,\n}) => {\n  const selectionFilter = selected ? toIdFilter(selected) : undefined;\n  const fetchSystems = useFetchSystems({\n    query: fetchArguments.query,\n    variables: {\n      ...fetchArguments.variables,\n      ...(fetchArguments.tags && { tags: fetchArguments.tags }),\n      filter: selectionFilter\n        ? `${fetchArguments.variables.filter} and (${selectionFilter})`\n        : fetchArguments.variables.filter,\n    },\n    onError: () => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Couldn’t download export',\n        description: 'Reinitiate this export to try again.',\n      });\n    },\n  });\n\n  const selectedFilter = () =>\n    selected?.length > 0 ? toIdFilter(selected) : undefined;\n\n  const exporter = async () => {\n    const fetchedItems = await fetchBatched(\n      fetchSystems,\n      total,\n      selectedFilter()\n    );\n\n    return fetchedItems.flatMap((result) => result.entities);\n  };\n\n  const {\n    toolbarProps: { exportConfig },\n  } = useExport({\n    exporter,\n    columns,\n    isDisabled: total === 0,\n    onStart: () => {\n      dispatchNotification({\n        variant: 'info',\n        title: 'Preparing export',\n        description: 'Once complete, your download will start automatically.',\n      });\n    },\n    onComplete: () => {\n      dispatchNotification({\n        variant: 'success',\n        title: 'Downloading export',\n      });\n    },\n  });\n\n  return exportConfig;\n};\n\nexport const useSystemBulkSelect = ({\n  total,\n  onSelect,\n  preselected,\n  fetchArguments,\n  currentPageIds,\n  systemsCache = [],\n}) => {\n  // This is meant as a compatibility layer and to be removed\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const fetchSystems = useFetchSystems({\n    ...fetchArguments,\n    query: GET_MINIMAL_SYSTEMS,\n    onError: (error) => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error selecting systems',\n        description: error.message,\n      });\n    },\n  });\n\n  const fetchFunc = async (fetchIds) => {\n    if (fetchIds.length === 0) {\n      return [];\n    }\n\n    const idFilter = toIdFilter(fetchIds);\n    const results = await fetchBatched(fetchSystems, fetchIds.length, {\n      ...(idFilter && { filter: idFilter }),\n    });\n\n    return results.flatMap((result) => result.entities);\n  };\n\n  const cachedOrFetch = async (selectedIds) => {\n    const cachedSystems = systemsCache.filter(({ id }) =>\n      selectedIds.includes(id)\n    );\n    const cachedIds = cachedSystems.map(({ id }) => id);\n    const fetchIds = selectedIds.filter((id) => !cachedIds.includes(id));\n    const fetchedSystems = await fetchFunc(fetchIds);\n\n    return [...cachedSystems, ...fetchedSystems];\n  };\n\n  const onSelectCallback = async (selectedIds) => {\n    const systems = await cachedOrFetch(selectedIds);\n    setSelectedSystems(systems);\n    onSelect && onSelect(systems);\n  };\n\n  const itemIdsInTable = async () => {\n    const results = await fetchBatched(fetchSystems, total);\n    return results.flatMap((result) => result.entities.map(({ id }) => id));\n  };\n\n  const bulkSelect = useBulkSelect({\n    total,\n    onSelect: onSelectCallback,\n    preselected,\n    itemIdsInTable,\n    itemIdsOnPage: () => currentPageIds,\n  });\n  return {\n    selectedSystems,\n    ...bulkSelect,\n  };\n};\n\nconst searchTagsByKey = (search, tags) =>\n  tags.filter((tagItem) => {\n    if (search || search === '') {\n      return tagItem?.key.indexOf(search) !== -1;\n    } else {\n      return true;\n    }\n  });\n\nconst useFetchTag = () => {\n  const apiClient = useApolloClient();\n\n  return async (page, per_page, search, fetchArguments) => {\n    const fetchedTags = await apiClient\n      .query({\n        query: GET_SYSTEMS_TAGS,\n        ...fetchArguments,\n      })\n      .then(\n        ({\n          data: {\n            systems: { tags },\n          },\n        }) =>\n          searchTagsByKey(search, tags).map((tag) => ({\n            tag,\n          }))\n      );\n\n    const start = per_page * page - per_page;\n    const end = start + per_page;\n\n    return {\n      total: fetchedTags.length,\n      results: fetchedTags.slice(start, end),\n    };\n  };\n};\n\nexport const useTags = (fetchArguments) => {\n  const [currentTags, setCurrentTags] = useState();\n  const fetchTags = useFetchTag();\n\n  const getTags = async (search, config) => {\n    const { page, perPage: per_page } = config.pagination || {\n      perPage: 10,\n      page: 1,\n    };\n    const { total, results: tagsList } = await fetchTags(\n      page,\n      per_page,\n      search,\n      fetchArguments\n    );\n\n    return {\n      page,\n      per_page,\n      total,\n      results: tagsList,\n    };\n  };\n\n  return {\n    props: {\n      hideFilters: {\n        name: true,\n        tags: false,\n        registeredWith: true,\n        stale: true,\n      },\n      showTags: true,\n    },\n    currentTags,\n    setCurrentTags,\n    getTags,\n  };\n};\n","import React, { useMemo, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Spinner } from '@patternfly/react-core';\nimport { TableVariant } from '@patternfly/react-table';\n// eslint-disable-next-line max-len\nimport ComplianceRemediationButton from '@/PresentationalComponents/ComplianceRemediationButton';\nimport {\n  DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n  COMPLIANT_SYSTEMS_FILTER_CONFIGURATION,\n} from '@/constants';\nimport { ErrorPage, StateView, StateViewPart } from 'PresentationalComponents';\nimport useFilterConfig from 'Utilities/hooks/useTableTools/useFilterConfig';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { policyFilter, defaultOnLoad } from './constants';\nimport {\n  useFetchSystems,\n  useGetEntities,\n  useOsMinorVersionFilter,\n  useInventoryUtilities,\n  useSystemsExport,\n  useSystemsFilter,\n  useSystemBulkSelect,\n  useTags,\n} from './hooks';\n\nexport const SystemsTable = ({\n  columns,\n  showAllSystems,\n  policyId,\n  query,\n  showActions,\n  enableExport,\n  compliantFilter,\n  policies,\n  showOnlySystemsWithTestResults,\n  showOsFilter,\n  error,\n  showComplianceSystemsInfo,\n  compact,\n  remediationsEnabled,\n  systemProps,\n  defaultFilter,\n  emptyStateComponent,\n  prependComponent,\n  showOsMinorVersionFilter,\n  preselectedSystems,\n  onSelect: onSelectProp,\n  noSystemsTable,\n}) => {\n  const inventory = useRef(null);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [total, setTotal] = useState(0);\n  const osMinorVersionFilter = useOsMinorVersionFilter(\n    showOsMinorVersionFilter,\n    {\n      variables: {\n        filter: defaultFilter,\n        ...(policyId && { policyId }),\n      },\n    }\n  );\n  const {\n    toolbarProps: conditionalFilter,\n    filterString,\n    activeFilterValues,\n  } = useFilterConfig({\n    filters: {\n      filterConfig: [\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(policies?.length > 0 ? policyFilter(policies, showOsFilter) : []),\n        ...osMinorVersionFilter,\n      ],\n    },\n  });\n  const systemsFilter = useSystemsFilter(\n    filterString(),\n    showOnlySystemsWithTestResults,\n    defaultFilter\n  );\n\n  const {\n    props: tagsProps,\n    currentTags,\n    setCurrentTags,\n    getTags,\n  } = useTags({\n    variables: {\n      filter: systemsFilter,\n      ...(policyId && { policyId }),\n    },\n  });\n\n  const systemFetchArguments = {\n    query,\n    variables: {\n      tags: currentTags,\n      filter: systemsFilter,\n      ...(policyId && { policyId }),\n    },\n  };\n\n  const preselection = useMemo(\n    () => preselectedSystems.map(({ id }) => id),\n    [preselectedSystems]\n  );\n\n  const {\n    selectedIds,\n    selectedSystems,\n    tableProps: bulkSelectTableProps,\n    toolbarProps: bulkSelectToolBarProps,\n  } = useSystemBulkSelect({\n    total,\n    onSelect: onSelectProp,\n    preselected: preselection,\n    fetchArguments: systemFetchArguments,\n    currentPageIds: items.map(({ id }) => id),\n    systemsCache: items,\n  });\n\n  useInventoryUtilities(inventory, selectedIds, activeFilterValues);\n\n  const onComplete = (result) => {\n    setTotal(result.meta.totalCount);\n    setItems(result.entities);\n    setIsLoaded(true);\n    setCurrentTags && setCurrentTags(result.meta.tags);\n\n    if (\n      emptyStateComponent &&\n      result.meta.totalCount === 0 &&\n      activeFilterValues.length === 0 &&\n      result?.meta?.tags?.length === 0\n    ) {\n      setIsEmpty(true);\n    }\n  };\n\n  const fetchSystems = useFetchSystems({\n    ...systemFetchArguments,\n    onComplete,\n  });\n  const getEntities = useGetEntities(fetchSystems, {\n    selected: selectedIds,\n    columns,\n  });\n  const exportConfig = useSystemsExport({\n    columns,\n    filter: systemsFilter,\n    selected: selectedIds,\n    total,\n    fetchArguments: {\n      tags: currentTags,\n      ...systemFetchArguments,\n    },\n  });\n\n  const mergedColumns = (defaultColumns) =>\n    columns.map((column) => {\n      const isStringCol = typeof column === 'string';\n      const key = isStringCol ? column : column.key;\n      const defaultColumn = defaultColumns.find(\n        (defaultCol) => defaultCol.key === key\n      );\n      return {\n        ...defaultColumn,\n        ...(isStringCol ? { key: column } : column),\n        props: {\n          ...defaultColumn?.props,\n          ...column?.props,\n        },\n      };\n    });\n\n  return (\n    <StateView\n      stateValues={{\n        error,\n        noError: error === undefined && !isEmpty,\n        empty: isEmpty,\n      }}\n    >\n      <StateViewPart stateKey=\"error\">\n        {!!prependComponent && prependComponent}\n        <ErrorPage error={error} />\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">{emptyStateComponent}</StateViewPart>\n      <StateViewPart stateKey=\"noError\">\n        {!!prependComponent && isLoaded && prependComponent}\n        {showComplianceSystemsInfo && (\n          <Alert\n            isInline\n            variant=\"info\"\n            ouiaId=\"SystemsListIsDifferentAlert\"\n            title={\n              'The list of systems in this view is different than those that appear in the Inventory. ' +\n              'Only systems currently associated with or reporting against compliance policies are displayed.'\n            }\n          />\n        )}\n        <InventoryTable\n          {...systemProps}\n          {...tagsProps}\n          disableDefaultColumns\n          columns={mergedColumns}\n          noSystemsTable={noSystemsTable}\n          ref={inventory}\n          getEntities={getEntities}\n          getTags={getTags}\n          onLoad={defaultOnLoad(columns)}\n          tableProps={{\n            ...bulkSelectTableProps,\n            isStickyHeader: true,\n          }}\n          fallback={<Spinner />}\n          variant={compact ? TableVariant.compact : ''}\n          {...bulkSelectToolBarProps}\n          {...(!showAllSystems && {\n            ...conditionalFilter,\n            ...(remediationsEnabled && {\n              dedicatedAction: (\n                <ComplianceRemediationButton\n                  allSystems={selectedSystems}\n                  selectedRules={[]}\n                />\n              ),\n            }),\n          })}\n          {...(enableExport && { exportConfig })}\n          {...(showActions && {\n            actions: [\n              {\n                title: 'View in inventory',\n                onClick: (_event, _index, { id }) => {\n                  const beta =\n                    window.location.pathname.split('/')[1] === 'beta';\n                  window.location.href = `${window.location.origin}${\n                    beta ? '/beta' : ''\n                  }/insights/inventory/${id}`;\n                },\n              },\n            ],\n          })}\n        />\n      </StateViewPart>\n    </StateView>\n  );\n};\n\nSystemsTable.propTypes = {\n  columns: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.shape({}), PropTypes.string])\n  ),\n  policies: PropTypes.arrayOf(PropTypes.shape({})),\n  showAllSystems: PropTypes.bool,\n  policyId: PropTypes.string,\n  query: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  showActions: PropTypes.bool,\n  enableExport: PropTypes.bool,\n  compliantFilter: PropTypes.bool,\n  showOnlySystemsWithTestResults: PropTypes.bool,\n  showOsFilter: PropTypes.bool,\n  showComplianceSystemsInfo: PropTypes.bool,\n  error: PropTypes.object,\n  compact: PropTypes.bool,\n  remediationsEnabled: PropTypes.bool,\n  defaultFilter: PropTypes.string,\n  systemProps: PropTypes.shape({\n    isFullView: PropTypes.bool,\n  }),\n  emptyStateComponent: PropTypes.node,\n  prependComponent: PropTypes.node,\n  showOsMinorVersionFilter: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  preselectedSystems: PropTypes.array,\n  onSelect: PropTypes.func,\n  noSystemsTable: PropTypes.node,\n};\n\nSystemsTable.defaultProps = {\n  policyId: '',\n  showActions: true,\n  enableExport: true,\n  compliantFilter: false,\n  showOnlySystemsWithTestResults: false,\n  showComplianceSystemsInfo: false,\n  compact: false,\n  remediationsEnabled: true,\n  preselectedSystems: [],\n};\n\nexport default SystemsTable;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { sortingByProp } from 'Utilities/helpers';\n\nconst selectRows = (rows, selected) =>\n  rows.map((row) => ({\n    ...row,\n    selected: selected.includes(row.id),\n  }));\n\nexport const entitiesReducer = () =>\n  applyReducerHash({\n    ['INVENTORY_INIT']: () => ({\n      rows: [],\n      total: 0,\n    }),\n    ['RESET_PAGE']: (state) => ({\n      ...state,\n      page: 1,\n    }),\n    ['SELECT_ENTITIES']: (state, { payload: { selected } }) => ({\n      ...state,\n      rows: selectRows(state.rows, selected),\n    }),\n  });\n\nexport const mapCountOsMinorVersions = (systems) => {\n  if (!systems) {\n    return {};\n  }\n\n  return systems.reduce((acc, { osMinorVersion }) => {\n    if (osMinorVersion !== undefined && osMinorVersion !== null) {\n      (acc[osMinorVersion] = acc[osMinorVersion] || {\n        osMinorVersion,\n        count: 0,\n      }).count++;\n    }\n\n    return acc;\n  }, {});\n};\n\nexport const countOsMinorVersions = (systems) =>\n  Object.values(mapCountOsMinorVersions(systems)).sort(\n    sortingByProp('osMinorVersion', 'desc')\n  );\n"],"names":["QUERY","gql","ComplianceSystems","useQuery","data","error","loading","policies","profiles","edges","map","node","className","title","stateValues","stateKey","columns","Columns","showLink","showOsInfo","isStatic","query","GET_SYSTEMS","defaultFilter","systemProps","isFullView","showOsMinorVersionFilter","policy","majorOsVersion","showComplianceSystemsInfo","enableEditPolicy","remediationsEnabled","BENCHMARKS_AND_PROFILES","PolicyTooltip","Tooltip","position","content","CreateSCAPPolicy","change","selectedBenchmarkId","selectedProfile","fetchPolicy","Spinner","selectedBenchmark","validProfiles","benchmark","benchmarks","latestBenchmarks","find","id","userProfileRefIds","filter","profile","refId","disabled","includes","TextContent","Text","component","TextVariants","Form","FormGroup","label","isRequired","fieldId","sort","a","b","localeCompare","osMajorVersion","Tile","key","onClick","setBenchmark","isSelected","isStacked","labelIcon","onChange","value","undefined","propTypes","reduxFormPropTypes","selector","formValueSelector","compose","connect","state","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","PROFILES_QUERY","BENCHMARKS_QUERY","EditPolicyProfilesRules","selectedRuleRefIds","osMinorVersionCounts","osMinorVersions","i","osMinorVersion","benchmarkSearch","join","variables","skip","length","benchmarksData","benchmarksError","benchmarksLoading","nodes","tabsData","systemCount","count","latestSupportedOsMinorVersions","getBenchmarkBySupportedOsMinor","profileRefId","benchmarkProfile","getBenchmarkProfile","newOsMinorVersion","profileToOsMinorMap","tabsDataToOsMinorMap","profileIds","Object","keys","skipProfilesQuery","profilesData","profilesError","profilesLoading","dataState","loadingState","noRuleSets","p","setSelectedRuleRefIds","newSelection","useLayoutEffect","profilesWithOs","extendProfilesByOsMinor","profilesWithRulesToSelection","only","JSON","stringify","name","EmptyState","Title","headingLevel","size","EmptyStateBody","EmptyTable","TabbedRules","selectedFilter","level","ouiaId","parse","WizardContextConsumer","goToStepById","Button","PrependComponent","EditPolicySystems","selectedSystems","prependComponent","emptyStateComponent","props","width","sortBy","compact","showActions","GET_SYSTEMS_WITHOUT_FAILED_RULES","enableExport","preselectedSystems","onSelect","newSelectedSystems","countOsMinorVersions","defaultProps","EditPolicyDetails","useEffect","description","Field","ReduxFormTextInput","type","isDisabled","ReduxFormTextArea","defaultValue","businessObjective","previousThreshold","complianceThreshold","initialValues","REVIEW","ReviewCreatedPolicy","benchmarkId","parentProfileName","style","marginTop","TextList","TextListVariants","TextListItem","TextListItemVariants","fontWeight","parseFloat","rulesCount","EmtpyStateWithErrors","errors","Array","isArray","List","ListItem","FinishedCreatePolicy","onWizardFinish","cloneFromProfileId","systems","useState","percent","setPercent","message","setMessage","setErrors","failed","setFailed","updatePolicy","usePolicy","onProgress","progress","hosts","then","dispatchNotification","variant","autoDismiss","Link","to","catch","networkError","result","Bullseye","EmptyStateVariant","EmptyStateIcon","icon","WrenchIcon","EmptyStateSecondaryActions","withApollo","CreatePolicyForm","systemIds","reset","history","useHistory","stepIdReached","setStepIdReached","resetAnchor","location","hash","push","onClose","steps","enableNext","validateBenchmarkPage","canJumpTo","validateDetailsPage","validateSystemsPage","validateRulesPage","nextButtonText","isFinishedStep","Wizard","isOpen","onNext","onGoToStep","onBack","dispatch","CreatePolicy","EditPolicyDetailsTab","setUpdatedPolicy","validThreshold","setValidThreshold","threshold","valid","thresholdValid","useThresholdValidate","validateThreshold","TextArea","height","TextInput","validated","helperTextInvalid","helperText","complianceThresholdValid","EditPolicyRulesTabEmptyState","EditPolicyRulesTab","setNewRuleTabs","values","sortingByProp","parentProfileId","toTabsData","tab","prevSelection","empty","EditPolicySystemsTab","policyId","newRuleTabs","onSystemSelect","Alert","isInline","actionLinks","AlertActionLink","EditPolicyForm","setSelectedSystems","policyProfiles","setOsMinorVersionCounts","handleSystemSelect","reduce","acc","mapCountOsMinorVersions","profilesWithOsMinor","updateSelectedRuleRefIds","defaultTab","Tab","eventKey","TabTitleText","useLinkToPolicy","anchor","useAnchor","linkToBackground","useLinkToBackground","MULTIVERSION_QUERY","EditPolicy","route","useParams","policy_id","linkToPolicy","updatedPolicy","saveEnabled","updatedPolicyHostsAndRules","isSaving","setIsSaving","Promise","resolve","useOnSave","onSave","actions","spinnerAriaValueText","isLoading","useTitleEntity","C","minHeight","SystemLink","children","pathname","Name","hasOsInfo","SSGVersion","ssgVersion","supported","messageVariant","SSGVersions","testResultProfiles","DetailsLink","Policies","Truncate","inline","text","FailedRules","rulesFailed","profilesRulesFailed","ComplianceScore","complianceScore","complianceScoreData","lastScanned","dates","Date","last","Math","max","apply","date","isFinite","NEVER","LastScanned","lastScannedDate","DateFormat","operatingSystemString","disableSorting","compileColumnRenderFunc","cell","column","renderFunc","renderComponent","renderExport","system","NameCell","customName","SsgVersion","transforms","nowrap","exportKey","SsgVersionCell","PoliciesCell","DetailsLinkCell","FailedRulesCell","complianceScoreString","trim","ComplianceScoreCell","LastScannedCell","OperatingSystem","inventoryColumn","GET_MINIMAL_SYSTEMS","GET_SYSTEMS_TAGS","GET_SYSTEMS_OSES","policyFilter","osFilter","systemsPolicyFilterConfiguration","systemsOsFilterConfiguration","osMinorVersionFilter","systemsOsMinorFilterConfiguration","defaultOnLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","getRegistry","register","entitiesReducer","InventoryDetails","registryDecorator","DetailWrapper","onLoad","mergeWithDetail","InventoryDetail","fallback","Skeleton","SkeletonSize","hideBack","React","entity","groupByMajorVersion","versions","showFilter","showVersion","version","String","currentValue","major","Set","minor","renameInventoryAttributes","culledTimestamp","staleWarningTimestamp","staleTimestamp","insightsId","updated","culled_timestamp","stale_warning_timestamp","stale_timestamp","insights_id","useFetchSystems","onComplete","onError","client","useApolloClient","perPage","page","requestVariables","fetchResults","e","entities","systemsWithRuleObjectsFailed","meta","tags","totalCount","fetchBatched","fetchFunction","total","batchSize","pages","ceil","all","_","pageIdx","buildApiFilters","filters","tagFilters","otherFilters","tagsApiFilter","flatMap","tagFilter","tag","encodeURIComponent","tagKey","toIdFilter","ids","searchTagsByKey","search","tagItem","indexOf","SystemsTable","showAllSystems","compliantFilter","showOnlySystemsWithTestResults","showOsFilter","onSelectProp","noSystemsTable","inventory","useRef","isEmpty","setIsEmpty","isLoaded","setIsLoaded","items","setItems","setTotal","fetchArguments","osVersions","useOsMinorVersionFilter","useFilterConfig","filterConfig","DEFAULT_SYSTEMS_FILTER_CONFIGURATION","COMPLIANT_SYSTEMS_FILTER_CONFIGURATION","conditionalFilter","toolbarProps","filterString","activeFilterValues","systemsFilter","combindedFilter","useSystemsFilter","apiClient","currentTags","setCurrentTags","fetchTags","per_page","fetchedTags","end","start","results","slice","getTags","config","pagination","tagsList","hideFilters","registeredWith","stale","showTags","useTags","tagsProps","systemFetchArguments","preselected","currentPageIds","systemsCache","fetchSystems","fetchFunc","fetchIds","idFilter","cachedOrFetch","selectedIds","cachedSystems","cachedIds","fetchedSystems","onSelectCallback","itemIdsInTable","useBulkSelect","itemIdsOnPage","useSystemBulkSelect","useMemo","bulkSelectTableProps","tableProps","bulkSelectToolBarProps","activeFilters","useDispatch","payload","selected","debounceResetPage","debounce","current","onRefreshData","useInventoryUtilities","getEntities","fetchEntities","appendDirection","attributes","direction","attribute","findColumnByKey","_ids","orderBy","orderDirection","sortableColumn","filterForApi","fetchedEntities","useGetEntities","exportConfig","selectionFilter","exporter","fetchedItems","useExport","onStart","useSystemsExport","noError","InventoryTable","disableDefaultColumns","defaultColumns","isStringCol","defaultColumn","defaultCol","ref","isStickyHeader","TableVariant","dedicatedAction","ComplianceRemediationButton","allSystems","selectedRules","_event","_index","beta","window","split","href","origin","PropTypes","selectRows","rows","row","applyReducerHash"],"sourceRoot":""}