{"version":3,"file":"js/45.0e42cb523ac150566138.js","mappings":"yLAKMA,EAAY,SAAHC,GAAA,IAAMC,EAAQD,EAARC,SAAQ,OAC3BC,IAAAA,cAACC,EAAAA,KAAI,CAACC,UAAU,kBACdF,IAAAA,cAACG,EAAAA,SAAQ,KACPH,IAAAA,cAACI,EAAAA,EAAU,CAACC,iBAAkBN,KAE3B,EAGTF,EAAUS,UAAY,CACpBP,SAAUO,IAAAA,QAGZ,S,gNCRMC,EAAM,SAACC,GACX,IAAMC,GAASC,EAAAA,EAAAA,KAMf,OAJAC,EAAAA,EAAAA,YAAU,WACRF,EAAOG,kBACT,GAAG,IAGDZ,IAAAA,cAACa,EAAAA,EAAY,CAACC,QAAQ,cACpBd,IAAAA,cAACe,EAAAA,GAAmB,MACpBf,IAAAA,cAACgB,EAAAA,GAAM,CAACC,WAAYT,IAG1B,EAEAD,EAAID,UAAY,CACdY,SAAUC,IAAAA,OACVC,QAASD,IAAAA,QAGX,U,eClBME,EAAS,IAAIC,EAAAA,GAAa,CAC9BC,KAAM,IAAIC,EAAAA,EAAS,CACjBC,YAAa,UACbC,IAAKC,EAAAA,GAAsB,aAE7BC,MAAO,IAAIC,EAAAA,KAGPC,EAAW,SAAHhC,GAAA,IAAMiC,EAAMjC,EAANiC,OAAM,OACxB/B,IAAAA,cAACgC,EAAAA,GAAQ,CAACC,OAAOC,EAAAA,EAAAA,IAAKH,GAAQI,YAC5BnC,IAAAA,cAACoC,EAAAA,EAAY,CAACC,OAAQC,UAAUC,UAC9BvC,IAAAA,cAACwC,EAAAA,EAAc,CAACnB,OAAQA,GACtBrB,IAAAA,cAACO,EAAG,QAGC,EAGbuB,EAASxB,UAAY,CACnByB,OAAQZ,IAAAA,KAGV,UC7BAsB,IAAAA,OAAgBzC,IAAAA,cAAC8B,EAAQ,MAAKY,SAASC,eAAe,Q","sources":["webpack:///./src/PresentationalComponents/ErrorCard/ErrorCard.js","webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\n\nconst ErrorCard = ({ errorMsg }) => (\n  <Card className=\"ins-error-card\">\n    <CardBody>\n      <ErrorState errorDescription={errorMsg} />\n    </CardBody>\n  </Card>\n);\n\nErrorCard.propTypes = {\n  errorMsg: propTypes.string,\n};\n\nexport default ErrorCard;\n","import PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport Routes from './Routes';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { RBACProvider } from '@redhat-cloud-services/frontend-components/RBACProvider';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nimport './App.scss';\n\nconst App = (props) => {\n  const chrome = useChrome();\n\n  useEffect(() => {\n    chrome.hideGlobalFilter();\n  }, []);\n\n  return (\n    <RBACProvider appName=\"compliance\">\n      <NotificationsPortal />\n      <Routes childProps={props} />\n    </RBACProvider>\n  );\n};\n\nApp.propTypes = {\n  location: PropTypes.object,\n  history: PropTypes.object,\n};\n\nexport default App;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { IntlProvider } from 'react-intl';\nimport { ApolloProvider } from '@apollo/client';\nimport { ApolloClient, HttpLink, InMemoryCache } from 'apollo-boost';\nimport { Provider } from 'react-redux';\nimport { init } from 'Store';\nimport App from './App';\n\nimport { COMPLIANCE_API_ROOT } from '@/constants';\n\nconst client = new ApolloClient({\n  link: new HttpLink({\n    credentials: 'include',\n    uri: COMPLIANCE_API_ROOT + '/graphql',\n  }),\n  cache: new InMemoryCache(),\n});\n\nconst AppEntry = ({ logger }) => (\n  <Provider store={init(logger).getStore()}>\n    <IntlProvider locale={navigator.language}>\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </IntlProvider>\n  </Provider>\n);\n\nAppEntry.propTypes = {\n  logger: PropTypes.any,\n};\n\nexport default AppEntry;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppEntry from './AppEntry';\n\nReactDOM.render(<AppEntry />, document.getElementById('root'));\n"],"names":["ErrorCard","_ref","errorMsg","React","Card","className","CardBody","ErrorState","errorDescription","propTypes","App","props","chrome","useChrome","useEffect","hideGlobalFilter","RBACProvider","appName","NotificationsPortal","Routes","childProps","location","PropTypes","history","client","ApolloClient","link","HttpLink","credentials","uri","COMPLIANCE_API_ROOT","cache","InMemoryCache","AppEntry","logger","Provider","store","init","getStore","IntlProvider","locale","navigator","language","ApolloProvider","ReactDOM","document","getElementById"],"sourceRoot":""}