{"version":3,"file":"js/726.0e42cb523ac150566138.js","mappings":"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","sources":["webpack:///./src/SmartComponents/ComplianceSystems/ComplianceSystems.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeDetailsRow.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeTable.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeTooltip.js","webpack:///./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/constants.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyProfilesRules.js","webpack:///./src/SmartComponents/CreatePolicy/hooks/useBenchmarksQuery.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack:///./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack:///./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack:///./src/SmartComponents/DeletePolicy/DeletePolicy.js","webpack:///./src/SmartComponents/DeleteReport/DeleteReport.js","webpack:///./src/SmartComponents/EditPolicy/constants.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyRulesTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicySystemsTab.js","webpack:///./src/SmartComponents/EditPolicy/components/NewRulesAlert.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyForm.js","webpack:///./src/SmartComponents/EditPolicy/hooks/index.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicy.js","webpack:///./src/SmartComponents/SystemsTable/Cells.js","webpack:///./src/SmartComponents/SystemsTable/Columns.js","webpack:///./src/SmartComponents/InventoryDetails/InventoryDetails.js","webpack:///./src/PresentationalComponents/ComplianceRemediationButton/constants.js","webpack:///./src/PresentationalComponents/ComplianceRemediationButton/RemediationButton.js","webpack:///./src/PresentationalComponents/ComplianceRemediationButton/hooks.js","webpack:///./src/SmartComponents/SystemsTable/constants.js","webpack:///./src/store/Actions/SystemActions.js","webpack:///./src/SmartComponents/SystemsTable/hooks.js","webpack:///./src/SmartComponents/SystemsTable/SystemsTable.js","webpack:///./src/Utilities/hooks/usePolicyQuery/constants.js","webpack:///./src/Utilities/hooks/usePolicyQuery/usePolicyQuery.js","webpack:///./src/Utilities/hooks/usePolicyQuery/helpers.js","webpack:///./src/Utilities/hooks/usePromiseQueue.js","webpack:///./src/store/Reducers/SystemStore.js","webpack:///./src/store/Types.js"],"sourcesContent":["/* eslint-disable react/display-name */\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { nowrap } from '@patternfly/react-table';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport { SystemsTable } from 'SmartComponents';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst QUERY = gql`\n  {\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n        }\n      }\n    }\n  }\n`;\n\nconst DEFAULT_FILTER = 'has_test_results = true or has_policy = true';\n\nexport const ComplianceSystems = () => {\n  const { data, error, loading } = useQuery(QUERY);\n  const policies = data?.profiles?.edges.map(({ node }) => node);\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"page-header\">\n        <PageHeaderTitle title=\"Compliance systems\" />\n      </PageHeader>\n      <section className=\"pf-c-page__main-section\">\n        <StateViewWithError stateValues={{ error, data, loading }}>\n          <StateViewPart stateKey=\"data\">\n            {policies && (\n              <SystemsTable\n                columns={[\n                  Columns.customName({\n                    showLink: true,\n                  }),\n                  Columns.inventoryColumn('groups', {\n                    requiresDefault: true,\n                  }),\n                  Columns.inventoryColumn('tags'),\n                  Columns.OS,\n                  Columns.Policies,\n                  Columns.inventoryColumn('updated', {\n                    props: { isStatic: true },\n                    transforms: [nowrap],\n                  }),\n                ]}\n                defaultFilter={DEFAULT_FILTER}\n                systemProps={{\n                  isFullView: true,\n                }}\n                showOsMinorVersionFilter={policies.map(\n                  (policy) => policy.osMajorVersion\n                )}\n                showComplianceSystemsInfo\n                enableEditPolicy={false}\n                remediationsEnabled={false}\n                policies={policies}\n                showGroupsFilter\n              />\n            )}\n          </StateViewPart>\n        </StateViewWithError>\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default ComplianceSystems;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Text } from '@patternfly/react-core';\n\nconst PolicyTypeDetailsRow = ({ item: { description }, key }) => {\n  return (\n    <Text key={key} style={{ margin: 'var(--pf-global--spacer--lg) 0' }}>\n      {description}\n    </Text>\n  );\n};\n\nPolicyTypeDetailsRow.propTypes = {\n  item: propTypes.object,\n  key: propTypes.string,\n};\n\nexport default PolicyTypeDetailsRow;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { fitContent, info } from '@patternfly/react-table';\nimport { InUseProfileLabel } from 'PresentationalComponents';\nimport { TableToolsTable } from 'Utilities/hooks/useTableTools';\nimport { renderComponent } from 'Utilities/helpers';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport PolicyTypeDetailsRow from './PolicyTypeDetailsRow';\nimport { emptyRows } from 'Utilities/hooks/useTableTools/Components/NoResultsTable';\n\nconst NameCell = ({ name, disabled }) => {\n  return (\n    <>\n      {disabled && <InUseProfileLabel compact />}\n      {name}\n    </>\n  );\n};\n\nNameCell.propTypes = {\n  name: propTypes.string,\n  disabled: propTypes.boolean,\n};\n\nconst PolicyTypeTable = ({ profiles, onChange, selectedProfile }) => {\n  const columns = [\n    {\n      title: 'Policy name',\n      key: 'name',\n      transforms: [\n        info({\n          tooltip:\n            'In use policies have already been used and therefore can not be applied to another SCAP Policy under the selected OS.',\n        }),\n      ],\n      sortByProp: 'name',\n      renderFunc: renderComponent(NameCell),\n    },\n    {\n      title: 'Supported OS versions',\n      transforms: [fitContent],\n      sortByProp: 'supportedOsVersions',\n      renderFunc: (_data, _id, profile) =>\n        profile.supportedOsVersions.join(', '),\n    },\n  ];\n\n  return (\n    <TableToolsTable\n      items={profiles.map((profile) => ({\n        ...profile,\n        rowProps: {\n          selected: profile.id === selectedProfile?.id,\n          disableSelection: profile.disabled,\n        },\n      }))}\n      filters={{\n        filterConfig: [\n          {\n            type: conditionalFilterType.text,\n            label: 'Policy Name',\n            filter: (policyTypes, value) =>\n              policyTypes.filter((policyType) =>\n                policyType?.name.toLowerCase().includes(value.toLowerCase())\n              ),\n          },\n        ],\n      }}\n      columns={columns}\n      options={{\n        detailsComponent: PolicyTypeDetailsRow,\n        onRadioSelect: (_event, _value, _rowIdx, { itemId }) =>\n          onChange && onChange(profiles.find(({ id }) => id === itemId)),\n        sortBy: {\n          index: 2,\n          direction: 'asc',\n          property: 'name',\n        },\n        emptyRows: emptyRows('policy types', columns.length),\n      }}\n      variant=\"compact\"\n    />\n  );\n};\n\nPolicyTypeTable.propTypes = {\n  profiles: propTypes.array,\n  onChange: propTypes.func,\n  selectedProfile: propTypes.string,\n};\n\nexport default PolicyTypeTable;\n","import React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\n\nconst PolicyTypeTooltip = () => (\n  <Tooltip\n    position=\"right\"\n    content=\"Policy types are OpenSCAP policies that are supported by RHEL.\n        For each major version of RHEL, users can create one policy of each type.\"\n  >\n    <OutlinedQuestionCircleIcon className=\"grey-icon\" />\n  </Tooltip>\n);\n\nexport default PolicyTypeTooltip;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  Tile,\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport PolicyTypesTable from './Components/PolicyTypeTable';\nimport PolicyTypeTooltip from './Components/PolicyTypeTooltip';\n\nconst SUPPORTED_PROFILES = gql`\n  query supportedProfilesByOSMajor {\n    osMajorVersions {\n      edges {\n        node {\n          osMajorVersion\n          profiles {\n            id\n            name\n            refId\n            description\n            supportedOsVersions\n            benchmark {\n              id\n              refId\n            }\n          }\n        }\n      }\n    }\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          refId\n          benchmark {\n            refId\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const CreateSCAPPolicy = ({\n  change,\n  selectedProfile,\n  selectedOsMajorVersion,\n}) => {\n  const { data, error, loading } = useQuery(SUPPORTED_PROFILES, {\n    fetchPolicy: 'no-cache',\n  });\n  const isInUse = (profileRefId, benchmarkRedId) =>\n    !!data?.profiles?.edges\n      .map(({ node }) => node)\n      .find(\n        (profile) =>\n          profile.refId === profileRefId &&\n          benchmarkRedId === profile.benchmark.refId\n      );\n  const osMajorVersions = data?.osMajorVersions?.edges.map(({ node }) => node);\n  const selectedOsMajorVersionObject = osMajorVersions?.find(\n    ({ osMajorVersion }) => osMajorVersion === selectedOsMajorVersion\n  );\n  const profilesToSelect = selectedOsMajorVersionObject?.profiles.map(\n    (profile) => ({\n      ...profile,\n      disabled: isInUse(profile.refId, profile.benchmark.refId),\n    })\n  );\n\n  return (\n    <StateViewWithError stateValues={{ error, data, loading }}>\n      <StateViewPart stateKey=\"loading\">\n        <Spinner />\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <TextContent>\n          <Text component={TextVariants.h1} className=\"pf-u-mb-md\">\n            Create SCAP policy\n          </Text>\n          <Text className=\"pf-u-mb-md\">\n            Select the operating system and policy type for this policy.\n          </Text>\n        </TextContent>\n        <Form>\n          <FormGroup label=\"Operating system\" isRequired fieldId=\"benchmark\">\n            {osMajorVersions &&\n              osMajorVersions.map(({ osMajorVersion }) => (\n                <Tile\n                  key={`rhel${osMajorVersion}-select`}\n                  className=\"pf-u-mr-md\"\n                  title={`RHEL ${osMajorVersion}`}\n                  onClick={() => {\n                    change('osMajorVersion', osMajorVersion);\n                  }}\n                  isSelected={selectedOsMajorVersion === osMajorVersion}\n                  isStacked\n                />\n              ))}\n          </FormGroup>\n\n          {selectedOsMajorVersion && (\n            <FormGroup\n              isRequired\n              labelIcon={<PolicyTypeTooltip />}\n              label=\"Policy type\"\n              fieldId=\"policy-type\"\n            >\n              <PolicyTypesTable\n                aria-label=\"PolicyTypeTable\"\n                profiles={profilesToSelect}\n                onChange={(policy) => {\n                  change('profile', policy);\n                  change('benchmark', policy.benchmark.id);\n                  change('selectedRuleRefIds', undefined);\n                  change('systems', []);\n                }}\n                selectedProfile={selectedProfile}\n              />\n            </FormGroup>\n          )}\n        </Form>\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nCreateSCAPPolicy.propTypes = {\n  change: reduxFormPropTypes.change,\n  selectedProfile: propTypes.object,\n  selectedOsMajorVersion: propTypes.string,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    selectedProfile: selector(state, 'profile'),\n    selectedOsMajorVersion: selector(state, 'osMajorVersion'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(CreateSCAPPolicy);\n","import gql from 'graphql-tag';\n\nexport const BENCHMARKS_QUERY = gql`\n  query CP_Benchmarks($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        ruleTree\n        valueDefinitions {\n          defaultValue\n          description\n          id\n          refId\n          title\n          valueType\n        }\n        profiles {\n          id\n          refId\n          osMajorVersion\n        }\n        version\n      }\n    }\n  }\n`;\n\nexport const BENCHMARKS_RULES_TREES_QUERY = gql`\n  query CP_BenchmarksRuleTree($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        ruleTree\n      }\n    }\n  }\n`;\n\nexport const BENCHMARKS_VALUE_DEFINITIONS_QUERY = gql`\n  query CP_BenchmarksValueDefinitions($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        ruleTree\n        valueDefinitions {\n          defaultValue\n          description\n          id\n          refId\n          title\n          valueType\n        }\n        profiles {\n          id\n          refId\n          osMajorVersion\n        }\n        version\n      }\n    }\n  }\n`;\n\nexport const PROFILES_QUERY = gql`\n  query CP_Profiles($filter: String!) {\n    profiles(search: $filter) {\n      edges {\n        node {\n          id\n          refId\n          osMinorVersion\n          benchmark {\n            id\n            latestSupportedOsMinorVersions\n          }\n          rules {\n            refId\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { useMemo, useLayoutEffect } from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  Title,\n  Text,\n  TextContent,\n  TextVariants,\n  EmptyState,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\nimport useBenchmarksQuery from './hooks/useBenchmarksQuery';\nimport { PROFILES_QUERY } from './constants';\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nexport const EditPolicyProfilesRules = ({\n  policy,\n  selectedRuleRefIds,\n  change,\n  osMajorVersion,\n  osMinorVersionCounts,\n  ruleValues,\n}) => {\n  const columns = [Columns.Name, Columns.Severity, Columns.Remediation];\n  const osMinorVersions = osMinorVersionCounts\n    .map((i) => i.osMinorVersion)\n    .sort();\n  const {\n    data: benchmarksData,\n    error: benchmarksError,\n    loading: benchmarksLoading,\n  } = useBenchmarksQuery({\n    osMajorVersion,\n    osMinorVersions,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  const tabsData = useMemo(\n    () =>\n      osMinorVersionCounts\n        .map(({ osMinorVersion, count: systemCount }) => {\n          osMinorVersion = `${osMinorVersion}`;\n          let profile;\n          if (benchmarks) {\n            const benchmark = getBenchmarkBySupportedOsMinor(\n              benchmarks,\n              osMinorVersion\n            );\n            if (benchmark) {\n              profile = getBenchmarkProfile(benchmark, policy.refId);\n              if (profile) {\n                profile = {\n                  ...profile,\n                  benchmark: {\n                    ...profile.benchmark,\n                    ...benchmark,\n                  },\n                };\n              }\n            }\n          }\n\n          return {\n            profile,\n            systemCount,\n            newOsMinorVersion: osMinorVersion,\n          };\n        })\n        .filter(({ profile }) => !!profile),\n    [osMinorVersionCounts, benchmarks, policy]\n  );\n\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n  const profileIds = Object.keys(profileToOsMinorMap);\n  const filter = profileIds.map((i) => `id = ${i}`).join(' OR ');\n\n  const {\n    data: profilesData,\n    error: profilesError,\n    loading: profilesLoading,\n  } = useQuery(PROFILES_QUERY, {\n    variables: {\n      filter,\n    },\n    skip: profileIds.length === 0,\n    fetchPolicy: 'no-cache',\n  });\n\n  const error = benchmarksError || profilesError;\n  const dataState = profileIds?.length > 0 ? profilesData : undefined;\n  const loadingState = profilesLoading || benchmarksLoading ? true : undefined;\n  const noRuleSets = !error && !loadingState && profileIds?.length === 0;\n  const profiles = profilesData?.profiles.edges.map((p) => p.node);\n\n  const setSelectedRuleRefIds = (newSelection) => {\n    change('selectedRuleRefIds', newSelection);\n  };\n\n  const setRuleValues = (policyId, valueDefinition, valueValue) => {\n    const newRuleValues = {\n      ...(ruleValues || {}),\n      [policyId]: {\n        ...(ruleValues || {})[policyId],\n        [valueDefinition.refId]: valueValue,\n      },\n    };\n\n    change('ruleValues', newRuleValues);\n  };\n\n  useLayoutEffect(() => {\n    if (!loadingState) {\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      const newSelection = profilesWithRulesToSelection(\n        profilesWithOs,\n        selectedRuleRefIds,\n        { only: true }\n      );\n      setSelectedRuleRefIds(newSelection);\n    }\n  }, [JSON.stringify(profiles), loadingState]);\n\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-pb-md\">\n        <Text component={TextVariants.h1}>Rules</Text>\n        <Text>\n          Customize your <b>{policy.name}</b> SCAP policy by including and\n          excluding rules.\n        </Text>\n        <Text>\n          Each release of RHEL is supported with a unique and specific version\n          of the SCAP Security Guide (SSG). You must customize each version of\n          SSG for each release of RHEL.\n        </Text>\n      </TextContent>\n\n      <StateViewWithError\n        stateValues={{\n          error,\n          data: dataState,\n          loading: loadingState,\n          noRuleSets,\n        }}\n      >\n        <StateViewPart stateKey=\"noRuleSets\">\n          <EmptyState>\n            <Title headingLevel=\"h1\" size=\"xl\">\n              No rules can be configured\n            </Title>\n            <EmptyStateBody>\n              The policy type selected does not exist for the systems and OS\n              versions selected in the previous steps.\n            </EmptyStateBody>\n          </EmptyState>\n        </StateViewPart>\n        <StateViewPart stateKey=\"loading\">\n          <EmptyTable>\n            <Spinner />\n          </EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n          <TabbedRules\n            tabsData={tabsData}\n            selectedRuleRefIds={selectedRuleRefIds}\n            setRuleValues={setRuleValues}\n            ruleValues={ruleValues}\n            columns={columns}\n            remediationsEnabled={false}\n            selectedFilter\n            level={1}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            ouiaId=\"RHELVersions\"\n            resetLink={true}\n            rulesPageLink={true}\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </React.Fragment>\n  );\n};\n\nEditPolicyProfilesRules.propTypes = {\n  policy: propTypes.object,\n  change: reduxFormPropTypes.change,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  selectedRuleRefIds: propTypes.array,\n  ruleValues: propTypes.array,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    policy: selector(state, 'profile'),\n    osMajorVersion: selector(state, 'osMajorVersion'),\n    osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n    selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n    ruleValues: selector(state, 'ruleValues'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyProfilesRules);\n","import { useMemo, useCallback } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { logMultipleErrors } from 'Utilities/helpers';\nimport {\n  BENCHMARKS_QUERY,\n  BENCHMARKS_RULES_TREES_QUERY,\n  BENCHMARKS_VALUE_DEFINITIONS_QUERY,\n} from '../constants';\n\nconst compileData = (benchmarksData, ruleTreesData, valueDefinitionsData) => ({\n  benchmarks: {\n    nodes: benchmarksData?.benchmarks.nodes.map((node) => {\n      const ruleTree = ruleTreesData?.benchmarks.nodes.find(\n        ({ id }) => id === node.id\n      )?.ruleTree;\n      const valueDefinitions = valueDefinitionsData?.benchmarks.nodes.find(\n        ({ id }) => id === node.id\n      )?.valueDefinitions;\n\n      return {\n        ...node,\n        ruleTree,\n        valueDefinitions,\n      };\n    }),\n  },\n});\n\nconst useBenchmarksQuery = ({ osMajorVersion, osMinorVersions }) => {\n  const filter =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const {\n    data: benchmarksData,\n    error: benchmarksError,\n    loading: benchmarksLoading,\n    refetch: refetchProfiles,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter,\n    },\n    skip: osMinorVersions.length === 0,\n    fetchPolicy: 'no-cache',\n  });\n\n  const {\n    data: ruleTreesData,\n    error: ruleTreesError,\n    loading: ruleTreesLoading,\n    refetch: refecthRuleTrees,\n  } = useQuery(BENCHMARKS_RULES_TREES_QUERY, {\n    variables: { filter },\n    skip: osMinorVersions.length === 0,\n    fetchPolicy: 'no-cache',\n  });\n\n  const {\n    data: valueDefinitionsData,\n    error: valueDefinitionsError,\n    loading: valueDefinitionsLoading,\n    refetch: refecthValueDefinitions,\n  } = useQuery(BENCHMARKS_VALUE_DEFINITIONS_QUERY, {\n    variables: { filter },\n    skip: osMinorVersions.length === 0,\n    fetchPolicy: 'no-cache',\n  });\n\n  const data = useMemo(\n    () => compileData(benchmarksData, ruleTreesData, valueDefinitionsData),\n    [benchmarksData, ruleTreesData, valueDefinitionsData]\n  );\n\n  const error = useMemo(\n    () =>\n      logMultipleErrors(benchmarksError, ruleTreesError, valueDefinitionsError),\n    [benchmarksError, ruleTreesError, valueDefinitionsError]\n  );\n\n  const loading =\n    benchmarksLoading || ruleTreesLoading || valueDefinitionsLoading;\n\n  const refetch = useCallback(() => {\n    refetchProfiles();\n    refecthRuleTrees();\n    refecthValueDefinitions();\n  }, [refetchProfiles, refecthRuleTrees, refecthValueDefinitions]);\n\n  return {\n    data,\n    error,\n    loading,\n    refetch,\n  };\n};\n\nexport default useBenchmarksQuery;\n","import React from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  reduxForm,\n  formValueSelector,\n} from 'redux-form';\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  WizardContextConsumer,\n} from '@patternfly/react-core';\nimport { SystemsTable } from 'SmartComponents';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { countOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n        <br />\n        Policies must be created with at least one system.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Choose a different operating system, or connect{' '}\n        <b>RHEL {osMajorVersion}</b> systems to Insights.\n      </Text>\n    </TextContent>\n    <WizardContextConsumer>\n      {({ goToStepById }) => (\n        <Button onClick={() => goToStepById(1)}>\n          Choose a different operating system\n        </Button>\n      )}\n    </WizardContextConsumer>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n        <br />\n        Systems can be added or removed at any time.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nexport const EditPolicySystems = ({\n  policy,\n  change,\n  osMajorVersion,\n  selectedSystems,\n}) => {\n  const onSystemSelect = (newSelectedSystems) => {\n    change('systems', newSelectedSystems);\n    change('osMinorVersionCounts', countOsMinorVersions(newSelectedSystems));\n  };\n  const osMinorVersions = policy.supportedOsVersions.map(\n    (version) => version.split('.')[1]\n  );\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-mb-md\">\n        <Text component={TextVariants.h1}>Systems</Text>\n      </TextContent>\n      <Form>\n        <FormGroup>\n          <SystemsTable\n            showOsMinorVersionFilter={[osMajorVersion]}\n            prependComponent={\n              <PrependComponent osMajorVersion={osMajorVersion} />\n            }\n            emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n            columns={[\n              {\n                ...Columns.Name,\n                props: {\n                  width: 40,\n                },\n                sortBy: ['name'],\n              },\n              Columns.inventoryColumn('groups', {\n                requiresDefault: true,\n              }),\n              Columns.inventoryColumn('tags'),\n              Columns.OperatingSystem,\n            ]}\n            remediationsEnabled={false}\n            compact\n            showActions={false}\n            defaultFilter={\n              osMajorVersion &&\n              `os_major_version = ${osMajorVersion} AND os_minor_version ^ (${osMinorVersions.join(\n                ','\n              )})`\n            }\n            enableExport={false}\n            preselectedSystems={selectedSystems}\n            onSelect={onSystemSelect}\n            showGroupsFilter\n          />\n        </FormGroup>\n      </Form>\n    </React.Fragment>\n  );\n};\n\nEditPolicySystems.propTypes = {\n  osMajorVersion: propTypes.string,\n  policy: propTypes.object,\n  selectedSystems: propTypes.array,\n  change: reduxFormPropTypes.change,\n};\n\nEditPolicySystems.defaultProps = {\n  selectedSystems: [],\n};\n\nconst selector = formValueSelector('policyForm');\nconst mapStateToProps = (state) => ({\n  policy: selector(state, 'profile'),\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  selectedSystems: selector(state, 'systems'),\n});\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicySystems);\n","import React, { useEffect } from 'react';\nimport { compose } from 'redux';\nimport {\n  Field,\n  reduxForm,\n  formValueSelector,\n  propTypes as reduxFormPropTypes,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  ReduxFormTextInput,\n  ReduxFormTextArea,\n} from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport {\n  ProfileThresholdField,\n  PolicyBusinessObjectiveTooltip,\n} from 'PresentationalComponents';\n\nexport const EditPolicyDetails = ({ change, policy, refId }) => {\n  useEffect(() => {\n    if (policy && policy.refId !== refId) {\n      change('name', `${policy.name}`);\n      change('refId', `${policy.refId}`);\n      change('description', `${policy.description}`);\n    }\n  }, [policy]);\n\n  return (\n    <React.Fragment>\n      <TextContent>\n        <Text component={TextVariants.h1}>Details</Text>\n      </TextContent>\n      <br />\n      <Form id=\"editpolicydetails\">\n        <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n          <Field\n            component={ReduxFormTextInput}\n            type=\"text\"\n            isRequired={true}\n            id=\"name\"\n            name=\"name\"\n            aria-describedby=\"name\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            isDisabled\n            id=\"refId\"\n            name=\"refId\"\n            aria-describedby=\"refId\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Description\" fieldId=\"description\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextArea}\n            id=\"description\"\n            name=\"description\"\n            aria-describedby=\"description\"\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Business objective\"\n          labelIcon={<PolicyBusinessObjectiveTooltip />}\n          fieldId=\"businessObjective\"\n        >\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            id=\"businessObjective\"\n            name=\"businessObjective\"\n            aria-describedby=\"businessObjective\"\n            defaultValue={policy.businessObjective}\n          />\n        </FormGroup>\n        <ProfileThresholdField previousThreshold={100} />\n      </Form>\n    </React.Fragment>\n  );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n  policy: propTypes.object,\n  refId: propTypes.string,\n  change: reduxFormPropTypes.change,\n};\n\nconst mapStateToProps = (state) => {\n  const policy = selector(state, 'profile');\n  return {\n    policy,\n    refId: selector(state, 'refId'),\n    initialValues: {\n      name: `${policy.name}`,\n      refId: `${policy.refId}`,\n      description: `${policy.description}`,\n      benchmark: selector(state, 'benchmark'),\n      osMajorVersion: selector(state, 'osMajorVersion'),\n      profile: selector(state, 'profile'),\n    },\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyDetails);\n","import React from 'react';\nimport {\n  Label,\n  Text,\n  TextVariants,\n  TextContent,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\n\nconst ReviewCreatedPolicy = ({\n  name,\n  businessObjective,\n  complianceThreshold,\n  parentProfileName,\n  osMinorVersionCounts,\n  osMajorVersion,\n}) => (\n  <TextContent>\n    <Text component={TextVariants.h1}>Review</Text>\n    <Text>Review your SCAP policy before finishing.</Text>\n    <Text component={TextVariants.h3} style={{ marginTop: 0 }}>\n      {name}\n    </Text>\n    <TextList component={TextListVariants.dl}>\n      <TextListItem component={TextListItemVariants.dt}>\n        Policy type\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        {parentProfileName}\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dt}>\n        Compliance threshold\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        {complianceThreshold}%\n      </TextListItem>\n      {businessObjective && (\n        <React.Fragment>\n          <TextListItem component={TextListItemVariants.dt}>\n            Business objective\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {businessObjective}\n          </TextListItem>\n        </React.Fragment>\n      )}\n      <TextListItem component={TextListItemVariants.dt}>Systems</TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        <TextList component={TextListVariants.dl}>\n          {osMinorVersionCounts.map(({ osMinorVersion, count }) => (\n            <React.Fragment key={osMinorVersion}>\n              <TextListItem\n                component={TextListItemVariants.dt}\n                style={{ fontWeight: 'normal' }}\n              >\n                RHEL {osMajorVersion}.{osMinorVersion}\n              </TextListItem>\n              <TextListItem component={TextListItemVariants.dd}>\n                <Label color=\"grey\" isCompact={true}>\n                  {count} {count > 1 ? 'systems' : 'system'}\n                </Label>\n              </TextListItem>\n            </React.Fragment>\n          ))}\n        </TextList>\n      </TextListItem>\n    </TextList>\n  </TextContent>\n);\n\nReviewCreatedPolicy.propTypes = {\n  benchmarkId: propTypes.string,\n  refId: propTypes.string,\n  name: propTypes.string,\n  businessObjective: propTypes.string,\n  complianceThreshold: propTypes.number,\n  parentProfileName: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  osMajorVersion: propTypes.string.isRequired,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect((state) => ({\n  benchmarkId: selector(state, 'benchmark'),\n  refId: selector(state, 'refId'),\n  name: selector(state, 'name'),\n  businessObjective: selector(state, 'businessObjective'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  complianceThreshold:\n    parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n  parentProfileName: selector(state, 'profile').name,\n  rulesCount: selector(state, 'selectedRuleRefIds').length,\n}))(ReviewCreatedPolicy);\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Title,\n  Button,\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  List,\n  ListItem,\n} from '@patternfly/react-core';\nimport {\n  ProgressBar,\n  LinkWithPermission as Link,\n} from 'PresentationalComponents';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from '@apollo/client/react/hoc';\nimport { usePolicy } from 'Mutations';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nconst EmtpyStateWithErrors = ({ errors }) =>\n  errors && Array.isArray(errors) && errors.length > 0 ? (\n    <EmptyStateBody className=\"wizard-failed-errors\">\n      <List>\n        {errors.map((error) => (\n          <ListItem key={error}>{error}</ListItem>\n        ))}\n      </List>\n    </EmptyStateBody>\n  ) : null;\n\nEmtpyStateWithErrors.propTypes = {\n  errors: propTypes.array,\n};\n\nexport const FinishedCreatePolicy = ({\n  onWizardFinish,\n  cloneFromProfileId,\n  description,\n  name,\n  complianceThreshold,\n  businessObjective,\n  refId,\n  benchmarkId,\n  systems,\n  selectedRuleRefIds,\n  ruleValues: values,\n}) => {\n  const [percent, setPercent] = useState(0);\n  const [message, setMessage] = useState('This usually takes a minute or two.');\n  const [errors, setErrors] = useState(null);\n  const [failed, setFailed] = useState(false);\n  const updatePolicy = usePolicy();\n\n  const onProgress = (progress) => {\n    setPercent(progress * 100);\n  };\n\n  const submitForm = () => {\n    const newPolicy = {\n      cloneFromProfileId,\n      description,\n      name,\n      complianceThreshold,\n      businessObjective: { title: businessObjective },\n      refId,\n      benchmarkId,\n      hosts: systems,\n      selectedRuleRefIds,\n      values,\n    };\n\n    updatePolicy(null, newPolicy, onProgress)\n      .then(({ id }) => {\n        setPercent(100);\n        setMessage();\n        dispatchNotification({\n          variant: 'success',\n          title: `Created policy \"${name}\"`,\n          autoDismiss: true,\n          description: (\n            <span>\n              From the <strong>SCAP Policies</strong> list, open{' '}\n              <Link to={`/scappolicies/${id}`}>{name}</Link>.\n            </span>\n          ),\n        });\n      })\n      .catch((error) => {\n        setMessage(error.networkError?.message);\n        setErrors(error.networkError?.result?.errors);\n        setFailed(true);\n        dispatchNotification({\n          variant: 'danger',\n          title: 'Error creating policy',\n          description: error.message,\n        });\n      });\n  };\n\n  useEffect(() => {\n    submitForm();\n  }, []);\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={WrenchIcon} />\n        <br />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          Creating policy\n        </Title>\n        <EmptyStateBody>\n          <ProgressBar percent={percent} failed={failed} />\n        </EmptyStateBody>\n        <EmptyStateBody className={failed && 'wizard-failed-message'}>\n          {message}\n        </EmptyStateBody>\n        <EmtpyStateWithErrors error={errors} />\n        <EmptyStateSecondaryActions>\n          {(percent === 100 || failed) && (\n            <Button\n              variant={'primary'}\n              ouiaId=\"ReturnToAppButton\"\n              onClick={() => {\n                onWizardFinish();\n              }}\n            >\n              {failed ? 'Back' : 'Return to application'}\n            </Button>\n          )}\n        </EmptyStateSecondaryActions>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nFinishedCreatePolicy.propTypes = {\n  benchmarkId: propTypes.string.isRequired,\n  businessObjective: propTypes.object,\n  cloneFromProfileId: propTypes.string.isRequired,\n  refId: propTypes.string.isRequired,\n  name: propTypes.string.isRequired,\n  description: propTypes.string,\n  systems: propTypes.array,\n  complianceThreshold: propTypes.number,\n  onWizardFinish: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string).isRequired,\n  ruleValues: propTypes.object,\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => {\n    return {\n      benchmarkId: selector(state, 'benchmark'),\n      businessObjective: selector(state, 'businessObjective'),\n      cloneFromProfileId: selector(state, 'profile').id,\n      refId: selector(state, 'refId'),\n      name: selector(state, 'name'),\n      description: selector(state, 'description'),\n      complianceThreshold:\n        parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n      systems: selector(state, 'systems'),\n      selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n      ruleValues: selector(state, 'ruleValues'),\n    };\n  }),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: true,\n    forceUnregisterOnUnmount: true,\n  }),\n  withApollo\n)(FinishedCreatePolicy);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { formValueSelector, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport useNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\nimport { Wizard } from '@patternfly/react-core';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport { default as EditPolicyRules } from './EditPolicyProfilesRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport {\n  validateBenchmarkPage,\n  validateDetailsPage,\n  validateRulesPage,\n  validateSystemsPage,\n} from './validate';\n\nexport const CreatePolicyForm = ({\n  benchmark,\n  osMajorVersion,\n  complianceThreshold,\n  name,\n  profile,\n  refId,\n  selectedRuleRefIds,\n  systemIds,\n  reset,\n}) => {\n  const navigate = useNavigate();\n  const [stepIdReached, setStepIdReached] = useState(1);\n  const resetAnchor = () => {\n    const { location } = history;\n    if (location.hash) {\n      history.push({ ...location, hash: '' });\n    }\n  };\n\n  const onNext = ({ id }) => {\n    setStepIdReached(stepIdReached < id ? id : stepIdReached);\n    resetAnchor();\n  };\n\n  const onClose = () => {\n    reset();\n    navigate('/scappolicies');\n  };\n\n  const steps = [\n    {\n      id: 1,\n      name: 'Create SCAP policy',\n      component: <CreateSCAPPolicy />,\n      enableNext: validateBenchmarkPage(benchmark, osMajorVersion, profile),\n    },\n    {\n      id: 2,\n      name: 'Details',\n      component: <EditPolicyDetails />,\n      canJumpTo: stepIdReached >= 2,\n      enableNext: validateDetailsPage(name, refId, complianceThreshold),\n    },\n    {\n      id: 3,\n      name: 'Systems',\n      component: <EditPolicySystems />,\n      canJumpTo: stepIdReached >= 3,\n      enableNext: validateSystemsPage(systemIds),\n    },\n    {\n      id: 4,\n      name: 'Rules',\n      component: <EditPolicyRules />,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 4,\n      enableNext: validateRulesPage(selectedRuleRefIds),\n    },\n    {\n      id: 5,\n      name: 'Review',\n      component: <ReviewCreatedPolicy osMajorVersion={osMajorVersion} />,\n      nextButtonText: 'Finish',\n      canJumpTo:\n        validateRulesPage(selectedRuleRefIds) &&\n        systemIds?.length > 0 &&\n        stepIdReached >= 5,\n    },\n    {\n      id: 6,\n      name: 'Finished',\n      component: <FinishedCreatePolicy onWizardFinish={onClose} />,\n      isFinishedStep: true,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 6,\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <Wizard\n        width={1300}\n        className=\"compliance\"\n        isOpen\n        onNext={onNext}\n        onGoToStep={resetAnchor}\n        onBack={resetAnchor}\n        onClose={onClose}\n        title=\"Create SCAP policy\"\n        description=\"Create a new policy for managing SCAP compliance\"\n        steps={steps}\n      />\n    </React.Fragment>\n  );\n};\n\nCreatePolicyForm.propTypes = {\n  benchmark: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  complianceThreshold: propTypes.string,\n  businessObjective: propTypes.object,\n  dispatch: propTypes.func,\n  isOpen: propTypes.bool,\n  name: propTypes.string,\n  onWizardFinish: propTypes.func,\n  profile: propTypes.string,\n  refId: propTypes.string,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string),\n  systemIds: propTypes.arrayOf(propTypes.string),\n  reset: propTypes.func,\n};\n\nCreatePolicyForm.defaultProps = {\n  isOpen: false,\n};\n\nconst CreatePolicy = reduxForm({\n  form: 'policyForm',\n})(CreatePolicyForm);\n\nconst selector = formValueSelector('policyForm');\nexport default connect((state) => ({\n  benchmark: selector(state, 'benchmark'),\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  businessObjective: selector(state, 'businessObjective'),\n  complianceThreshold: selector(state, 'complianceThreshold') || 100,\n  name: selector(state, 'name'),\n  profile: selector(state, 'profile'),\n  refId: selector(state, 'refId'),\n  selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  systemIds: selector(state, 'systems'),\n}))(CreatePolicy);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport {\n  Button,\n  Checkbox,\n  ModalVariant,\n  Text,\n  Spinner,\n} from '@patternfly/react-core';\nimport useNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\nimport { DELETE_PROFILE } from 'Mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport {\n  ComplianceModal,\n  StateViewWithError,\n  StateViewPart,\n} from 'PresentationalComponents';\nimport { dispatchAction } from 'Utilities/Dispatcher';\nimport usePolicyQuery from 'Utilities/hooks/usePolicyQuery';\n\nconst DeletePolicy = () => {\n  const [deleteEnabled, setDeleteEnabled] = useState(false);\n  const navigate = useNavigate();\n  const { policy_id: policyId } = useParams();\n  const { data, error, loading } = usePolicyQuery({\n    policyId,\n    minimal: true,\n  });\n  const {\n    profile: { name, id },\n  } = data || { profile: {} };\n  const onClose = () => {\n    navigate('/scappolicies');\n  };\n\n  const [deletePolicy] = useMutation(DELETE_PROFILE, {\n    onCompleted: () => {\n      dispatchAction(\n        addNotification({\n          variant: 'success',\n          title: `Deleted \"${name}\" and its associated reports`,\n        })\n      );\n      onClose();\n    },\n    onError: (error) => {\n      dispatchAction(\n        addNotification({\n          variant: 'danger',\n          title: 'Error removing policy',\n          description: error.message,\n        })\n      );\n      onClose();\n    },\n  });\n\n  return (\n    <ComplianceModal\n      variant={ModalVariant.small}\n      title=\"Delete policy?\"\n      titleIconVariant=\"warning\"\n      ouiaId=\"DeletePolicyModal\"\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"destroy\"\n          ouiaId=\"DeletePolicyButton\"\n          aria-label=\"delete\"\n          isDisabled={!deleteEnabled}\n          variant=\"danger\"\n          onClick={() => deletePolicy({ variables: { input: { id } } })}\n        >\n          Delete policy and associated reports\n        </Button>,\n        <Button\n          key=\"cancel\"\n          ouiaId=\"DeletePolicyCancelButton\"\n          variant=\"secondary\"\n          onClick={onClose}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <StateViewWithError stateValues={{ error, data, loading }}>\n        <StateViewPart stateKey=\"loading\">\n          <Spinner />\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n          <Text className=\"policy-delete-body-text\">\n            Deleting the policy <b>{name}</b> will also delete its associated\n            reports.\n          </Text>\n          <Checkbox\n            label=\"I understand this will delete the policy and all associated reports\"\n            id={`deleting-policy-check-${id}`}\n            isChecked={deleteEnabled}\n            onChange={setDeleteEnabled}\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </ComplianceModal>\n  );\n};\n\nDeletePolicy.propTypes = {\n  policy: propTypes.object,\n};\n\nexport default DeletePolicy;\n","import { Button, ModalVariant, TextContent } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport useNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\nimport { useMutation } from '@apollo/client';\nimport { DELETE_REPORT } from 'Mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ComplianceModal } from 'PresentationalComponents';\nimport { dispatchAction } from 'Utilities/Dispatcher';\n\nconst DeleteReport = () => {\n  const navigate = useNavigate();\n  const { report_id: id } = useParams();\n\n  const onClose = () => {\n    navigate(-1);\n  };\n\n  const onDelete = () => {\n    navigate('/reports');\n  };\n\n  const [deleteReport] = useMutation(DELETE_REPORT, {\n    onCompleted: () => {\n      dispatchAction(\n        addNotification({\n          variant: 'success',\n          title: 'Report deleted',\n          description:\n            'Systems associated with this policy will upload reports on the next check-in.',\n        })\n      );\n      onDelete();\n    },\n    onError: (error) => {\n      dispatchAction(\n        addNotification({\n          variant: 'danger',\n          title: 'Error removing report',\n          description: error.message,\n        })\n      );\n      onClose();\n    },\n  });\n\n  return (\n    <ComplianceModal\n      isOpen\n      variant={ModalVariant.small}\n      title=\"Delete report?\"\n      titleIconVariant=\"warning\"\n      ouiaId=\"DeleteReportModal\"\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"destroy\"\n          ouiaId=\"DeleteReportButton\"\n          aria-label=\"delete\"\n          variant=\"danger\"\n          onClick={() =>\n            deleteReport({\n              variables: {\n                input: {\n                  profileId: id,\n                },\n              },\n            })\n          }\n        >\n          Delete report\n        </Button>,\n        <Button\n          key=\"cancel\"\n          ouiaId=\"DeleteReportCancelButton\"\n          variant=\"secondary\"\n          onClick={() => onClose()}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        Deleting a report is permanent and cannot be undone.\n      </TextContent>\n    </ComplianceModal>\n  );\n};\n\nDeleteReport.propTypes = {\n  onClose: propTypes.func,\n  isModalOpen: propTypes.bool,\n  onDelete: propTypes.func,\n  policyId: propTypes.string,\n};\n\nDeleteReport.defaultProps = {\n  onDelete: () => {},\n  onClose: () => {},\n};\n\nexport default DeleteReport;\n","import gql from 'graphql-tag';\n\nexport const BENCHMARKS_QUERY = gql`\n  query EP_Benchmarks($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        ruleTree\n        valueDefinitions {\n          defaultValue\n          description\n          id\n          refId\n          title\n          valueType\n        }\n        profiles {\n          id\n          refId\n          ssgVersion\n        }\n      }\n    }\n  }\n`;\n\nexport const MULTIVERSION_QUERY = gql`\n  query EP_Profile($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      external\n      description\n      totalHostCount\n      compliantHostCount\n      complianceThreshold\n      osMajorVersion\n      supportedOsVersions\n      lastScanned\n      policyType\n      policy {\n        id\n        name\n        refId\n        profiles {\n          id\n          parentProfileId\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          values\n          benchmark {\n            id\n            title\n            latestSupportedOsMinorVersions\n            osMajorVersion\n            version\n            ruleTree\n          }\n          rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n            values\n          }\n        }\n      }\n      businessObjective {\n        id\n        title\n      }\n      hosts {\n        id\n        osMinorVersion\n        osMajorVersion\n      }\n    }\n  }\n`;\n\nexport const RULE_VALUE_DEFINITIONS_QUERY = gql`\n  query EP_ProfileValueDefinitions($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      policy {\n        id\n        refId\n        profiles {\n          id\n          parentProfileId\n          refId\n          benchmark {\n            id\n            ruleTree\n            valueDefinitions {\n              defaultValue\n              description\n              id\n              refId\n              title\n              valueType\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  Text,\n  TextContent,\n  Title,\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport { sortingByProp } from 'Utilities/helpers';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\nimport { BENCHMARKS_QUERY } from './constants';\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst EditPolicyRulesTabEmptyState = () => (\n  <EmptyState>\n    <Title headingLevel=\"h5\" size=\"lg\">\n      No rules can be configured\n    </Title>\n    <EmptyStateBody>\n      This policy has no associated systems, and therefore no rules can be\n      configured.\n    </EmptyStateBody>\n    <EmptyStateBody>\n      Add at least one system to configure rules for this policy.\n    </EmptyStateBody>\n  </EmptyState>\n);\n\nexport const toTabsData = (policy, osMinorVersionCounts, benchmarks) =>\n  Object.values(osMinorVersionCounts)\n    .sort(sortingByProp('osMinorVersion', 'desc'))\n    .map(({ osMinorVersion, count: systemCount }) => {\n      osMinorVersion = `${osMinorVersion}`;\n      let profile = policy.policy.profiles.find(\n        (profile) => profile.osMinorVersion === osMinorVersion\n      );\n      let osMajorVersion = policy.osMajorVersion;\n\n      if (!profile && benchmarks) {\n        const benchmark = getBenchmarkBySupportedOsMinor(\n          benchmarks,\n          osMinorVersion\n        );\n        if (benchmark) {\n          const benchmarkProfile = getBenchmarkProfile(benchmark, policy.refId);\n          if (benchmarkProfile) {\n            profile = policy.policy.profiles.find(\n              (profile) =>\n                profile.parentProfileId === benchmarkProfile.id &&\n                profile.osMinorVersion === osMinorVersion\n            );\n\n            profile = {\n              ...benchmarkProfile,\n              benchmark,\n              osMajorVersion,\n              ...profile,\n            };\n          }\n        }\n      }\n\n      return {\n        profile,\n        systemCount,\n        newOsMinorVersion: osMinorVersion,\n      };\n    })\n    .filter(({ profile, newOsMinorVersion }) => !!profile && newOsMinorVersion);\n\nexport const EditPolicyRulesTab = ({\n  policy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  osMinorVersionCounts,\n  setRuleValues,\n  ruleValues: ruleValuesProp,\n}) => {\n  const osMajorVersion = policy?.osMajorVersion;\n  const osMinorVersions = Object.keys(osMinorVersionCounts).sort();\n  const benchmarkSearch =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const {\n    data: benchmarksData,\n    error,\n    loading,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter: benchmarkSearch,\n    },\n    skip: osMinorVersions.length === 0,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  const tabsData = toTabsData(policy, osMinorVersionCounts, benchmarks);\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n\n  const dataState = !loading && tabsData?.length > 0 ? tabsData : undefined;\n\n  useEffect(() => {\n    if (policy.policy.profiles) {\n      const profiles = policy.policy.profiles;\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      setSelectedRuleRefIds((prevSelection) => {\n        const newSelection = profilesWithRulesToSelection(\n          profilesWithOs,\n          prevSelection\n        );\n        return newSelection;\n      });\n    }\n  }, [policy.policy.profiles]);\n\n  const ruleValues = (policy) => {\n    const mergeValues = (policyId, values) => {\n      return {\n        ...values,\n        ...(ruleValuesProp?.[policyId] || {}),\n      };\n    };\n\n    return Object.fromEntries(\n      policy?.policy?.profiles?.map(\n        ({ id, values, benchmark: { valueDefinitions } }) => [\n          id,\n          mergeValues(id, values, valueDefinitions),\n        ]\n      ) || []\n    );\n  };\n\n  return (\n    <StateViewWithError\n      stateValues={{\n        error,\n        data: !error && dataState,\n        loading,\n        empty: !loading && !dataState && !error,\n      }}\n    >\n      <StateViewPart stateKey=\"loading\">\n        <EmptyTable>\n          <Spinner />\n        </EmptyTable>\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <TextContent>\n          <Text>\n            Different release versions of RHEL are associated with different\n            versions of the SCAP Security Guide (SSG), therefore each release\n            must be customized independently.\n          </Text>\n        </TextContent>\n        {tabsData.length > 0 && (\n          <TabbedRules\n            resetLink\n            rulesPageLink\n            selectedFilter\n            remediationsEnabled={false}\n            columns={[Columns.Name, Columns.Severity, Columns.Remediation]}\n            tabsData={tabsData}\n            ruleValues={ruleValues(policy)}\n            selectedRuleRefIds={selectedRuleRefIds}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            setRuleValues={setRuleValues}\n            level={1}\n            ouiaId=\"RHELVersions\"\n          />\n        )}\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">\n        <EditPolicyRulesTabEmptyState />\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nEditPolicyRulesTab.propTypes = {\n  setNewRuleTabs: propTypes.func,\n  policy: propTypes.object,\n  osMinorVersionCounts: propTypes.shape({\n    osMinorVersion: propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    }),\n  }),\n  selectedRuleRefIds: propTypes.array,\n  setSelectedRuleRefIds: propTypes.func,\n  setRuleValues: propTypes.func,\n  ruleValues: propTypes.array,\n};\n\nexport default EditPolicyRulesTab;\n","import React from 'react';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { SystemsTable } from 'SmartComponents';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>Connect RHEL {osMajorVersion} systems to Insights.</Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst EditPolicySystemsTab = ({ policy, onSystemSelect, selectedSystems }) => {\n  const { id: policyId, osMajorVersion, supportedOsVersions } = policy;\n  const osMinorVersions = supportedOsVersions.map(\n    (version) => version.split('.')[1]\n  );\n  const osFilter =\n    osMajorVersion &&\n    `os_major_version = ${osMajorVersion} AND os_minor_version ^ (${osMinorVersions.join(\n      ','\n    )})`;\n  const defaultFilter = osFilter\n    ? `${osFilter} or policy_id = ${policyId}`\n    : `policy_id = ${policyId}`;\n  console.log('POL', policy);\n  return (\n    <React.Fragment>\n      <SystemsTable\n        columns={[\n          Columns.Name,\n          Columns.inventoryColumn('tags'),\n          Columns.OperatingSystem,\n        ]}\n        showOsMinorVersionFilter={[osMajorVersion]}\n        prependComponent={<PrependComponent osMajorVersion={osMajorVersion} />}\n        emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n        compact\n        showActions={false}\n        defaultFilter={defaultFilter}\n        enableExport={false}\n        remediationsEnabled={false}\n        preselectedSystems={selectedSystems}\n        onSelect={onSystemSelect}\n      />\n    </React.Fragment>\n  );\n};\n\nEditPolicySystemsTab.propTypes = {\n  policy: propTypes.object,\n  newRuleTabs: propTypes.bool,\n  onSystemSelect: propTypes.func,\n  selectedSystems: propTypes.array,\n};\n\nexport default EditPolicySystemsTab;\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport useNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\n\nimport { Alert, AlertActionLink } from '@patternfly/react-core';\n\nconst NewRulesAlert = () => {\n  const navigate = useNavigate();\n\n  const location = useLocation();\n\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title=\"You selected a system that has a release version previously not included in this policy.\"\n      actionLinks={\n        <AlertActionLink\n          onClick={() => navigate({ ...location, hash: '#rules' })}\n        >\n          Open rule editing\n        </AlertActionLink>\n      }\n    >\n      <p>\n        If you have edited any rules for this policy, you will need to do so for\n        this release version as well.\n      </p>\n    </Alert>\n  );\n};\n\nexport default NewRulesAlert;\n","import React, { useCallback, useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { Form, Tab, TabTitleText } from '@patternfly/react-core';\nimport { RoutedTabs } from 'PresentationalComponents';\nimport EditPolicyRulesTab from './EditPolicyRulesTab';\nimport EditPolicySystemsTab from './EditPolicySystemsTab';\nimport NewRulesAlert from './components/NewRulesAlert';\nimport { mapCountOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport { profilesWithRulesToSelection } from 'PresentationalComponents/TabbedRules';\nimport { thresholdValid } from '../CreatePolicy/validate';\nimport { useNewRulesAlertState } from './hooks/index';\n\nconst profilesToOsMinorMap = (profiles, hosts) =>\n  (profiles || []).reduce((acc, profile) => {\n    if (profile.osMinorVersion !== '') {\n      acc[profile.osMinorVersion] ||= {\n        osMinorVersion: profile.osMinorVersion,\n        count: 0,\n      };\n    }\n\n    return acc;\n  }, mapCountOsMinorVersions(hosts || []));\n\nconst EditPolicyForm = ({\n  policy,\n  setUpdatedPolicy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  selectedSystems,\n  setSelectedSystems,\n  setRuleValues,\n  ruleValues,\n}) => {\n  const policyProfiles = policy?.policy?.profiles || [];\n  const [osMinorVersionCounts, setOsMinorVersionCounts] = useState({});\n  const [newRulesAlert, setNewRulesAlert] = useNewRulesAlertState(false);\n\n  const handleSystemSelect = useCallback(\n    (newSelectedSystems) => {\n      const policyMinorVersions = policy.hosts.map(\n        ({ osMinorVersion }) => osMinorVersion\n      );\n      const hasNewOsMinorVersions =\n        newSelectedSystems.filter(\n          ({ osMinorVersion }) => !policyMinorVersions.includes(osMinorVersion)\n        ).length > 0;\n\n      setSelectedSystems(newSelectedSystems);\n      setNewRulesAlert(hasNewOsMinorVersions);\n      setOsMinorVersionCounts(\n        profilesToOsMinorMap(policyProfiles, newSelectedSystems)\n      );\n    },\n    [policyProfiles, selectedRuleRefIds]\n  );\n\n  useEffect(() => {\n    if (policy) {\n      const complianceThresholdValid = thresholdValid(\n        policy.complianceThreshold\n      );\n      const profilesWithOsMinor = policyProfiles.filter(\n        ({ osMinorVersion }) => !!osMinorVersion\n      );\n      setUpdatedPolicy({\n        ...policy,\n        complianceThresholdValid,\n      });\n\n      setSelectedRuleRefIds(profilesWithRulesToSelection(profilesWithOsMinor));\n      handleSystemSelect(policy.hosts);\n    }\n  }, [policy]);\n\n  return (\n    <Form>\n      <RoutedTabs ouiaId=\"EditSystems\" defaultTab=\"rules\" id=\"policy-tabs\">\n        <Tab\n          eventKey=\"rules\"\n          ouiaId=\"Rules\"\n          title={<TabTitleText>Rules</TabTitleText>}\n        >\n          <EditPolicyRulesTab\n            policy={policy}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            setRuleValues={setRuleValues}\n            ruleValues={ruleValues}\n            selectedRuleRefIds={selectedRuleRefIds}\n            osMinorVersionCounts={osMinorVersionCounts}\n          />\n        </Tab>\n        <Tab\n          eventKey=\"systems\"\n          ouiaId=\"Systems\"\n          title={<TabTitleText>Systems</TabTitleText>}\n        >\n          <EditPolicySystemsTab\n            policy={policy}\n            selectedSystems={selectedSystems}\n            onSystemSelect={handleSystemSelect}\n          />\n          {newRulesAlert && <NewRulesAlert />}\n        </Tab>\n      </RoutedTabs>\n    </Form>\n  );\n};\n\nEditPolicyForm.propTypes = {\n  policy: propTypes.object,\n  updatedPolicy: propTypes.object,\n  setUpdatedPolicy: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.object),\n  setSelectedRuleRefIds: propTypes.func,\n  setSelectedSystems: propTypes.func,\n  selectedSystems: propTypes.array,\n  setRuleValues: propTypes.func,\n  ruleValues: propTypes.array,\n};\n\nexport default EditPolicyForm;\n","import { useState } from 'react';\n\nexport const useNewRulesAlertState = (...args) => useState(...args);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Spinner } from '@patternfly/react-core';\nimport { useLocation, useParams } from 'react-router-dom';\nimport useNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport {\n  ComplianceModal,\n  StateViewWithError,\n  StateViewPart,\n} from 'PresentationalComponents';\nimport EditPolicyForm from './EditPolicyForm';\nimport { useOnSave } from './hooks';\nimport usePolicyQuery from 'Utilities/hooks/usePolicyQuery';\n\nexport const EditPolicy = ({ route }) => {\n  const navigate = useNavigate();\n  const { policy_id: policyId } = useParams();\n  const location = useLocation();\n  const { data, error, loading } = usePolicyQuery({ policyId });\n  const policy = data?.profile;\n  const [updatedPolicy, setUpdatedPolicy] = useState(null);\n  const [selectedRuleRefIds, setSelectedRuleRefIds] = useState([]);\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const [ruleValues, setRuleValuesState] = useState({});\n\n  const saveEnabled = updatedPolicy && !updatedPolicy.complianceThresholdValid;\n  const updatedPolicyHostsAndRules = {\n    ...updatedPolicy,\n    selectedRuleRefIds,\n    hosts: selectedSystems,\n    values: ruleValues,\n  };\n  const onSaveCallback = () => navigate(location.state?.returnTo || -1);\n\n  const [isSaving, onSave] = useOnSave(policy, updatedPolicyHostsAndRules, {\n    onSave: onSaveCallback,\n    onError: onSaveCallback,\n  });\n\n  const setRuleValues = (policyId, valueDefinition, valueValue) => {\n    const existingValues = Object.fromEntries(\n      policy?.policy.profiles.map((profile) => {\n        return [profile.id, profile.values];\n      }) || []\n    );\n\n    setRuleValuesState((currentValues) => ({\n      ...existingValues,\n      ...currentValues,\n      [policyId]: {\n        ...existingValues[policyId],\n        ...currentValues[policyId],\n        [valueDefinition.id]: valueValue,\n      },\n    }));\n  };\n\n  const actions = [\n    <Button\n      isDisabled={saveEnabled}\n      key=\"save\"\n      ouiaId=\"EditPolicySaveButton\"\n      variant=\"primary\"\n      spinnerAriaValueText=\"Saving\"\n      isLoading={isSaving}\n      onClick={onSave}\n    >\n      Save\n    </Button>,\n    <Button\n      key=\"cancel\"\n      ouiaId=\"EditPolicyCancelButton\"\n      variant=\"link\"\n      onClick={onSaveCallback}\n    >\n      Cancel\n    </Button>,\n  ];\n\n  useTitleEntity(route, policy?.name);\n\n  return (\n    <ComplianceModal\n      isOpen\n      position={'top'}\n      style={{ minHeight: '350px' }}\n      width={1220}\n      variant={'large'}\n      ouiaId=\"EditPolicyModal\"\n      title={`Edit ${policy ? policy.name : ''}`}\n      onClose={onSaveCallback}\n      actions={actions}\n    >\n      <StateViewWithError\n        stateValues={{ data: policy && !loading, loading, error }}\n      >\n        <StateViewPart stateKey=\"loading\">\n          <Spinner />\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n          <EditPolicyForm\n            {...{\n              policy,\n              updatedPolicy,\n              setUpdatedPolicy,\n              selectedRuleRefIds,\n              setSelectedRuleRefIds,\n              selectedSystems,\n              setSelectedSystems,\n              setRuleValues,\n              ruleValues,\n            }}\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </ComplianceModal>\n  );\n};\n\nEditPolicy.propTypes = {\n  route: propTypes.object,\n};\n\nexport default EditPolicy;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\n\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Truncate from '@redhat-cloud-services/frontend-components/Truncate';\nimport {\n  UnsupportedSSGVersion,\n  ComplianceScore as PresentationalComplianceScore,\n  LinkWithPermission as Link,\n} from 'PresentationalComponents';\nimport {\n  // profilesRulesFailed,\n  complianceScoreData,\n  NEVER,\n} from 'Utilities/ruleHelpers';\n\nconst SystemLink = ({ id, children }) => (\n  <Link to={{ pathname: `/systems/${id}` }}>{children}</Link>\n);\n\nSystemLink.propTypes = {\n  id: propTypes.string,\n  children: propTypes.node,\n};\n\nexport const Name = ({\n  id,\n  name,\n  osMajorVersion,\n  osMinorVersion,\n  showOsInfo = false,\n  showLink = false,\n}) => {\n  const hasOsInfo = (osMajorVersion, osMinorVersion) =>\n    !!osMajorVersion && !!osMinorVersion && showOsInfo;\n\n  return (\n    <TextContent>\n      {showLink ? <SystemLink {...{ id }}>{name}</SystemLink> : name}\n\n      {hasOsInfo(osMajorVersion, osMinorVersion) && (\n        <Text component={TextVariants.small}>\n          RHEL {osMajorVersion}.{osMinorVersion}\n        </Text>\n      )}\n    </TextContent>\n  );\n};\n\nName.propTypes = {\n  id: propTypes.string,\n  name: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersion: propTypes.string,\n  showOsInfo: propTypes.bool,\n  showLink: propTypes.bool,\n};\n\nexport const profilesSsgVersions = (profiles) =>\n  profiles\n    .map((p) => p.ssgVersion)\n    .filter((version) => !!version)\n    .join(', ');\n\nexport const SSGVersion = ({ ssgVersion = 'Not available', supported }) =>\n  supported ? (\n    ssgVersion\n  ) : (\n    <UnsupportedSSGVersion messageVariant=\"singular\">\n      {ssgVersion}\n    </UnsupportedSSGVersion>\n  );\n\nSSGVersion.propTypes = {\n  supported: propTypes.bool,\n  ssgVersion: propTypes.string,\n};\n\nexport const SSGVersions = ({ testResultProfiles = [] }) =>\n  testResultProfiles.length !== 0\n    ? testResultProfiles.map((profile) => (\n        <SSGVersion\n          key={`ssgversion-${profile.id}`}\n          ssgVersion={profile?.benchmark?.version}\n          supported={profile?.supported}\n        />\n      ))\n    : 'Unknown';\n\nSSGVersions.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const Policies = ({ policies }) =>\n  (policies || []).length > 0 && (\n    <Truncate\n      inline\n      text={policies.map((p) => p.name).join(', ')}\n      length={215}\n    />\n  );\n\nPolicies.propTypes = {\n  policies: propTypes.array,\n};\n\nexport const FailedRules = ({ id, testResultProfiles }) => {\n  const rulesFailed = testResultProfiles.reduce(\n    (acc, { rulesFailed }) => acc + parseInt(rulesFailed || 0),\n    0\n  );\n\n  return (\n    <SystemLink {...{ id }}>{rulesFailed > 0 ? rulesFailed : 'N/A'}</SystemLink>\n  );\n};\n\nFailedRules.propTypes = {\n  id: propTypes.string,\n  testResultProfiles: propTypes.array,\n};\n\nexport { complianceScoreData };\nexport const ComplianceScore = ({ testResultProfiles }) => {\n  const { score, supported, compliant } = testResultProfiles[0] || {};\n  return testResultProfiles.length > 0 ? (\n    <PresentationalComplianceScore {...{ score, supported, compliant }} />\n  ) : (\n    'N/A'\n  );\n};\n\nComplianceScore.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nconst NeverScanned = () => (\n  <Tooltip\n    position=\"right\"\n    content={\n      <Fragment>\n        This system has never returned a report for this policy. This may be\n        because it is disconnected, or the insights-client on this system is not\n        configured to use Compliance.\n      </Fragment>\n    }\n  >\n    <div>\n      <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n      {' ' + NEVER}\n    </div>\n  </Tooltip>\n);\n\nexport const lastScanned = (profiles) => {\n  const dates = profiles.map((profile) => new Date(profile.lastScanned));\n  const last = new Date(\n    Math.max.apply(\n      null,\n      dates.filter((date) => isFinite(date))\n    )\n  );\n  const result =\n    last instanceof Date && isFinite(last) ? last : <NeverScanned />;\n\n  return result;\n};\n\nexport const LastScanned = ({ testResultProfiles: profiles }) => {\n  const lastScannedDate = lastScanned(profiles || []);\n\n  return lastScannedDate instanceof Date ? (\n    <DateFormat date={Date.parse(lastScannedDate)} type=\"relative\" />\n  ) : (\n    lastScannedDate\n  );\n};\n\nLastScanned.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const operatingSystemString = ({ osMinorVersion, osMajorVersion }) =>\n  `RHEL ${osMajorVersion}.${osMinorVersion}`;\n\nexport const OperatingSystem = (system) => operatingSystemString(system);\n","import React from 'react';\nimport { nowrap } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport { complianceScoreString } from 'PresentationalComponents';\nimport { renderComponent } from 'Utilities/helpers';\n\nimport {\n  Name as NameCell,\n  ComplianceScore as ComplianceScoreCell,\n  FailedRules as FailedRulesCell,\n  LastScanned as LastScannedCell,\n  Policies as PoliciesCell,\n  SSGVersions as SsgVersionCell,\n  complianceScoreData,\n  lastScanned,\n  operatingSystemString,\n  OperatingSystem as OperatingSystemCell,\n} from './Cells';\n\nconst disableSorting = { isStatic: true };\n\nexport const compileColumnRenderFunc = ({ cell, ...column }) => ({\n  ...column,\n  renderFunc: renderComponent(cell, column.props),\n});\n\nexport const customColumn = (column, props) =>\n  compileColumnRenderFunc({\n    ...column,\n    props: {\n      ...column.props,\n      ...props,\n    },\n  });\n\nexport const Name = compileColumnRenderFunc({\n  key: 'name',\n  title: 'Name',\n  sortBy: ['name'],\n  props: {\n    width: 40,\n  },\n  renderExport: (system) => `${system.name} (${operatingSystemString(system)})`,\n  cell: NameCell,\n});\n\nexport const customName = (props) => ({\n  ...Name,\n  props: {\n    ...Name.props,\n    ...props,\n  },\n  renderFunc: renderComponent(NameCell, props),\n});\n\nexport const SsgVersion = {\n  title: 'SSG version',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  sortBy: ['ssg_version'],\n  key: 'ssg_version',\n  renderExport: (testResultProfiles) =>\n    testResultProfiles\n      .map(\n        ({ supported, benchmark: { version } }) =>\n          `${!supported ? '!' : ''}${version}`\n      )\n      .join(', '),\n  renderFunc: renderComponent(SsgVersionCell),\n};\n\nexport const Policies = {\n  title: 'Policies',\n  transforms: [nowrap],\n  key: 'policies',\n  exportKey: 'policies',\n  renderExport: (policies) => policies.map(({ name }) => name).join(', '),\n  props: {\n    width: 40,\n    ...disableSorting,\n  },\n  renderFunc: renderComponent(PoliciesCell),\n};\n\nexport const FailedRules = {\n  title: 'Failed rules',\n  key: 'failedRules',\n  exportKey: 'profiles',\n  transforms: [nowrap],\n  sortBy: ['rulesFailed'],\n  props: {\n    width: 5,\n  },\n  renderExport: (profiles) =>\n    profiles.reduce(\n      (failedRules, { rulesFailed }) => failedRules + rulesFailed,\n      0\n    ),\n  renderFunc: renderComponent(FailedRulesCell),\n};\n\nexport const ComplianceScore = {\n  title: 'Compliance score',\n  key: 'complianceScore',\n  exportKey: 'testResultProfiles',\n  sortBy: ['score'],\n  transforms: [nowrap],\n  props: {\n    width: 5,\n  },\n  renderExport: (testResultProfiles) =>\n    complianceScoreString(complianceScoreData(testResultProfiles)).trim(),\n  renderFunc: renderComponent(ComplianceScoreCell),\n};\n\nexport const LastScanned = {\n  title: 'Last scanned',\n  key: 'lastScanned',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  props: {\n    width: 10,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) => lastScanned(testResultProfiles),\n  renderFunc: renderComponent(LastScannedCell),\n};\n\nexport const OperatingSystem = compileColumnRenderFunc({\n  title: 'Operating system',\n  key: 'operatingSystem',\n  sortBy: ['osMajorVersion', 'osMinorVersion'],\n  transforms: [nowrap],\n  renderExport: (cell) => operatingSystemString(cell),\n  cell: OperatingSystemCell,\n});\n\nexport const OS = compileColumnRenderFunc({\n  title: (\n    <Tooltip content={<span>Operating System</span>}>\n      <span>OS</span>\n    </Tooltip>\n  ),\n  original: 'Operating System',\n  key: 'operatingSystem',\n  dataLabel: 'OS',\n  transforms: [nowrap],\n  sortBy: ['osMajorVersion', 'osMinorVersion'],\n  props: {\n    width: 10,\n  },\n  renderExport: (cell) => operatingSystemString(cell),\n  cell: OperatingSystemCell,\n});\n\nexport const inventoryColumn = (column, props) => ({\n  key: column,\n  ...props,\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Skeleton, {\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { init } from 'Store';\n\nimport {\n  DetailWrapper,\n  InventoryDetailHead,\n} from '@redhat-cloud-services/frontend-components/Inventory';\n\nconst InventoryDetails = ({ inventoryId }) => {\n  return (\n    <DetailWrapper\n      onLoad={({ mergeWithDetail }) =>\n        init().register({\n          ...mergeWithDetail(),\n        })\n      }\n      inventoryId={inventoryId}\n    >\n      <InventoryDetailHead fallback={<Skeleton size={SkeletonSize.md} />} />\n    </DetailWrapper>\n  );\n};\n\nInventoryDetails.propTypes = {\n  inventoryId: propTypes.string,\n};\n\nexport default InventoryDetails;\n","import { gql } from 'graphql-tag';\n\nexport const DEFAULT_SYSTEMS_PER_BATCH = 3;\nexport const DEFAULT_CONNCURRENT_REQUESTS_FOR_ISSUES = 3;\n\nexport const GET_SYSTEMS_ISSUES = gql`\n  query CRB_Systems(\n    $filter: String!\n    $policyId: ID\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          testResultProfiles(policyId: $policyId) {\n            id\n            refId\n            score\n            lastScanned\n            compliant\n            rulesFailed\n            rulesPassed\n            supported\n            osMajorVersion\n            rules {\n              id\n              refId\n              precedence\n              compliant\n              remediationAvailable\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\nimport { default as RemediationRemediationButton } from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport { useIssuesFetch } from './hooks';\nimport FallbackButton from './components/FallBackButton';\n\nconst RemediationButton = ({\n  rules,\n  systems,\n  policyId,\n  onRemediationCreated,\n  ...buttonProps\n}) => {\n  const { isLoading: isLoadingIssues, fetch } = useIssuesFetch(\n    policyId,\n    rules,\n    systems\n  );\n\n  return (\n    <RemediationRemediationButton\n      isDisabled={systems?.length === 0 || isLoadingIssues}\n      onRemediationCreated={(result) => {\n        dispatchNotification(result.getNotification());\n      }}\n      dataProvider={fetch}\n      buttonProps={{\n        ouiaId: 'RemediateButton',\n        isLoading: isLoadingIssues,\n      }}\n      fallback={<FallbackButton />}\n      {...buttonProps}\n    >\n      Remediate\n    </RemediationRemediationButton>\n  );\n};\n\nRemediationButton.propTypes = {\n  rules: propTypes.array,\n  systems: propTypes.array,\n  onRemediationCreated: propTypes.func,\n  policyId: propTypes.string,\n};\n\nexport default RemediationButton;\n","import { useCallback } from 'react';\nimport { useApolloClient } from '@apollo/client';\nimport usePromiseQueue from 'Utilities/hooks/usePromiseQueue';\nimport {\n  GET_SYSTEMS_ISSUES,\n  DEFAULT_SYSTEMS_PER_BATCH,\n  DEFAULT_CONNCURRENT_REQUESTS_FOR_ISSUES,\n} from './constants';\nimport { remediationData } from './helpers';\n\nexport const useIssuesFetch = (policyId, rules, systems) => {\n  const client = useApolloClient();\n  const { isResolving, results, resolve } = usePromiseQueue(\n    DEFAULT_CONNCURRENT_REQUESTS_FOR_ISSUES\n  );\n\n  const fetchFunction = useCallback(\n    async (perPage, page) => {\n      const systemIds =\n        systems.length > 0 ? `id ^ (${systems.join(',')})` : undefined;\n\n      return (\n        await client.query({\n          query: GET_SYSTEMS_ISSUES,\n          fetchPolicy: 'no-cache',\n          variables: {\n            perPage,\n            page,\n            filter: `(${systemIds}) AND policy_id = ${policyId}`,\n            policyId,\n          },\n        })\n      ).data.systems;\n    },\n    [systems, policyId]\n  );\n\n  const fetch = useCallback(\n    async (batchSize = DEFAULT_SYSTEMS_PER_BATCH) => {\n      const pages = Math.ceil(systems?.length / batchSize) || 1;\n      const results = await resolve(\n        [...new Array(pages)].map(\n          (_, pageIdx) => () => fetchFunction(batchSize, pageIdx + 1)\n        )\n      );\n\n      return results && remediationData(results);\n    },\n    [systems]\n  );\n\n  return {\n    isLoading: isResolving,\n    data: results && remediationData(results),\n    fetch,\n  };\n};\n","import gql from 'graphql-tag';\nimport pickBy from 'lodash/pickBy';\nimport {\n  systemsPolicyFilterConfiguration,\n  systemsOsFilterConfiguration,\n  systemsOsMinorFilterConfiguration,\n} from '@/constants';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { entitiesReducer } from 'Store/Reducers/SystemStore';\n\nexport const GET_MINIMAL_SYSTEMS = gql`\n  query ST_Systems(\n    $filter: String!\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n          osMinorVersion\n          culledTimestamp\n          staleWarningTimestamp\n          staleTimestamp\n          insightsId\n          lastScanned\n          updated\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_SYSTEMS_OSES = gql`\n  query ST_SystemOS($filter: String!) {\n    systems(search: $filter) {\n      osVersions\n    }\n  }\n`;\n\nexport const policyFilter = (policies, osFilter) => [\n  ...systemsPolicyFilterConfiguration(policies),\n  ...(osFilter ? systemsOsFilterConfiguration(policies) : []),\n];\n\nexport const osMinorVersionFilter = (...args) =>\n  systemsOsMinorFilterConfiguration(...args);\n\nexport const initFilterState = (filterConfig) =>\n  pickBy(filterConfig.initialDefaultState(), (value) => !!value);\n\nexport const defaultOnLoad =\n  (columns) =>\n  ({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n    getRegistry().register({\n      ...mergeWithEntities(entitiesReducer(INVENTORY_ACTION_TYPES, columns)),\n    });\n\nexport const ssgVersionFilter = (ssgVersions) => [\n  {\n    type: conditionalFilterType.checkbox,\n    label: 'SSG Version',\n    filterString: (value) => `ssg_version = ${value}`,\n    items: ssgVersions.map((ssgVersion) => ({\n      label: ssgVersion,\n      value: ssgVersion,\n    })),\n  },\n];\n","import * as ActionTypes from '../Types';\n\nexport const setDisabledSelection = (isDisabled) => {\n  return {\n    type: ActionTypes.SET_DISABLED_SYSTEM_SELECTION,\n    payload: isDisabled,\n  };\n};\n","import React, { useEffect, useLayoutEffect, useState } from 'react';\nimport { useApolloClient, useQuery } from '@apollo/client';\nimport { useDispatch } from 'react-redux';\nimport { Spinner } from '@patternfly/react-core';\nimport debounce from '@redhat-cloud-services/frontend-components-utilities/debounce';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport { osMinorVersionFilter, GET_SYSTEMS_OSES } from './constants';\nimport useExport from 'Utilities/hooks/useTableTools/useExport';\nimport { useBulkSelect } from 'Utilities/hooks/useTableTools/useBulkSelect';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\nimport usePromiseQueue from 'Utilities/hooks/usePromiseQueue';\nimport { setDisabledSelection } from '../../store/Actions/SystemActions';\n\nconst groupByMajorVersion = (versions = [], showFilter = []) => {\n  const showVersion = (version) => {\n    if (showFilter.length > 0) {\n      return showFilter.map(String).includes(String(version));\n    } else {\n      return true;\n    }\n  };\n\n  return versions.reduce((acc, currentValue) => {\n    if (showVersion(currentValue.major)) {\n      acc[String(currentValue.major)] = [\n        ...new Set([...(acc[currentValue.major] || []), currentValue.minor]),\n      ];\n    }\n\n    return acc;\n  }, []);\n};\n\nexport const useOsMinorVersionFilter = (showFilter, fetchArguments = {}) => {\n  let { data } = useQuery(GET_SYSTEMS_OSES, {\n    skip: !showFilter,\n    ...fetchArguments,\n  });\n  const { osVersions } = data?.systems || {};\n\n  return showFilter\n    ? osMinorVersionFilter(groupByMajorVersion(osVersions, showFilter))\n    : [];\n};\n\nexport const useSystemsFilter = (\n  filterString,\n  showOnlySystemsWithTestResults,\n  defaultFilter\n) => {\n  const combindedFilter = [\n    ...(showOnlySystemsWithTestResults ? ['has_test_results = true'] : []),\n    ...(filterString?.length > 0 ? [filterString] : []),\n  ].join(' and ');\n  const filter = defaultFilter\n    ? `(${defaultFilter})` +\n      (combindedFilter ? ` and (${combindedFilter})` : '')\n    : combindedFilter;\n\n  return filter;\n};\n\nconst renameInventoryAttributes = ({\n  culledTimestamp,\n  staleWarningTimestamp,\n  staleTimestamp,\n  insightsId,\n  ...system\n}) => ({\n  ...system,\n  insights_id: insightsId,\n  culled_timestamp: culledTimestamp,\n  stale_warning_timestamp: staleWarningTimestamp,\n  stale_timestamp: staleTimestamp,\n});\n\nexport const useFetchSystems = ({\n  query,\n  onComplete,\n  variables = {},\n  onError,\n}) => {\n  const client = useApolloClient();\n\n  return (perPage, page, requestVariables = {}) => {\n    let filter = variables.filter;\n\n    // additional filtering can be sent within requestVariables\n    if (\n      requestVariables.filter !== undefined &&\n      typeof requestVariables.filter === 'string'\n    ) {\n      variables.filter = [\n        ...filter.split(' and '),\n        ...requestVariables.filter.split(' and '),\n      ].join(' and ');\n    }\n\n    if (requestVariables.exclusiveFilter) {\n      const { exclusiveFilter, requestVariablesRest } = requestVariables;\n      requestVariables = {\n        ...requestVariablesRest,\n        filter: exclusiveFilter,\n      };\n    }\n\n    return client\n      .query({\n        query,\n        fetchResults: true,\n        fetchPolicy: 'no-cache',\n        variables: {\n          perPage,\n          page,\n          ...variables,\n          ...requestVariables,\n        },\n      })\n      .then(({ data }) => {\n        const systems = data?.systems?.edges?.map((e) => e.node) || [];\n        const entities = systemsWithRuleObjectsFailed(systems).map(\n          renameInventoryAttributes\n        );\n        const result = {\n          entities,\n          meta: {\n            ...(requestVariables.tags && { tags: requestVariables.tags }),\n            totalCount: data?.systems?.totalCount || 0,\n          },\n        };\n\n        onComplete && onComplete(result);\n        return result;\n      })\n      .catch((error) => {\n        if (onError) {\n          onError(error);\n          return { entities: [], meta: { totalCount: 0 } };\n        } else {\n          throw error;\n        }\n      });\n  };\n};\n\nconst useFetchBatched = () => {\n  const { isResolving: isLoading, resolve } = usePromiseQueue();\n\n  return {\n    isLoading,\n    fetchBatched: (fetchFunction, total, filter, batchSize = 50) => {\n      const pages = Math.ceil(total / batchSize) || 1;\n\n      const results = resolve(\n        [...new Array(pages)].map(\n          (_, pageIdx) => () => fetchFunction(batchSize, pageIdx + 1, filter)\n        )\n      );\n\n      return results;\n    },\n  };\n};\n\nconst buildApiFilters = (filters = {}) => {\n  const { tagFilters, hostGroupFilter, ...otherFilters } = filters;\n  const tagsApiFilter = tagFilters\n    ? {\n        tags: tagFilters.flatMap((tagFilter) =>\n          tagFilter.values.map(\n            (tag) =>\n              `${encodeURIComponent(tagFilter.key)}/${encodeURIComponent(\n                tag.tagKey\n              )}=${encodeURIComponent(tag.value)}`\n          )\n        ),\n      }\n    : {};\n\n  /**\n   * TODO: build a separate layer/hook that integrates inventory filters with gq filter\n   */\n\n  // filtering by group_name is enabled in gq filter\n  if (hostGroupFilter !== undefined && Array.isArray(hostGroupFilter)) {\n    otherFilters.filter = `(${hostGroupFilter\n      .map((value) => `group_name = \"${value}\"`)\n      .join(' or ')})`;\n  }\n\n  return {\n    ...otherFilters,\n    ...tagsApiFilter,\n  };\n};\n\nexport const useGetEntities = (fetchEntities, { selected, columns } = {}) => {\n  const appendDirection = (attributes, direction) =>\n    attributes.map((attribute) => `${attribute}:${direction}`);\n\n  const findColumnByKey = (key) =>\n    (columns || []).find((column) => column.key === key);\n\n  return async (\n    _ids,\n    { page = 1, per_page: perPage, orderBy, orderDirection, filters }\n  ) => {\n    const sortableColumn = findColumnByKey(orderBy);\n    const sortBy =\n      sortableColumn && sortableColumn.sortBy\n        ? appendDirection(sortableColumn.sortBy, orderDirection)\n        : undefined;\n    const filterForApi = buildApiFilters(filters);\n\n    const fetchedEntities = await fetchEntities(perPage, page, {\n      ...filterForApi,\n      sortBy,\n    });\n    const {\n      entities,\n      meta: { totalCount },\n    } = fetchedEntities || {};\n\n    return {\n      results: entities.map((entity) => ({\n        ...entity,\n        selected: (selected || []).map((id) => id).includes(entity.id),\n      })),\n      orderBy,\n      orderDirection,\n      total: totalCount,\n    };\n  };\n};\n\n// This hook is primarily meant to work around issues in the inventory\nexport const useInventoryUtilities = (\n  inventory,\n  selectedSystems,\n  activeFilters\n) => {\n  const dispatch = useDispatch();\n\n  // Resets the Inventory to a loading state\n  // and prevents previously shown columns and rows to appear\n  useLayoutEffect(() => {\n    dispatch({\n      type: 'INVENTORY_INIT',\n    });\n  }, []);\n\n  // Ensures rows are marked as selected\n  useEffect(() => {\n    dispatch({\n      type: 'SELECT_ENTITIES',\n      payload: {\n        selected: selectedSystems,\n      },\n    });\n  }, [selectedSystems]);\n\n  // Filters do not yet trigger the inventory to call getEntities\n  // and the page would not reset to page 1\n  const resetPage = () => {\n    Promise.resolve(\n      dispatch({\n        type: 'RESET_PAGE',\n      })\n    ).then(() => inventory?.current?.onRefreshData());\n  };\n\n  // The debounce is to not have filter updates collide or get out of order.\n  const debounceResetPage = debounce(resetPage, 50);\n\n  useEffect(() => {\n    debounceResetPage();\n  }, [activeFilters]);\n};\n\nconst toIdFilter = (ids) =>\n  ids?.length > 0 ? `id ^ (${ids.join(',')})` : undefined;\n\nexport const useSystemsExport = ({\n  columns,\n  selected,\n  total,\n  fetchArguments,\n}) => {\n  const { isLoading, fetchBatched } = useFetchBatched();\n  const selectionFilter = selected ? toIdFilter(selected) : undefined;\n  const fetchSystems = useFetchSystems({\n    query: fetchArguments.query,\n    variables: {\n      ...fetchArguments.variables,\n      ...(fetchArguments.tags && { tags: fetchArguments.tags }),\n      filter: selectionFilter\n        ? `${fetchArguments.variables.filter} and (${selectionFilter})`\n        : fetchArguments.variables.filter,\n    },\n    onError: () => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Couldn’t download export',\n        description: 'Reinitiate this export to try again.',\n      });\n    },\n  });\n\n  const selectedFilter = () =>\n    selected?.length > 0 ? toIdFilter(selected) : undefined;\n\n  const exporter = async () => {\n    const fetchedItems = await fetchBatched(\n      fetchSystems,\n      total,\n      selectedFilter()\n    );\n\n    return fetchedItems.flatMap((result) => result.entities);\n  };\n\n  const {\n    toolbarProps: { exportConfig },\n  } = useExport({\n    exporter,\n    columns,\n    isDisabled: total === 0 || isLoading,\n    onStart: () => {\n      dispatchNotification({\n        variant: 'info',\n        title: 'Preparing export',\n        description: 'Once complete, your download will start automatically.',\n      });\n    },\n    onComplete: () => {\n      dispatchNotification({\n        variant: 'success',\n        title: 'Downloading export',\n      });\n    },\n  });\n\n  return exportConfig;\n};\n\nexport const useSystemBulkSelect = ({\n  total,\n  onSelect,\n  preselected,\n  fetchArguments,\n  currentPageIds,\n}) => {\n  const dispatch = useDispatch();\n  const { isLoading, fetchBatched } = useFetchBatched();\n  // This is meant as a compatibility layer and to be removed\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const fetchSystems = useFetchSystems({\n    ...fetchArguments,\n    onError: (error) => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error selecting systems',\n        description: error.message,\n      });\n    },\n  });\n\n  const fetchFunc = async (fetchIds) => {\n    if (fetchIds.length === 0) {\n      return [];\n    }\n\n    const idFilter = toIdFilter(fetchIds);\n    const results = await fetchBatched(fetchSystems, fetchIds.length, {\n      ...(idFilter && { exclusiveFilter: idFilter }),\n    });\n\n    return results.flatMap((result) => result.entities);\n  };\n\n  const onSelectCallback = async (selectedIds) => {\n    dispatch(setDisabledSelection(true));\n\n    const systems = await fetchFunc(selectedIds);\n    setSelectedSystems(systems);\n\n    dispatch(setDisabledSelection(false));\n    onSelect && onSelect(systems);\n  };\n\n  const itemIdsInTable = async () => {\n    const results = await fetchBatched(fetchSystems, total);\n    return results.flatMap((result) => result.entities.map(({ id }) => id));\n  };\n\n  const bulkSelect = useBulkSelect({\n    total,\n    onSelect: onSelectCallback,\n    preselected,\n    itemIdsInTable,\n    itemIdsOnPage: () => currentPageIds,\n  });\n\n  return {\n    selectedSystems,\n    ...bulkSelect,\n    toolbarProps: {\n      ...bulkSelect.toolbarProps,\n      bulkSelect: {\n        ...bulkSelect.toolbarProps.bulkSelect,\n        ...(isLoading\n          ? {\n              isDisabled: true,\n              toggleProps: {\n                children: [<Spinner size=\"md\" key=\"spinner\" />],\n              },\n            }\n          : {}),\n      },\n    },\n  };\n};\n","import React, { useMemo, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Spinner } from '@patternfly/react-core';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport useNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\n\nimport RemediationButton from '@/PresentationalComponents/ComplianceRemediationButton/RemediationButton';\nimport {\n  DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n  COMPLIANT_SYSTEMS_FILTER_CONFIGURATION,\n} from '@/constants';\nimport { ErrorPage, StateView, StateViewPart } from 'PresentationalComponents';\nimport useFilterConfig from 'Utilities/hooks/useTableTools/useFilterConfig';\nimport { policyFilter, defaultOnLoad, ssgVersionFilter } from './constants';\nimport {\n  useFetchSystems,\n  useGetEntities,\n  useOsMinorVersionFilter,\n  useInventoryUtilities,\n  useSystemsExport,\n  useSystemsFilter,\n  useSystemBulkSelect,\n} from './hooks';\nimport { constructQuery } from '../../Utilities/helpers';\nimport { COMPLIANCE_REPORT_TABLE_ADDITIONAL_FILTER } from '../../constants';\n\nexport const SystemsTable = ({\n  columns,\n  showAllSystems,\n  policyId,\n  showActions,\n  enableExport,\n  compliantFilter,\n  policies,\n  showOnlySystemsWithTestResults,\n  showOsFilter,\n  error,\n  showComplianceSystemsInfo,\n  compact,\n  remediationsEnabled,\n  systemProps,\n  defaultFilter,\n  emptyStateComponent,\n  prependComponent,\n  showOsMinorVersionFilter,\n  preselectedSystems,\n  onSelect: onSelectProp,\n  noSystemsTable,\n  tableProps,\n  ssgVersions,\n  dedicatedAction,\n  ruleSeverityFilter,\n  showGroupsFilter,\n}) => {\n  const inventory = useRef(null);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [perPage, setPerPage] = useState(50);\n  const [currentTags, setCurrentTags] = useState([]);\n  const navigateToInventory = useNavigate('inventory');\n  const osMinorVersionFilter = useOsMinorVersionFilter(\n    showOsMinorVersionFilter,\n    {\n      variables: {\n        filter: defaultFilter,\n        ...(policyId && { policyId }),\n      },\n    }\n  );\n\n  const {\n    toolbarProps: conditionalFilter,\n    filterString,\n    activeFilterValues,\n  } = useFilterConfig({\n    filters: {\n      filterConfig: [\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(policies?.length > 0 ? policyFilter(policies, showOsFilter) : []),\n        ...(ssgVersions ? ssgVersionFilter(ssgVersions) : []),\n        ...osMinorVersionFilter,\n        ...(ruleSeverityFilter\n          ? COMPLIANCE_REPORT_TABLE_ADDITIONAL_FILTER\n          : []),\n      ],\n    },\n  });\n  const systemsFilter = useSystemsFilter(\n    filterString(),\n    showOnlySystemsWithTestResults,\n    defaultFilter\n  );\n\n  const constructedQuery = useMemo(() => constructQuery(columns), [columns]);\n\n  const systemFetchArguments = useMemo(\n    () => ({\n      query: constructedQuery.query,\n      variables: {\n        ...constructedQuery.fragments,\n        tags: currentTags,\n        filter: systemsFilter,\n        ...(policyId && { policyId }),\n      },\n    }),\n    [constructedQuery, currentTags, systemsFilter, policyId]\n  );\n\n  const preselection = useMemo(\n    () => preselectedSystems.map(({ id }) => id),\n    [preselectedSystems]\n  );\n\n  const {\n    selectedIds,\n    tableProps: bulkSelectTableProps,\n    toolbarProps: bulkSelectToolBarProps,\n  } = useSystemBulkSelect({\n    total,\n    perPage,\n    onSelect: onSelectProp,\n    preselected: preselection,\n    fetchArguments: systemFetchArguments,\n    currentPageIds: items.map(({ id }) => id),\n  });\n\n  useInventoryUtilities(inventory, selectedIds, activeFilterValues);\n\n  const onComplete = (result) => {\n    setTotal(result.meta.totalCount);\n    setItems(result.entities);\n    setPerPage(result.perPage);\n    setIsLoaded(true);\n    setCurrentTags && setCurrentTags(result.meta.tags);\n\n    if (\n      emptyStateComponent &&\n      result.meta.totalCount === 0 &&\n      activeFilterValues.length === 0 &&\n      (typeof result?.meta?.tags === 'undefined' ||\n        result?.meta?.tags?.length === 0)\n    ) {\n      setIsEmpty(true);\n    }\n  };\n\n  const fetchSystems = useFetchSystems({\n    ...systemFetchArguments,\n    onComplete,\n  });\n  const getEntities = useGetEntities(fetchSystems, {\n    selected: selectedIds,\n    columns,\n  });\n  const exportConfig = useSystemsExport({\n    columns,\n    filter: systemsFilter,\n    selected: selectedIds,\n    total,\n    fetchArguments: {\n      ...systemFetchArguments,\n    },\n  });\n\n  const mergedColumns = (defaultColumns) =>\n    columns.reduce((prev, column) => {\n      const isStringCol = typeof column === 'string';\n      const key = isStringCol ? column : column.key;\n      const defaultColumn = defaultColumns.find(\n        (defaultCol) => defaultCol.key === key\n      );\n\n      if (defaultColumn === undefined && column?.requiresDefault === true) {\n        return prev; // exclude if not found in inventory\n      } else {\n        return [\n          ...prev,\n          {\n            ...defaultColumn,\n            ...(isStringCol ? { key: column } : column),\n            props: {\n              ...defaultColumn?.props,\n              ...column?.props,\n            },\n          },\n        ];\n      }\n    }, []);\n\n  return (\n    <StateView\n      stateValues={{\n        error,\n        noError: error === undefined && !isEmpty,\n        empty: isEmpty,\n      }}\n    >\n      <StateViewPart stateKey=\"error\">\n        {!!prependComponent && prependComponent}\n        <ErrorPage error={error} />\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">{emptyStateComponent}</StateViewPart>\n      <StateViewPart stateKey=\"noError\">\n        {!!prependComponent && isLoaded && prependComponent}\n        {showComplianceSystemsInfo && (\n          <Alert\n            isInline\n            variant=\"info\"\n            ouiaId=\"SystemsListIsDifferentAlert\"\n            title={\n              'The list of systems in this view is different than those that appear in the Inventory. ' +\n              'Only systems currently associated with or reporting against compliance policies are displayed.'\n            }\n          />\n        )}\n        <InventoryTable\n          {...systemProps}\n          disableDefaultColumns\n          columns={mergedColumns}\n          noSystemsTable={noSystemsTable}\n          ref={inventory}\n          getEntities={getEntities}\n          hideFilters={{\n            all: true,\n            tags: false,\n            hostGroupFilter: !showGroupsFilter,\n          }}\n          showTags\n          onLoad={defaultOnLoad(columns)}\n          tableProps={{\n            ...bulkSelectTableProps,\n            isStickyHeader: true,\n            ...tableProps,\n          }}\n          fallback={<Spinner />}\n          variant={compact ? TableVariant.compact : ''}\n          {...bulkSelectToolBarProps}\n          {...(!showAllSystems && {\n            ...conditionalFilter,\n            ...(remediationsEnabled && {\n              dedicatedAction: (\n                <RemediationButton policyId={policyId} systems={selectedIds} />\n              ),\n            }),\n          })}\n          {...(dedicatedAction ? { dedicatedAction: dedicatedAction } : {})}\n          {...(enableExport && { exportConfig })}\n          {...(showActions && {\n            actions: [\n              {\n                title: 'View in inventory',\n                onClick: (_event, _index, { id }) =>\n                  navigateToInventory('/' + id),\n              },\n            ],\n          })}\n        />\n      </StateViewPart>\n    </StateView>\n  );\n};\n\nSystemsTable.propTypes = {\n  columns: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.shape({}), PropTypes.string])\n  ),\n  policies: PropTypes.arrayOf(PropTypes.shape({})),\n  showAllSystems: PropTypes.bool,\n  policyId: PropTypes.string,\n  query: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  showActions: PropTypes.bool,\n  enableExport: PropTypes.bool,\n  compliantFilter: PropTypes.bool,\n  showOnlySystemsWithTestResults: PropTypes.bool,\n  showOsFilter: PropTypes.bool,\n  showGroupsFilter: PropTypes.bool,\n  showComplianceSystemsInfo: PropTypes.bool,\n  error: PropTypes.object,\n  compact: PropTypes.bool,\n  remediationsEnabled: PropTypes.bool,\n  defaultFilter: PropTypes.string,\n  systemProps: PropTypes.shape({\n    isFullView: PropTypes.bool,\n  }),\n  emptyStateComponent: PropTypes.node,\n  prependComponent: PropTypes.node,\n  showOsMinorVersionFilter: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  preselectedSystems: PropTypes.array,\n  onSelect: PropTypes.func,\n  noSystemsTable: PropTypes.node,\n  tableProps: PropTypes.object,\n  ssgVersions: PropTypes.array,\n  dedicatedAction: PropTypes.object,\n  ruleSeverityFilter: PropTypes.bool,\n};\n\nSystemsTable.defaultProps = {\n  policyId: '',\n  showActions: true,\n  enableExport: true,\n  compliantFilter: false,\n  showOnlySystemsWithTestResults: false,\n  showComplianceSystemsInfo: false,\n  compact: false,\n  remediationsEnabled: true,\n  preselectedSystems: [],\n  ruleSeverityFilter: false,\n  showGroupsFilter: false,\n};\n\nexport default SystemsTable;\n","import gql from 'graphql-tag';\n\nexport const POLICY_QUERY_MINIMAL = gql`\n  query PQ_ProfileMinimal($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      external\n      description\n      totalHostCount\n      compliantHostCount\n      complianceThreshold\n      osMajorVersion\n      supportedOsVersions\n      lastScanned\n      policyType\n      businessObjective {\n        id\n        title\n      }\n    }\n  }\n`;\n\nexport const POLICY_QUERY = gql`\n  query PQ_Profile($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      external\n      description\n      totalHostCount\n      compliantHostCount\n      complianceThreshold\n      osMajorVersion\n      supportedOsVersions\n      lastScanned\n      policyType\n      policy {\n        id\n        name\n        refId\n        profiles {\n          id\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          parentProfileId\n          benchmark {\n            id\n            title\n            latestSupportedOsMinorVersions\n            osMajorVersion\n            version\n            profiles {\n              id\n              refId\n              ssgVersion\n            }\n          }\n          rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            references\n            identifier\n            precedence\n            values\n          }\n        }\n      }\n      businessObjective {\n        id\n        title\n      }\n      hosts {\n        id\n        osMinorVersion\n        osMajorVersion\n      }\n    }\n  }\n`;\n\nexport const POLICY_RULE_TREES_QUERY = gql`\n  query PQ_Profile($policyId: String!) {\n    profile(id: $policyId) {\n      policy {\n        profiles {\n          id\n          benchmark {\n            ruleTree\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const POLICY_VALUE_DEFINITONS_QUERY = gql`\n  query PQ_Profile($policyId: String!) {\n    profile(id: $policyId) {\n      policy {\n        profiles {\n          id\n          values\n          benchmark {\n            valueDefinitions {\n              id\n              refId\n              title\n              valueType\n              defaultValue\n              description\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { useMemo, useCallback } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { logMultipleErrors } from 'Utilities/helpers';\nimport {\n  POLICY_QUERY,\n  POLICY_QUERY_MINIMAL,\n  POLICY_RULE_TREES_QUERY,\n  POLICY_VALUE_DEFINITONS_QUERY,\n} from './constants';\nimport { compileData } from './helpers';\n\nconst usePolicyQuery = ({ policyId, skip: skipCondition, minimal }) => {\n  const skip = policyId === 'new' || skipCondition;\n\n  const {\n    data: policyData,\n    error: policyError,\n    loading: policyLoading,\n    refetch: refecthPolicy,\n  } = useQuery(minimal ? POLICY_QUERY_MINIMAL : POLICY_QUERY, {\n    variables: { policyId },\n    skip,\n    fetchPolicy: 'no-cache',\n  });\n\n  const {\n    data: ruleTreesData,\n    error: ruleTreesError,\n    loading: ruleTreesLoading,\n    refetch: refecthRuleTrees,\n  } = useQuery(POLICY_RULE_TREES_QUERY, {\n    variables: { policyId },\n    skip: minimal || skip,\n    fetchPolicy: 'no-cache',\n  });\n\n  const {\n    data: valueDefinitionsData,\n    error: valueDefinitionsError,\n    loading: valueDefinitionsLoading,\n    refetch: refecthValueDefinitions,\n  } = useQuery(POLICY_VALUE_DEFINITONS_QUERY, {\n    variables: { policyId },\n    skip: minimal || skip,\n    fetchPolicy: 'no-cache',\n  });\n\n  const data = useMemo(\n    () => compileData(policyData, ruleTreesData, valueDefinitionsData),\n    [policyData, ruleTreesData, valueDefinitionsData]\n  );\n\n  const error = useMemo(\n    () => logMultipleErrors(policyError, ruleTreesError, valueDefinitionsError),\n    [policyError, ruleTreesError, valueDefinitionsError]\n  );\n\n  const loading = policyLoading || ruleTreesLoading || valueDefinitionsLoading;\n\n  const refetch = useCallback(() => {\n    if (!skip) {\n      refecthPolicy();\n      refecthRuleTrees();\n      refecthValueDefinitions();\n    }\n  }, [refecthPolicy, refecthRuleTrees, refecthValueDefinitions]);\n\n  return policyId === 'new'\n    ? { data: true, refetch: () => {} }\n    : {\n        data,\n        error,\n        loading,\n        refetch,\n      };\n};\n\nexport default usePolicyQuery;\n","export const compileData = (policyData, ruleTreesData, valueDefinitionsData) =>\n  policyData && {\n    profile: {\n      ...policyData.profile,\n      policy: {\n        ...(policyData?.profile?.policy || {}),\n        profiles:\n          policyData?.profile?.policy?.profiles?.map((profile) => {\n            const ruleTree =\n              ruleTreesData?.profile?.policy?.profiles?.find(\n                ({ id }) => id === profile.id\n              )?.benchmark.ruleTree || {};\n\n            const valueDefinitions =\n              valueDefinitionsData?.profile?.policy?.profiles?.find(\n                ({ id }) => id === profile.id\n              )?.benchmark.valueDefinitions || [];\n\n            const values =\n              valueDefinitionsData?.profile?.policy?.profiles?.find(\n                ({ id }) => id === profile.id\n              )?.values;\n\n            return {\n              ...profile,\n              values,\n              benchmark: {\n                ...profile.benchmark,\n                ruleTree,\n                valueDefinitions,\n              },\n            };\n          }) || [],\n      },\n    },\n  };\n","import { useCallback, useState } from 'react';\nimport pAll from 'p-all';\n\nconst DEFAULT_CONCURRENT_PROMISES = 2;\n\nconst usePromiseQueue = (limit = DEFAULT_CONCURRENT_PROMISES) => {\n  const [isResolving, setIsResolving] = useState(false);\n  const [promiseResults, setPromiseResults] = useState();\n\n  const resolve = useCallback(\n    async (fns) => {\n      await setPromiseResults(undefined);\n      await setIsResolving(true);\n      const results = await pAll(fns, {\n        concurrency: limit,\n      });\n\n      await setIsResolving(false);\n      await setPromiseResults(results);\n\n      return results;\n    },\n    [limit]\n  );\n\n  return {\n    isResolving,\n    results: promiseResults,\n    resolve,\n  };\n};\n\nexport default usePromiseQueue;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { sortingByProp } from 'Utilities/helpers';\nimport * as ActionTypes from '../Types';\n\nconst selectRows = (rows, selected) =>\n  rows.map((row) => ({\n    ...row,\n    selected: selected.includes(row.id),\n  }));\n\nexport const entitiesReducer = () =>\n  applyReducerHash({\n    ['INVENTORY_INIT']: () => ({\n      rows: [],\n      total: 0,\n    }),\n    ['RESET_PAGE']: (state) => ({\n      ...state,\n      page: 1,\n    }),\n    ['SELECT_ENTITIES']: (state, { payload: { selected } }) => ({\n      ...state,\n      rows: selectRows(state.rows, selected),\n    }),\n    [ActionTypes.SET_DISABLED_SYSTEM_SELECTION]: (state, action) => {\n      return {\n        ...state,\n        rows: state.rows.map((row) => {\n          return {\n            ...row,\n            disableSelection: action.payload,\n          };\n        }),\n      };\n    },\n  });\n\nexport const mapCountOsMinorVersions = (systems) => {\n  if (!systems) {\n    return {};\n  }\n\n  return systems.reduce((acc, { osMinorVersion }) => {\n    if (osMinorVersion !== undefined && osMinorVersion !== null) {\n      (acc[osMinorVersion] = acc[osMinorVersion] || {\n        osMinorVersion,\n        count: 0,\n      }).count++;\n    }\n\n    return acc;\n  }, {});\n};\n\nexport const countOsMinorVersions = (systems) =>\n  Object.values(mapCountOsMinorVersions(systems)).sort(\n    sortingByProp('osMinorVersion', 'desc')\n  );\n","export const SET_DISABLED_SYSTEM_SELECTION = 'SET_DISABLED_SYSTEM_SELECTION';\n"],"names":["QUERY","gql","_templateObject","_taggedTemplateLiteral","ComplianceSystems","_data$profiles","_useQuery","useQuery","data","error","loading","policies","profiles","edges","map","_ref","node","React","PageHeader","className","PageHeaderTitle","title","StateViewWithError","stateValues","StateViewPart","stateKey","SystemsTable","columns","Columns","showLink","requiresDefault","props","isStatic","transforms","nowrap","defaultFilter","systemProps","isFullView","showOsMinorVersionFilter","policy","osMajorVersion","showComplianceSystemsInfo","enableEditPolicy","remediationsEnabled","showGroupsFilter","PolicyTypeDetailsRow","description","item","key","Text","style","margin","propTypes","NameCell","name","disabled","InUseProfileLabel","compact","PolicyTypeTable","_ref2","onChange","selectedProfile","info","tooltip","sortByProp","renderFunc","renderComponent","fitContent","_data","_id","profile","supportedOsVersions","join","TableToolsTable","items","_objectSpread","rowProps","selected","id","disableSelection","filters","filterConfig","type","conditionalFilterType","text","label","filter","policyTypes","value","policyType","toLowerCase","includes","options","detailsComponent","onRadioSelect","_event","_value","_rowIdx","_ref3","itemId","find","_ref4","sortBy","index","direction","property","emptyRows","length","variant","Tooltip","position","content","OutlinedQuestionCircleIcon","SUPPORTED_PROFILES","CreateSCAPPolicy","_data$osMajorVersions","change","selectedOsMajorVersion","fetchPolicy","osMajorVersions","selectedOsMajorVersionObject","profilesToSelect","profileRefId","refId","benchmarkRedId","benchmark","Spinner","TextContent","component","TextVariants","h1","Form","FormGroup","isRequired","fieldId","_ref5","Tile","concat","onClick","isSelected","isStacked","labelIcon","PolicyTypeTooltip","PolicyTypesTable","undefined","reduxFormPropTypes","selector","formValueSelector","compose","connect","state","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","BENCHMARKS_QUERY","BENCHMARKS_RULES_TREES_QUERY","_templateObject2","BENCHMARKS_VALUE_DEFINITIONS_QUERY","_templateObject3","PROFILES_QUERY","_templateObject4","EditPolicyProfilesRules","_benchmarksData$bench","selectedRuleRefIds","osMinorVersionCounts","ruleValues","_useBenchmarksQuery","osMinorVersions","variables","skip","benchmarksData","benchmarksError","benchmarksLoading","refetchProfiles","refetch","_useQuery2","ruleTreesData","ruleTreesError","ruleTreesLoading","refecthRuleTrees","_useQuery3","valueDefinitionsData","valueDefinitionsError","valueDefinitionsLoading","refecthValueDefinitions","useMemo","benchmarks","nodes","_ruleTreesData$benchm","_valueDefinitionsData","ruleTree","valueDefinitions","compileData","logMultipleErrors","useCallback","useBenchmarksQuery","i","osMinorVersion","sort","tabsData","systemCount","count","_benchmark$latestSupp","latestSupportedOsMinorVersions","getBenchmarkBySupportedOsMinor","benchmarkProfile","getBenchmarkProfile","newOsMinorVersion","profileToOsMinorMap","tabsDataToOsMinorMap","profileIds","Object","keys","profilesData","profilesError","profilesLoading","dataState","loadingState","noRuleSets","p","setSelectedRuleRefIds","newSelection","useLayoutEffect","profilesWithOs","extendProfilesByOsMinor","profilesWithRulesToSelection","only","JSON","stringify","EmptyState","Title","headingLevel","size","EmptyStateBody","EmptyTable","TabbedRules","setRuleValues","policyId","valueDefinition","valueValue","newRuleValues","_defineProperty","selectedFilter","level","ouiaId","resetLink","rulesPageLink","WizardContextConsumer","goToStepById","Button","PrependComponent","EditPolicySystems","selectedSystems","version","split","prependComponent","emptyStateComponent","width","showActions","enableExport","preselectedSystems","onSelect","newSelectedSystems","countOsMinorVersions","defaultProps","EditPolicyDetails","useEffect","Field","ReduxFormTextInput","isDisabled","ReduxFormTextArea","PolicyBusinessObjectiveTooltip","defaultValue","businessObjective","ProfileThresholdField","previousThreshold","initialValues","ReviewCreatedPolicy","complianceThreshold","parentProfileName","h3","marginTop","TextList","TextListVariants","dl","TextListItem","TextListItemVariants","dt","dd","fontWeight","Label","color","isCompact","benchmarkId","parseFloat","rulesCount","EmtpyStateWithErrors","errors","Array","isArray","List","ListItem","FinishedCreatePolicy","onWizardFinish","cloneFromProfileId","systems","values","_useState","useState","_useState2","_slicedToArray","percent","setPercent","_useState3","_useState4","message","setMessage","_useState5","_useState6","setErrors","_useState7","_useState8","failed","setFailed","updatePolicy","usePolicy","onProgress","progress","hosts","then","dispatchNotification","autoDismiss","Link","to","catch","_error$networkError","_error$networkError2","networkError","result","Bullseye","EmptyStateVariant","full","EmptyStateIcon","icon","WrenchIcon","ProgressBar","EmptyStateSecondaryActions","withApollo","CreatePolicyForm","systemIds","reset","navigate","useNavigate","stepIdReached","setStepIdReached","resetAnchor","location","history","hash","push","onClose","steps","enableNext","validateBenchmarkPage","canJumpTo","validateDetailsPage","validateSystemsPage","EditPolicyRules","validateRulesPage","nextButtonText","isFinishedStep","Wizard","isOpen","onNext","onGoToStep","onBack","dispatch","CreatePolicy","DeletePolicy","deleteEnabled","setDeleteEnabled","useParams","policy_id","_usePolicyQuery","usePolicyQuery","minimal","_ref$profile","_useMutation","useMutation","DELETE_PROFILE","onCompleted","dispatchAction","addNotification","onError","deletePolicy","ComplianceModal","ModalVariant","small","titleIconVariant","actions","input","Checkbox","isChecked","DeleteReport","report_id","DELETE_REPORT","deleteReport","profileId","isModalOpen","onDelete","EditPolicyRulesTabEmptyState","EditPolicyRulesTab","ruleValuesProp","benchmarkSearch","sortingByProp","parentProfileId","toTabsData","prevSelection","empty","_policy$policy","mergeValues","fromEntries","setNewRuleTabs","EditPolicySystemsTab","onSystemSelect","osFilter","console","log","newRuleTabs","useLocation","Alert","isInline","actionLinks","AlertActionLink","EditPolicyForm","setUpdatedPolicy","setSelectedSystems","policyProfiles","setOsMinorVersionCounts","_useNewRulesAlertStat","apply","arguments","useNewRulesAlertState","_useNewRulesAlertStat2","newRulesAlert","setNewRulesAlert","handleSystemSelect","policyMinorVersions","hasNewOsMinorVersions","reduce","acc","_profile$osMinorVersi","mapCountOsMinorVersions","complianceThresholdValid","thresholdValid","profilesWithOsMinor","RoutedTabs","defaultTab","Tab","eventKey","TabTitleText","NewRulesAlert","updatedPolicy","EditPolicy","route","setRuleValuesState","saveEnabled","updatedPolicyHostsAndRules","onSaveCallback","_location$state","returnTo","_useOnSave","useOnSave","onSave","_useOnSave2","isSaving","spinnerAriaValueText","isLoading","useTitleEntity","minHeight","existingValues","currentValues","SystemLink","children","pathname","Name","_ref2$showOsInfo","showOsInfo","_ref2$showLink","hasOsInfo","SSGVersion","_ref3$ssgVersion","ssgVersion","supported","UnsupportedSSGVersion","messageVariant","SSGVersions","_ref4$testResultProfi","testResultProfiles","_profile$benchmark","Policies","Truncate","inline","FailedRules","_ref6","rulesFailed","_ref7","parseInt","ComplianceScore","_ref8","_ref9","score","compliant","PresentationalComplianceScore","NeverScanned","Fragment","ExclamationTriangleIcon","NEVER","lastScanned","dates","Date","last","Math","max","date","isFinite","LastScanned","_ref10","lastScannedDate","DateFormat","parse","operatingSystemString","_ref11","OperatingSystem","system","disableSorting","compileColumnRenderFunc","cell","column","_objectWithoutProperties","_excluded","renderExport","customName","SsgVersion","exportKey","SsgVersionCell","PoliciesCell","failedRules","FailedRulesCell","complianceScoreString","complianceScoreData","trim","ComplianceScoreCell","LastScannedCell","OperatingSystemCell","OS","original","dataLabel","inventoryColumn","InventoryDetails","inventoryId","DetailWrapper","onLoad","mergeWithDetail","init","register","InventoryDetailHead","fallback","Skeleton","SkeletonSize","md","GET_SYSTEMS_ISSUES","RemediationButton","rules","buttonProps","onRemediationCreated","_useIssuesFetch","client","useApolloClient","_usePromiseQueue","usePromiseQueue","isResolving","results","resolve","fetchFunction","_asyncToGenerator","_regeneratorRuntime","_callee","perPage","page","_context","prev","next","query","abrupt","sent","stop","_x","_x2","fetch","_callee2","batchSize","pages","_args2","_context2","ceil","_toConsumableArray","_","pageIdx","remediationData","useIssuesFetch","isLoadingIssues","RemediationRemediationButton","_extends","getNotification","dataProvider","FallbackButton","GET_SYSTEMS_OSES","policyFilter","systemsPolicyFilterConfiguration","systemsOsFilterConfiguration","defaultOnLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","getRegistry","entitiesReducer","ssgVersionFilter","ssgVersions","checkbox","filterString","setDisabledSelection","ActionTypes","payload","useOsMinorVersionFilter","showFilter","fetchArguments","osVersions","systemsOsMinorFilterConfiguration","osMinorVersionFilter","currentValue","major","String","Set","minor","groupByMajorVersion","renameInventoryAttributes","culledTimestamp","staleWarningTimestamp","staleTimestamp","insightsId","insights_id","culled_timestamp","stale_warning_timestamp","stale_timestamp","useFetchSystems","onComplete","_ref3$variables","requestVariables","exclusiveFilter","_requestVariables","requestVariablesRest","fetchResults","_data$systems","_data$systems2","e","entities","systemsWithRuleObjectsFailed","meta","tags","totalCount","useFetchBatched","fetchBatched","total","buildApiFilters","tagFilters","hostGroupFilter","otherFilters","_excluded2","tagsApiFilter","flatMap","tagFilter","tag","encodeURIComponent","tagKey","toIdFilter","ids","showAllSystems","compliantFilter","showOnlySystemsWithTestResults","showOsFilter","onSelectProp","noSystemsTable","tableProps","dedicatedAction","ruleSeverityFilter","inventory","useRef","isEmpty","setIsEmpty","isLoaded","setIsLoaded","setItems","setTotal","_useState9","_useState10","setPerPage","_useState11","_useState12","currentTags","setCurrentTags","navigateToInventory","_useFilterConfig","useFilterConfig","DEFAULT_SYSTEMS_FILTER_CONFIGURATION","COMPLIANT_SYSTEMS_FILTER_CONFIGURATION","COMPLIANCE_REPORT_TABLE_ADDITIONAL_FILTER","conditionalFilter","toolbarProps","activeFilterValues","systemsFilter","combindedFilter","useSystemsFilter","constructedQuery","constructQuery","systemFetchArguments","fragments","_useSystemBulkSelect","preselected","currentPageIds","useDispatch","_useFetchBatched2","fetchSystems","fetchFunc","_ref12","_callee3","fetchIds","idFilter","_context3","_x3","onSelectCallback","_ref13","_callee4","selectedIds","_context4","_x4","itemIdsInTable","_ref14","_callee5","_context5","_ref15","bulkSelect","useBulkSelect","itemIdsOnPage","toggleProps","useSystemBulkSelect","bulkSelectTableProps","bulkSelectToolBarProps","activeFilters","debounceResetPage","debounce","Promise","_inventory$current","current","onRefreshData","useInventoryUtilities","getEntities","fetchEntities","appendDirection","attributes","attribute","findColumnByKey","_ids","_ref6$page","orderBy","orderDirection","sortableColumn","filterForApi","fetchedEntities","per_page","entity","useGetEntities","_result$meta","_result$meta2","exportConfig","_useFetchBatched","selectionFilter","exporter","fetchedItems","useExport","onStart","useSystemsExport","StateView","noError","ErrorPage","InventoryTable","disableDefaultColumns","defaultColumns","isStringCol","defaultColumn","defaultCol","ref","hideFilters","all","showTags","isStickyHeader","TableVariant","_index","PropTypes","POLICY_QUERY_MINIMAL","POLICY_QUERY","POLICY_RULE_TREES_QUERY","POLICY_VALUE_DEFINITONS_QUERY","skipCondition","policyData","policyError","policyLoading","refecthPolicy","_policyData$profile","_policyData$profile2","_ruleTreesData$profil","_valueDefinitionsData2","limit","setIsResolving","promiseResults","setPromiseResults","fns","pAll","concurrency","selectRows","rows","row","_applyReducerHash","applyReducerHash","action","SET_DISABLED_SYSTEM_SELECTION"],"sourceRoot":""}