{"version":3,"sources":["webpack:///./src/SmartComponents/Reports/Reports.js"],"names":["QUERY","gql","ReportsHeader","title","Reports","profiles","showView","location","useLocation","useQuery","variables","filter","data","error","loading","refetch","useEffect","undefined","edges","map","profile","node","profilesFromEdges","length","stateValues","stateKey","colSize","rowSize"],"mappings":"6RAgBMA,GAAQC,QAAH,yvBA0CLC,EAAgB,kBACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAiBC,MAAM,cAIdC,EAAU,WACrB,IAAIC,EAAW,GACXC,GAAW,EACTC,GAAWC,mBAGjB,GAAwCC,cAAST,EAAO,CACtDU,UAAW,CAAEC,OAHA,yDAETC,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,MAAOC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,QAe5B,OAXAC,gBAAU,WACRD,MACC,CAACR,EAAUQ,IAEVH,IAEFC,OAAQI,EACRH,OAAUG,EACVX,GAHAD,EAxBsB,SAACO,GAAD,cACvBA,SAAA,UAAAA,EAAMP,gBAAN,eAAgBa,QAAS,IAAIC,KAAI,SAACC,GAAD,OAAaA,EAAQC,QAuB1CC,CAAkBV,KAGNP,EAASkB,OAAS,GAIzC,kBAAC,KAAD,CAAoBC,YAAa,CAAEX,QAAOD,OAAME,YAC9C,kBAAC,KAAD,CAAeW,SAAS,WACtB,kBAACvB,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAewB,QAAS,EAAGC,QAAS,OAGxC,kBAAC,KAAD,CAAeF,SAAS,QACtB,kBAACvB,EAAD,MACA,kBAAC,IAAD,KACGI,EACC,kBAAC,KAAD,CAAoBD,aAEpB,kBAAC,KAAD,UAQZ","file":"js/Reports.d39c9397e462b9412688.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport {\n  ReportsTable,\n  StateViewPart,\n  StateViewWithError,\n  ReportsEmptyState,\n} from 'PresentationalComponents';\n\nconst QUERY = gql`\n  query Profiles($filter: String!) {\n    profiles(search: $filter, limit: 1000) {\n      edges {\n        node {\n          id\n          name\n          refId\n          description\n          policyType\n          totalHostCount\n          testResultHostCount\n          compliantHostCount\n          unsupportedHostCount\n          majorOsVersion\n          ssgVersion\n          complianceThreshold\n          businessObjective {\n            id\n            title\n          }\n          policy {\n            id\n            name\n            benchmark {\n              id\n              version\n            }\n          }\n          benchmark {\n            id\n            version\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst profilesFromEdges = (data) =>\n  (data?.profiles?.edges || []).map((profile) => profile.node);\n\nconst ReportsHeader = () => (\n  <PageHeader>\n    <PageHeaderTitle title=\"Reports\" />\n  </PageHeader>\n);\n\nexport const Reports = () => {\n  let profiles = [];\n  let showView = false;\n  const location = useLocation();\n  const filter = `has_policy_test_results = true AND external = false`;\n\n  let { data, error, loading, refetch } = useQuery(QUERY, {\n    variables: { filter },\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [location, refetch]);\n\n  if (data) {\n    profiles = profilesFromEdges(data);\n    error = undefined;\n    loading = undefined;\n    showView = profiles && profiles.length > 0;\n  }\n\n  return (\n    <StateViewWithError stateValues={{ error, data, loading }}>\n      <StateViewPart stateKey=\"loading\">\n        <ReportsHeader />\n        <Main>\n          <SkeletonTable colSize={3} rowSize={10} />\n        </Main>\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <ReportsHeader />\n        <Main>\n          {showView ? (\n            <ReportsTable {...{ profiles }} />\n          ) : (\n            <ReportsEmptyState />\n          )}\n        </Main>\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nexport default Reports;\n"],"sourceRoot":""}