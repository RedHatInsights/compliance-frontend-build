{"version":3,"file":"js/DeletePolicy.0e42cb523ac150566138.js","mappings":"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","sources":["webpack:///./src/SmartComponents/DeletePolicy/DeletePolicy.js","webpack:///./src/Utilities/hooks/usePolicyQuery/constants.js","webpack:///./src/Utilities/hooks/usePolicyQuery/usePolicyQuery.js","webpack:///./src/Utilities/hooks/usePolicyQuery/helpers.js"],"sourcesContent":["import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport {\n  Button,\n  Checkbox,\n  ModalVariant,\n  Text,\n  Spinner,\n} from '@patternfly/react-core';\nimport useNavigate from '@redhat-cloud-services/frontend-components-utilities/useInsightsNavigate';\nimport { DELETE_PROFILE } from 'Mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport {\n  ComplianceModal,\n  StateViewWithError,\n  StateViewPart,\n} from 'PresentationalComponents';\nimport { dispatchAction } from 'Utilities/Dispatcher';\nimport usePolicyQuery from 'Utilities/hooks/usePolicyQuery';\n\nconst DeletePolicy = () => {\n  const [deleteEnabled, setDeleteEnabled] = useState(false);\n  const navigate = useNavigate();\n  const { policy_id: policyId } = useParams();\n  const { data, error, loading } = usePolicyQuery({\n    policyId,\n    minimal: true,\n  });\n  const {\n    profile: { name, id },\n  } = data || { profile: {} };\n  const onClose = () => {\n    navigate('/scappolicies');\n  };\n\n  const [deletePolicy] = useMutation(DELETE_PROFILE, {\n    onCompleted: () => {\n      dispatchAction(\n        addNotification({\n          variant: 'success',\n          title: `Deleted \"${name}\" and its associated reports`,\n        })\n      );\n      onClose();\n    },\n    onError: (error) => {\n      dispatchAction(\n        addNotification({\n          variant: 'danger',\n          title: 'Error removing policy',\n          description: error.message,\n        })\n      );\n      onClose();\n    },\n  });\n\n  return (\n    <ComplianceModal\n      variant={ModalVariant.small}\n      title=\"Delete policy?\"\n      titleIconVariant=\"warning\"\n      ouiaId=\"DeletePolicyModal\"\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"destroy\"\n          ouiaId=\"DeletePolicyButton\"\n          aria-label=\"delete\"\n          isDisabled={!deleteEnabled}\n          variant=\"danger\"\n          onClick={() => deletePolicy({ variables: { input: { id } } })}\n        >\n          Delete policy and associated reports\n        </Button>,\n        <Button\n          key=\"cancel\"\n          ouiaId=\"DeletePolicyCancelButton\"\n          variant=\"secondary\"\n          onClick={onClose}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <StateViewWithError stateValues={{ error, data, loading }}>\n        <StateViewPart stateKey=\"loading\">\n          <Spinner />\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n          <Text className=\"policy-delete-body-text\">\n            Deleting the policy <b>{name}</b> will also delete its associated\n            reports.\n          </Text>\n          <Checkbox\n            label=\"I understand this will delete the policy and all associated reports\"\n            id={`deleting-policy-check-${id}`}\n            isChecked={deleteEnabled}\n            onChange={setDeleteEnabled}\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </ComplianceModal>\n  );\n};\n\nDeletePolicy.propTypes = {\n  policy: propTypes.object,\n};\n\nexport default DeletePolicy;\n","import gql from 'graphql-tag';\n\nexport const POLICY_QUERY_MINIMAL = gql`\n  query PQ_ProfileMinimal($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      external\n      description\n      totalHostCount\n      compliantHostCount\n      complianceThreshold\n      osMajorVersion\n      supportedOsVersions\n      lastScanned\n      policyType\n      businessObjective {\n        id\n        title\n      }\n    }\n  }\n`;\n\nexport const POLICY_QUERY = gql`\n  query PQ_Profile($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      external\n      description\n      totalHostCount\n      compliantHostCount\n      complianceThreshold\n      osMajorVersion\n      supportedOsVersions\n      lastScanned\n      policyType\n      policy {\n        id\n        name\n        refId\n        profiles {\n          id\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          parentProfileId\n          benchmark {\n            id\n            title\n            latestSupportedOsMinorVersions\n            osMajorVersion\n            version\n            profiles {\n              id\n              refId\n              ssgVersion\n            }\n          }\n          rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            references\n            identifier\n            precedence\n            values\n          }\n        }\n      }\n      businessObjective {\n        id\n        title\n      }\n      hosts {\n        id\n        osMinorVersion\n        osMajorVersion\n      }\n    }\n  }\n`;\n\nexport const POLICY_RULE_TREES_QUERY = gql`\n  query PQ_Profile($policyId: String!) {\n    profile(id: $policyId) {\n      policy {\n        profiles {\n          id\n          benchmark {\n            ruleTree\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const POLICY_VALUE_DEFINITONS_QUERY = gql`\n  query PQ_Profile($policyId: String!) {\n    profile(id: $policyId) {\n      policy {\n        profiles {\n          id\n          values\n          benchmark {\n            valueDefinitions {\n              id\n              refId\n              title\n              valueType\n              defaultValue\n              description\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { useMemo, useCallback } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { logMultipleErrors } from 'Utilities/helpers';\nimport {\n  POLICY_QUERY,\n  POLICY_QUERY_MINIMAL,\n  POLICY_RULE_TREES_QUERY,\n  POLICY_VALUE_DEFINITONS_QUERY,\n} from './constants';\nimport { compileData } from './helpers';\n\nconst usePolicyQuery = ({ policyId, skip: skipCondition, minimal }) => {\n  const skip = policyId === 'new' || skipCondition;\n\n  const {\n    data: policyData,\n    error: policyError,\n    loading: policyLoading,\n    refetch: refecthPolicy,\n  } = useQuery(minimal ? POLICY_QUERY_MINIMAL : POLICY_QUERY, {\n    variables: { policyId },\n    skip,\n    fetchPolicy: 'no-cache',\n  });\n\n  const {\n    data: ruleTreesData,\n    error: ruleTreesError,\n    loading: ruleTreesLoading,\n    refetch: refecthRuleTrees,\n  } = useQuery(POLICY_RULE_TREES_QUERY, {\n    variables: { policyId },\n    skip: minimal || skip,\n    fetchPolicy: 'no-cache',\n  });\n\n  const {\n    data: valueDefinitionsData,\n    error: valueDefinitionsError,\n    loading: valueDefinitionsLoading,\n    refetch: refecthValueDefinitions,\n  } = useQuery(POLICY_VALUE_DEFINITONS_QUERY, {\n    variables: { policyId },\n    skip: minimal || skip,\n    fetchPolicy: 'no-cache',\n  });\n\n  const data = useMemo(\n    () => compileData(policyData, ruleTreesData, valueDefinitionsData),\n    [policyData, ruleTreesData, valueDefinitionsData]\n  );\n\n  const error = useMemo(\n    () => logMultipleErrors(policyError, ruleTreesError, valueDefinitionsError),\n    [policyError, ruleTreesError, valueDefinitionsError]\n  );\n\n  const loading = policyLoading || ruleTreesLoading || valueDefinitionsLoading;\n\n  const refetch = useCallback(() => {\n    if (!skip) {\n      refecthPolicy();\n      refecthRuleTrees();\n      refecthValueDefinitions();\n    }\n  }, [refecthPolicy, refecthRuleTrees, refecthValueDefinitions]);\n\n  return policyId === 'new'\n    ? { data: true, refetch: () => {} }\n    : {\n        data,\n        error,\n        loading,\n        refetch,\n      };\n};\n\nexport default usePolicyQuery;\n","export const compileData = (policyData, ruleTreesData, valueDefinitionsData) =>\n  policyData && {\n    profile: {\n      ...policyData.profile,\n      policy: {\n        ...(policyData?.profile?.policy || {}),\n        profiles:\n          policyData?.profile?.policy?.profiles?.map((profile) => {\n            const ruleTree =\n              ruleTreesData?.profile?.policy?.profiles?.find(\n                ({ id }) => id === profile.id\n              )?.benchmark.ruleTree || {};\n\n            const valueDefinitions =\n              valueDefinitionsData?.profile?.policy?.profiles?.find(\n                ({ id }) => id === profile.id\n              )?.benchmark.valueDefinitions || [];\n\n            const values =\n              valueDefinitionsData?.profile?.policy?.profiles?.find(\n                ({ id }) => id === profile.id\n              )?.values;\n\n            return {\n              ...profile,\n              values,\n              benchmark: {\n                ...profile.benchmark,\n                ruleTree,\n                valueDefinitions,\n              },\n            };\n          }) || [],\n      },\n    },\n  };\n"],"names":["DeletePolicy","_useState","useState","_useState2","_slicedToArray","deleteEnabled","setDeleteEnabled","navigate","useNavigate","policyId","useParams","policy_id","_usePolicyQuery","usePolicyQuery","minimal","data","error","loading","_ref$profile","profile","name","id","onClose","_useMutation","useMutation","DELETE_PROFILE","onCompleted","dispatchAction","addNotification","variant","title","concat","onError","description","message","deletePolicy","React","ComplianceModal","ModalVariant","small","titleIconVariant","ouiaId","isOpen","actions","Button","key","isDisabled","onClick","variables","input","StateViewWithError","stateValues","StateViewPart","stateKey","Spinner","Text","className","Checkbox","label","isChecked","onChange","propTypes","policy","POLICY_QUERY_MINIMAL","gql","_templateObject","_taggedTemplateLiteral","POLICY_QUERY","_templateObject2","POLICY_RULE_TREES_QUERY","_templateObject3","POLICY_VALUE_DEFINITONS_QUERY","_templateObject4","_ref","skipCondition","skip","_useQuery","useQuery","fetchPolicy","policyData","policyError","policyLoading","refecthPolicy","refetch","_useQuery2","ruleTreesData","ruleTreesError","ruleTreesLoading","refecthRuleTrees","_useQuery3","valueDefinitionsData","valueDefinitionsError","valueDefinitionsLoading","refecthValueDefinitions","useMemo","_policyData$profile","_policyData$profile2","_objectSpread","profiles","map","_ruleTreesData$profil","_valueDefinitionsData","_valueDefinitionsData2","ruleTree","find","benchmark","valueDefinitions","_ref2","values","_ref3","compileData","logMultipleErrors","useCallback"],"sourceRoot":""}