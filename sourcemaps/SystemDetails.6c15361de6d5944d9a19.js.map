{"version":3,"sources":["webpack:///./src/PresentationalComponents/SystemPolicyCard/SystemPolicyCard.js","webpack:///./src/PresentationalComponents/SystemPolicyCards/SystemPolicyCards.js","webpack:///./src/SmartComponents/SystemDetails/ComplianceDetail.js","webpack:///./src/SmartComponents/SystemDetails/SystemDetails.js"],"names":["SystemPolicyCard","props","state","policy","compliant","className","value","fixed","withPercent","toFixed","setState","cardTitle","name","Truncate","lines","cardSubTitle","policyType","this","rulesFailed","lastScanned","score","ssgVersion","supported","style","passedPercentage","fixedPercentage","Card","CardBody","TextContent","Text","component","TextVariants","onMouseEnter","onTitleMouseover","onMouseLeave","onTitleMouseout","color","onSubTitleMouseover","onSubTitleMouseout","complianceIcon","Tooltip","position","maxWidth","content","DateFormat","date","Date","parse","type","CardFooter","padding","UnsupportedSSGVersion","paddingTop","paddingRight","paddingLeft","paddingBottom","React","propTypes","PropTypes","rulesPassed","refId","SystemPolicyCards","policies","filter","map","i","GridItem","sm","md","lg","xl","key","height","loading","Grid","hasGutter","systemPolicyCards","Array","_item","span","defaultProps","QUERY","gql","SystemQuery","system","data","hidePassed","testResultProfiles","RulesTable","remediationAvailableFilter","handleSelect","sortBy","index","direction","property","profile","length","profileRules","rules","profiles","SystemDetails","inventoryId","client","useQuery","variables","systemId","error","is404","networkError","statusCode","Spinner","errorMsg","ErrorCard","message","ComplianceEmptyState","title","ApolloClient","link","HttpLink","uri","COMPLIANCE_API_ROOT","credentials","cache","InMemoryCache","WrappedSystemDetails","customItnl","intlProps","IntlWrapper","IntlProvider","route","useParams","systemName","useTitleEntity","stateValues","stateKey","PageHeader","Breadcrumb","ouiaId","to","BreadcrumbItem","isActive","Main","Skeleton","size","SkeletonSize"],"mappings":"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","file":"js/SystemDetails.23422a1e4af067d20c22.js","sourcesContent":["import React from 'react';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { CheckCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport Truncate from 'react-truncate';\n\nimport {\n    Card,\n    CardBody,\n    CardFooter,\n    Text,\n    TextContent,\n    TextVariants,\n    Tooltip\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { UnsupportedSSGVersion } from '../UnsupportedSSGVersion/UnsupportedSSGVersion';\n\nclass SystemPolicyCard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cardTitle: <Truncate lines={ 1 }>{ props.policy.name }</Truncate>,\n            cardSubTitle: <Truncate lines={ 1 }>{ props.policy.policyType }</Truncate>,\n            ...props\n        };\n    }\n\n    complianceIcon = () => {\n        return this.state.policy.compliant ?\n            <div className='ins-c-policy-card ins-m-compliant'>\n                <CheckCircleIcon /> Compliant\n            </div> :\n            <div className='ins-c-policy-card ins-m-noncompliant'>\n                <ExclamationCircleIcon/> Not compliant\n            </div>;\n    }\n\n    fixedPercentage = (value, fixed = 0, withPercent = true) => (\n        (value).toFixed(fixed) + (withPercent ? '%' : '')\n    );\n\n    onTitleMouseover = () => {\n        this.setState(({ policy = {} } = {}) => ({ cardTitle: policy.name }));\n    }\n\n    onTitleMouseout = () => {\n        this.setState(({ cardTitle } = {}) => ({ cardTitle: <Truncate lines={ 1 }>{ cardTitle }</Truncate> }));\n    }\n\n    onSubTitleMouseover = () => {\n        this.setState(({ policy = {} } = {}) => ({ cardSubTitle: policy.policyType }));\n    }\n\n    onSubTitleMouseout = () => {\n        this.setState(({ policy = {} } = {}) => ({ cardSubTitle: <Truncate lines={ 1 }>{ policy.policyType }</Truncate> }));\n    }\n\n    render() {\n        const {\n            rulesFailed, compliant, lastScanned, score, ssgVersion, supported\n        } = this.state.policy;\n        const { cardTitle, cardSubTitle, style } = this.state;\n        const passedPercentage = this.fixedPercentage(score);\n\n        return <Card style={ style }>\n            <CardBody>\n                <TextContent className='margin-bottom-md'>\n                    <Text className='margin-bottom-top-none'\n                        component={ TextVariants.h4 }\n                        onMouseEnter={ this.onTitleMouseover }\n                        onMouseLeave={ this.onTitleMouseout }\n                    >\n                        { cardTitle }\n                    </Text>\n                    <Text\n                        style={{ color: 'var(--pf-global--Color--200)' }}\n                        component={ TextVariants.small }\n                        onMouseEnter={ this.onSubTitleMouseover }\n                        onMouseLeave={ this.onSubTitleMouseout }>\n                        { cardSubTitle }\n                    </Text>\n                </TextContent>\n                <div className='margin-bottom-md' >\n                    { supported && this.complianceIcon(compliant) }\n                    <Text component={ TextVariants.small }>\n                        { rulesFailed } rule{ rulesFailed === 1 ? '' : 's' } failed\n                        {' '}\n                        <Tooltip\n                            position='bottom'\n                            maxWidth='22em'\n                            content={\n                                'The system compliance score is calculated by OpenSCAP and ' +\n                                'is a normalized weighted sum of rules selected for this policy.'\n                            }>\n                            <span>(Score: { passedPercentage })</span>\n                        </Tooltip>\n                    </Text>\n                </div>\n                <Text className='margin-bottom-none' component={ TextVariants.small }>\n                    <Text>\n                        SSG version: { ssgVersion }\n                    </Text>\n                    <Text>\n                        Last scanned: {\n                            lastScanned !== 'Never' ?\n                                <DateFormat date={Date.parse(lastScanned)} type='relative' /> : lastScanned\n                        }\n                    </Text>\n                </Text>\n            </CardBody>\n            { !supported &&\n                <CardFooter style={{ padding: '0' }}>\n                    <UnsupportedSSGVersion\n                        ssgVersion={ ssgVersion }\n                        style={{\n                            paddingTop: 'var(--pf-c-alert--PaddingTop)',\n                            paddingRight: 'var(--pf-c-card--child--PaddingRight)',\n                            paddingLeft: 'var(--pf-c-card--child--PaddingLeft)',\n                            paddingBottom: 'var(--pf-c-alert--PaddingBottom)'\n                        }}\n                    />\n                </CardFooter>\n            }\n        </Card>;\n    };\n};\n\nSystemPolicyCard.propTypes = {\n    policy: PropTypes.shape({\n        rulesPassed: PropTypes.number,\n        rulesFailed: PropTypes.number,\n        score: PropTypes.number,\n        lastScanned: PropTypes.string,\n        refId: PropTypes.string,\n        name: PropTypes.string,\n        policyType: PropTypes.string,\n        compliant: PropTypes.bool,\n        ssgVersion: PropTypes.string,\n        supported: PropTypes.bool,\n        style: PropTypes.object\n    })\n};\n\nexport default SystemPolicyCard;\n","import React from 'react';\nimport { Grid, GridItem, Card, CardBody } from '@patternfly/react-core';\nimport SystemPolicyCard from '../SystemPolicyCard';\nimport propTypes from 'prop-types';\nimport { Instagram } from 'react-content-loader';\n\nclass SystemPolicyCards extends React.Component {\n    systemPolicyCards() {\n        const { policies } = this.props;\n        return policies.filter((policy) => (policy.rulesFailed + policy.rulesPassed) > 0).map(\n            (policy, i) =>\n                <GridItem sm={ 12 } md={ 12 } lg={ 6 } xl={ 4 } key={ i }>\n                    <SystemPolicyCard policy={ policy } style={{ height: '100%' }} />\n                </GridItem>\n        );\n    }\n\n    render() {\n        const { loading } = this.props;\n\n        return (\n            <React.Fragment>\n                <Grid hasGutter>\n                    { this.systemPolicyCards() }\n                    { loading && [...Array(3)].map((_item, i) => (\n                        <GridItem span={ 4 } key={ i }>\n                            <Card>\n                                <CardBody>\n                                    <Instagram />\n                                </CardBody>\n                            </Card>\n                        </GridItem>\n                    )) }\n                </Grid>\n            </React.Fragment>\n        );\n    }\n}\n\nSystemPolicyCards.propTypes = {\n    policies: propTypes.array,\n    loading: propTypes.bool\n};\n\nSystemPolicyCards.defaultProps = {\n    policies: []\n};\n\nexport default SystemPolicyCards;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport SystemPolicyCards from '../../PresentationalComponents/SystemPolicyCards';\nimport RulesTable from '@/PresentationalComponents/RulesTable/RulesTable';\nimport ComplianceEmptyState from 'PresentationalComponents/ComplianceEmptyState';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { ApolloClient, HttpLink, InMemoryCache } from 'apollo-boost';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport './compliance.scss';\nimport { ErrorCard } from 'PresentationalComponents/ErrorCard/ErrorCard';\nimport { IntlProvider } from 'react-intl';\n\nconst COMPLIANCE_API_ROOT = '/api/compliance';\n\nconst QUERY = gql`\nquery System($systemId: String!){\n    system(id: $systemId) {\n        id\n        name\n        testResultProfiles {\n            id\n            name\n            policyType\n            refId\n            compliant\n            rulesFailed\n            rulesPassed\n            lastScanned\n            score\n            supported\n            ssgVersion\n            majorOsVersion\n            policy {\n                id\n            }\n            rules {\n                title\n                severity\n                rationale\n                refId\n                description\n                compliant\n                remediationAvailable\n                references\n                identifier\n            }\n        }\n    }\n}\n`;\n\nconst SystemQuery = ({ data: { system }, loading, hidePassed }) => (\n    <React.Fragment>\n        <SystemPolicyCards policies={ system?.testResultProfiles } loading={ loading } />\n        <br/>\n        <RulesTable\n            remediationAvailableFilter\n            handleSelect={() => undefined}\n            hidePassed={ hidePassed }\n            sortBy={{\n                index: 4,\n                direction: 'asc',\n                property: 'severity'\n            }}\n            system={ {\n                ...system,\n                supported: ((system?.testResultProfiles || []).filter((profile) => (profile.supported)).length > 0)\n            } }\n            profileRules={ system?.testResultProfiles.map(profile => ({\n                system,\n                profile,\n                rules: profile.rules\n            })) }\n            loading={ loading } />\n    </React.Fragment>\n);\n\nSystemQuery.propTypes = {\n    data: propTypes.shape({\n        system: propTypes.shape({\n            profiles: propTypes.array,\n            testResultProfiles: propTypes.array\n        })\n    }),\n    loading: propTypes.bool,\n    hidePassed: propTypes.bool\n};\n\nSystemQuery.defaultProps = {\n    loading: true\n};\n\nconst SystemDetails = ({ inventoryId, hidePassed, client }) => {\n    let { data, error, loading } = useQuery(QUERY, {\n        variables: { systemId: inventoryId },\n        client\n    });\n    const is404 = error?.networkError?.statusCode === 404;\n\n    if (loading) {\n        return <Spinner/>;\n    }\n\n    if (error && !is404) {\n        const errorMsg = `Oops! Error loading System data: ${error}`;\n        return <ErrorCard message={errorMsg} />;\n    }\n\n    return <div className=\"ins-c-compliance__scope\">\n        { !data?.system || is404 ?\n            <ComplianceEmptyState title='No policies are reporting for this system' /> :\n            <SystemQuery hidePassed={ hidePassed } data={ data } loading={ loading } /> }\n    </div>;\n};\n\nSystemDetails.propTypes = {\n    inventoryId: propTypes.string,\n    client: propTypes.object,\n    hidePassed: propTypes.bool\n};\n\nSystemDetails.defaultProps = {\n    client: new ApolloClient({\n        link: new HttpLink({\n            uri: COMPLIANCE_API_ROOT + '/graphql',\n            credentials: 'include'\n        }),\n        cache: new InMemoryCache()\n    })\n};\n\nconst WrappedSystemDetails = ({ customItnl, intlProps, ...props }) => {\n    const IntlWrapper = customItnl ? IntlProvider : React.Fragment;\n\n    return <IntlWrapper { ...customItnl && intlProps } >\n        <SystemDetails { ...props } />\n    </IntlWrapper>;\n};\n\nWrappedSystemDetails.propTypes = {\n    customItnl: propTypes.bool,\n    intlProps: propTypes.any\n};\n\nexport default WrappedSystemDetails;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport {\n    useParams\n} from 'react-router-dom';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Skeleton, { SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport {\n    Breadcrumb,\n    BreadcrumbItem\n} from '@patternfly/react-core';\nimport ComplianceSystemDetails from './ComplianceDetail';\nimport {\n    BreadcrumbLinkItem,\n    StateViewWithError,\n    StateViewPart\n} from 'PresentationalComponents';\nimport { InventoryDetails } from 'SmartComponents';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\n\nconst QUERY = gql`\nquery System($inventoryId: String!){\n    system(id: $inventoryId) {\n        id\n        name\n    }\n}\n`;\n\nexport const SystemDetails = ({ route }) => {\n    const { inventoryId } = useParams();\n    const { data, error, loading } = useQuery(QUERY, {\n        variables: { inventoryId }\n    });\n    const systemName = data?.system?.name;\n\n    useTitleEntity(route, systemName);\n\n    return <StateViewWithError stateValues={ { error, data, loading } }>\n        <StateViewPart stateKey='data'>\n            <PageHeader>\n                <Breadcrumb ouiaId=\"SystemDetailsPathBreadcrumb\">\n                    <BreadcrumbLinkItem to='/'>\n                        Compliance\n                    </BreadcrumbLinkItem>\n                    <BreadcrumbLinkItem to='/systems'>\n                        Systems\n                    </BreadcrumbLinkItem>\n                    <BreadcrumbItem isActive>{ systemName }</BreadcrumbItem>\n                </Breadcrumb>\n                <InventoryDetails />\n                <br/>\n            </PageHeader>\n            <Main>\n                <ComplianceSystemDetails hidePassed inventoryId={ inventoryId } />\n            </Main>\n        </StateViewPart>\n        <StateViewPart stateKey='loading'>\n            <PageHeader>\n                <Skeleton size={ SkeletonSize.md } />\n            </PageHeader>\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nSystemDetails.propTypes = {\n    route: propTypes.object\n};\n\nexport default SystemDetails;\n"],"sourceRoot":""}