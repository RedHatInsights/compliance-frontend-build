{"version":3,"sources":["webpack:///./src/SmartComponents/PolicyDetails/PolicyDetails.scss?ad34","webpack:///./src/SmartComponents/PolicyDetails/PolicyDetails.scss","webpack:///./src/SmartComponents/PolicyDetails/PolicyRulesTab.js","webpack:///./src/SmartComponents/PolicyDetails/PolicySystemsTab.js","webpack:///./src/SmartComponents/PolicyDetails/PolicyDetails.js"],"names":["content","module","i","options","transform","undefined","locals","exports","___CSS_LOADER_API_IMPORT___","push","PolicyRulesTab","loading","policy","Fragment","Alert","variant","isInline","title","PageSection","PageSectionVariants","light","Text","component","TextVariants","p","benchmark","version","remediationsEnabled","columns","transforms","sortable","ANSIBLE_ICON","original","profileRules","profile","refId","name","rules","propTypes","bool","shape","string","array","object","PolicySystemsTab","complianceThreshold","policyId","id","key","props","width","isStatic","isRequired","number","QUERY","gql","PolicyDetails","useParams","policy_id","useQuery","variables","data","error","refetch","external","message","stateValues","stateKey","className","Breadcrumb","to","BreadcrumbItem","isActive","Grid","gutter","GridItem","xl2","xl","lg","md","sm","previousThreshold","businessObjective","onClose","aria-label","defaultTab","Tab","eventKey"],"mappings":"8EACA,IAAIA,EAAU,EAAQ,MAEA,iBAAZA,IAAsBA,EAAU,CAAC,CAACC,EAAOC,EAAIF,EAAS,MAOhE,IAAIG,EAAU,CAAC,KAAM,EAErB,eAPIC,EAQJ,gBAAqBC,GAER,EAAQ,GAAR,CAAgEL,EAASG,GAEnFH,EAAQM,SAAQL,EAAOM,QAAUP,EAAQM,S,sBCf5CC,EADkC,EAAQ,GAChCC,EAA4B,IAE9BC,KAAK,CAACR,EAAOC,EAAI,sJAAuJ,KAEhLD,EAAOM,QAAUA,G,oVCAXG,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,OAAZ,OACnB,kBAAC,IAAMC,SAAP,KACI,kBAACC,EAAA,EAAD,CAAOC,QAAQ,OAAOC,UAAQ,EAACC,MAAM,6BACrC,kBAACC,EAAA,EAAD,CAAaH,QAASI,IAAoBC,OACtC,kBAACC,EAAA,EAAD,CAAMC,UAAWC,IAAaC,GAC1B,uEADJ,+DAEkEZ,EAAOa,UAAUC,QAFnF,4JAOJ,kBAAC,mBAAD,CACIC,qBAAqB,EACrBC,QAAS,CACL,CAAEX,MAAO,OAAQY,WAAY,CAACC,MAC9B,CAAEb,MAAO,WAAYY,WAAY,CAACC,MAClC,CAAEb,MAAO,kBAAC,IAAMJ,SAAP,KAAkBkB,eAAlB,YAA2DF,WAAY,CAACC,KAAWE,SAAU,YAE1GrB,QAAUA,EACVsB,aAAc,CAAC,CACXC,QAAS,CAAEC,MAAOvB,EAAOuB,MAAOC,KAAMxB,EAAOwB,MAC7CC,MAAOzB,EAAOyB,YAM9B3B,EAAe4B,UAAY,CACvB3B,QAAS2B,IAAUC,KACnB3B,OAAQ0B,IAAUE,MAAM,CACpBJ,KAAME,IAAUG,OAChBN,MAAOG,IAAUG,OACjBJ,MAAOC,IAAUI,MACjBjB,UAAWa,IAAUK,UAIdjC,QCtCTkC,EAAmB,SAAC,GAAD,IAAGhC,EAAH,EAAGA,OAAQiC,EAAX,EAAWA,oBAAX,OACrB,kBAAC,IAAD,CAAcC,SAAUlC,EAAOmC,GAC3BpB,qBAAqB,EACrBC,QAAS,CAAC,CACNoB,IAAK,gCACL/B,MAAO,cACPgC,MAAO,CACHC,MAAO,GAAIC,UAAU,KAG7BN,oBAAsBA,KAI9BD,EAAiBN,UAAY,CACzB1B,OAAQ0B,IAAUE,MAAM,CACpBO,GAAIT,IAAUG,OAAOW,aAEzBP,oBAAqBP,IAAUe,QAGpBT,Q,qwBCPR,IAAMU,EAAQC,IAAH,KAuCLC,EAAgB,WACzB,IACmBV,EAAaW,cAAxBC,UAFuB,EAGSC,mBAASL,EAAO,CACpDM,UAAW,CAAEd,cADXe,EAHyB,EAGzBA,KAAMC,EAHmB,EAGnBA,MAAOnD,EAHY,EAGZA,QAASoD,EAHG,EAGHA,QAGxBnD,EAASiD,IAASlD,EAAUkD,EAAK3B,QAAU,GAQ/C,OANItB,EAAOoD,WACPF,EAAQ,CAAEG,QAAS,oCACnBJ,OAAOxD,EACPM,OAAUN,GAGP,kBAAC,IAAD,CAAoB6D,YAAc,CAAEJ,QAAOD,OAAMlD,YACpD,kBAAC,IAAD,CAAewD,SAAS,WACpB,kBAAC,aAAD,KAAY,kBAAC,IAAD,OACZ,kBAAC,OAAD,KAAM,kBAAC,UAAD,QAEV,kBAAC,IAAD,CAAeA,SAAS,QACpB,kBAAC,aAAD,CAAYC,UAAU,oBAClB,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,CAAoBC,GAAG,iBAAvB,YAGA,kBAACC,EAAA,EAAD,CAAgBC,UAAQ,GAAE5D,EAAOwB,OAErC,kBAACqC,EAAA,EAAD,CAAMC,OAAO,MACT,kBAACC,EAAA,EAAD,CAAUC,IAAK,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC3C,kBAAC,kBAAD,CAAiB/D,MAAOL,EAAOwB,QAEnC,kBAACuC,EAAA,EAAD,CAAUP,UAAU,wBAAwBQ,IAAK,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACzE,kBAAC,IAAD,CAAYlC,SAAUlC,EAAOmC,GACzBkC,kBAAmBrE,EAAOiC,oBAC1BqC,kBAAmBtE,EAAOsE,kBAC1BC,QAAU,kBAAMpB,SAI5B,kBAAC,IAAD,CAAYqB,aAAW,cAAcC,WAtC9B,WAuCH,kBAACC,EAAA,EAAD,CAAKrE,MAAM,UAAU8B,GAAG,iBAAiBwC,SAAS,YAClD,kBAACD,EAAA,EAAD,CAAKrE,MAAM,QAAQ8B,GAAG,eAAewC,SAAS,UAC9C,kBAACD,EAAA,EAAD,CAAKrE,MAAM,UAAU8B,GAAG,iBAAiBwC,SAAS,cAG1D,kBAAC,OAAD,KACI,kBAAC,IAAD,CAAaF,WA7CN,WA8CH,kBAAC,IAAD,CAAYE,SAAS,WACjB,kBAAC,IAAD,CAA0B3E,OAAQA,KAEtC,kBAAC,IAAD,CAAY2E,SAAS,SACjB,kBAAC,EAAD,CAAgB3E,OAAQA,KAE5B,kBAAC,IAAD,CAAY2E,SAAS,WACjB,kBAAC,EAAD,CAAkB3E,OAAQA,EAAQiC,oBAAqBjC,EAAOiC,4BAQvEW","file":"js/PolicyDetails.js","sourcesContent":["\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ref--5-2!./PolicyDetails.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ref--5-2!./PolicyDetails.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ref--5-2!./PolicyDetails.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".threshold-tooltip{margin-bottom:var(--pf-global--spacer--md)}.grey-icon{color:var(--pf-global--Color--200)}.policy-description{padding-top:10px}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Alert, Text, TextVariants, PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { SystemRulesTable, ANSIBLE_ICON } from '@redhat-cloud-services/frontend-components-inventory-compliance';\nimport { sortable } from '@patternfly/react-table';\n\nconst PolicyRulesTab = ({ loading, policy }) => (\n    <React.Fragment>\n        <Alert variant=\"info\" isInline title=\"Rule editing coming soon\" />\n        <PageSection variant={PageSectionVariants.light}>\n            <Text component={TextVariants.p}>\n                <strong>What rules are shown on this list?&nbsp;</strong>\n                This view shows rules that are from the latest SSG version ({ policy.benchmark.version }).\n                If you are using a different version of SSG for systems in this policy,\n                those rules will be different and can be viewed on the systems details page.\n            </Text>\n        </PageSection>\n        <SystemRulesTable\n            remediationsEnabled={false}\n            columns={[\n                { title: 'Rule', transforms: [sortable] },\n                { title: 'Severity', transforms: [sortable] },\n                { title: <React.Fragment>{ ANSIBLE_ICON } Ansible</React.Fragment>, transforms: [sortable], original: 'Ansible' }\n            ]}\n            loading={ loading }\n            profileRules={[{\n                profile: { refId: policy.refId, name: policy.name },\n                rules: policy.rules\n            }]}\n        />\n    </React.Fragment>\n);\n\nPolicyRulesTab.propTypes = {\n    loading: propTypes.bool,\n    policy: propTypes.shape({\n        name: propTypes.string,\n        refId: propTypes.string,\n        rules: propTypes.array,\n        benchmark: propTypes.object\n    })\n};\n\nexport default PolicyRulesTab;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport { SystemsTable } from 'SmartComponents';\n\nconst PolicySystemsTab = ({ policy, complianceThreshold }) => (\n    <SystemsTable policyId={policy.id}\n        remediationsEnabled={false}\n        columns={[{\n            key: 'facts.compliance.display_name',\n            title: 'System name',\n            props: {\n                width: 40, isStatic: true\n            }\n        }]}\n        complianceThreshold={ complianceThreshold }\n    />\n);\n\nPolicySystemsTab.propTypes = {\n    policy: propTypes.shape({\n        id: propTypes.string.isRequired\n    }),\n    complianceThreshold: propTypes.number\n};\n\nexport default PolicySystemsTab;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Breadcrumb, BreadcrumbItem, Grid, GridItem, Tab } from '@patternfly/react-core';\nimport {\n    PageHeader, PageHeaderTitle, Main, Spinner\n} from '@redhat-cloud-services/frontend-components';\nimport {\n    PolicyDetailsDescription, PolicyDetailsContentLoader, RouteredTabSwitcher as TabSwitcher, ContentTab,\n    StateViewWithError, StateViewPart, RoutedTabs, BreadcrumbLinkItem\n} from 'PresentationalComponents';\nimport { EditPolicy } from 'SmartComponents';\nimport '@/Charts.scss';\n\nimport PolicyRulesTab from './PolicyRulesTab';\nimport PolicySystemsTab from './PolicySystemsTab';\nimport './PolicyDetails.scss';\n\nexport const QUERY = gql`\nquery Profile($policyId: String!){\n    profile(id: $policyId) {\n        id\n        name\n        refId\n        external\n        description\n        totalHostCount\n        compliantHostCount\n        complianceThreshold\n        majorOsVersion\n        lastScanned\n        policy {\n            id\n            name\n        }\n        businessObjective {\n            id\n            title\n        }\n        rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n        }\n        benchmark {\n            id\n            title\n            version\n        }\n    }\n}\n`;\n\nexport const PolicyDetails = () => {\n    const defaultTab = 'details';\n    const { policy_id: policyId } = useParams();\n    let { data, error, loading, refetch } = useQuery(QUERY, {\n        variables: { policyId }\n    });\n    let policy = data && !loading ? data.profile : {};\n\n    if (policy.external) {\n        error = { message: 'This is an external SCAP policy.' };\n        data = undefined;\n        loading = undefined;\n    }\n\n    return <StateViewWithError stateValues={ { error, data, loading } }>\n        <StateViewPart stateKey='loading'>\n            <PageHeader><PolicyDetailsContentLoader/></PageHeader>\n            <Main><Spinner/></Main>\n        </StateViewPart>\n        <StateViewPart stateKey='data'>\n            <PageHeader className='page-header-tabs'>\n                <Breadcrumb>\n                    <BreadcrumbLinkItem to='/scappolicies'>\n                          Policies\n                    </BreadcrumbLinkItem>\n                    <BreadcrumbItem isActive>{policy.name}</BreadcrumbItem>\n                </Breadcrumb>\n                <Grid gutter='lg'>\n                    <GridItem xl2={11} xl={10} lg={12} md={12} sm={12}>\n                        <PageHeaderTitle title={policy.name} />\n                    </GridItem>\n                    <GridItem className='policy-details-button' xl2={1} xl={2} lg={2} md={3} sm={3}>\n                        <EditPolicy policyId={policy.id}\n                            previousThreshold={policy.complianceThreshold}\n                            businessObjective={policy.businessObjective}\n                            onClose={ () => refetch() }\n                        />\n                    </GridItem>\n                </Grid>\n                <RoutedTabs aria-label=\"Policy Tabs\" defaultTab={ defaultTab }>\n                    <Tab title='Details' id='policy-details' eventKey='details' />\n                    <Tab title='Rules' id='policy-rules' eventKey='rules' />\n                    <Tab title='Systems' id='policy-systems' eventKey='systems' />\n                </RoutedTabs>\n            </PageHeader>\n            <Main>\n                <TabSwitcher defaultTab={ defaultTab }>\n                    <ContentTab eventKey='details'>\n                        <PolicyDetailsDescription policy={policy} />\n                    </ContentTab>\n                    <ContentTab eventKey='rules'>\n                        <PolicyRulesTab policy={policy} />\n                    </ContentTab>\n                    <ContentTab eventKey='systems'>\n                        <PolicySystemsTab policy={policy} complianceThreshold={policy.complianceThreshold} />\n                    </ContentTab>\n                </TabSwitcher>\n            </Main>\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nexport default PolicyDetails;\n"],"sourceRoot":""}