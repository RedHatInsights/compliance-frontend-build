{"version":3,"sources":["webpack:///./src/SmartComponents/PolicyDetails/PolicyDetails.scss?ad34","webpack:///./src/SmartComponents/PolicyDetails/PolicyDetails.scss","webpack:///./src/SmartComponents/PolicyDetails/PolicyRulesTab.js","webpack:///./src/SmartComponents/PolicyDetails/PolicySystemsTab.js","webpack:///./src/SmartComponents/PolicyDetails/PolicyDetails.js","webpack:///./src/Utilities/Breadcrumbs.js"],"names":["content","module","i","options","transform","undefined","locals","exports","___CSS_LOADER_API_IMPORT___","push","PolicyRulesTab","loading","policy","Fragment","Alert","variant","isInline","title","PageSection","PageSectionVariants","light","Text","component","TextVariants","p","benchmark","version","remediationsEnabled","columns","transforms","sortable","ANSIBLE_ICON","original","profileRules","profile","refId","name","rules","propTypes","bool","shape","string","array","object","PolicySystemsTab","complianceThreshold","policyId","id","key","props","width","isStatic","isRequired","number","QUERY","gql","PolicyDetailsQuery","onNavigateWithProps","useQuery","variables","data","error","refetch","useState","activeTab","setActiveTab","beta","window","insights","chrome","isBeta","external","message","stateValues","stateKey","className","Breadcrumb","BreadcrumbItem","to","onClick","event","isActive","Grid","gutter","GridItem","xl2","xl","lg","md","sm","previousThreshold","businessObjective","onClose","tabId","func","PolicyDetails","onNavigate","bind","this","match","params","policy_id","React","Component","routerParams","history","preventDefault","location","pathname","split","path","target","replace","COMPLIANCE_UI_ROOT"],"mappings":"8EACA,IAAIA,EAAU,EAAQ,MAEA,iBAAZA,IAAsBA,EAAU,CAAC,CAACC,EAAOC,EAAIF,EAAS,MAOhE,IAAIG,EAAU,CAAC,KAAM,EAErB,eAPIC,EAQJ,gBAAqBC,GAER,EAAQ,GAAR,CAAgEL,EAASG,GAEnFH,EAAQM,SAAQL,EAAOM,QAAUP,EAAQM,S,sBCf5CC,EADkC,EAAQ,GAChCC,EAA4B,IAE9BC,KAAK,CAACR,EAAOC,EAAI,sJAAuJ,KAEhLD,EAAOM,QAAUA,G,+gBCAXG,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,OAAZ,OACnB,kBAAC,IAAMC,SAAP,KACI,kBAACC,EAAA,EAAD,CAAOC,QAAQ,OAAOC,UAAQ,EAACC,MAAM,6BACrC,kBAACC,EAAA,EAAD,CAAaH,QAASI,IAAoBC,OACtC,kBAACC,EAAA,EAAD,CAAMC,UAAWC,IAAaC,GAC1B,uEADJ,+DAEkEZ,EAAOa,UAAUC,QAFnF,4JAOJ,kBAAC,mBAAD,CACIC,qBAAqB,EACrBC,QAAS,CACL,CAAEX,MAAO,OAAQY,WAAY,CAACC,MAC9B,CAAEb,MAAO,WAAYY,WAAY,CAACC,MAClC,CAAEb,MAAO,kBAAC,IAAMJ,SAAP,KAAkBkB,eAAlB,YAA2DF,WAAY,CAACC,KAAWE,SAAU,YAE1GrB,QAAUA,EACVsB,aAAc,CAAC,CACXC,QAAS,CAAEC,MAAOvB,EAAOuB,MAAOC,KAAMxB,EAAOwB,MAC7CC,MAAOzB,EAAOyB,YAM9B3B,EAAe4B,UAAY,CACvB3B,QAAS2B,IAAUC,KACnB3B,OAAQ0B,IAAUE,MAAM,CACpBJ,KAAME,IAAUG,OAChBN,MAAOG,IAAUG,OACjBJ,MAAOC,IAAUI,MACjBjB,UAAWa,IAAUK,UAIdjC,QCtCTkC,EAAmB,SAAC,GAAD,IAAGhC,EAAH,EAAGA,OAAQiC,EAAX,EAAWA,oBAAX,OACrB,kBAAC,IAAD,CAAcC,SAAUlC,EAAOmC,GAC3BpB,qBAAqB,EACrBC,QAAS,CAAC,CACNoB,IAAK,gCACL/B,MAAO,cACPgC,MAAO,CACHC,MAAO,GAAIC,UAAU,KAG7BN,oBAAsBA,KAI9BD,EAAiBN,UAAY,CACzB1B,OAAQ0B,IAAUE,MAAM,CACpBO,GAAIT,IAAUG,OAAOW,aAEzBP,oBAAqBP,IAAUe,QAGpBT,Q,6qCCLR,IAAMU,EAAQC,IAAH,KAuCLC,EAAqB,SAAC,GAAsC,IAApCV,EAAoC,EAApCA,SAAUW,EAA0B,EAA1BA,oBAA0B,EAC7BC,mBAASJ,EAAO,CACpDK,UAAW,CAAEb,cADXc,EAD+D,EAC/DA,KAAMC,EADyD,EACzDA,MAAOlD,EADkD,EAClDA,QAASmD,EADyC,EACzCA,QADyC,EAInCC,mBAAS,GAJ0B,WAI9DC,EAJ8D,KAInDC,EAJmD,KAKjErD,EAASgD,IAASjD,EAAUiD,EAAK1B,QAAU,GACzCgC,EAAOC,OAAOC,SAASC,OAAOC,SAQpC,OANI1D,EAAO2D,WACPV,EAAQ,CAAEW,QAAS,oCACnBZ,OAAOvD,EACPM,OAAUN,GAGP,kBAAC,IAAD,CAAoBoE,YAAc,CAAEZ,QAAOD,OAAMjD,YACpD,kBAAC,IAAD,CAAe+D,SAAS,WACpB,kBAAC,aAAD,KAAY,kBAAC,IAAD,OACZ,kBAAC,OAAD,KAAM,kBAAC,UAAD,QAEV,kBAAC,IAAD,CAAeA,SAAS,QACpB,kBAAC,aAAD,CAAYC,UAAU,oBAClB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAgBC,GAAE,UAAMZ,EAAO,iBAAmB,QAAhC,4BACda,QAAU,SAACC,GAAD,OAAWvB,EAAoBuB,KAD7C,YAIA,kBAACH,EAAA,EAAD,CAAgBI,UAAQ,GAAErE,EAAOwB,OAErC,kBAAC8C,EAAA,EAAD,CAAMC,OAAO,MACT,kBAACC,EAAA,EAAD,CAAUC,IAAK,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC3C,kBAAC,kBAAD,CAAiBxE,MAAOL,EAAOwB,QAEnC,kBAACgD,EAAA,EAAD,CAAUT,UAAU,wBAAwBU,IAAK,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACzE,kBAAC,IAAD,CAAY3C,SAAUlC,EAAOmC,GACzB2C,kBAAmB9E,EAAOiC,oBAC1B8C,kBAAmB/E,EAAO+E,kBAC1BC,QAAU,kBAAM9B,SAI5B,kBAAC,IAAD,CAAYE,UAAWA,EAAWC,aAAcA,KAEpD,kBAAC,OAAD,KACI,kBAAC,IAAD,CAAaD,UAAWA,GACpB,kBAAC,IAAD,CAAK6B,MAAO,GACR,kBAAC,IAAD,CAA0BjF,OAAQA,KAEtC,kBAAC,IAAD,CAAKiF,MAAO,GACR,kBAAC,EAAD,CAAgBjF,OAAQA,EAAQD,QAASA,KAE7C,kBAAC,IAAD,CAAKkF,MAAO,GACR,kBAAC,EAAD,CAAkBjF,OAAQA,EAAQiC,oBAAqBjC,EAAOiC,4BAQtFW,EAAmBlB,UAAY,CAC3BQ,SAAUR,IAAUG,OACpBgB,oBAAqBnB,IAAUwD,MAG5B,IAAMC,EAAb,gCACI,WAAY9C,GAAO,0BACf,cAAMA,IACD+C,WAAaA,IAAWC,KAAX,QAFH,EADvB,6CAOQ,OACI,kBAAC,EAAD,CAAoBnD,SAAUoD,KAAKjD,MAAMkD,MAAMC,OAAOC,UAAW5C,oBAAqByC,KAAKF,iBARvG,GAAmCM,IAAMC,WAazCR,EAAczD,UAAY,CACtB6D,MAAO7D,IAAUK,QAGN6D,cAAaT,I,iCC7I5B,+CAEO,SAASC,EAAWhB,EAAOyB,GAC9BzB,EAAM0B,iBACN,IAAMxC,EAAkD,SAA3CC,OAAOwC,SAASC,SAASC,MAAM,KAAK,GAC3CC,EAAO9B,EAAM+B,OAAOH,SAASI,QAAQC,IAAoB,KAC9DR,GAAoBP,KAAKjD,MAAMwD,SAAShG,KAAKyD,EAAO,SAAH,OAAY4C,GAASA","file":"js/PolicyDetails.js","sourcesContent":["\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ref--5-2!./PolicyDetails.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ref--5-2!./PolicyDetails.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ref--5-2!./PolicyDetails.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".threshold-tooltip{margin-bottom:var(--pf-global--spacer--md)}.grey-icon{color:var(--pf-global--Color--200)}.policy-description{padding-top:10px}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Alert, Text, TextVariants, PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { SystemRulesTable, ANSIBLE_ICON } from '@redhat-cloud-services/frontend-components-inventory-compliance';\nimport { sortable } from '@patternfly/react-table';\n\nconst PolicyRulesTab = ({ loading, policy }) => (\n    <React.Fragment>\n        <Alert variant=\"info\" isInline title=\"Rule editing coming soon\" />\n        <PageSection variant={PageSectionVariants.light}>\n            <Text component={TextVariants.p}>\n                <strong>What rules are shown on this list?&nbsp;</strong>\n                This view shows rules that are from the latest SSG version ({ policy.benchmark.version }).\n                If you are using a different version of SSG for systems in this policy,\n                those rules will be different and can be viewed on the systems details page.\n            </Text>\n        </PageSection>\n        <SystemRulesTable\n            remediationsEnabled={false}\n            columns={[\n                { title: 'Rule', transforms: [sortable] },\n                { title: 'Severity', transforms: [sortable] },\n                { title: <React.Fragment>{ ANSIBLE_ICON } Ansible</React.Fragment>, transforms: [sortable], original: 'Ansible' }\n            ]}\n            loading={ loading }\n            profileRules={[{\n                profile: { refId: policy.refId, name: policy.name },\n                rules: policy.rules\n            }]}\n        />\n    </React.Fragment>\n);\n\nPolicyRulesTab.propTypes = {\n    loading: propTypes.bool,\n    policy: propTypes.shape({\n        name: propTypes.string,\n        refId: propTypes.string,\n        rules: propTypes.array,\n        benchmark: propTypes.object\n    })\n};\n\nexport default PolicyRulesTab;\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport { SystemsTable } from 'SmartComponents';\n\nconst PolicySystemsTab = ({ policy, complianceThreshold }) => (\n    <SystemsTable policyId={policy.id}\n        remediationsEnabled={false}\n        columns={[{\n            key: 'facts.compliance.display_name',\n            title: 'System name',\n            props: {\n                width: 40, isStatic: true\n            }\n        }]}\n        complianceThreshold={ complianceThreshold }\n    />\n);\n\nPolicySystemsTab.propTypes = {\n    policy: propTypes.shape({\n        id: propTypes.string.isRequired\n    }),\n    complianceThreshold: propTypes.number\n};\n\nexport default PolicySystemsTab;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Breadcrumb, BreadcrumbItem, Grid, GridItem } from '@patternfly/react-core';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport {\n    PageHeader, PageHeaderTitle, Main, Spinner\n} from '@redhat-cloud-services/frontend-components';\nimport { onNavigate } from 'Utilities/Breadcrumbs';\nimport {\n    PolicyDetailsDescription, PolicyDetailsContentLoader, PolicyTabs, TabSwitcher, Tab,\n    StateViewWithError, StateViewPart\n} from 'PresentationalComponents';\nimport { EditPolicy } from 'SmartComponents';\nimport '@/Charts.scss';\n\nimport PolicyRulesTab from './PolicyRulesTab';\nimport PolicySystemsTab from './PolicySystemsTab';\nimport './PolicyDetails.scss';\n\nexport const QUERY = gql`\nquery Profile($policyId: String!){\n    profile(id: $policyId) {\n        id\n        name\n        refId\n        external\n        description\n        totalHostCount\n        compliantHostCount\n        complianceThreshold\n        majorOsVersion\n        lastScanned\n        policy {\n            id\n            name\n        }\n        businessObjective {\n            id\n            title\n        }\n        rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n        }\n        benchmark {\n            id\n            title\n            version\n        }\n    }\n}\n`;\n\nexport const PolicyDetailsQuery = ({ policyId, onNavigateWithProps }) => {\n    let { data, error, loading, refetch } = useQuery(QUERY, {\n        variables: { policyId }\n    });\n    const [activeTab, setActiveTab] = useState(0);\n    let policy = data && !loading ? data.profile : {};\n    const beta = window.insights.chrome.isBeta();\n\n    if (policy.external) {\n        error = { message: 'This is an external SCAP policy.' };\n        data = undefined;\n        loading = undefined;\n    }\n\n    return <StateViewWithError stateValues={ { error, data, loading } }>\n        <StateViewPart stateKey='loading'>\n            <PageHeader><PolicyDetailsContentLoader/></PageHeader>\n            <Main><Spinner/></Main>\n        </StateViewPart>\n        <StateViewPart stateKey='data'>\n            <PageHeader className='page-header-tabs'>\n                <Breadcrumb>\n                    <BreadcrumbItem to={`${ beta ? '/beta/insights' : '/rhel' }/compliance/scappolicies`}\n                        onClick={ (event) => onNavigateWithProps(event) }>\n                      Policies\n                    </BreadcrumbItem>\n                    <BreadcrumbItem isActive>{policy.name}</BreadcrumbItem>\n                </Breadcrumb>\n                <Grid gutter='lg'>\n                    <GridItem xl2={11} xl={10} lg={12} md={12} sm={12}>\n                        <PageHeaderTitle title={policy.name} />\n                    </GridItem>\n                    <GridItem className='policy-details-button' xl2={1} xl={2} lg={2} md={3} sm={3}>\n                        <EditPolicy policyId={policy.id}\n                            previousThreshold={policy.complianceThreshold}\n                            businessObjective={policy.businessObjective}\n                            onClose={ () => refetch() }\n                        />\n                    </GridItem>\n                </Grid>\n                <PolicyTabs activeTab={activeTab} setActiveTab={setActiveTab} />\n            </PageHeader>\n            <Main>\n                <TabSwitcher activeTab={activeTab}>\n                    <Tab tabId={0}>\n                        <PolicyDetailsDescription policy={policy} />\n                    </Tab>\n                    <Tab tabId={1}>\n                        <PolicyRulesTab policy={policy} loading={loading} />\n                    </Tab>\n                    <Tab tabId={2}>\n                        <PolicySystemsTab policy={policy} complianceThreshold={policy.complianceThreshold} />\n                    </Tab>\n                </TabSwitcher>\n            </Main>\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nPolicyDetailsQuery.propTypes = {\n    policyId: propTypes.string,\n    onNavigateWithProps: propTypes.func\n};\n\nexport class PolicyDetails extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onNavigate = onNavigate.bind(this);\n    }\n\n    render() {\n        return (\n            <PolicyDetailsQuery policyId={this.props.match.params.policy_id} onNavigateWithProps={this.onNavigate} />\n        );\n    }\n}\n\nPolicyDetails.propTypes = {\n    match: propTypes.object\n};\n\nexport default routerParams(PolicyDetails);\n","import { COMPLIANCE_UI_ROOT } from '@/constants';\n\nexport function onNavigate(event, history) {\n    event.preventDefault();\n    const beta = window.location.pathname.split('/')[1] === 'beta';\n    const path = event.target.pathname.replace(COMPLIANCE_UI_ROOT, '');\n    (history ? history : this.props.history).push(beta ? `/beta/${path}` : path);\n}\n"],"sourceRoot":""}