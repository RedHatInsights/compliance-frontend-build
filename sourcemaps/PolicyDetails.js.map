{"version":3,"sources":["webpack:///./src/SmartComponents/PolicyDetails/PolicyDetails.scss?5e66","webpack:///./src/SmartComponents/PolicyDetails/PolicyDetails.scss","webpack:///./src/SmartComponents/EditPolicy/UpdateProfileButton.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicy.js","webpack:///./src/SmartComponents/PolicyDetails/PolicyRulesTab.js","webpack:///./src/SmartComponents/PolicyDetails/PolicySystemsTab.js","webpack:///./src/SmartComponents/PolicyDetails/PolicyDetails.js","webpack:///./src/Utilities/Breadcrumbs.js"],"names":["content","module","i","options","transform","undefined","locals","exports","push","UpdateProfileButton","handleBusinessObjective","props","businessObjective","editPolicyBusinessObjective","mutate","Promise","resolve","id","create","value","mutation","CREATE_BUSINESS_OBJECTIVE","variables","input","title","label","then","result","data","createBusinessObjective","onClick","policyId","threshold","businessObjectiveId","complianceThreshold","parseFloat","UPDATE_PROFILE","Button","type","variant","this","React","Component","propTypes","string","isRequired","object","func","number","graphql","EditPolicy","handleModalToggle","isModalOpen","state","insights","chrome","appAction","setState","onClose","isOpen","previousThreshold","dispatch","Fragment","Modal","isSmall","isFooterLeftAligned","actions","key","round","Form","selector","formValueSelector","connect","PolicyRulesTab","loading","policy","Alert","isInline","remediationsEnabled","columns","transforms","sortable","ANSIBLE_ICON","original","profileRules","profile","refId","name","rules","bool","shape","array","PolicySystemsTab","systemsTableRef","composed","width","ref","QUERY","gql","PolicyDetailsQuery","onNavigateWithProps","useQuery","error","refetch","systemsTable","useRef","useState","activeTab","setActiveTab","networkError","statusCode","window","auth","logout","className","Breadcrumb","BreadcrumbItem","to","event","isActive","Grid","gutter","GridItem","xl2","xl","lg","md","sm","current","getWrappedInstance","systemFetch","forceUpdate","currentTab","PolicyDetails","onNavigate","bind","match","params","policy_id","routerParams","history","preventDefault","path","target","pathname","replace","COMPLIANCE_UI_ROOT"],"mappings":"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","file":"js/PolicyDetails.js","sourcesContent":["\nvar content = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/sass-loader/dist/cjs.js??ref--5-2!./PolicyDetails.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/sass-loader/dist/cjs.js??ref--5-2!./PolicyDetails.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/sass-loader/dist/cjs.js??ref--5-2!./PolicyDetails.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".threshold-tooltip{margin-bottom:var(--pf-global--spacer--md)}.grey-icon{color:var(--pf-global--Color--200)}.policy-description{padding-top:10px}\\n\", \"\"]);\n\n// exports\n","import React from 'react';\nimport { graphql } from 'react-apollo';\nimport { Button } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { CREATE_BUSINESS_OBJECTIVE, UPDATE_PROFILE } from '../../Utilities/graphql/mutations';\n\nexport class UpdateProfileButton extends React.Component {\n    handleBusinessObjective = () => {\n        const { businessObjective, editPolicyBusinessObjective, mutate } = this.props;\n\n        if (editPolicyBusinessObjective === undefined) {\n            return Promise.resolve(businessObjective ? businessObjective.id : null);\n        }\n\n        if (editPolicyBusinessObjective && !editPolicyBusinessObjective.create && businessObjective\n            && (editPolicyBusinessObjective.value !== businessObjective.id)) {\n            return Promise.resolve(editPolicyBusinessObjective.value);\n        }\n\n        if (editPolicyBusinessObjective && !editPolicyBusinessObjective.create\n            && businessObjective === null) {\n            return Promise.resolve(editPolicyBusinessObjective.value);\n        }\n\n        if (editPolicyBusinessObjective === null) {\n            return Promise.resolve(null);\n        }\n\n        if (editPolicyBusinessObjective.create) {\n            return mutate({\n                mutation: CREATE_BUSINESS_OBJECTIVE,\n                variables: { input: { title: editPolicyBusinessObjective.label } }\n            }).then((result) => {\n                return result.data.createBusinessObjective.businessObjective.id;\n            });\n        }\n    }\n\n    onClick = () => {\n        const { mutate, policyId, threshold, onClick } = this.props;\n\n        return this.handleBusinessObjective().then((businessObjectiveId) => {\n            let input = {\n                id: policyId,\n                complianceThreshold: parseFloat(threshold)\n            };\n\n            if (businessObjectiveId) {\n                input.businessObjectiveId = businessObjectiveId;\n            }\n\n            return mutate({\n                mutation: UPDATE_PROFILE,\n                variables: { input }\n            });\n        }).then(() => {\n            onClick();\n        });\n    }\n\n    render() {\n        return (<Button type='submit' variant='primary'\n            onClick={this.onClick}>Save</Button>\n        );\n    }\n}\n\nUpdateProfileButton.propTypes = {\n    policyId: propTypes.string.isRequired,\n    businessObjective: propTypes.object,\n    editPolicyBusinessObjective: propTypes.object,\n    mutate: propTypes.func.isRequired,\n    threshold: propTypes.number,\n    onClick: propTypes.func.isRequired\n};\n\nexport default graphql(UPDATE_PROFILE)(UpdateProfileButton);\n","import {\n    Modal,\n    Form,\n    Button\n} from '@patternfly/react-core';\nimport React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport UpdateProfileButton from './UpdateProfileButton';\nimport {\n    ProfileThresholdField,\n    BusinessObjectiveField\n} from 'SmartComponents';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport round from 'lodash/round';\n\nexport class EditPolicy extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOpen: false,\n            isModalOpen: false,\n            policyId: props.policyId,\n            businessObjective: props.businessObjective\n        };\n    }\n\n    handleModalToggle = () => {\n        const { isModalOpen } = this.state;\n        insights.chrome.appAction(!isModalOpen ? 'edit-business-objective' : '');\n        this.setState(() => ({\n            isModalOpen: !isModalOpen,\n            businessObjective: this.props.businessObjective\n        }));\n        this.props.onClose();\n    };\n\n    render() {\n        const { policyId, isModalOpen, businessObjective } = this.state;\n        const { previousThreshold, editPolicyBusinessObjective, complianceThreshold, dispatch } = this.props;\n\n        return (\n            <React.Fragment>\n                <Button variant='secondary' onClick={this.handleModalToggle}>\n                    Edit policy\n                </Button>\n                <Modal\n                    isSmall\n                    title=\"Edit policy details\"\n                    isOpen={isModalOpen}\n                    onClose={this.handleModalToggle}\n                    isFooterLeftAligned\n                    actions={[\n                        <Button key=\"cancel\" variant=\"secondary\" onClick={this.handleModalToggle}>\n                            Cancel\n                        </Button>,\n                        <UpdateProfileButton\n                            key='confirm'\n                            policyId={policyId}\n                            threshold={ round(parseFloat(complianceThreshold || previousThreshold), 1) }\n                            businessObjective={businessObjective}\n                            editPolicyBusinessObjective={editPolicyBusinessObjective}\n                            onClick={this.handleModalToggle}\n                        />\n                    ]}\n                >\n                    <Form>\n                        <BusinessObjectiveField\n                            businessObjective={businessObjective}\n                            policyId={policyId}\n                            dispatch={dispatch}\n                        />\n                        <ProfileThresholdField previousThreshold={previousThreshold} />\n                    </Form>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nEditPolicy.propTypes = {\n    policyId: propTypes.string,\n    previousThreshold: propTypes.number,\n    businessObjective: propTypes.object,\n    editPolicyBusinessObjective: propTypes.object,\n    complianceThreshold: propTypes.string,\n    onClose: propTypes.func,\n    dispatch: propTypes.func\n};\n\nconst selector = formValueSelector('policyForm');\nexport default connect(\n    state => ({\n        complianceThreshold: selector(state, 'complianceThreshold'),\n        editPolicyBusinessObjective: selector(state, 'businessObjective')\n    })\n)(EditPolicy);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Alert } from '@patternfly/react-core';\nimport { SystemRulesTable, ANSIBLE_ICON } from '@redhat-cloud-services/frontend-components-inventory-compliance';\nimport { sortable } from '@patternfly/react-table';\n\nconst PolicyRulesTab = ({ loading, policy }) => (<React.Fragment>\n    <Alert variant=\"info\" isInline title=\"Rule editing coming soon\" />\n    <SystemRulesTable\n        remediationsEnabled={false}\n        columns={[\n            { title: 'Rule', transforms: [sortable] },\n            { title: 'Severity', transforms: [sortable] },\n            { title: <React.Fragment>{ ANSIBLE_ICON } Ansible</React.Fragment>, transforms: [sortable], original: 'Ansible' }\n        ]}\n        loading={loading}\n        profileRules={ !loading && [{\n            profile: { refId: policy.refId, name: policy.name },\n            rules: policy.rules\n        }]}\n    />\n</React.Fragment>);\n\nPolicyRulesTab.propTypes = {\n    loading: propTypes.bool,\n    policy: propTypes.shape({\n        name: propTypes.string,\n        refId: propTypes.string,\n        rules: propTypes.array\n    })\n};\n\nexport default PolicyRulesTab;\n","import { SystemsTable } from 'SmartComponents';\nimport React from 'react';\nimport propTypes from 'prop-types';\n\nconst PolicySystemsTab = ({ policy, systemsTableRef }) => (\n    <SystemsTable policyId={policy.id}\n        columns={[{\n            composed: ['facts.os_release', 'display_name'],\n            key: 'display_name',\n            title: 'System name',\n            props: {\n                width: 40\n            }\n        }, {\n            key: 'facts.compliance.compliance_score',\n            title: 'Compliance score',\n            props: {\n                width: 10\n            }\n        }, {\n            key: 'facts.compliance.last_scanned',\n            title: 'Last scanned',\n            props: {\n                width: 10\n            }\n        }]}\n        ref={systemsTableRef}\n    />\n);\n\nPolicySystemsTab.propTypes = {\n    policy: propTypes.shape({\n        id: propTypes.string.isRequired\n    }),\n    systemsTableRef: propTypes.object\n};\n\nexport default PolicySystemsTab;\n","import React, { useState, useRef } from 'react';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport { onNavigate } from '../../Utilities/Breadcrumbs';\nimport {\n    PolicyDetailsDescription,\n    PolicyDetailsContentLoader,\n    PolicyTabs\n} from 'PresentationalComponents';\nimport EditPolicy from '../EditPolicy/EditPolicy';\nimport PolicyRulesTab from './PolicyRulesTab';\nimport PolicySystemsTab from './PolicySystemsTab';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport {\n    PageHeader,\n    PageHeaderTitle,\n    Main,\n    Spinner\n} from '@redhat-cloud-services/frontend-components';\nimport gql from 'graphql-tag';\nimport '../../Charts.scss';\nimport './PolicyDetails.scss';\nimport {\n    Breadcrumb,\n    BreadcrumbItem,\n    Button,\n    Grid,\n    GridItem\n} from '@patternfly/react-core';\nimport {\n    Link\n} from 'react-router-dom';\n\nexport const QUERY = gql`\nquery Profile($policyId: String!){\n    profile(id: $policyId) {\n        id\n        name\n        refId\n        description\n        totalHostCount\n        compliantHostCount\n        complianceThreshold\n        majorOsVersion\n        lastScanned\n        businessObjective {\n            id\n            title\n        }\n        rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n        }\n    }\n}\n`;\n\nexport const PolicyDetailsQuery = ({ policyId, onNavigateWithProps }) => {\n    const { data, error, loading, refetch } = useQuery(QUERY, {\n        variables: { policyId }\n    });\n    let systemsTable = useRef();\n\n    const forceUpdate = () => {\n        refetch();\n        systemsTable.current.getWrappedInstance().systemFetch();\n        systemsTable.current.getWrappedInstance().forceUpdate();\n    };\n\n    const [activeTab, setActiveTab] = useState(0);\n    let policy = {};\n\n    const currentTab = (activeTab) => {\n        switch (activeTab) {\n            case 0:\n                return <PolicyDetailsDescription policy={policy} />;\n            case 1:\n                return <PolicyRulesTab policy={policy} loading={loading} />;\n            case 2:\n                return <PolicySystemsTab policy={policy} systemsTableRef={systemsTable} />;\n        }\n    };\n\n    if (error) {\n        if (error.networkError.statusCode === 401) {\n            window.insights.chrome.auth.logout();\n        }\n\n        return 'Oops! Error loading Policy data: ' + error;\n    }\n\n    if (loading) {\n        return (\n            <React.Fragment>\n                <PageHeader><PolicyDetailsContentLoader/></PageHeader>\n                <Main><Spinner/></Main>\n            </React.Fragment>\n        );\n    } else {\n        policy = data.profile;\n    }\n\n    return (\n        <React.Fragment>\n            <PageHeader className={ 'beta-page-header'} >\n                <Breadcrumb>\n                    <BreadcrumbItem to='/rhel/compliance/policies' onClick={ (event) => onNavigateWithProps(event) }>\n                      Policies\n                    </BreadcrumbItem>\n                    <BreadcrumbItem isActive>{policy.name}</BreadcrumbItem>\n                </Breadcrumb>\n                <Grid gutter='lg'>\n                    <GridItem xl2={9} xl={8} lg={12} md={12} sm={12}>\n                        <PageHeaderTitle title={policy.name} />\n                    </GridItem>\n                    <GridItem className='policy-details-button' xl2={2} xl={2} lg={2} md={3} sm={3}>\n                        <Link to={'/reports/' + policy.id} >\n                            <Button variant='primary'>\n                                View reports\n                            </Button>\n                        </Link>\n                    </GridItem>\n                    <GridItem className='policy-details-button' xl2={1} xl={2} lg={2} md={3} sm={3}>\n                        <EditPolicy policyId={policy.id}\n                            previousThreshold={policy.complianceThreshold}\n                            businessObjective={policy.businessObjective}\n                            onClose={ () => {\n                                forceUpdate();\n                            }}\n                        />\n                    </GridItem>\n                </Grid>\n                <PolicyTabs activeTab={activeTab} setActiveTab={setActiveTab} />\n            </PageHeader>\n            <Main>\n                { currentTab(activeTab) }\n            </Main>\n        </React.Fragment>\n    );\n};\n\nPolicyDetailsQuery.propTypes = {\n    policyId: propTypes.string,\n    onNavigateWithProps: propTypes.func\n};\n\nexport class PolicyDetails extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onNavigate = onNavigate.bind(this);\n    }\n\n    render() {\n        return (\n            <PolicyDetailsQuery policyId={this.props.match.params.policy_id} onNavigateWithProps={this.onNavigate} />\n        );\n    }\n}\n\nPolicyDetails.propTypes = {\n    match: propTypes.object\n};\n\nexport default routerParams(PolicyDetails);\n","import { COMPLIANCE_UI_ROOT } from '../constants';\n\nexport function onNavigate(event, history) {\n    event.preventDefault();\n    const path = event.target.pathname.replace(COMPLIANCE_UI_ROOT, '');\n    (history ? history : this.props.history).push(path);\n}\n"],"sourceRoot":""}