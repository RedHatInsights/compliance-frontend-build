{"version":3,"file":"js/PolicyDetails.2f9a074886538a201451.js","mappings":"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","sources":["webpack:///./src/SmartComponents/PolicyDetails/EditRulesButtonToolbarItem.js","webpack:///./src/SmartComponents/PolicyDetails/PolicyRulesTab.js","webpack:///./src/SmartComponents/PolicyDetails/EditSystemsButtonToolbarItem.js","webpack:///./src/SmartComponents/PolicyDetails/PolicySystemsTab.js","webpack:///./src/SmartComponents/PolicyDetails/PolicyMultiversionRules.js","webpack:///./src/SmartComponents/PolicyDetails/PolicyDetails.js","webpack:///./src/SmartComponents/PolicyDetails/hooks/useSaveValueToPolicy.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport { BackgroundLink, LinkButton } from 'PresentationalComponents';\nimport useAnchor from 'Utilities/hooks/useAnchor';\n\nconst EditRulesButtonToolbarItem = ({ policy }) => {\n  let anchor = useAnchor();\n\n  return (\n    <ToolbarItem>\n      <BackgroundLink\n        to={`/scappolicies/${policy.id}/edit`}\n        hash={anchor}\n        backgroundLocation={{ hash: anchor }}\n        Component={LinkButton}\n        componentProps={{\n          variant: 'primary',\n          ouiaId: 'EditRulesButton',\n        }}\n      >\n        Edit rules\n      </BackgroundLink>\n    </ToolbarItem>\n  );\n};\n\nEditRulesButtonToolbarItem.propTypes = {\n  policy: propTypes.object.isRequired,\n};\n\nexport default EditRulesButtonToolbarItem;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Alert,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport { RulesTable } from 'PresentationalComponents';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\n\nimport EditRulesButtonToolbarItem from './EditRulesButtonToolbarItem';\n\nconst PolicyRulesTab = ({ loading, policy }) => {\n  const DedicatedAction = () => <EditRulesButtonToolbarItem policy={policy} />;\n  const profile = policy.policy.profiles.find(\n    (profile) => profile.refId === policy.refId\n  );\n\n  return (\n    <React.Fragment>\n      <Alert\n        isInline\n        ouiaId=\"RuleEditingAvailableAlert\"\n        variant=\"info\"\n        title=\"Rule editing is now available.\"\n      >\n        SCAP policies created before April 19th, 2021 with rule editing will use\n        the full default set of rules for the policy with the most accurate\n        benchmark for systems within the policy. Click the &quot;Edit\n        rules&quot; or &quot;Edit policy&quot; button to edit rules.\n      </Alert>\n      <PageSection variant={PageSectionVariants.light}>\n        <Text component={TextVariants.p}>\n          <strong>What rules are shown on this list?&nbsp;</strong>\n          This view shows rules that are from the latest SSG version (\n          {profile?.benchmark.version}). If you are using a different version of\n          SSG for systems in this policy, those rules will be different and can\n          be viewed on the systems details page.\n        </Text>\n      </PageSection>\n      <RulesTable\n        remediationsEnabled={false}\n        columns={[Columns.Name, Columns.Severity, Columns.Remediation]}\n        loading={loading}\n        profileRules={[\n          {\n            profile: { refId: policy.refId, name: policy.name },\n            rules: profile?.rules || [],\n          },\n        ]}\n        options={{\n          dedicatedAction: DedicatedAction,\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nPolicyRulesTab.propTypes = {\n  loading: propTypes.bool,\n  policy: propTypes.shape({\n    name: propTypes.string,\n    refId: propTypes.string,\n    policy: propTypes.shape({\n      profiles: propTypes.shape([\n        {\n          rules: propTypes.array,\n          benchmark: propTypes.object,\n        },\n      ]).isRequired,\n    }),\n  }),\n};\n\nexport default PolicyRulesTab;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { BackgroundLink, LinkButton } from 'PresentationalComponents';\nimport { ToolbarItem } from '@patternfly/react-core';\nimport useAnchor from 'Utilities/hooks/useAnchor';\n\nconst EditSystemsButtonToolbarItem = ({ policy }) => {\n  const hash = useAnchor();\n\n  return (\n    <ToolbarItem>\n      <BackgroundLink\n        to={`/scappolicies/${policy.id}/edit`}\n        hash={hash}\n        backgroundLocation={{ hash: 'details' }}\n        Component={LinkButton}\n        componentProps={{\n          variant: 'primary',\n          ouiaId: 'EditSystemsButton',\n        }}\n      >\n        Edit systems\n      </BackgroundLink>\n    </ToolbarItem>\n  );\n};\n\nEditSystemsButtonToolbarItem.propTypes = {\n  policy: propTypes.object.isRequired,\n};\n\nexport default EditSystemsButtonToolbarItem;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport { NoSystemsTableWithWarning } from 'PresentationalComponents';\nimport { SystemsTable } from 'SmartComponents';\nimport * as Columns from '../SystemsTable/Columns';\nimport EditSystemsButtonToolbarItem from './EditSystemsButtonToolbarItem';\n\nconst PolicySystemsTab = ({ policy }) => {\n  return (\n    <SystemsTable\n      columns={[\n        Columns.customName({\n          showLink: true,\n        }),\n        Columns.inventoryColumn('tags'),\n        Columns.OS,\n        Columns.SsgVersion,\n      ]}\n      showOsMinorVersionFilter={[policy.osMajorVersion]}\n      policyId={policy.id}\n      defaultFilter={`policy_id = ${policy.id}`}\n      showActions={false}\n      remediationsEnabled={false}\n      noSystemsTable={\n        policy?.hosts?.length === 0 && <NoSystemsTableWithWarning />\n      }\n      complianceThreshold={policy.complianceThreshold}\n      dedicatedAction={<EditSystemsButtonToolbarItem policy={policy} />}\n    />\n  );\n};\n\nPolicySystemsTab.propTypes = {\n  policy: propTypes.shape({\n    id: propTypes.string.isRequired,\n    complianceThreshold: propTypes.number.isRequired,\n    osMajorVersion: propTypes.string.isRequired,\n    hosts: propTypes.array.isRequired,\n  }),\n  dedicatedAction: propTypes.object,\n  systemTableProps: propTypes.object,\n};\n\nexport default PolicySystemsTab;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { TabbedRules } from 'PresentationalComponents';\nimport { mapCountOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport { sortingByProp } from 'Utilities/helpers';\nimport EditRulesButtonToolbarItem from './EditRulesButtonToolbarItem';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\n\nconst PolicyMultiversionRules = ({\n  policy,\n  saveToPolicy,\n  onRuleValueReset,\n}) => {\n  const {\n    hosts,\n    policy: { profiles },\n  } = policy;\n  const profilesForTabs = profiles.filter(\n    (profile) => !!profile.osMinorVersion\n  );\n  const systemCounts = mapCountOsMinorVersions(hosts);\n\n  const tabsData = profilesForTabs\n    .sort(sortingByProp('osMinorVersion', 'desc'))\n    .map((profile) => ({\n      profile,\n      systemCount: systemCounts[profile.osMinorVersion]?.count || 0,\n    }));\n\n  const DedicatedAction = () => <EditRulesButtonToolbarItem policy={policy} />;\n\n  return (\n    <React.Fragment>\n      <PageSection variant={PageSectionVariants.light}>\n        <TabbedRules\n          tabsData={tabsData}\n          setRuleValues={saveToPolicy}\n          onRuleValueReset={onRuleValueReset}\n          ruleValues={Object.fromEntries(\n            profiles.map(({ id, values }) => [id, values])\n          )}\n          columns={[Columns.Name, Columns.Severity, Columns.Remediation]}\n          level={1}\n          options={{\n            dedicatedAction: DedicatedAction,\n          }}\n          ouiaId=\"RHELVersions\"\n        />\n      </PageSection>\n    </React.Fragment>\n  );\n};\n\nPolicyMultiversionRules.propTypes = {\n  policy: propTypes.object.isRequired,\n  saveToPolicy: propTypes.func,\n  onRuleValueReset: propTypes.func,\n};\n\nexport default PolicyMultiversionRules;\n","import React, { Fragment, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useParams, useLocation } from 'react-router-dom';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Grid,\n  GridItem,\n  Tab,\n} from '@patternfly/react-core';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  PolicyDetailsDescription,\n  PolicyDetailsContentLoader,\n  RoutedTabSwitcher as TabSwitcher,\n  ContentTab,\n  StateViewWithError,\n  StateViewPart,\n  RoutedTabs,\n  BreadcrumbLinkItem,\n} from 'PresentationalComponents';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport '@/Charts.scss';\nimport PolicyRulesTab from './PolicyRulesTab';\nimport PolicySystemsTab from './PolicySystemsTab';\nimport PolicyMultiversionRules from './PolicyMultiversionRules';\nimport './PolicyDetails.scss';\nimport useSaveValueToPolicy from './hooks/useSaveValueToPolicy';\nimport usePolicyQuery from 'Utilities/hooks/usePolicyQuery';\n\nexport const PolicyDetails = ({ route }) => {\n  const defaultTab = 'details';\n  const { policy_id: policyId } = useParams();\n  const { data, error, loading, refetch } = usePolicyQuery({\n    policyId,\n  });\n  const location = useLocation();\n  const policy = data?.profile;\n  const hasOsMinorProfiles = !!policy?.policy.profiles.find(\n    (profile) => !!profile.osMinorVersion\n  );\n\n  const saveToPolicy = useSaveValueToPolicy(policy, () => {\n    refetch();\n  });\n\n  useEffect(() => {\n    refetch();\n  }, [location, refetch]);\n\n  useTitleEntity(route, policy?.name);\n\n  return (\n    <StateViewWithError stateValues={{ error, data, loading }}>\n      <StateViewPart stateKey=\"loading\">\n        <PageHeader>\n          <PolicyDetailsContentLoader />\n        </PageHeader>\n        <section className=\"pf-c-page__main-section\">\n          <Spinner />\n        </section>\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        {policy ? (\n          <Fragment>\n            <PageHeader className=\"page-header-tabs\">\n              <Breadcrumb ouiaId=\"PolicyDetailsPathBreadcrumb\">\n                <BreadcrumbLinkItem to=\"/\">Compliance</BreadcrumbLinkItem>\n                <BreadcrumbLinkItem to=\"/scappolicies\">\n                  SCAP policies\n                </BreadcrumbLinkItem>\n                <BreadcrumbItem isActive>{policy.name}</BreadcrumbItem>\n              </Breadcrumb>\n              <Grid gutter=\"lg\">\n                <GridItem xl2={11} xl={10} lg={12} md={12} sm={12}>\n                  <PageHeaderTitle title={policy.name} />\n                </GridItem>\n              </Grid>\n              <RoutedTabs\n                aria-label=\"Policy Tabs\"\n                ouiaId=\"PolicyDetailsTabs\"\n                defaultTab={defaultTab}\n              >\n                <Tab title=\"Details\" id=\"policy-details\" eventKey=\"details\" />\n                <Tab title=\"Rules\" id=\"policy-rules\" eventKey=\"rules\" />\n                <Tab title=\"Systems\" id=\"policy-systems\" eventKey=\"systems\" />\n              </RoutedTabs>\n            </PageHeader>\n            <section className=\"pf-c-page__main-section\">\n              <TabSwitcher defaultTab={defaultTab}>\n                <ContentTab eventKey=\"details\">\n                  <PolicyDetailsDescription policy={policy} />\n                </ContentTab>\n                <ContentTab eventKey=\"rules\">\n                  {hasOsMinorProfiles ? (\n                    <PolicyMultiversionRules\n                      policy={policy}\n                      saveToPolicy={saveToPolicy}\n                      onRuleValueReset={() => refetch()}\n                    />\n                  ) : (\n                    <PolicyRulesTab policy={policy} />\n                  )}\n                </ContentTab>\n                <ContentTab eventKey=\"systems\">\n                  <PolicySystemsTab policy={policy} />\n                </ContentTab>\n              </TabSwitcher>\n            </section>\n          </Fragment>\n        ) : (\n          ''\n        )}\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nPolicyDetails.propTypes = {\n  route: propTypes.object,\n};\n\nexport default PolicyDetails;\n","import { useCallback } from 'react';\n\nimport usePolicyMutation from '@/Mutations/hooks/usePolicyMutation';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nconst useSaveValueToPolicy = (policy, callback) => {\n  const updatePolicy = usePolicyMutation();\n\n  const existingValues = useCallback(\n    (policyId) => {\n      const profile = policy.policy.profiles.find(({ id }) => id === policyId);\n\n      return Object.fromEntries(\n        Object.entries(profile?.values || {}).map(([valueId, value]) => {\n          const refId = profile.benchmark.valueDefinitions.find(\n            ({ id }) => id === valueId\n          )?.refId;\n          return [refId || valueId, value];\n        })\n      );\n    },\n    [policy]\n  );\n\n  const saveToPolicy = useCallback(\n    (policyId, valueDefinition, newValue) => {\n      const profile = policy.policy.profiles.find(({ id }) => id === policyId);\n\n      const existingValues = Object.fromEntries(\n        Object.entries(profile?.values || {}).map(([valueId, value]) => {\n          const refId = profile.benchmark.valueDefinitions.find(\n            ({ id }) => id === valueId\n          )?.refId;\n          return [refId || valueId, value];\n        })\n      );\n\n      return updatePolicy(policyId, {\n        values: {\n          ...existingValues,\n          [valueDefinition.refId]: newValue,\n        },\n      })\n        .then(() => {\n          dispatchNotification({\n            variant: 'success',\n            title: 'Rule value updated',\n            autoDismiss: true,\n          });\n        })\n        .catch((error) => {\n          dispatchNotification({\n            variant: 'danger',\n            title: 'Error updating rule value',\n            description: error.message,\n          });\n        })\n        .finally(() => callback());\n    },\n    [existingValues, policy]\n  );\n\n  return saveToPolicy;\n};\n\nexport default useSaveValueToPolicy;\n"],"names":["EditRulesButtonToolbarItem","_ref","policy","anchor","useAnchor","React","ToolbarItem","BackgroundLink","to","concat","id","hash","backgroundLocation","Component","LinkButton","componentProps","variant","ouiaId","propTypes","isRequired","PolicyRulesTab","loading","profile","profiles","find","refId","Alert","isInline","title","PageSection","PageSectionVariants","light","Text","component","TextVariants","p","benchmark","version","RulesTable","remediationsEnabled","columns","Columns","profileRules","name","rules","options","dedicatedAction","EditSystemsButtonToolbarItem","PolicySystemsTab","_policy$hosts","SystemsTable","showLink","showOsMinorVersionFilter","osMajorVersion","policyId","defaultFilter","showActions","noSystemsTable","hosts","length","NoSystemsTableWithWarning","complianceThreshold","systemTableProps","PolicyMultiversionRules","saveToPolicy","onRuleValueReset","profilesForTabs","filter","osMinorVersion","systemCounts","mapCountOsMinorVersions","tabsData","sort","sortingByProp","map","_systemCounts$profile","systemCount","count","TabbedRules","setRuleValues","ruleValues","Object","fromEntries","_ref2","values","level","PolicyDetails","route","defaultTab","useParams","policy_id","_usePolicyQuery","usePolicyQuery","data","error","refetch","location","useLocation","hasOsMinorProfiles","callback","updatePolicy","usePolicyMutation","existingValues","useCallback","entries","_profile$benchmark$va","_ref3","_slicedToArray","valueId","value","valueDefinitions","_ref4","valueDefinition","newValue","_ref5","_ref6","_profile$benchmark$va2","_ref7","_ref8","_objectSpread","_defineProperty","then","dispatchNotification","autoDismiss","catch","description","message","finally","useSaveValueToPolicy","useEffect","useTitleEntity","StateViewWithError","stateValues","StateViewPart","stateKey","PageHeader","PolicyDetailsContentLoader","className","Spinner","Fragment","Breadcrumb","BreadcrumbLinkItem","BreadcrumbItem","isActive","Grid","gutter","GridItem","xl2","xl","lg","md","sm","PageHeaderTitle","RoutedTabs","Tab","eventKey","TabSwitcher","ContentTab","PolicyDetailsDescription"],"sourceRoot":""}