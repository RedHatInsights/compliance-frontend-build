{"version":3,"file":"js/650.c2e46284e98168e4d778.js","mappings":"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","sources":["webpack:///./src/SmartComponents/ComplianceSystems/ComplianceSystems.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeDetailsRow.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeTable.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeTooltip.js","webpack:///./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyProfilesRules.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack:///./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack:///./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack:///./src/SmartComponents/DeletePolicy/DeletePolicy.js","webpack:///./src/SmartComponents/DeleteReport/DeleteReport.js","webpack:///./src/SmartComponents/EditPolicy/constants.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyRulesTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicySystemsTab.js","webpack:///./src/SmartComponents/EditPolicy/components/NewRulesAlert.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyForm.js","webpack:///./src/SmartComponents/EditPolicy/hooks/index.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicy.js","webpack:///./src/SmartComponents/SystemsTable/Cells.js","webpack:///./src/SmartComponents/SystemsTable/Columns.js","webpack:///./src/SmartComponents/InventoryDetails/InventoryDetails.js","webpack:///./src/PresentationalComponents/ComplianceRemediationButton/constants.js","webpack:///./src/PresentationalComponents/ComplianceRemediationButton/RemediationButton.js","webpack:///./src/PresentationalComponents/ComplianceRemediationButton/hooks.js","webpack:///./src/SmartComponents/SystemsTable/constants.js","webpack:///./src/SmartComponents/SystemsTable/hooks.js","webpack:///./src/SmartComponents/SystemsTable/SystemsTable.js","webpack:///./src/Utilities/hooks/usePromiseQueue.js","webpack:///./src/store/Reducers/SystemStore.js"],"sourcesContent":["/* eslint-disable react/display-name */\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { nowrap } from '@patternfly/react-table';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport { SystemsTable } from 'SmartComponents';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst QUERY = gql`\n  {\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n        }\n      }\n    }\n  }\n`;\n\nconst DEFAULT_FILTER = 'has_test_results = true or has_policy = true';\n\nexport const ComplianceSystems = () => {\n  const { data, error, loading } = useQuery(QUERY);\n  const policies = data?.profiles?.edges.map(({ node }) => node);\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"page-header\">\n        <PageHeaderTitle title=\"Compliance systems\" />\n      </PageHeader>\n      <Main>\n        <StateViewWithError stateValues={{ error, data, loading }}>\n          <StateViewPart stateKey=\"data\">\n            {policies && (\n              <SystemsTable\n                columns={[\n                  Columns.customName({\n                    showLink: true,\n                  }),\n                  Columns.inventoryColumn('tags'),\n                  Columns.OS,\n                  Columns.Policies,\n                  Columns.inventoryColumn('updated', {\n                    props: { isStatic: true },\n                    transforms: [nowrap],\n                  }),\n                ]}\n                defaultFilter={DEFAULT_FILTER}\n                systemProps={{\n                  isFullView: true,\n                }}\n                showOsMinorVersionFilter={policies.map(\n                  (policy) => policy.osMajorVersion\n                )}\n                showComplianceSystemsInfo\n                enableEditPolicy={false}\n                remediationsEnabled={false}\n                policies={policies}\n              />\n            )}\n          </StateViewPart>\n        </StateViewWithError>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default ComplianceSystems;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Text } from '@patternfly/react-core';\n\nconst PolicyTypeDetailsRow = ({ item: { description }, key }) => {\n  return (\n    <Text key={key} style={{ margin: 'var(--pf-global--spacer--lg) 0' }}>\n      {description}\n    </Text>\n  );\n};\n\nPolicyTypeDetailsRow.propTypes = {\n  item: propTypes.object,\n  key: propTypes.string,\n};\n\nexport default PolicyTypeDetailsRow;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { fitContent, info } from '@patternfly/react-table';\nimport { InUseProfileLabel } from 'PresentationalComponents';\nimport { TableToolsTable } from 'Utilities/hooks/useTableTools';\nimport { renderComponent } from 'Utilities/helpers';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport PolicyTypeDetailsRow from './PolicyTypeDetailsRow';\nimport { emptyRows } from 'Utilities/hooks/useTableTools/Components/NoResultsTable';\n\nconst NameCell = ({ name, disabled }) => {\n  return (\n    <>\n      {disabled && <InUseProfileLabel compact />}\n      {name}\n    </>\n  );\n};\n\nNameCell.propTypes = {\n  name: propTypes.string,\n  disabled: propTypes.boolean,\n};\n\nconst PolicyTypeTable = ({ profiles, onChange, selectedProfile }) => {\n  const columns = [\n    {\n      title: 'Policy name',\n      key: 'name',\n      transforms: [\n        info({\n          tooltip:\n            'In use policies have already been used and therefore can not be applied to another SCAP Policy under the selected OS.',\n        }),\n      ],\n      sortByProp: 'name',\n      renderFunc: renderComponent(NameCell),\n    },\n    {\n      title: 'Supported OS versions',\n      transforms: [fitContent],\n      sortByProp: 'supportedOsVersions',\n      renderFunc: (_data, _id, profile) =>\n        profile.supportedOsVersions.join(', '),\n    },\n  ];\n\n  return (\n    <TableToolsTable\n      items={profiles.map((profile) => ({\n        ...profile,\n        rowProps: {\n          selected: profile.id === selectedProfile?.id,\n          disableSelection: profile.disabled,\n        },\n      }))}\n      filters={{\n        filterConfig: [\n          {\n            type: conditionalFilterType.text,\n            label: 'Policy Name',\n            filter: (policyTypes, value) =>\n              policyTypes.filter((policyType) =>\n                policyType?.name.toLowerCase().includes(value.toLowerCase())\n              ),\n          },\n        ],\n      }}\n      columns={columns}\n      options={{\n        detailsComponent: PolicyTypeDetailsRow,\n        onRadioSelect: (_event, _value, _rowIdx, { itemId }) =>\n          onChange && onChange(profiles.find(({ id }) => id === itemId)),\n        sortBy: {\n          index: 2,\n          direction: 'asc',\n          property: 'name',\n        },\n        emptyRows: emptyRows('policy types', columns.length),\n      }}\n      variant=\"compact\"\n    />\n  );\n};\n\nPolicyTypeTable.propTypes = {\n  profiles: propTypes.array,\n  onChange: propTypes.func,\n  selectedProfile: propTypes.string,\n};\n\nexport default PolicyTypeTable;\n","import React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\n\nconst PolicyTypeTooltip = () => (\n  <Tooltip\n    position=\"right\"\n    content=\"Policy types are OpenSCAP policies that are supported by RHEL.\n        For each major version of RHEL, users can create one policy of each type.\"\n  >\n    <OutlinedQuestionCircleIcon className=\"grey-icon\" />\n  </Tooltip>\n);\n\nexport default PolicyTypeTooltip;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  Tile,\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport PolicyTypesTable from './Components/PolicyTypeTable';\nimport PolicyTypeTooltip from './Components/PolicyTypeTooltip';\n\nconst SUPPORTED_PROFILES = gql`\n  query supportedProfilesByOSMajor {\n    osMajorVersions {\n      edges {\n        node {\n          osMajorVersion\n          profiles {\n            id\n            name\n            refId\n            description\n            supportedOsVersions\n            benchmark {\n              id\n              refId\n            }\n          }\n        }\n      }\n    }\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          refId\n          benchmark {\n            refId\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const CreateSCAPPolicy = ({\n  change,\n  selectedProfile,\n  selectedOsMajorVersion,\n}) => {\n  const { data, error, loading } = useQuery(SUPPORTED_PROFILES, {\n    fetchPolicy: 'no-cache',\n  });\n  const isInUse = (profileRefId, benchmarkRedId) =>\n    !!data?.profiles?.edges\n      .map(({ node }) => node)\n      .find(\n        (profile) =>\n          profile.refId === profileRefId &&\n          benchmarkRedId === profile.benchmark.refId\n      );\n  const osMajorVersions = data?.osMajorVersions?.edges.map(({ node }) => node);\n  const selectedOsMajorVersionObject = osMajorVersions?.find(\n    ({ osMajorVersion }) => osMajorVersion === selectedOsMajorVersion\n  );\n  const profilesToSelect = selectedOsMajorVersionObject?.profiles.map(\n    (profile) => ({\n      ...profile,\n      disabled: isInUse(profile.refId, profile.benchmark.refId),\n    })\n  );\n\n  return (\n    <StateViewWithError stateValues={{ error, data, loading }}>\n      <StateViewPart stateKey=\"loading\">\n        <Spinner />\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <TextContent>\n          <Text component={TextVariants.h1} className=\"pf-u-mb-md\">\n            Create SCAP policy\n          </Text>\n          <Text className=\"pf-u-mb-md\">\n            Select the operating system and policy type for this policy.\n          </Text>\n        </TextContent>\n        <Form>\n          <FormGroup label=\"Operating system\" isRequired fieldId=\"benchmark\">\n            {osMajorVersions &&\n              osMajorVersions.map(({ osMajorVersion }) => (\n                <Tile\n                  key={`rhel${osMajorVersion}-select`}\n                  className=\"pf-u-mr-md\"\n                  title={`RHEL ${osMajorVersion}`}\n                  onClick={() => {\n                    change('osMajorVersion', osMajorVersion);\n                  }}\n                  isSelected={selectedOsMajorVersion === osMajorVersion}\n                  isStacked\n                />\n              ))}\n          </FormGroup>\n\n          {selectedOsMajorVersion && (\n            <FormGroup\n              isRequired\n              labelIcon={<PolicyTypeTooltip />}\n              label=\"Policy type\"\n              fieldId=\"policy-type\"\n            >\n              <PolicyTypesTable\n                aria-label=\"PolicyTypeTable\"\n                profiles={profilesToSelect}\n                onChange={(policy) => {\n                  change('profile', policy);\n                  change('benchmark', policy.benchmark.id);\n                  change('selectedRuleRefIds', undefined);\n                  change('systems', []);\n                }}\n                selectedProfile={selectedProfile}\n              />\n            </FormGroup>\n          )}\n        </Form>\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nCreateSCAPPolicy.propTypes = {\n  change: reduxFormPropTypes.change,\n  selectedProfile: propTypes.object,\n  selectedOsMajorVersion: propTypes.string,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    selectedProfile: selector(state, 'profile'),\n    selectedOsMajorVersion: selector(state, 'osMajorVersion'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(CreateSCAPPolicy);\n","import React, { useLayoutEffect } from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  Title,\n  Text,\n  TextContent,\n  TextVariants,\n  EmptyState,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\n\nconst PROFILES_QUERY = gql`\n  query Profiles($filter: String!) {\n    profiles(search: $filter) {\n      edges {\n        node {\n          id\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          benchmark {\n            id\n            latestSupportedOsMinorVersions\n          }\n          rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst BENCHMARKS_QUERY = gql`\n  query Benchmarks($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        profiles {\n          id\n          refId\n          osMajorVersion\n        }\n        version\n      }\n    }\n  }\n`;\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nexport const EditPolicyProfilesRules = ({\n  policy,\n  selectedRuleRefIds,\n  change,\n  osMajorVersion,\n  osMinorVersionCounts,\n}) => {\n  const columns = [Columns.Name, Columns.Severity, Columns.Remediation];\n  const osMinorVersions = osMinorVersionCounts\n    .map((i) => i.osMinorVersion)\n    .sort();\n  const benchmarkSearch =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const {\n    data: benchmarksData,\n    error: benchmarksError,\n    loading: benchmarksLoading,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter: benchmarkSearch,\n    },\n    skip: osMinorVersions.length === 0,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  let tabsData = osMinorVersionCounts.map(\n    ({ osMinorVersion, count: systemCount }) => {\n      osMinorVersion = `${osMinorVersion}`;\n      let profile;\n      if (benchmarks) {\n        const benchmark = getBenchmarkBySupportedOsMinor(\n          benchmarks,\n          osMinorVersion\n        );\n        if (benchmark) {\n          profile = getBenchmarkProfile(benchmark, policy.refId);\n          if (profile) {\n            profile = {\n              ...profile,\n              benchmark,\n            };\n          }\n        }\n      }\n\n      return {\n        profile,\n        systemCount,\n        newOsMinorVersion: osMinorVersion,\n      };\n    }\n  );\n  tabsData = tabsData.filter(({ profile }) => !!profile);\n\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n  const profileIds = Object.keys(profileToOsMinorMap);\n  const filter = profileIds.map((i) => `id = ${i}`).join(' OR ');\n  const skipProfilesQuery = benchmarksLoading || filter.length === 0;\n  const {\n    data: profilesData,\n    error: profilesError,\n    loading: profilesLoading,\n  } = useQuery(PROFILES_QUERY, {\n    variables: {\n      filter,\n    },\n    skip: skipProfilesQuery,\n  });\n  const error = benchmarksError || profilesError;\n  const dataState = profileIds?.length > 0 ? profilesData : undefined;\n  const loadingState = profilesLoading || benchmarksLoading ? true : undefined;\n  const noRuleSets = !error && !loadingState && profileIds?.length === 0;\n  const profiles = skipProfilesQuery\n    ? []\n    : profilesData?.profiles.edges.map((p) => p.node);\n\n  const setSelectedRuleRefIds = (newSelection) => {\n    change('selectedRuleRefIds', newSelection);\n  };\n\n  useLayoutEffect(() => {\n    if (!loadingState) {\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      const newSelection = profilesWithRulesToSelection(\n        profilesWithOs,\n        selectedRuleRefIds,\n        { only: true }\n      );\n      setSelectedRuleRefIds(newSelection);\n    }\n  }, [JSON.stringify(profiles), loadingState]);\n\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-pb-md\">\n        <Text component={TextVariants.h1}>Rules</Text>\n        <Text>\n          Customize your <b>{policy.name}</b> SCAP policy by including and\n          excluding rules.\n        </Text>\n        <Text>\n          Each release of RHEL is supported with a unique and specific version\n          of the SCAP Security Guide (SSG). You must customize each version of\n          SSG for each release of RHEL.\n        </Text>\n      </TextContent>\n\n      <StateViewWithError\n        stateValues={{\n          error,\n          data: dataState,\n          loading: loadingState,\n          noRuleSets,\n        }}\n      >\n        <StateViewPart stateKey=\"noRuleSets\">\n          <EmptyState>\n            <Title headingLevel=\"h1\" size=\"xl\">\n              No rules can be configured\n            </Title>\n            <EmptyStateBody>\n              The policy type selected does not exist for the systems and OS\n              versions selected in the previous steps.\n            </EmptyStateBody>\n          </EmptyState>\n        </StateViewPart>\n        <StateViewPart stateKey=\"loading\">\n          <EmptyTable>\n            <Spinner />\n          </EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n          <TabbedRules\n            tabsData={tabsData}\n            selectedRuleRefIds={selectedRuleRefIds}\n            columns={columns}\n            remediationsEnabled={false}\n            selectedFilter\n            level={1}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            ouiaId=\"RHELVersions\"\n            resetLink={true}\n            rulesPageLink={true}\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </React.Fragment>\n  );\n};\n\nEditPolicyProfilesRules.propTypes = {\n  policy: propTypes.object,\n  change: reduxFormPropTypes.change,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  selectedRuleRefIds: propTypes.array,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    policy: selector(state, 'profile'),\n    osMajorVersion: selector(state, 'osMajorVersion'),\n    osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n    selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyProfilesRules);\n","import React from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  reduxForm,\n  formValueSelector,\n} from 'redux-form';\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  WizardContextConsumer,\n} from '@patternfly/react-core';\nimport { SystemsTable } from 'SmartComponents';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { countOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n        <br />\n        Policies must be created with at least one system.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Choose a different operating system, or connect{' '}\n        <b>RHEL {osMajorVersion}</b> systems to Insights.\n      </Text>\n    </TextContent>\n    <WizardContextConsumer>\n      {({ goToStepById }) => (\n        <Button onClick={() => goToStepById(1)}>\n          Choose a different operating system\n        </Button>\n      )}\n    </WizardContextConsumer>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n        <br />\n        Systems can be added or removed at any time.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nexport const EditPolicySystems = ({\n  policy,\n  change,\n  osMajorVersion,\n  selectedSystems,\n}) => {\n  const onSystemSelect = (newSelectedSystems) => {\n    change('systems', newSelectedSystems);\n    change('osMinorVersionCounts', countOsMinorVersions(newSelectedSystems));\n  };\n  const osMinorVersions = policy.supportedOsVersions.map(\n    (version) => version.split('.')[1]\n  );\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-mb-md\">\n        <Text component={TextVariants.h1}>Systems</Text>\n      </TextContent>\n      <Form>\n        <FormGroup>\n          <SystemsTable\n            showOsMinorVersionFilter={[osMajorVersion]}\n            prependComponent={\n              <PrependComponent osMajorVersion={osMajorVersion} />\n            }\n            emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n            columns={[\n              {\n                ...Columns.Name,\n                props: {\n                  width: 40,\n                },\n                sortBy: ['name'],\n              },\n              Columns.inventoryColumn('tags'),\n              Columns.OperatingSystem,\n            ]}\n            remediationsEnabled={false}\n            compact\n            showActions={false}\n            defaultFilter={\n              osMajorVersion &&\n              `os_major_version = ${osMajorVersion} AND os_minor_version ^ (${osMinorVersions.join(\n                ','\n              )})`\n            }\n            enableExport={false}\n            preselectedSystems={selectedSystems}\n            onSelect={onSystemSelect}\n          />\n        </FormGroup>\n      </Form>\n    </React.Fragment>\n  );\n};\n\nEditPolicySystems.propTypes = {\n  osMajorVersion: propTypes.string,\n  policy: propTypes.object,\n  selectedSystems: propTypes.array,\n  change: reduxFormPropTypes.change,\n};\n\nEditPolicySystems.defaultProps = {\n  selectedSystems: [],\n};\n\nconst selector = formValueSelector('policyForm');\nconst mapStateToProps = (state) => ({\n  policy: selector(state, 'profile'),\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  selectedSystems: selector(state, 'systems'),\n});\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicySystems);\n","import React, { useEffect } from 'react';\nimport { compose } from 'redux';\nimport {\n  Field,\n  reduxForm,\n  formValueSelector,\n  propTypes as reduxFormPropTypes,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  ReduxFormTextInput,\n  ReduxFormTextArea,\n} from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport {\n  ProfileThresholdField,\n  PolicyBusinessObjectiveTooltip,\n} from 'PresentationalComponents';\n\nexport const EditPolicyDetails = ({ change, policy, refId }) => {\n  useEffect(() => {\n    if (policy && policy.refId !== refId) {\n      change('name', `${policy.name}`);\n      change('refId', `${policy.refId}`);\n      change('description', `${policy.description}`);\n    }\n  }, [policy]);\n\n  return (\n    <React.Fragment>\n      <TextContent>\n        <Text component={TextVariants.h1}>Details</Text>\n      </TextContent>\n      <br />\n      <Form id=\"editpolicydetails\">\n        <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n          <Field\n            component={ReduxFormTextInput}\n            type=\"text\"\n            isRequired={true}\n            id=\"name\"\n            name=\"name\"\n            aria-describedby=\"name\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            isDisabled\n            id=\"refId\"\n            name=\"refId\"\n            aria-describedby=\"refId\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Description\" fieldId=\"description\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextArea}\n            id=\"description\"\n            name=\"description\"\n            aria-describedby=\"description\"\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Business objective\"\n          labelIcon={<PolicyBusinessObjectiveTooltip />}\n          fieldId=\"businessObjective\"\n        >\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            id=\"businessObjective\"\n            name=\"businessObjective\"\n            aria-describedby=\"businessObjective\"\n            defaultValue={policy.businessObjective}\n          />\n        </FormGroup>\n        <ProfileThresholdField previousThreshold={100} />\n      </Form>\n    </React.Fragment>\n  );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n  policy: propTypes.object,\n  refId: propTypes.string,\n  change: reduxFormPropTypes.change,\n};\n\nconst mapStateToProps = (state) => {\n  const policy = selector(state, 'profile');\n  return {\n    policy,\n    refId: selector(state, 'refId'),\n    initialValues: {\n      name: `${policy.name}`,\n      refId: `${policy.refId}`,\n      description: `${policy.description}`,\n      benchmark: selector(state, 'benchmark'),\n      osMajorVersion: selector(state, 'osMajorVersion'),\n      profile: selector(state, 'profile'),\n    },\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyDetails);\n","import React from 'react';\nimport {\n  Label,\n  Text,\n  TextVariants,\n  TextContent,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\n\nconst ReviewCreatedPolicy = ({\n  name,\n  businessObjective,\n  complianceThreshold,\n  parentProfileName,\n  osMinorVersionCounts,\n  osMajorVersion,\n}) => (\n  <TextContent>\n    <Text component={TextVariants.h1}>Review</Text>\n    <Text>Review your SCAP policy before finishing.</Text>\n    <Text component={TextVariants.h3} style={{ marginTop: 0 }}>\n      {name}\n    </Text>\n    <TextList component={TextListVariants.dl}>\n      <TextListItem component={TextListItemVariants.dt}>\n        Policy type\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        {parentProfileName}\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dt}>\n        Compliance threshold\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        {complianceThreshold}%\n      </TextListItem>\n      {businessObjective && (\n        <React.Fragment>\n          <TextListItem component={TextListItemVariants.dt}>\n            Business objective\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {businessObjective}\n          </TextListItem>\n        </React.Fragment>\n      )}\n      <TextListItem component={TextListItemVariants.dt}>Systems</TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        <TextList component={TextListVariants.dl}>\n          {osMinorVersionCounts.map(({ osMinorVersion, count }) => (\n            <React.Fragment key={osMinorVersion}>\n              <TextListItem\n                component={TextListItemVariants.dt}\n                style={{ fontWeight: 'normal' }}\n              >\n                RHEL {osMajorVersion}.{osMinorVersion}\n              </TextListItem>\n              <TextListItem component={TextListItemVariants.dd}>\n                <Label color=\"grey\" isCompact={true}>\n                  {count} {count > 1 ? 'systems' : 'system'}\n                </Label>\n              </TextListItem>\n            </React.Fragment>\n          ))}\n        </TextList>\n      </TextListItem>\n    </TextList>\n  </TextContent>\n);\n\nReviewCreatedPolicy.propTypes = {\n  benchmarkId: propTypes.string,\n  refId: propTypes.string,\n  name: propTypes.string,\n  businessObjective: propTypes.string,\n  complianceThreshold: propTypes.number,\n  parentProfileName: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  osMajorVersion: propTypes.string.isRequired,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect((state) => ({\n  benchmarkId: selector(state, 'benchmark'),\n  refId: selector(state, 'refId'),\n  name: selector(state, 'name'),\n  businessObjective: selector(state, 'businessObjective'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  complianceThreshold:\n    parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n  parentProfileName: selector(state, 'profile').name,\n  rulesCount: selector(state, 'selectedRuleRefIds').length,\n}))(ReviewCreatedPolicy);\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Title,\n  Button,\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  List,\n  ListItem,\n} from '@patternfly/react-core';\nimport {\n  ProgressBar,\n  LinkWithPermission as Link,\n} from 'PresentationalComponents';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from '@apollo/client/react/hoc';\nimport { usePolicy } from 'Mutations';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nconst EmtpyStateWithErrors = ({ errors }) =>\n  errors && Array.isArray(errors) && errors.length > 0 ? (\n    <EmptyStateBody className=\"wizard-failed-errors\">\n      <List>\n        {errors.map((error) => (\n          <ListItem key={error}>{error}</ListItem>\n        ))}\n      </List>\n    </EmptyStateBody>\n  ) : null;\n\nEmtpyStateWithErrors.propTypes = {\n  errors: propTypes.array,\n};\n\nexport const FinishedCreatePolicy = ({\n  onWizardFinish,\n  cloneFromProfileId,\n  description,\n  name,\n  complianceThreshold,\n  businessObjective,\n  refId,\n  benchmarkId,\n  systems,\n  selectedRuleRefIds,\n}) => {\n  const [percent, setPercent] = useState(0);\n  const [message, setMessage] = useState('This usually takes a minute or two.');\n  const [errors, setErrors] = useState(null);\n  const [failed, setFailed] = useState(false);\n  const updatePolicy = usePolicy();\n\n  const onProgress = (progress) => {\n    setPercent(progress * 100);\n  };\n\n  useEffect(() => {\n    const newPolicy = {\n      cloneFromProfileId,\n      description,\n      name,\n      complianceThreshold,\n      businessObjective: { title: businessObjective },\n      refId,\n      benchmarkId,\n      hosts: systems,\n      selectedRuleRefIds,\n    };\n\n    updatePolicy(null, newPolicy, onProgress)\n      .then(({ id }) => {\n        setPercent(100);\n        setMessage();\n        dispatchNotification({\n          variant: 'success',\n          title: `Created policy \"${name}\"`,\n          autoDismiss: true,\n          description: (\n            <span>\n              From the <strong>SCAP Policies</strong> list, open{' '}\n              <Link to={`/scappolicies/${id}`}>{name}</Link>.\n            </span>\n          ),\n        });\n      })\n      .catch((error) => {\n        setMessage(error.networkError?.message);\n        setErrors(error.networkError?.result?.errors);\n        setFailed(true);\n        dispatchNotification({\n          variant: 'danger',\n          title: 'Error creating policy',\n          description: error.message,\n        });\n      });\n  }, []);\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={WrenchIcon} />\n        <br />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          Creating policy\n        </Title>\n        <EmptyStateBody>\n          <ProgressBar percent={percent} failed={failed} />\n        </EmptyStateBody>\n        <EmptyStateBody className={failed && 'wizard-failed-message'}>\n          {message}\n        </EmptyStateBody>\n        <EmtpyStateWithErrors error={errors} />\n        <EmptyStateSecondaryActions>\n          {(percent === 100 || failed) && (\n            <Button\n              variant={'primary'}\n              ouiaId=\"ReturnToAppButton\"\n              onClick={() => {\n                onWizardFinish();\n              }}\n            >\n              {failed ? 'Back' : 'Return to application'}\n            </Button>\n          )}\n        </EmptyStateSecondaryActions>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nFinishedCreatePolicy.propTypes = {\n  benchmarkId: propTypes.string.isRequired,\n  businessObjective: propTypes.object,\n  cloneFromProfileId: propTypes.string.isRequired,\n  refId: propTypes.string.isRequired,\n  name: propTypes.string.isRequired,\n  description: propTypes.string,\n  systems: propTypes.array,\n  complianceThreshold: propTypes.number,\n  onWizardFinish: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string).isRequired,\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    benchmarkId: selector(state, 'benchmark'),\n    businessObjective: selector(state, 'businessObjective'),\n    cloneFromProfileId: selector(state, 'profile').id,\n    refId: selector(state, 'refId'),\n    name: selector(state, 'name'),\n    description: selector(state, 'description'),\n    complianceThreshold:\n      parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n    systems: selector(state, 'systems'),\n    selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: true,\n    forceUnregisterOnUnmount: true,\n  }),\n  withApollo\n)(FinishedCreatePolicy);\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { formValueSelector, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport { default as EditPolicyRules } from './EditPolicyProfilesRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport {\n  validateBenchmarkPage,\n  validateDetailsPage,\n  validateRulesPage,\n  validateSystemsPage,\n} from './validate';\n\nexport const CreatePolicyForm = ({\n  benchmark,\n  osMajorVersion,\n  complianceThreshold,\n  name,\n  profile,\n  refId,\n  selectedRuleRefIds,\n  systemIds,\n  reset,\n}) => {\n  const history = useHistory();\n  const [stepIdReached, setStepIdReached] = useState(1);\n  const resetAnchor = () => {\n    const { location } = history;\n    if (location.hash) {\n      history.push({ ...location, hash: '' });\n    }\n  };\n\n  const onNext = ({ id }) => {\n    setStepIdReached(stepIdReached < id ? id : stepIdReached);\n    resetAnchor();\n  };\n\n  const onClose = () => {\n    reset();\n    history.push('/scappolicies');\n  };\n\n  const steps = [\n    {\n      id: 1,\n      name: 'Create SCAP policy',\n      component: <CreateSCAPPolicy />,\n      enableNext: validateBenchmarkPage(benchmark, osMajorVersion, profile),\n    },\n    {\n      id: 2,\n      name: 'Details',\n      component: <EditPolicyDetails />,\n      canJumpTo: stepIdReached >= 2,\n      enableNext: validateDetailsPage(name, refId, complianceThreshold),\n    },\n    {\n      id: 3,\n      name: 'Systems',\n      component: <EditPolicySystems />,\n      canJumpTo: stepIdReached >= 3,\n      enableNext: validateSystemsPage(systemIds),\n    },\n    {\n      id: 4,\n      name: 'Rules',\n      component: <EditPolicyRules />,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 4,\n      enableNext: validateRulesPage(selectedRuleRefIds),\n    },\n    {\n      id: 5,\n      name: 'Review',\n      component: <ReviewCreatedPolicy osMajorVersion={osMajorVersion} />,\n      nextButtonText: 'Finish',\n      canJumpTo:\n        validateRulesPage(selectedRuleRefIds) &&\n        systemIds?.length > 0 &&\n        stepIdReached >= 5,\n    },\n    {\n      id: 6,\n      name: 'Finished',\n      component: <FinishedCreatePolicy onWizardFinish={onClose} />,\n      isFinishedStep: true,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 6,\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <Wizard\n        className=\"compliance\"\n        isOpen\n        onNext={onNext}\n        onGoToStep={resetAnchor}\n        onBack={resetAnchor}\n        onClose={onClose}\n        title=\"Create SCAP policy\"\n        description=\"Create a new policy for managing SCAP compliance\"\n        steps={steps}\n      />\n    </React.Fragment>\n  );\n};\n\nCreatePolicyForm.propTypes = {\n  benchmark: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  complianceThreshold: propTypes.string,\n  businessObjective: propTypes.object,\n  dispatch: propTypes.func,\n  isOpen: propTypes.bool,\n  name: propTypes.string,\n  onWizardFinish: propTypes.func,\n  profile: propTypes.string,\n  refId: propTypes.string,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string),\n  systemIds: propTypes.arrayOf(propTypes.string),\n  reset: propTypes.func,\n};\n\nCreatePolicyForm.defaultProps = {\n  isOpen: false,\n};\n\nconst CreatePolicy = reduxForm({\n  form: 'policyForm',\n})(CreatePolicyForm);\n\nconst selector = formValueSelector('policyForm');\nexport default connect((state) => ({\n  benchmark: selector(state, 'benchmark'),\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  businessObjective: selector(state, 'businessObjective'),\n  complianceThreshold: selector(state, 'complianceThreshold') || 100,\n  name: selector(state, 'name'),\n  profile: selector(state, 'profile'),\n  refId: selector(state, 'refId'),\n  selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  systemIds: selector(state, 'systems'),\n}))(CreatePolicy);\n","import { Button, Checkbox, ModalVariant, Text } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { DELETE_PROFILE } from 'Mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ComplianceModal } from 'PresentationalComponents';\nimport { dispatchAction } from 'Utilities/Dispatcher';\n\nconst DeletePolicy = () => {\n  const [deleteEnabled, setDeleteEnabled] = useState(false);\n  const location = useLocation();\n  const history = useHistory();\n  const { name, id } = location.state.policy;\n  const onClose = () => {\n    history.push('/scappolicies');\n  };\n\n  const [deletePolicy] = useMutation(DELETE_PROFILE, {\n    onCompleted: () => {\n      dispatchAction(\n        addNotification({\n          variant: 'success',\n          title: `Deleted \"${name}\" and its associated reports`,\n        })\n      );\n      onClose();\n    },\n    onError: (error) => {\n      dispatchAction(\n        addNotification({\n          variant: 'danger',\n          title: 'Error removing policy',\n          description: error.message,\n        })\n      );\n      onClose();\n    },\n  });\n\n  return (\n    <ComplianceModal\n      variant={ModalVariant.small}\n      title=\"Delete policy?\"\n      titleIconVariant=\"warning\"\n      ouiaId=\"DeletePolicyModal\"\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"destroy\"\n          ouiaId=\"DeletePolicyButton\"\n          aria-label=\"delete\"\n          isDisabled={!deleteEnabled}\n          variant=\"danger\"\n          onClick={() => deletePolicy({ variables: { input: { id } } })}\n        >\n          Delete policy and associated reports\n        </Button>,\n        <Button\n          key=\"cancel\"\n          ouiaId=\"DeletePolicyCancelButton\"\n          variant=\"secondary\"\n          onClick={onClose}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <Text className=\"policy-delete-body-text\">\n        Deleting the policy <b>{name}</b> will also delete its associated\n        reports.\n      </Text>\n      <Checkbox\n        label=\"I understand this will delete the policy and all associated reports\"\n        id={`deleting-policy-check-${id}`}\n        isChecked={deleteEnabled}\n        onChange={setDeleteEnabled}\n      />\n    </ComplianceModal>\n  );\n};\n\nDeletePolicy.propTypes = {\n  policy: propTypes.object,\n};\n\nexport default DeletePolicy;\n","import { Button, ModalVariant, TextContent } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { DELETE_REPORT } from 'Mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ComplianceModal } from 'PresentationalComponents';\nimport { dispatchAction } from 'Utilities/Dispatcher';\n\nconst DeleteReport = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const { id } = location.state?.profile;\n  const onClose = () => {\n    history.push(location.state.background);\n  };\n\n  const onDelete = () => {\n    history.push('/reports');\n  };\n\n  const [deleteReport] = useMutation(DELETE_REPORT, {\n    onCompleted: () => {\n      dispatchAction(\n        addNotification({\n          variant: 'success',\n          title: 'Report deleted',\n          description:\n            'Systems associated with this policy will upload reports on the next check-in.',\n        })\n      );\n      onDelete();\n    },\n    onError: (error) => {\n      dispatchAction(\n        addNotification({\n          variant: 'danger',\n          title: 'Error removing report',\n          description: error.message,\n        })\n      );\n      onClose();\n    },\n  });\n  return (\n    <ComplianceModal\n      isOpen\n      variant={ModalVariant.small}\n      title=\"Delete report?\"\n      titleIconVariant=\"warning\"\n      ouiaId=\"DeleteReportModal\"\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"destroy\"\n          ouiaId=\"DeleteReportButton\"\n          aria-label=\"delete\"\n          variant=\"danger\"\n          onClick={() =>\n            deleteReport({\n              variables: {\n                input: {\n                  profileId: id,\n                },\n              },\n            })\n          }\n        >\n          Delete report\n        </Button>,\n        <Button\n          key=\"cancel\"\n          ouiaId=\"DeleteReportCancelButton\"\n          variant=\"secondary\"\n          onClick={() => onClose()}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        Deleting a report is permanent and cannot be undone.\n      </TextContent>\n    </ComplianceModal>\n  );\n};\n\nDeleteReport.propTypes = {\n  onClose: propTypes.func,\n  isModalOpen: propTypes.bool,\n  onDelete: propTypes.func,\n  policyId: propTypes.string,\n};\n\nDeleteReport.defaultProps = {\n  onDelete: () => {},\n  onClose: () => {},\n};\n\nexport default DeleteReport;\n","import gql from 'graphql-tag';\n\nexport const PROFILES_QUERY = gql`\n  query Profiles($filter: String!) {\n    profiles(search: $filter) {\n      edges {\n        node {\n          id\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          policy {\n            id\n          }\n          policyType\n          benchmark {\n            id\n            refId\n            latestSupportedOsMinorVersions\n            osMajorVersion\n            version\n          }\n          rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const BENCHMARKS_QUERY = gql`\n  query Benchmarks($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        profiles {\n          id\n          refId\n          ssgVersion\n        }\n      }\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  Text,\n  TextContent,\n  Title,\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport { sortingByProp } from 'Utilities/helpers';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\nimport { BENCHMARKS_QUERY } from './constants';\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst EditPolicyRulesTabEmptyState = () => (\n  <EmptyState>\n    <Title headingLevel=\"h5\" size=\"lg\">\n      No rules can be configured\n    </Title>\n    <EmptyStateBody>\n      This policy has no associated systems, and therefore no rules can be\n      configured.\n    </EmptyStateBody>\n    <EmptyStateBody>\n      Add at least one system to configure rules for this policy.\n    </EmptyStateBody>\n  </EmptyState>\n);\n\nexport const toTabsData = (policy, osMinorVersionCounts, benchmarks) =>\n  Object.values(osMinorVersionCounts)\n    .sort(sortingByProp('osMinorVersion', 'desc'))\n    .map(({ osMinorVersion, count: systemCount }) => {\n      osMinorVersion = `${osMinorVersion}`;\n      let profile = policy.policy.profiles.find(\n        (profile) => profile.osMinorVersion === osMinorVersion\n      );\n      let osMajorVersion = policy.osMajorVersion;\n\n      if (!profile && benchmarks) {\n        const benchmark = getBenchmarkBySupportedOsMinor(\n          benchmarks,\n          osMinorVersion\n        );\n        if (benchmark) {\n          const benchmarkProfile = getBenchmarkProfile(benchmark, policy.refId);\n          if (benchmarkProfile) {\n            profile = policy.policy.profiles.find(\n              (profile) =>\n                profile.parentProfileId === benchmarkProfile.id &&\n                profile.osMinorVersion === osMinorVersion\n            );\n\n            profile = {\n              ...benchmarkProfile,\n              benchmark,\n              osMajorVersion,\n              ...profile,\n            };\n          }\n        }\n      }\n\n      return {\n        profile,\n        systemCount,\n        newOsMinorVersion: osMinorVersion,\n      };\n    })\n    .filter(({ profile, newOsMinorVersion }) => !!profile && newOsMinorVersion);\n\nexport const EditPolicyRulesTab = ({\n  policy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  osMinorVersionCounts,\n}) => {\n  const osMajorVersion = policy?.osMajorVersion;\n  const osMinorVersions = Object.keys(osMinorVersionCounts).sort();\n  const benchmarkSearch =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const {\n    data: benchmarksData,\n    error,\n    loading,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter: benchmarkSearch,\n    },\n    skip: osMinorVersions.length === 0,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  const tabsData = toTabsData(policy, osMinorVersionCounts, benchmarks);\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n\n  const dataState = !loading && tabsData?.length > 0 ? tabsData : undefined;\n\n  useEffect(() => {\n    if (policy.policy.profiles) {\n      const profiles = policy.policy.profiles;\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      setSelectedRuleRefIds((prevSelection) => {\n        const newSelection = profilesWithRulesToSelection(\n          profilesWithOs,\n          prevSelection\n        );\n        return newSelection;\n      });\n    }\n  }, [policy.policy.profiles]);\n\n  return (\n    <StateViewWithError\n      stateValues={{\n        error,\n        data: !error && dataState,\n        loading,\n        empty: !loading && !dataState && !error,\n      }}\n    >\n      <StateViewPart stateKey=\"loading\">\n        <EmptyTable>\n          <Spinner />\n        </EmptyTable>\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <TextContent>\n          <Text>\n            Different release versions of RHEL are associated with different\n            versions of the SCAP Security Guide (SSG), therefore each release\n            must be customized independently.\n          </Text>\n        </TextContent>\n        <TabbedRules\n          columns={[Columns.Name, Columns.Severity, Columns.Remediation]}\n          tabsData={tabsData}\n          selectedRuleRefIds={selectedRuleRefIds}\n          setSelectedRuleRefIds={setSelectedRuleRefIds}\n          remediationsEnabled={false}\n          selectedFilter\n          level={1}\n          ouiaId=\"RHELVersions\"\n        />\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">\n        <EditPolicyRulesTabEmptyState />\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nEditPolicyRulesTab.propTypes = {\n  setNewRuleTabs: propTypes.func,\n  policy: propTypes.object,\n  osMinorVersionCounts: propTypes.shape({\n    osMinorVersion: propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    }),\n  }),\n  selectedRuleRefIds: propTypes.array,\n  setSelectedRuleRefIds: propTypes.func,\n};\n\nexport default EditPolicyRulesTab;\n","import React from 'react';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { SystemsTable } from 'SmartComponents';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>Connect RHEL {osMajorVersion} systems to Insights.</Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst EditPolicySystemsTab = ({ policy, onSystemSelect, selectedSystems }) => {\n  const { id: policyId, osMajorVersion, supportedOsVersions } = policy;\n  const osMinorVersions = supportedOsVersions.map(\n    (version) => version.split('.')[1]\n  );\n  const osFilter =\n    osMajorVersion &&\n    `os_major_version = ${osMajorVersion} AND os_minor_version ^ (${osMinorVersions.join(\n      ','\n    )})`;\n  const defaultFilter = osFilter\n    ? `${osFilter} or policy_id = ${policyId}`\n    : `policy_id = ${policyId}`;\n\n  return (\n    <React.Fragment>\n      <SystemsTable\n        columns={[\n          Columns.Name,\n          Columns.inventoryColumn('tags'),\n          Columns.OperatingSystem,\n        ]}\n        showOsMinorVersionFilter={[osMajorVersion]}\n        prependComponent={<PrependComponent osMajorVersion={osMajorVersion} />}\n        emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n        compact\n        showActions={false}\n        defaultFilter={defaultFilter}\n        enableExport={false}\n        remediationsEnabled={false}\n        preselectedSystems={selectedSystems}\n        onSelect={onSystemSelect}\n      />\n    </React.Fragment>\n  );\n};\n\nEditPolicySystemsTab.propTypes = {\n  policy: propTypes.object,\n  newRuleTabs: propTypes.bool,\n  onSystemSelect: propTypes.func,\n  selectedSystems: propTypes.array,\n};\n\nexport default EditPolicySystemsTab;\n","import React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { Alert, AlertActionLink } from '@patternfly/react-core';\n\nconst NewRulesAlert = () => {\n  const history = useHistory();\n  const location = useLocation();\n\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title=\"You selected a system that has a release version previously not included in this policy.\"\n      actionLinks={\n        <AlertActionLink\n          onClick={() => history.push({ ...location, hash: '#rules' })}\n        >\n          Open rule editing\n        </AlertActionLink>\n      }\n    >\n      <p>\n        If you have edited any rules for this policy, you will need to do so for\n        this release version as well.\n      </p>\n    </Alert>\n  );\n};\n\nexport default NewRulesAlert;\n","import React, { useCallback, useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { Form, Tab, TabTitleText } from '@patternfly/react-core';\nimport { RoutedTabs } from 'PresentationalComponents';\nimport EditPolicyRulesTab from './EditPolicyRulesTab';\nimport EditPolicySystemsTab from './EditPolicySystemsTab';\nimport NewRulesAlert from './components/NewRulesAlert';\nimport { mapCountOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport { profilesWithRulesToSelection } from 'PresentationalComponents/TabbedRules';\nimport { thresholdValid } from '../CreatePolicy/validate';\nimport { useNewRulesAlertState } from './hooks/index';\n\nconst profilesToOsMinorMap = (profiles, hosts) =>\n  (profiles || []).reduce((acc, profile) => {\n    if (profile.osMinorVersion !== '') {\n      acc[profile.osMinorVersion] ||= {\n        osMinorVersion: profile.osMinorVersion,\n        count: 0,\n      };\n    }\n\n    return acc;\n  }, mapCountOsMinorVersions(hosts || []));\n\nconst EditPolicyForm = ({\n  policy,\n  setUpdatedPolicy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  selectedSystems,\n  setSelectedSystems,\n}) => {\n  const policyProfiles = policy?.policy?.profiles || [];\n  const [osMinorVersionCounts, setOsMinorVersionCounts] = useState({});\n  const [newRulesAlert, setNewRulesAlert] = useNewRulesAlertState(false);\n\n  const handleSystemSelect = useCallback(\n    (newSelectedSystems) => {\n      const policyMinorVersions = policy.hosts.map(\n        ({ osMinorVersion }) => osMinorVersion\n      );\n      const hasNewOsMinorVersions =\n        newSelectedSystems.filter(\n          ({ osMinorVersion }) => !policyMinorVersions.includes(osMinorVersion)\n        ).length > 0;\n\n      setSelectedSystems(newSelectedSystems);\n      setNewRulesAlert(hasNewOsMinorVersions);\n      setOsMinorVersionCounts(\n        profilesToOsMinorMap(policyProfiles, newSelectedSystems)\n      );\n    },\n    [policyProfiles, selectedRuleRefIds]\n  );\n\n  useEffect(() => {\n    if (policy) {\n      const complianceThresholdValid = thresholdValid(\n        policy.complianceThreshold\n      );\n      const profilesWithOsMinor = policyProfiles.filter(\n        ({ osMinorVersion }) => !!osMinorVersion\n      );\n      setUpdatedPolicy({\n        ...policy,\n        complianceThresholdValid,\n      });\n\n      setSelectedRuleRefIds(profilesWithRulesToSelection(profilesWithOsMinor));\n      handleSystemSelect(policy.hosts);\n    }\n  }, [policy]);\n\n  return (\n    <Form>\n      <RoutedTabs ouiaId=\"EditSystems\" defaultTab=\"systems\" id=\"policy-tabs\">\n        <Tab\n          eventKey=\"rules\"\n          ouiaId=\"Rules\"\n          title={<TabTitleText>Rules</TabTitleText>}\n        >\n          <EditPolicyRulesTab\n            policy={policy}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            selectedRuleRefIds={selectedRuleRefIds}\n            osMinorVersionCounts={osMinorVersionCounts}\n          />\n        </Tab>\n        <Tab\n          eventKey=\"systems\"\n          ouiaId=\"Systems\"\n          title={<TabTitleText>Systems</TabTitleText>}\n        >\n          <EditPolicySystemsTab\n            policy={policy}\n            selectedSystems={selectedSystems}\n            onSystemSelect={handleSystemSelect}\n          />\n          {newRulesAlert && <NewRulesAlert />}\n        </Tab>\n      </RoutedTabs>\n    </Form>\n  );\n};\n\nEditPolicyForm.propTypes = {\n  policy: propTypes.object,\n  updatedPolicy: propTypes.object,\n  setUpdatedPolicy: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.object),\n  setSelectedRuleRefIds: propTypes.func,\n  setSelectedSystems: propTypes.func,\n  selectedSystems: propTypes.array,\n};\n\nexport default EditPolicyForm;\n","import { useState } from 'react';\n\nexport const useNewRulesAlertState = (...args) => useState(...args);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Button, Spinner } from '@patternfly/react-core';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport {\n  ComplianceModal,\n  StateViewWithError,\n  StateViewPart,\n} from 'PresentationalComponents';\nimport EditPolicyForm from './EditPolicyForm';\nimport { useOnSave, useLinkToPolicy } from './hooks';\n\nexport const MULTIVERSION_QUERY = gql`\n  query Profile($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      external\n      description\n      totalHostCount\n      compliantHostCount\n      complianceThreshold\n      osMajorVersion\n      supportedOsVersions\n      lastScanned\n      policyType\n      policy {\n        id\n        name\n        refId\n        profiles {\n          id\n          parentProfileId\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          benchmark {\n            id\n            title\n            latestSupportedOsMinorVersions\n            osMajorVersion\n            version\n          }\n          rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n        }\n      }\n      businessObjective {\n        id\n        title\n      }\n      hosts {\n        id\n        osMinorVersion\n        osMajorVersion\n      }\n    }\n  }\n`;\n\nexport const EditPolicy = ({ route }) => {\n  const { policy_id: policyId } = useParams();\n  const { data, loading, error } = useQuery(MULTIVERSION_QUERY, {\n    variables: { policyId },\n  });\n  const policy = data?.profile;\n  const linkToPolicy = useLinkToPolicy();\n  const [updatedPolicy, setUpdatedPolicy] = useState(null);\n  const [selectedRuleRefIds, setSelectedRuleRefIds] = useState([]);\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const saveEnabled = updatedPolicy && !updatedPolicy.complianceThresholdValid;\n  const updatedPolicyHostsAndRules = {\n    ...updatedPolicy,\n    selectedRuleRefIds,\n    hosts: selectedSystems,\n  };\n  const [isSaving, onSave] = useOnSave(policy, updatedPolicyHostsAndRules);\n\n  const actions = [\n    <Button\n      isDisabled={saveEnabled}\n      key=\"save\"\n      ouiaId=\"EditPolicySaveButton\"\n      variant=\"primary\"\n      spinnerAriaValueText=\"Saving\"\n      isLoading={isSaving}\n      onClick={onSave}\n    >\n      Save\n    </Button>,\n    <Button\n      key=\"cancel\"\n      ouiaId=\"EditPolicyCancelButton\"\n      variant=\"link\"\n      onClick={() => linkToPolicy()}\n    >\n      Cancel\n    </Button>,\n  ];\n\n  useTitleEntity(route, policy?.name);\n\n  return (\n    <ComplianceModal\n      isOpen\n      position={'top'}\n      style={{ minHeight: '350px' }}\n      variant={'large'}\n      ouiaId=\"EditPolicyModal\"\n      title={`Edit ${policy ? policy.name : ''}`}\n      onClose={() => linkToPolicy()}\n      actions={actions}\n    >\n      <StateViewWithError stateValues={{ policy, loading, error }}>\n        <StateViewPart stateKey=\"loading\">\n          <Spinner />\n        </StateViewPart>\n        <StateViewPart stateKey=\"policy\">\n          <EditPolicyForm\n            {...{\n              policy,\n              updatedPolicy,\n              setUpdatedPolicy,\n              selectedRuleRefIds,\n              setSelectedRuleRefIds,\n              selectedSystems,\n              setSelectedSystems,\n            }}\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </ComplianceModal>\n  );\n};\n\nEditPolicy.propTypes = {\n  route: propTypes.object,\n};\n\nexport default EditPolicy;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\n\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Truncate from '@redhat-cloud-services/frontend-components/Truncate';\nimport {\n  UnsupportedSSGVersion,\n  ComplianceScore as PresentationalComplianceScore,\n  LinkWithPermission as Link,\n} from 'PresentationalComponents';\nimport {\n  // profilesRulesFailed,\n  complianceScoreData,\n  NEVER,\n} from 'Utilities/ruleHelpers';\n\nconst SystemLink = ({ id, children }) => (\n  <Link to={{ pathname: `/systems/${id}` }}>{children}</Link>\n);\n\nSystemLink.propTypes = {\n  id: propTypes.string,\n  children: propTypes.node,\n};\n\nexport const Name = ({\n  id,\n  name,\n  osMajorVersion,\n  osMinorVersion,\n  showOsInfo = false,\n  showLink = false,\n}) => {\n  const hasOsInfo = (osMajorVersion, osMinorVersion) =>\n    !!osMajorVersion && !!osMinorVersion && showOsInfo;\n\n  return (\n    <TextContent>\n      {showLink ? <SystemLink {...{ id }}>{name}</SystemLink> : name}\n\n      {hasOsInfo(osMajorVersion, osMinorVersion) && (\n        <Text component={TextVariants.small}>\n          RHEL {osMajorVersion}.{osMinorVersion}\n        </Text>\n      )}\n    </TextContent>\n  );\n};\n\nName.propTypes = {\n  id: propTypes.string,\n  name: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersion: propTypes.string,\n  showOsInfo: propTypes.bool,\n  showLink: propTypes.bool,\n};\n\nexport const profilesSsgVersions = (profiles) =>\n  profiles\n    .map((p) => p.ssgVersion)\n    .filter((version) => !!version)\n    .join(', ');\n\nexport const SSGVersion = ({ ssgVersion = 'Not available', supported }) =>\n  supported ? (\n    ssgVersion\n  ) : (\n    <UnsupportedSSGVersion messageVariant=\"singular\">\n      {ssgVersion}\n    </UnsupportedSSGVersion>\n  );\n\nSSGVersion.propTypes = {\n  supported: propTypes.bool,\n  ssgVersion: propTypes.string,\n};\n\nexport const SSGVersions = ({ testResultProfiles = [] }) =>\n  testResultProfiles.length !== 0\n    ? testResultProfiles.map((profile) => (\n        <SSGVersion\n          key={`ssgversion-${profile.id}`}\n          ssgVersion={profile?.benchmark?.version}\n          supported={profile?.supported}\n        />\n      ))\n    : 'Unknown';\n\nSSGVersions.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const Policies = ({ policies }) =>\n  (policies || []).length > 0 && (\n    <Truncate\n      inline\n      text={policies.map((p) => p.name).join(', ')}\n      length={215}\n    />\n  );\n\nPolicies.propTypes = {\n  policies: propTypes.array,\n};\n\nexport const FailedRules = ({ id, testResultProfiles }) => {\n  const rulesFailed = testResultProfiles.reduce(\n    (acc, { rulesFailed }) => acc + parseInt(rulesFailed || 0),\n    0\n  );\n\n  return (\n    <SystemLink {...{ id }}>{rulesFailed > 0 ? rulesFailed : 'N/A'}</SystemLink>\n  );\n};\n\nFailedRules.propTypes = {\n  id: propTypes.string,\n  testResultProfiles: propTypes.array,\n};\n\nexport { complianceScoreData };\nexport const ComplianceScore = ({ testResultProfiles }) => {\n  const { score, supported, compliant } = testResultProfiles[0] || {};\n  return testResultProfiles.length > 0 ? (\n    <PresentationalComplianceScore {...{ score, supported, compliant }} />\n  ) : (\n    'N/A'\n  );\n};\n\nComplianceScore.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nconst NeverScanned = () => (\n  <Tooltip\n    position=\"right\"\n    content={\n      <Fragment>\n        This system has never returned a report for this policy. This may be\n        because it is disconnected, or the insights-client on this system is not\n        configured to use Compliance.\n      </Fragment>\n    }\n  >\n    <div>\n      <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n      {' ' + NEVER}\n    </div>\n  </Tooltip>\n);\n\nexport const lastScanned = (profiles) => {\n  const dates = profiles.map((profile) => new Date(profile.lastScanned));\n  const last = new Date(\n    Math.max.apply(\n      null,\n      dates.filter((date) => isFinite(date))\n    )\n  );\n  const result =\n    last instanceof Date && isFinite(last) ? last : <NeverScanned />;\n\n  return result;\n};\n\nexport const LastScanned = ({ testResultProfiles: profiles }) => {\n  const lastScannedDate = lastScanned(profiles || []);\n\n  return lastScannedDate instanceof Date ? (\n    <DateFormat date={Date.parse(lastScannedDate)} type=\"relative\" />\n  ) : (\n    lastScannedDate\n  );\n};\n\nLastScanned.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const operatingSystemString = ({ osMinorVersion, osMajorVersion }) =>\n  `RHEL ${osMajorVersion}.${osMinorVersion}`;\n\nexport const OperatingSystem = (system) => operatingSystemString(system);\n","import React from 'react';\nimport { nowrap } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport { complianceScoreString } from 'PresentationalComponents';\nimport { renderComponent } from 'Utilities/helpers';\n\nimport {\n  Name as NameCell,\n  ComplianceScore as ComplianceScoreCell,\n  FailedRules as FailedRulesCell,\n  LastScanned as LastScannedCell,\n  Policies as PoliciesCell,\n  SSGVersions as SsgVersionCell,\n  complianceScoreData,\n  lastScanned,\n  operatingSystemString,\n  OperatingSystem as OperatingSystemCell,\n} from './Cells';\n\nconst disableSorting = { isStatic: true };\n\nexport const compileColumnRenderFunc = ({ cell, ...column }) => ({\n  ...column,\n  renderFunc: renderComponent(cell, column.props),\n});\n\nexport const customColumn = (column, props) =>\n  compileColumnRenderFunc({\n    ...column,\n    props: {\n      ...column.props,\n      ...props,\n    },\n  });\n\nexport const Name = compileColumnRenderFunc({\n  key: 'name',\n  title: 'Name',\n  sortBy: ['name'],\n  props: {\n    width: 40,\n  },\n  renderExport: (system) => `${system.name} (${operatingSystemString(system)})`,\n  cell: NameCell,\n});\n\nexport const customName = (props) => ({\n  ...Name,\n  props: {\n    ...Name.props,\n    ...props,\n  },\n  renderFunc: renderComponent(NameCell, props),\n});\n\nexport const SsgVersion = {\n  title: 'SSG version',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  sortBy: ['ssg_version'],\n  key: 'ssg_version',\n  renderExport: (testResultProfiles) =>\n    testResultProfiles\n      .map(\n        ({ supported, benchmark: { version } }) =>\n          `${!supported ? '!' : ''}${version}`\n      )\n      .join(', '),\n  renderFunc: renderComponent(SsgVersionCell),\n};\n\nexport const Policies = {\n  title: 'Policies',\n  transforms: [nowrap],\n  key: 'policies',\n  exportKey: 'policies',\n  renderExport: (policies) => policies.map(({ name }) => name).join(', '),\n  props: {\n    width: 40,\n    ...disableSorting,\n  },\n  renderFunc: renderComponent(PoliciesCell),\n};\n\nexport const FailedRules = {\n  title: 'Failed rules',\n  key: 'failedRules',\n  exportKey: 'testResultProfiles',\n  transforms: [nowrap],\n  props: {\n    width: 5,\n    ...disableSorting,\n  },\n  renderFunc: renderComponent(FailedRulesCell),\n};\n\nexport const ComplianceScore = {\n  title: 'Compliance score',\n  key: 'complianceScore',\n  exportKey: 'testResultProfiles',\n  transforms: [nowrap],\n  props: {\n    width: 5,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) =>\n    complianceScoreString(complianceScoreData(testResultProfiles)).trim(),\n  renderFunc: renderComponent(ComplianceScoreCell),\n};\n\nexport const LastScanned = {\n  title: 'Last scanned',\n  key: 'lastScanned',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  props: {\n    width: 10,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) => lastScanned(testResultProfiles),\n  renderFunc: renderComponent(LastScannedCell),\n};\n\nexport const OperatingSystem = compileColumnRenderFunc({\n  title: 'Operating system',\n  key: 'operatingSystem',\n  sortBy: ['osMajorVersion', 'osMinorVersion'],\n  transforms: [nowrap],\n  renderExport: (cell) => operatingSystemString(cell),\n  cell: OperatingSystemCell,\n});\n\nexport const OS = compileColumnRenderFunc({\n  title: (\n    <Tooltip content={<span>Operating System</span>}>\n      <span>OS</span>\n    </Tooltip>\n  ),\n  original: 'Operating System',\n  key: 'operatingSystem',\n  dataLabel: 'OS',\n  transforms: [nowrap],\n  sortBy: ['osMajorVersion', 'osMinorVersion'],\n  props: {\n    width: 10,\n  },\n  renderExport: (cell) => operatingSystemString(cell),\n  cell: OperatingSystemCell,\n});\n\nexport const inventoryColumn = (column, props) => ({\n  key: column,\n  ...props,\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Skeleton, {\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { registryDecorator } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport {\n  InventoryDetail,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\n\n@registryDecorator()\nclass InventoryDetails extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <DetailWrapper\n        onLoad={({ mergeWithDetail }) =>\n          this.getRegistry().register({\n            ...mergeWithDetail(),\n          })\n        }\n      >\n        <InventoryDetail\n          fallback={<Skeleton size={SkeletonSize.md} />}\n          hideBack\n        />\n      </DetailWrapper>\n    );\n  }\n}\n\nInventoryDetails.propTypes = {\n  entity: propTypes.object,\n};\n\nconst ConnectedInventoryDetails = (props) => {\n  return <InventoryDetails {...props} />;\n};\n\nexport default ConnectedInventoryDetails;\n","import { gql } from 'graphql-tag';\n\nexport const DEFAULT_SYSTEMS_PER_BATCH = 3;\nexport const DEFAULT_CONNCURRENT_REQUESTS_FOR_ISSUES = 3;\n\nexport const GET_SYSTEMS_ISSUES = gql`\n  query getSystems(\n    $filter: String!\n    $policyId: ID\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          testResultProfiles(policyId: $policyId) {\n            id\n            refId\n            score\n            lastScanned\n            compliant\n            rulesFailed\n            rulesPassed\n            supported\n            osMajorVersion\n            rules {\n              id\n              refId\n              precedence\n              compliant\n              remediationAvailable\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\nimport { default as RemediationRemediationButton } from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport { useIssuesFetch } from './hooks';\nimport FallbackButton from './components/FallBackButton';\n\nconst RemediationButton = ({\n  rules,\n  systems,\n  policyId,\n  onRemediationCreated,\n  ...buttonProps\n}) => {\n  const { isLoading: isLoadingIssues, fetch } = useIssuesFetch(\n    policyId,\n    rules,\n    systems\n  );\n\n  return (\n    <RemediationRemediationButton\n      isDisabled={systems?.length === 0 || isLoadingIssues}\n      onRemediationCreated={(result) => {\n        dispatchNotification(result.getNotification());\n      }}\n      dataProvider={fetch}\n      buttonProps={{\n        ouiaId: 'RemediateButton',\n        isLoading: isLoadingIssues,\n      }}\n      fallback={<FallbackButton />}\n      {...buttonProps}\n    >\n      Remediate\n    </RemediationRemediationButton>\n  );\n};\n\nRemediationButton.propTypes = {\n  rules: propTypes.array,\n  systems: propTypes.array,\n  onRemediationCreated: propTypes.func,\n  policyId: propTypes.string,\n};\n\nexport default RemediationButton;\n","import { useCallback } from 'react';\nimport { useApolloClient } from '@apollo/client';\nimport usePromiseQueue from 'Utilities/hooks/usePromiseQueue';\nimport {\n  GET_SYSTEMS_ISSUES,\n  DEFAULT_SYSTEMS_PER_BATCH,\n  DEFAULT_CONNCURRENT_REQUESTS_FOR_ISSUES,\n} from './constants';\nimport { remediationData } from './helpers';\n\nexport const useIssuesFetch = (policyId, rules, systems) => {\n  const client = useApolloClient();\n  const { isResolving, results, resolve } = usePromiseQueue(\n    DEFAULT_CONNCURRENT_REQUESTS_FOR_ISSUES\n  );\n\n  const fetchFunction = useCallback(\n    async (perPage, page) => {\n      const systemIds =\n        systems.length > 0 ? `id ^ (${systems.join(',')})` : undefined;\n\n      return (\n        await client.query({\n          query: GET_SYSTEMS_ISSUES,\n          fetchPolicy: 'no-cache',\n          variables: {\n            perPage,\n            page,\n            filter: `(${systemIds}) AND policy_id = ${policyId}`,\n            policyId,\n          },\n        })\n      ).data.systems;\n    },\n    [systems, policyId]\n  );\n\n  const fetch = useCallback(\n    async (batchSize = DEFAULT_SYSTEMS_PER_BATCH) => {\n      const pages = Math.ceil(systems?.length / batchSize) || 1;\n      const results = await resolve(\n        [...new Array(pages)].map(\n          (_, pageIdx) => () => fetchFunction(batchSize, pageIdx + 1)\n        )\n      );\n\n      return results && remediationData(results);\n    },\n    [systems]\n  );\n\n  return {\n    isLoading: isResolving,\n    data: results && remediationData(results),\n    fetch,\n  };\n};\n","import gql from 'graphql-tag';\nimport pickBy from 'lodash/pickBy';\nimport {\n  systemsPolicyFilterConfiguration,\n  systemsOsFilterConfiguration,\n  systemsOsMinorFilterConfiguration,\n} from '@/constants';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { entitiesReducer } from 'Store/Reducers/SystemStore';\n\nexport const GET_MINIMAL_SYSTEMS = gql`\n  query getSystems(\n    $filter: String!\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n          osMinorVersion\n          culledTimestamp\n          staleWarningTimestamp\n          staleTimestamp\n          insightsId\n          lastScanned\n          updated\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_SYSTEMS_OSES = gql`\n  query getSystems($filter: String!) {\n    systems(search: $filter) {\n      osVersions\n    }\n  }\n`;\n\nexport const policyFilter = (policies, osFilter) => [\n  ...systemsPolicyFilterConfiguration(policies),\n  ...(osFilter ? systemsOsFilterConfiguration(policies) : []),\n];\n\nexport const osMinorVersionFilter = (...args) =>\n  systemsOsMinorFilterConfiguration(...args);\n\nexport const initFilterState = (filterConfig) =>\n  pickBy(filterConfig.initialDefaultState(), (value) => !!value);\n\nexport const defaultOnLoad =\n  (columns) =>\n  ({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n    getRegistry().register({\n      ...mergeWithEntities(entitiesReducer(INVENTORY_ACTION_TYPES, columns)),\n    });\n\nexport const ssgVersionFilter = (ssgVersions) => [\n  {\n    type: conditionalFilterType.checkbox,\n    label: 'SSG Version',\n    filterString: (value) => `ssg_version = ${value}`,\n    items: ssgVersions.map((ssgVersion) => ({\n      label: ssgVersion,\n      value: ssgVersion,\n    })),\n  },\n];\n","import React, { useEffect, useLayoutEffect, useState } from 'react';\nimport { useApolloClient, useQuery } from '@apollo/client';\nimport { useDispatch } from 'react-redux';\nimport { Spinner } from '@patternfly/react-core';\nimport debounce from '@redhat-cloud-services/frontend-components-utilities/debounce';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport { osMinorVersionFilter, GET_SYSTEMS_OSES } from './constants';\nimport useExport from 'Utilities/hooks/useTableTools/useExport';\nimport { useBulkSelect } from 'Utilities/hooks/useTableTools/useBulkSelect';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\nimport usePromiseQueue from 'Utilities/hooks/usePromiseQueue';\n\nconst groupByMajorVersion = (versions = [], showFilter = []) => {\n  const showVersion = (version) => {\n    if (showFilter.length > 0) {\n      return showFilter.map(String).includes(String(version));\n    } else {\n      return true;\n    }\n  };\n\n  return versions.reduce((acc, currentValue) => {\n    if (showVersion(currentValue.major)) {\n      acc[String(currentValue.major)] = [\n        ...new Set([...(acc[currentValue.major] || []), currentValue.minor]),\n      ];\n    }\n\n    return acc;\n  }, []);\n};\n\nexport const useOsMinorVersionFilter = (showFilter, fetchArguments = {}) => {\n  let { data } = useQuery(GET_SYSTEMS_OSES, {\n    skip: !showFilter,\n    ...fetchArguments,\n  });\n  const { osVersions } = data?.systems || {};\n\n  return showFilter\n    ? osMinorVersionFilter(groupByMajorVersion(osVersions, showFilter))\n    : [];\n};\n\nexport const useSystemsFilter = (\n  filterString,\n  showOnlySystemsWithTestResults,\n  defaultFilter\n) => {\n  const combindedFilter = [\n    ...(showOnlySystemsWithTestResults ? ['has_test_results = true'] : []),\n    ...(filterString?.length > 0 ? [filterString] : []),\n  ].join(' and ');\n  const filter = defaultFilter\n    ? `(${defaultFilter})` +\n      (combindedFilter ? ` and (${combindedFilter})` : '')\n    : combindedFilter;\n\n  return filter;\n};\n\nconst renameInventoryAttributes = ({\n  culledTimestamp,\n  staleWarningTimestamp,\n  staleTimestamp,\n  insightsId,\n  ...system\n}) => ({\n  ...system,\n  insights_id: insightsId,\n  culled_timestamp: culledTimestamp,\n  stale_warning_timestamp: staleWarningTimestamp,\n  stale_timestamp: staleTimestamp,\n});\n\nexport const useFetchSystems = ({\n  query,\n  onComplete,\n  variables = {},\n  onError,\n}) => {\n  const client = useApolloClient();\n\n  return (perPage, page, requestVariables = {}) =>\n    client\n      .query({\n        query,\n        fetchResults: true,\n        fetchPolicy: 'no-cache',\n        variables: {\n          perPage,\n          page,\n          ...variables,\n          ...requestVariables,\n        },\n      })\n      .then(({ data }) => {\n        const systems = data?.systems?.edges?.map((e) => e.node) || [];\n        const entities = systemsWithRuleObjectsFailed(systems).map(\n          renameInventoryAttributes\n        );\n        const result = {\n          entities,\n          meta: {\n            ...(requestVariables.tags && { tags: requestVariables.tags }),\n            totalCount: data?.systems?.totalCount || 0,\n          },\n        };\n\n        onComplete && onComplete(result);\n        return result;\n      })\n      .catch((error) => {\n        if (onError) {\n          onError(error);\n          return { entities: [], meta: { totalCount: 0 } };\n        } else {\n          throw error;\n        }\n      });\n};\n\nconst useFetchBatched = () => {\n  const { isResolving: isLoading, resolve } = usePromiseQueue();\n\n  return {\n    isLoading,\n    fetchBatched: (fetchFunction, total, filter, batchSize = 50) => {\n      const pages = Math.ceil(total / batchSize) || 1;\n\n      const results = resolve(\n        [...new Array(pages)].map(\n          (_, pageIdx) => () => fetchFunction(batchSize, pageIdx + 1, filter)\n        )\n      );\n\n      return results;\n    },\n  };\n};\n\nconst buildApiFilters = (filters = {}) => {\n  const { tagFilters, ...otherFilters } = filters;\n  const tagsApiFilter = tagFilters\n    ? {\n        tags: tagFilters.flatMap((tagFilter) =>\n          tagFilter.values.map(\n            (tag) =>\n              `${encodeURIComponent(tagFilter.key)}/${encodeURIComponent(\n                tag.tagKey\n              )}=${encodeURIComponent(tag.value)}`\n          )\n        ),\n      }\n    : {};\n\n  return {\n    ...otherFilters,\n    ...tagsApiFilter,\n  };\n};\n\nexport const useGetEntities = (fetchEntities, { selected, columns } = {}) => {\n  const appendDirection = (attributes, direction) =>\n    attributes.map((attribute) => `${attribute}:${direction}`);\n\n  const findColumnByKey = (key) =>\n    (columns || []).find((column) => column.key === key);\n\n  return async (\n    _ids,\n    { page = 1, per_page: perPage, orderBy, orderDirection, filters }\n  ) => {\n    const sortableColumn = findColumnByKey(orderBy);\n    const sortBy =\n      sortableColumn && sortableColumn.sortBy\n        ? appendDirection(sortableColumn.sortBy, orderDirection)\n        : undefined;\n    const filterForApi = buildApiFilters(filters);\n\n    const fetchedEntities = await fetchEntities(perPage, page, {\n      ...filterForApi,\n      sortBy,\n    });\n    const {\n      entities,\n      meta: { totalCount },\n    } = fetchedEntities || {};\n\n    return {\n      results: entities.map((entity) => ({\n        ...entity,\n        selected: (selected || []).map((id) => id).includes(entity.id),\n      })),\n      orderBy,\n      orderDirection,\n      total: totalCount,\n    };\n  };\n};\n\n// This hook is primarily meant to work around issues in the inventory\nexport const useInventoryUtilities = (\n  inventory,\n  selectedSystems,\n  activeFilters\n) => {\n  const dispatch = useDispatch();\n\n  // Resets the Inventory to a loading state\n  // and prevents previously shown columns and rows to appear\n  useLayoutEffect(() => {\n    dispatch({\n      type: 'INVENTORY_INIT',\n    });\n  }, []);\n\n  // Ensures rows are marked as selected\n  useEffect(() => {\n    dispatch({\n      type: 'SELECT_ENTITIES',\n      payload: {\n        selected: selectedSystems,\n      },\n    });\n  }, [selectedSystems]);\n\n  // Filters do not yet trigger the inventory to call getEntities\n  // and the page would not reset to page 1\n  const resetPage = () => {\n    Promise.resolve(\n      dispatch({\n        type: 'RESET_PAGE',\n      })\n    ).then(() => inventory?.current?.onRefreshData());\n  };\n\n  // The debounce is to not have filter updates collide or get out of order.\n  const debounceResetPage = debounce(resetPage, 50);\n\n  useEffect(() => {\n    debounceResetPage();\n  }, [activeFilters]);\n};\n\nconst toIdFilter = (ids) =>\n  ids?.length > 0 ? `id ^ (${ids.join(',')})` : undefined;\n\nexport const useSystemsExport = ({\n  columns,\n  selected,\n  total,\n  fetchArguments,\n}) => {\n  const { isLoading, fetchBatched } = useFetchBatched();\n  const selectionFilter = selected ? toIdFilter(selected) : undefined;\n  const fetchSystems = useFetchSystems({\n    query: fetchArguments.query,\n    variables: {\n      ...fetchArguments.variables,\n      ...(fetchArguments.tags && { tags: fetchArguments.tags }),\n      filter: selectionFilter\n        ? `${fetchArguments.variables.filter} and (${selectionFilter})`\n        : fetchArguments.variables.filter,\n    },\n    onError: () => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Couldn’t download export',\n        description: 'Reinitiate this export to try again.',\n      });\n    },\n  });\n\n  const selectedFilter = () =>\n    selected?.length > 0 ? toIdFilter(selected) : undefined;\n\n  const exporter = async () => {\n    const fetchedItems = await fetchBatched(\n      fetchSystems,\n      total,\n      selectedFilter()\n    );\n\n    return fetchedItems.flatMap((result) => result.entities);\n  };\n\n  const {\n    toolbarProps: { exportConfig },\n  } = useExport({\n    exporter,\n    columns,\n    isDisabled: total === 0 || isLoading,\n    onStart: () => {\n      dispatchNotification({\n        variant: 'info',\n        title: 'Preparing export',\n        description: 'Once complete, your download will start automatically.',\n      });\n    },\n    onComplete: () => {\n      dispatchNotification({\n        variant: 'success',\n        title: 'Downloading export',\n      });\n    },\n  });\n\n  return exportConfig;\n};\n\nexport const useSystemBulkSelect = ({\n  total,\n  onSelect,\n  preselected,\n  fetchArguments,\n  currentPageIds,\n}) => {\n  const { isLoading, fetchBatched } = useFetchBatched();\n  // This is meant as a compatibility layer and to be removed\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const fetchSystems = useFetchSystems({\n    ...fetchArguments,\n    onError: (error) => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error selecting systems',\n        description: error.message,\n      });\n    },\n  });\n\n  const fetchFunc = async (fetchIds) => {\n    if (fetchIds.length === 0) {\n      return [];\n    }\n\n    const idFilter = toIdFilter(fetchIds);\n    const results = await fetchBatched(fetchSystems, fetchIds.length, {\n      ...(idFilter && { filter: idFilter }),\n    });\n\n    return results.flatMap((result) => result.entities);\n  };\n\n  const onSelectCallback = async (selectedIds) => {\n    const systems = await fetchFunc(selectedIds);\n    setSelectedSystems(systems);\n    onSelect && onSelect(systems);\n  };\n\n  const itemIdsInTable = async () => {\n    const results = await fetchBatched(fetchSystems, total);\n    return results.flatMap((result) => result.entities.map(({ id }) => id));\n  };\n\n  const bulkSelect = useBulkSelect({\n    total,\n    onSelect: onSelectCallback,\n    preselected,\n    itemIdsInTable,\n    itemIdsOnPage: () => currentPageIds,\n  });\n\n  return {\n    selectedSystems,\n    ...bulkSelect,\n    toolbarProps: {\n      ...bulkSelect.toolbarProps,\n      bulkSelect: {\n        ...bulkSelect.toolbarProps.bulkSelect,\n        ...(isLoading\n          ? {\n              isDisabled: true,\n              toggleProps: {\n                children: [<Spinner size=\"md\" key=\"spinner\" />],\n              },\n            }\n          : {}),\n      },\n    },\n  };\n};\n","import React, { useMemo, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Spinner } from '@patternfly/react-core';\nimport { TableVariant } from '@patternfly/react-table';\n// eslint-disable-next-line max-len\nimport RemediationButton from '@/PresentationalComponents/ComplianceRemediationButton/RemediationButton';\nimport {\n  DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n  COMPLIANT_SYSTEMS_FILTER_CONFIGURATION,\n} from '@/constants';\nimport { ErrorPage, StateView, StateViewPart } from 'PresentationalComponents';\nimport useFilterConfig from 'Utilities/hooks/useTableTools/useFilterConfig';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { policyFilter, defaultOnLoad, ssgVersionFilter } from './constants';\nimport {\n  useFetchSystems,\n  useGetEntities,\n  useOsMinorVersionFilter,\n  useInventoryUtilities,\n  useSystemsExport,\n  useSystemsFilter,\n  useSystemBulkSelect,\n} from './hooks';\nimport { constructQuery } from '../../Utilities/helpers';\n\nexport const SystemsTable = ({\n  columns,\n  showAllSystems,\n  policyId,\n  showActions,\n  enableExport,\n  compliantFilter,\n  policies,\n  showOnlySystemsWithTestResults,\n  showOsFilter,\n  error,\n  showComplianceSystemsInfo,\n  compact,\n  remediationsEnabled,\n  systemProps,\n  defaultFilter,\n  emptyStateComponent,\n  prependComponent,\n  showOsMinorVersionFilter,\n  preselectedSystems,\n  onSelect: onSelectProp,\n  noSystemsTable,\n  tableProps,\n  ssgVersions,\n  dedicatedAction,\n}) => {\n  const inventory = useRef(null);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [perPage, setPerPage] = useState(50);\n  const [currentTags, setCurrentTags] = useState([]);\n\n  const osMinorVersionFilter = useOsMinorVersionFilter(\n    showOsMinorVersionFilter,\n    {\n      variables: {\n        filter: defaultFilter,\n        ...(policyId && { policyId }),\n      },\n    }\n  );\n\n  const {\n    toolbarProps: conditionalFilter,\n    filterString,\n    activeFilterValues,\n  } = useFilterConfig({\n    filters: {\n      filterConfig: [\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(policies?.length > 0 ? policyFilter(policies, showOsFilter) : []),\n        ...(ssgVersions ? ssgVersionFilter(ssgVersions) : []),\n        ...osMinorVersionFilter,\n      ],\n    },\n  });\n  const systemsFilter = useSystemsFilter(\n    filterString(),\n    showOnlySystemsWithTestResults,\n    defaultFilter\n  );\n\n  const constructedQuery = useMemo(() => constructQuery(columns), [columns]);\n\n  const systemFetchArguments = useMemo(\n    () => ({\n      query: constructedQuery.query,\n      variables: {\n        ...constructedQuery.fragments,\n        tags: currentTags,\n        filter: systemsFilter,\n        ...(policyId && { policyId }),\n      },\n    }),\n    [constructedQuery, currentTags, systemsFilter, policyId]\n  );\n\n  const preselection = useMemo(\n    () => preselectedSystems.map(({ id }) => id),\n    [preselectedSystems]\n  );\n\n  const {\n    selectedIds,\n    tableProps: bulkSelectTableProps,\n    toolbarProps: bulkSelectToolBarProps,\n  } = useSystemBulkSelect({\n    total,\n    perPage,\n    onSelect: onSelectProp,\n    preselected: preselection,\n    fetchArguments: systemFetchArguments,\n    currentPageIds: items.map(({ id }) => id),\n  });\n\n  useInventoryUtilities(inventory, selectedIds, activeFilterValues);\n\n  const onComplete = (result) => {\n    setTotal(result.meta.totalCount);\n    setItems(result.entities);\n    setPerPage(result.perPage);\n    setIsLoaded(true);\n    setCurrentTags && setCurrentTags(result.meta.tags);\n\n    if (\n      emptyStateComponent &&\n      result.meta.totalCount === 0 &&\n      activeFilterValues.length === 0 &&\n      (typeof result?.meta?.tags === 'undefined' ||\n        result?.meta?.tags?.length === 0)\n    ) {\n      setIsEmpty(true);\n    }\n  };\n\n  const fetchSystems = useFetchSystems({\n    ...systemFetchArguments,\n    onComplete,\n  });\n  const getEntities = useGetEntities(fetchSystems, {\n    selected: selectedIds,\n    columns,\n  });\n  const exportConfig = useSystemsExport({\n    columns,\n    filter: systemsFilter,\n    selected: selectedIds,\n    total,\n    fetchArguments: {\n      ...systemFetchArguments,\n    },\n  });\n\n  const mergedColumns = (defaultColumns) =>\n    columns.map((column) => {\n      const isStringCol = typeof column === 'string';\n      const key = isStringCol ? column : column.key;\n      const defaultColumn = defaultColumns.find(\n        (defaultCol) => defaultCol.key === key\n      );\n      return {\n        ...defaultColumn,\n        ...(isStringCol ? { key: column } : column),\n        props: {\n          ...defaultColumn?.props,\n          ...column?.props,\n        },\n      };\n    });\n\n  return (\n    <StateView\n      stateValues={{\n        error,\n        noError: error === undefined && !isEmpty,\n        empty: isEmpty,\n      }}\n    >\n      <StateViewPart stateKey=\"error\">\n        {!!prependComponent && prependComponent}\n        <ErrorPage error={error} />\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">{emptyStateComponent}</StateViewPart>\n      <StateViewPart stateKey=\"noError\">\n        {!!prependComponent && isLoaded && prependComponent}\n        {showComplianceSystemsInfo && (\n          <Alert\n            isInline\n            variant=\"info\"\n            ouiaId=\"SystemsListIsDifferentAlert\"\n            title={\n              'The list of systems in this view is different than those that appear in the Inventory. ' +\n              'Only systems currently associated with or reporting against compliance policies are displayed.'\n            }\n          />\n        )}\n        <InventoryTable\n          {...systemProps}\n          disableDefaultColumns\n          columns={mergedColumns}\n          noSystemsTable={noSystemsTable}\n          ref={inventory}\n          getEntities={getEntities}\n          hideFilters={{ all: true, tags: false }}\n          showTags\n          onLoad={defaultOnLoad(columns)}\n          tableProps={{\n            ...bulkSelectTableProps,\n            isStickyHeader: true,\n            ...tableProps,\n          }}\n          fallback={<Spinner />}\n          variant={compact ? TableVariant.compact : ''}\n          {...bulkSelectToolBarProps}\n          {...(!showAllSystems && {\n            ...conditionalFilter,\n            ...(remediationsEnabled && {\n              dedicatedAction: (\n                <RemediationButton policyId={policyId} systems={selectedIds} />\n              ),\n            }),\n          })}\n          {...(dedicatedAction ? { dedicatedAction: dedicatedAction } : {})}\n          {...(enableExport && { exportConfig })}\n          {...(showActions && {\n            actions: [\n              {\n                title: 'View in inventory',\n                onClick: (_event, _index, { id }) => {\n                  const beta =\n                    window.location.pathname.split('/')[1] === 'beta';\n                  window.location.href = `${window.location.origin}${\n                    beta ? '/beta' : ''\n                  }/insights/inventory/${id}`;\n                },\n              },\n            ],\n          })}\n        />\n      </StateViewPart>\n    </StateView>\n  );\n};\n\nSystemsTable.propTypes = {\n  columns: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.shape({}), PropTypes.string])\n  ),\n  policies: PropTypes.arrayOf(PropTypes.shape({})),\n  showAllSystems: PropTypes.bool,\n  policyId: PropTypes.string,\n  query: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  showActions: PropTypes.bool,\n  enableExport: PropTypes.bool,\n  compliantFilter: PropTypes.bool,\n  showOnlySystemsWithTestResults: PropTypes.bool,\n  showOsFilter: PropTypes.bool,\n  showComplianceSystemsInfo: PropTypes.bool,\n  error: PropTypes.object,\n  compact: PropTypes.bool,\n  remediationsEnabled: PropTypes.bool,\n  defaultFilter: PropTypes.string,\n  systemProps: PropTypes.shape({\n    isFullView: PropTypes.bool,\n  }),\n  emptyStateComponent: PropTypes.node,\n  prependComponent: PropTypes.node,\n  showOsMinorVersionFilter: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  preselectedSystems: PropTypes.array,\n  onSelect: PropTypes.func,\n  noSystemsTable: PropTypes.node,\n  tableProps: PropTypes.object,\n  ssgVersions: PropTypes.array,\n  dedicatedAction: PropTypes.object,\n};\n\nSystemsTable.defaultProps = {\n  policyId: '',\n  showActions: true,\n  enableExport: true,\n  compliantFilter: false,\n  showOnlySystemsWithTestResults: false,\n  showComplianceSystemsInfo: false,\n  compact: false,\n  remediationsEnabled: true,\n  preselectedSystems: [],\n};\n\nexport default SystemsTable;\n","import { useCallback, useState } from 'react';\nimport pAll from 'p-all';\n\nconst DEFAULT_CONCURRENT_PROMISES = 2;\n\nconst usePromiseQueue = (limit = DEFAULT_CONCURRENT_PROMISES) => {\n  const [isResolving, setIsResolving] = useState(false);\n  const [promiseResults, setPromiseResults] = useState();\n\n  const resolve = useCallback(\n    async (fns) => {\n      await setPromiseResults(undefined);\n      await setIsResolving(true);\n      const results = await pAll(fns, {\n        concurrency: limit,\n      });\n\n      await setIsResolving(false);\n      await setPromiseResults(results);\n\n      return results;\n    },\n    [limit]\n  );\n\n  return {\n    isResolving,\n    results: promiseResults,\n    resolve,\n  };\n};\n\nexport default usePromiseQueue;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { sortingByProp } from 'Utilities/helpers';\n\nconst selectRows = (rows, selected) =>\n  rows.map((row) => ({\n    ...row,\n    selected: selected.includes(row.id),\n  }));\n\nexport const entitiesReducer = () =>\n  applyReducerHash({\n    ['INVENTORY_INIT']: () => ({\n      rows: [],\n      total: 0,\n    }),\n    ['RESET_PAGE']: (state) => ({\n      ...state,\n      page: 1,\n    }),\n    ['SELECT_ENTITIES']: (state, { payload: { selected } }) => ({\n      ...state,\n      rows: selectRows(state.rows, selected),\n    }),\n  });\n\nexport const mapCountOsMinorVersions = (systems) => {\n  if (!systems) {\n    return {};\n  }\n\n  return systems.reduce((acc, { osMinorVersion }) => {\n    if (osMinorVersion !== undefined && osMinorVersion !== null) {\n      (acc[osMinorVersion] = acc[osMinorVersion] || {\n        osMinorVersion,\n        count: 0,\n      }).count++;\n    }\n\n    return acc;\n  }, {});\n};\n\nexport const countOsMinorVersions = (systems) =>\n  Object.values(mapCountOsMinorVersions(systems)).sort(\n    sortingByProp('osMinorVersion', 'desc')\n  );\n"],"names":["QUERY","gql","ComplianceSystems","useQuery","data","error","loading","policies","profiles","edges","map","node","className","title","stateValues","stateKey","columns","Columns","showLink","props","isStatic","transforms","nowrap","defaultFilter","systemProps","isFullView","showOsMinorVersionFilter","policy","osMajorVersion","showComplianceSystemsInfo","enableEditPolicy","remediationsEnabled","PolicyTypeDetailsRow","description","item","key","Text","style","margin","propTypes","NameCell","name","disabled","compact","PolicyTypeTable","onChange","selectedProfile","info","tooltip","sortByProp","renderFunc","renderComponent","fitContent","_data","_id","profile","supportedOsVersions","join","items","rowProps","selected","id","disableSelection","filters","filterConfig","type","conditionalFilterType","label","filter","policyTypes","value","policyType","toLowerCase","includes","options","detailsComponent","onRadioSelect","_event","_value","_rowIdx","itemId","find","sortBy","index","direction","property","emptyRows","length","variant","Tooltip","position","content","SUPPORTED_PROFILES","CreateSCAPPolicy","change","selectedOsMajorVersion","fetchPolicy","osMajorVersions","selectedOsMajorVersionObject","profilesToSelect","profileRefId","refId","benchmarkRedId","benchmark","Spinner","TextContent","component","TextVariants","Form","FormGroup","isRequired","fieldId","Tile","onClick","isSelected","isStacked","labelIcon","undefined","reduxFormPropTypes","selector","formValueSelector","compose","connect","state","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","PROFILES_QUERY","BENCHMARKS_QUERY","EditPolicyProfilesRules","selectedRuleRefIds","osMinorVersionCounts","osMinorVersions","i","osMinorVersion","sort","benchmarkSearch","variables","skip","benchmarksData","benchmarksError","benchmarksLoading","benchmarks","nodes","tabsData","systemCount","count","latestSupportedOsMinorVersions","getBenchmarkBySupportedOsMinor","benchmarkProfile","getBenchmarkProfile","newOsMinorVersion","profileToOsMinorMap","tabsDataToOsMinorMap","profileIds","Object","keys","skipProfilesQuery","profilesData","profilesError","profilesLoading","dataState","loadingState","noRuleSets","p","setSelectedRuleRefIds","newSelection","useLayoutEffect","profilesWithOs","extendProfilesByOsMinor","profilesWithRulesToSelection","only","JSON","stringify","EmptyState","Title","headingLevel","size","EmptyStateBody","EmptyTable","TabbedRules","selectedFilter","level","ouiaId","resetLink","rulesPageLink","WizardContextConsumer","goToStepById","Button","PrependComponent","EditPolicySystems","selectedSystems","version","split","prependComponent","emptyStateComponent","width","showActions","enableExport","preselectedSystems","onSelect","newSelectedSystems","countOsMinorVersions","defaultProps","EditPolicyDetails","useEffect","Field","ReduxFormTextInput","isDisabled","ReduxFormTextArea","defaultValue","businessObjective","previousThreshold","initialValues","ReviewCreatedPolicy","complianceThreshold","parentProfileName","marginTop","TextList","TextListVariants","TextListItem","TextListItemVariants","fontWeight","Label","color","isCompact","benchmarkId","parseFloat","rulesCount","EmtpyStateWithErrors","errors","Array","isArray","List","ListItem","FinishedCreatePolicy","onWizardFinish","cloneFromProfileId","systems","useState","percent","setPercent","message","setMessage","setErrors","failed","setFailed","updatePolicy","usePolicy","onProgress","progress","hosts","then","dispatchNotification","autoDismiss","to","catch","networkError","result","Bullseye","EmptyStateVariant","EmptyStateIcon","icon","WrenchIcon","EmptyStateSecondaryActions","withApollo","CreatePolicyForm","systemIds","reset","history","useHistory","stepIdReached","setStepIdReached","resetAnchor","location","hash","push","onClose","steps","enableNext","validateBenchmarkPage","canJumpTo","validateDetailsPage","validateSystemsPage","validateRulesPage","nextButtonText","isFinishedStep","Wizard","isOpen","onNext","onGoToStep","onBack","dispatch","CreatePolicy","DeletePolicy","deleteEnabled","setDeleteEnabled","useLocation","useMutation","DELETE_PROFILE","onCompleted","dispatchAction","addNotification","onError","deletePolicy","C","ModalVariant","titleIconVariant","actions","input","Checkbox","isChecked","DeleteReport","background","DELETE_REPORT","deleteReport","profileId","isModalOpen","onDelete","policyId","EditPolicyRulesTabEmptyState","EditPolicyRulesTab","values","sortingByProp","parentProfileId","toTabsData","prevSelection","empty","setNewRuleTabs","EditPolicySystemsTab","onSystemSelect","osFilter","newRuleTabs","Alert","isInline","actionLinks","AlertActionLink","EditPolicyForm","setUpdatedPolicy","setSelectedSystems","policyProfiles","setOsMinorVersionCounts","useNewRulesAlertState","newRulesAlert","setNewRulesAlert","handleSystemSelect","useCallback","policyMinorVersions","hasNewOsMinorVersions","reduce","acc","mapCountOsMinorVersions","complianceThresholdValid","thresholdValid","profilesWithOsMinor","defaultTab","Tab","eventKey","TabTitleText","updatedPolicy","MULTIVERSION_QUERY","EditPolicy","route","useParams","policy_id","linkToPolicy","useLinkToPolicy","saveEnabled","updatedPolicyHostsAndRules","useOnSave","isSaving","onSave","spinnerAriaValueText","isLoading","useTitleEntity","minHeight","SystemLink","children","pathname","Name","showOsInfo","hasOsInfo","SSGVersion","ssgVersion","supported","messageVariant","SSGVersions","testResultProfiles","Policies","Truncate","inline","text","FailedRules","rulesFailed","parseInt","ComplianceScore","score","compliant","NeverScanned","Fragment","NEVER","lastScanned","dates","Date","last","Math","max","apply","date","isFinite","LastScanned","lastScannedDate","DateFormat","parse","operatingSystemString","OperatingSystem","system","disableSorting","compileColumnRenderFunc","cell","column","renderExport","customName","SsgVersion","exportKey","SsgVersionCell","PoliciesCell","FailedRulesCell","complianceScoreString","complianceScoreData","trim","ComplianceScoreCell","LastScannedCell","OperatingSystemCell","OS","original","dataLabel","inventoryColumn","InventoryDetails","registryDecorator","DetailWrapper","onLoad","mergeWithDetail","getRegistry","register","InventoryDetail","fallback","Skeleton","SkeletonSize","hideBack","React","entity","GET_SYSTEMS_ISSUES","RemediationButton","rules","buttonProps","onRemediationCreated","client","useApolloClient","usePromiseQueue","isResolving","results","resolve","fetchFunction","perPage","page","query","fetch","batchSize","pages","ceil","_","pageIdx","remediationData","useIssuesFetch","isLoadingIssues","getNotification","dataProvider","GET_SYSTEMS_OSES","policyFilter","systemsPolicyFilterConfiguration","systemsOsFilterConfiguration","osMinorVersionFilter","systemsOsMinorFilterConfiguration","defaultOnLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","entitiesReducer","ssgVersionFilter","ssgVersions","filterString","groupByMajorVersion","versions","showFilter","showVersion","String","currentValue","major","Set","minor","useOsMinorVersionFilter","fetchArguments","osVersions","renameInventoryAttributes","culledTimestamp","staleWarningTimestamp","staleTimestamp","insightsId","insights_id","culled_timestamp","stale_warning_timestamp","stale_timestamp","useFetchSystems","onComplete","requestVariables","fetchResults","e","entities","systemsWithRuleObjectsFailed","meta","tags","totalCount","useFetchBatched","fetchBatched","total","buildApiFilters","tagFilters","otherFilters","tagsApiFilter","flatMap","tagFilter","tag","encodeURIComponent","tagKey","toIdFilter","ids","SystemsTable","showAllSystems","compliantFilter","showOnlySystemsWithTestResults","showOsFilter","onSelectProp","noSystemsTable","tableProps","dedicatedAction","inventory","useRef","isEmpty","setIsEmpty","isLoaded","setIsLoaded","setItems","setTotal","setPerPage","currentTags","setCurrentTags","useFilterConfig","DEFAULT_SYSTEMS_FILTER_CONFIGURATION","COMPLIANT_SYSTEMS_FILTER_CONFIGURATION","conditionalFilter","toolbarProps","activeFilterValues","systemsFilter","combindedFilter","useSystemsFilter","constructedQuery","useMemo","constructQuery","systemFetchArguments","fragments","preselected","currentPageIds","fetchSystems","fetchFunc","fetchIds","idFilter","onSelectCallback","selectedIds","itemIdsInTable","bulkSelect","useBulkSelect","itemIdsOnPage","toggleProps","useSystemBulkSelect","bulkSelectTableProps","bulkSelectToolBarProps","activeFilters","useDispatch","payload","debounceResetPage","debounce","Promise","current","onRefreshData","useInventoryUtilities","getEntities","fetchEntities","appendDirection","attributes","attribute","findColumnByKey","_ids","per_page","orderBy","orderDirection","sortableColumn","filterForApi","fetchedEntities","useGetEntities","exportConfig","selectionFilter","exporter","fetchedItems","useExport","onStart","useSystemsExport","noError","InventoryTable","disableDefaultColumns","defaultColumns","isStringCol","defaultColumn","defaultCol","ref","hideFilters","all","showTags","isStickyHeader","TableVariant","_index","beta","window","href","origin","PropTypes","limit","setIsResolving","promiseResults","setPromiseResults","fns","pAll","concurrency","selectRows","rows","row","applyReducerHash"],"sourceRoot":""}