{"version":3,"sources":["webpack:///./src/SmartComponents/ReportDetails/ReportDetails.js"],"names":["QUERY","gql","ReportDetails","chartColorScale","policyName","legendData","compliancePercentage","pageTitle","route","policyId","useParams","report_id","useQuery","variables","fetchPolicy","data","error","loading","donutValues","donutId","profile","policy","name","compliantHostCount","testResultHostCount","replace","x","y","black300","blue300","blue200","pluralize","fixedPercentage","Math","floor","useTitleEntity","stateValues","stateKey","Breadcrumb","ouiaId","to","BreadcrumbItem","isActive","Grid","hasGutter","GridItem","sm","md","lg","xl","title","policyType","className","state","id","Button","variant","isInline","identifier","subTitle","themeVariant","ChartThemeVariant","colorScale","style","fontSize","constrainToVisibleArea","innerRadius","width","legendPosition","legendOrientation","padding","bottom","left","right","top","unsupportedHostCount","Text","showHelpIcon","span","showOsMinorVersionFilter","majorOsVersion","columns","Columns","showLink","showOsInfo","query","GET_SYSTEMS","showOnlySystemsWithTestResults","compliantFilter","defaultFilter","propTypes"],"mappings":"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","file":"js/ReportDetails.eb0525a12368509489b9.js","sourcesContent":["/* eslint-disable react/display-name */\nimport React from 'react';\nimport black300 from '@patternfly/react-tokens/dist/esm/global_palette_black_300';\nimport blue200 from '@patternfly/react-tokens/dist/esm/chart_color_blue_200';\nimport blue300 from '@patternfly/react-tokens/dist/esm/chart_color_blue_300';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { ChartDonut, ChartThemeVariant } from '@patternfly/react-charts';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Grid,\n  GridItem,\n  Text,\n} from '@patternfly/react-core';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { fixedPercentage, pluralize } from 'Utilities/TextHelper';\nimport {\n  BackgroundLink,\n  BreadcrumbLinkItem,\n  ReportDetailsContentLoader,\n  ReportDetailsDescription,\n  StateViewWithError,\n  StateViewPart,\n  UnsupportedSSGVersion,\n  SubPageTitle,\n} from 'PresentationalComponents';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport { InventoryTable } from 'SmartComponents';\nimport '@/Charts.scss';\nimport './ReportDetails.scss';\nimport { GET_SYSTEMS } from '../SystemsTable/constants';\nimport * as Columns from '../SystemsTable/Columns';\n\nexport const QUERY = gql`\n  query Profile($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      testResultHostCount\n      compliantHostCount\n      unsupportedHostCount\n      complianceThreshold\n      majorOsVersion\n      lastScanned\n      policyType\n      policy {\n        id\n        name\n      }\n      benchmark {\n        id\n        version\n      }\n      businessObjective {\n        id\n        title\n      }\n    }\n  }\n`;\n\nexport const ReportDetails = ({ route }) => {\n  const { report_id: policyId } = useParams();\n  const { data, error, loading } = useQuery(QUERY, {\n    variables: { policyId },\n    fetchPolicy: 'no-cache',\n  });\n  let donutValues = [];\n  let donutId = 'loading-donut';\n  let chartColorScale;\n  let profile = {};\n  let policyName;\n  let legendData;\n  let compliancePercentage;\n  let pageTitle;\n\n  if (!loading && data) {\n    profile = data.profile;\n    policyName = profile.policy.name;\n    pageTitle = `Report: ${policyName}`;\n    const compliantHostCount = profile.compliantHostCount;\n    const testResultHostCount = profile.testResultHostCount;\n    donutId = profile.name.replace(/ /g, '');\n    donutValues = [\n      { x: 'Compliant', y: testResultHostCount ? compliantHostCount : '0' },\n      { x: 'Non-compliant', y: testResultHostCount - compliantHostCount },\n    ];\n    chartColorScale = (testResultHostCount === 0 && [black300.value]) || [\n      blue300.value,\n      blue200.value,\n    ];\n    legendData = [\n      {\n        name:\n          donutValues[0].y +\n          ' ' +\n          pluralize(donutValues[0].y, 'system') +\n          ' compliant',\n      },\n      {\n        name:\n          donutValues[1].y +\n          ' ' +\n          pluralize(donutValues[1].y, 'system') +\n          ' non-compliant',\n      },\n    ];\n    compliancePercentage = testResultHostCount\n      ? fixedPercentage(\n          Math.floor(\n            100 * (donutValues[0].y / (donutValues[0].y + donutValues[1].y))\n          )\n        )\n      : 0;\n  }\n\n  useTitleEntity(route, policyName);\n\n  return (\n    <StateViewWithError stateValues={{ error, data, loading }}>\n      <StateViewPart stateKey=\"loading\">\n        <PageHeader>\n          <ReportDetailsContentLoader />\n        </PageHeader>\n        <Main>\n          <EmptyTable>\n            <Spinner />\n          </EmptyTable>\n        </Main>\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <PageHeader>\n          <Breadcrumb ouiaId=\"ReportDetailsPathBreadcrumb\">\n            <BreadcrumbLinkItem to=\"/\">Compliance</BreadcrumbLinkItem>\n            <BreadcrumbLinkItem to=\"/reports\">Reports</BreadcrumbLinkItem>\n            <BreadcrumbItem isActive>{pageTitle}</BreadcrumbItem>\n          </Breadcrumb>\n          <Grid hasGutter>\n            <GridItem sm={9} md={9} lg={9} xl={9}>\n              <PageHeaderTitle title={pageTitle} />\n              <SubPageTitle>{profile.policyType}</SubPageTitle>\n            </GridItem>\n            <GridItem\n              className=\"report-details-button\"\n              sm={3}\n              md={3}\n              lg={3}\n              xl={3}\n            >\n              <BackgroundLink\n                state={{ profile }}\n                to={`/reports/${profile.id}/delete`}\n              >\n                <Button\n                  variant=\"link\"\n                  ouiaId=\"ReportDetailsDeleteReportLink\"\n                  isInline\n                >\n                  Delete report\n                </Button>\n              </BackgroundLink>\n            </GridItem>\n          </Grid>\n          <Grid hasGutter>\n            <GridItem sm={12} md={12} lg={12} xl={6}>\n              <div className=\"chart-inline\">\n                <div className=\"chart-container\">\n                  <ChartDonut\n                    data={donutValues}\n                    identifier={donutId}\n                    title={compliancePercentage}\n                    subTitle=\"Compliant\"\n                    themeVariant={ChartThemeVariant.light}\n                    colorScale={chartColorScale}\n                    style={{ fontSize: 20 }}\n                    constrainToVisibleArea={true}\n                    innerRadius={88}\n                    width={462}\n                    legendPosition=\"right\"\n                    legendData={legendData}\n                    legendOrientation=\"vertical\"\n                    padding={{\n                      bottom: 20,\n                      left: 0,\n                      right: 250,\n                      top: 20,\n                    }}\n                  />\n                </div>\n              </div>\n              {profile.unsupportedHostCount > 0 && (\n                <Text>\n                  <UnsupportedSSGVersion showHelpIcon>\n                    <strong className=\"ins-c-warning-text\">\n                      {profile.unsupportedHostCount} systems not supported\n                    </strong>\n                  </UnsupportedSSGVersion>\n                </Text>\n              )}\n            </GridItem>\n            <GridItem sm={12} md={12} lg={12} xl={6}>\n              <ReportDetailsDescription profile={profile} />\n            </GridItem>\n          </Grid>\n        </PageHeader>\n        <Main>\n          <Grid hasGutter>\n            <GridItem span={12}>\n              <InventoryTable\n                showOsMinorVersionFilter={[profile.majorOsVersion]}\n                columns={[\n                  Columns.customName({\n                    showLink: true,\n                    showOsInfo: true,\n                  }),\n                  Columns.inventoryColumn('tags'),\n                  Columns.SsgVersion,\n                  Columns.FailedRules,\n                  Columns.ComplianceScore,\n                  Columns.LastScanned,\n                ]}\n                query={GET_SYSTEMS}\n                showOnlySystemsWithTestResults\n                compliantFilter\n                defaultFilter={`with_results_for_policy_id = ${profile.id}`}\n                policyId={profile.id}\n              />\n            </GridItem>\n          </Grid>\n        </Main>\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nReportDetails.propTypes = {\n  route: propTypes.object,\n};\n\nexport default ReportDetails;\n"],"sourceRoot":""}