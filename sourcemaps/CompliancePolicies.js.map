{"version":3,"sources":["webpack:///./src/SmartComponents/ErrorPage/ErrorPage.js","webpack:///./src/SmartComponents/ComplianceTabs/ComplianceTabs.js","webpack:///./node_modules/react-truncate/lib/Truncate.js","webpack:///./src/SmartComponents/CompliancePolicyCard/CompliancePolicyCard.js","webpack:///./src/SmartComponents/CompliancePoliciesCards/CompliancePoliciesCards.js","webpack:///./src/SmartComponents/CompliancePolicies/CompliancePolicies.js"],"names":["ErrorPage","props","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3___default","call","error","networkError","statusCode","window","insights","chrome","auth","logout","react__WEBPACK_IMPORTED_MODULE_5__","propTypes","prop_types__WEBPACK_IMPORTED_MODULE_6___default","a","object","__webpack_exports__","ComplianceTabs","_this","redirect","bind","_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5___default","tab","history","push","itemId","react__WEBPACK_IMPORTED_MODULE_8___default","createElement","Fragment","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_10__","onSelect","aria-label","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_11__","variant","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_12__","horizontal","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_13__","preventDefault","isActive","match","path","_Routes__WEBPACK_IMPORTED_MODULE_9__","compliancePolicies","complianceSystems","react__WEBPACK_IMPORTED_MODULE_8__","prop_types__WEBPACK_IMPORTED_MODULE_7___default","Object","_red_hat_insights_insights_frontend_components__WEBPACK_IMPORTED_MODULE_6__","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","_createClass","defineProperties","descriptor","enumerable","configurable","writable","defineProperty","Constructor","protoProps","staticProps","Truncate_Truncate","_Component","Truncate","_ref","instance","TypeError","_classCallCheck","_len","args","Array","_key","self","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","apply","concat","state","styles","ellipsis","position","visibility","top","left","elements","onResize","onTruncate","calcTargetWidth","measureWidth","getLines","renderLine","subClass","superClass","create","constructor","value","setPrototypeOf","_inherits","react","text","canvas","document","canvasContext","getContext","parentNode","removeChild","addEventListener","prevProps","children","forceUpdate","width","timeout","removeEventListener","cancelAnimationFrame","node","div","contentKey","HTMLElement","innerHTML","replace","test","didTruncate","requestAnimationFrame","callback","targetWidth","Math","floor","getBoundingClientRect","style","getComputedStyle","font","join","setState","measureText","offsetWidth","_props","numLines","lines","trimWhitespace","innerText","trimRight","textLines","split","map","line","ellipsisWidth","textWords","resultLine","textRest","lower","upper","middle","slice","lastLineText","pop","react_default","_lower","_upper","_middle","splice","shift","arr","br","_this2","_props2","spanProps","obj","keys","indexOf","_objectWithoutProperties","ref","targetEl","textEl","ellipsisEl","prop_types_default","oneOfType","oneOf","number","bool","func","defaultProps","lib_Truncate","SmartComponents_CompliancePolicyCard_CompliancePolicyCard","CompliancePolicyCard","policy","classCallCheck_default","possibleConstructorReturn_default","getPrototypeOf_default","cardTitle","name","onMouseover","assertThisInitialized_default","onMouseout","compliantHostCount","compliant_host_count","totalHostCount","total_host_count","donutValues","x","y","compliancePercentage","label","className","height","ChartLabel","fontSize","textAnchor","verticalAnchor","fill","Card","CardBody","Text","fontWeight","color","component","small","TextContent","onMouseEnter","onMouseLeave","h4","Grid","GridItem","display","span","textAlign","ChartDonut","data","identifier","theme","ChartTheme","light","blue","Link","to","id","Component","QUERY","src_default","_templateObject","SmartComponents_CompliancePoliciesCards_CompliancePoliciesCards","insights_frontend_components","react_apollo_browser_umd","query","loading","policies","allProfiles","policyCards","sm","md","lg","xl","Bullseye","EmptyState","EmptyStateIcon","size","title","icon","clipboard_check_icon","Title","EmptyStateBody","blockquote","EmptyStateAction","Button","href","gutter"],"mappings":"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","file":"js/CompliancePolicies.js","sourcesContent":["import { Component } from 'react';\nimport propTypes from 'prop-types';\n\nclass ErrorPage extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { error } = this.props;\n        if (error.networkError.statusCode === 401) {\n            window.insights.chrome.auth.logout();\n        }\n\n        return 'Oops! There was an error loading Compliance data. If you need to contact ' +\n            'Red Hat Support about this, this is the exact error: ' +\n            error.networkError.statusCode + ' ' + error;\n    }\n}\n\nErrorPage.propTypes = {\n    error: propTypes.object\n};\n\nexport default ErrorPage;\n","import { routerParams } from '@red-hat-insights/insights-frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { paths } from '../../Routes';\nimport { Nav, NavList, NavItem, NavVariants } from '@patternfly/react-core';\n\nclass ComplianceTabs extends Component {\n    constructor(props) {\n        super(props);\n        this.redirect = this.redirect.bind(this);\n    }\n    redirect(tab) {\n        this.props.history.push(tab.itemId);\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <Nav onSelect={this.redirect} aria-label=\"Compliance Tabs\">\n                    <NavList variant={NavVariants.horizontal}>\n                        <NavItem preventDefault={true}\n                            isActive={this.props.match.path === paths.compliancePolicies}\n                            itemId={paths.compliancePolicies}>\n                            Policies\n                        </NavItem>\n                        <NavItem preventDefault={true}\n                            isActive={this.props.match.path === paths.complianceSystems}\n                            itemId={paths.complianceSystems}>\n                            Systems\n                        </NavItem>\n                    </NavList>\n                </Nav>\n            </React.Fragment>\n        );\n    }\n}\n\nComplianceTabs.propTypes = {\n    history: propTypes.object,\n    match: propTypes.object\n};\n\nexport default routerParams(ComplianceTabs);\n","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nvar Truncate = function (_Component) {\n    _inherits(Truncate, _Component);\n\n    function Truncate() {\n        var _ref;\n\n        _classCallCheck(this, Truncate);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        var _this = _possibleConstructorReturn(this, (_ref = Truncate.__proto__ || Object.getPrototypeOf(Truncate)).call.apply(_ref, [this].concat(args)));\n\n        _this.state = {};\n        _this.styles = {\n            ellipsis: {\n                position: 'fixed',\n                visibility: 'hidden',\n                top: 0,\n                left: 0\n            }\n        };\n\n\n        _this.elements = {};\n\n        _this.onResize = _this.onResize.bind(_this);\n        _this.onTruncate = _this.onTruncate.bind(_this);\n        _this.calcTargetWidth = _this.calcTargetWidth.bind(_this);\n        _this.measureWidth = _this.measureWidth.bind(_this);\n        _this.getLines = _this.getLines.bind(_this);\n        _this.renderLine = _this.renderLine.bind(_this);\n        return _this;\n    }\n\n    _createClass(Truncate, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            var text = this.elements.text,\n                calcTargetWidth = this.calcTargetWidth,\n                onResize = this.onResize;\n\n\n            var canvas = document.createElement('canvas');\n            this.canvasContext = canvas.getContext('2d');\n\n            calcTargetWidth(function () {\n                // Node not needed in document tree to read its content\n                if (text) {\n                    text.parentNode.removeChild(text);\n                }\n            });\n\n            window.addEventListener('resize', onResize);\n        }\n    }, {\n        key: 'componentDidUpdate',\n        value: function componentDidUpdate(prevProps) {\n            // Render was based on outdated refs and needs to be rerun\n            if (this.props.children !== prevProps.children) {\n                this.forceUpdate();\n            }\n\n            // If the width prop has changed, recalculate size of contents\n            if (this.props.width !== prevProps.width) {\n                this.calcTargetWidth();\n            }\n        }\n    }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n            var ellipsis = this.elements.ellipsis,\n                onResize = this.onResize,\n                timeout = this.timeout;\n\n\n            ellipsis.parentNode.removeChild(ellipsis);\n\n            window.removeEventListener('resize', onResize);\n\n            window.cancelAnimationFrame(timeout);\n        }\n\n        // Shim innerText to consistently break lines at <br/> but not at \\n\n\n    }, {\n        key: 'innerText',\n        value: function innerText(node) {\n            var div = document.createElement('div');\n            var contentKey = 'innerText' in window.HTMLElement.prototype ? 'innerText' : 'textContent';\n\n            div.innerHTML = node.innerHTML.replace(/\\r\\n|\\r|\\n/g, ' ');\n\n            var text = div[contentKey];\n\n            var test = document.createElement('div');\n            test.innerHTML = 'foo<br/>bar';\n\n            if (test[contentKey].replace(/\\r\\n|\\r/g, '\\n') !== 'foo\\nbar') {\n                div.innerHTML = div.innerHTML.replace(/<br.*?[\\/]?>/gi, '\\n');\n                text = div[contentKey];\n            }\n\n            return text;\n        }\n    }, {\n        key: 'onResize',\n        value: function onResize() {\n            this.calcTargetWidth();\n        }\n    }, {\n        key: 'onTruncate',\n        value: function onTruncate(didTruncate) {\n            var onTruncate = this.props.onTruncate;\n\n\n            if (typeof onTruncate === 'function') {\n                this.timeout = window.requestAnimationFrame(function () {\n                    onTruncate(didTruncate);\n                });\n            }\n        }\n    }, {\n        key: 'calcTargetWidth',\n        value: function calcTargetWidth(callback) {\n            var target = this.elements.target,\n                calcTargetWidth = this.calcTargetWidth,\n                canvasContext = this.canvasContext,\n                width = this.props.width;\n\n            // Calculation is no longer relevant, since node has been removed\n\n            if (!target) {\n                return;\n            }\n\n            var targetWidth = width ||\n            // Floor the result to deal with browser subpixel precision\n            Math.floor(target.parentNode.getBoundingClientRect().width);\n\n            // Delay calculation until parent node is inserted to the document\n            // Mounting order in React is ChildComponent, ParentComponent\n            if (!targetWidth) {\n                return window.requestAnimationFrame(function () {\n                    return calcTargetWidth(callback);\n                });\n            }\n\n            var style = window.getComputedStyle(target);\n\n            var font = [style['font-weight'], style['font-style'], style['font-size'], style['font-family']].join(' ');\n\n            canvasContext.font = font;\n\n            this.setState({\n                targetWidth: targetWidth\n            }, callback);\n        }\n    }, {\n        key: 'measureWidth',\n        value: function measureWidth(text) {\n            return this.canvasContext.measureText(text).width;\n        }\n    }, {\n        key: 'ellipsisWidth',\n        value: function ellipsisWidth(node) {\n            return node.offsetWidth;\n        }\n    }, {\n        key: 'trimRight',\n        value: function trimRight(text) {\n            return text.replace(/\\s+$/, '');\n        }\n    }, {\n        key: 'getLines',\n        value: function getLines() {\n            var elements = this.elements,\n                _props = this.props,\n                numLines = _props.lines,\n                ellipsis = _props.ellipsis,\n                trimWhitespace = _props.trimWhitespace,\n                targetWidth = this.state.targetWidth,\n                innerText = this.innerText,\n                measureWidth = this.measureWidth,\n                onTruncate = this.onTruncate,\n                trimRight = this.trimRight;\n\n\n            var lines = [];\n            var text = innerText(elements.text);\n            var textLines = text.split('\\n').map(function (line) {\n                return line.split(' ');\n            });\n            var didTruncate = true;\n            var ellipsisWidth = this.ellipsisWidth(this.elements.ellipsis);\n\n            for (var line = 1; line <= numLines; line++) {\n                var textWords = textLines[0];\n\n                // Handle newline\n                if (textWords.length === 0) {\n                    lines.push();\n                    textLines.shift();\n                    line--;\n                    continue;\n                }\n\n                var resultLine = textWords.join(' ');\n\n                if (measureWidth(resultLine) <= targetWidth) {\n                    if (textLines.length === 1) {\n                        // Line is end of text and fits without truncating\n                        didTruncate = false;\n\n                        lines.push(resultLine);\n                        break;\n                    }\n                }\n\n                if (line === numLines) {\n                    // Binary search determining the longest possible line inluding truncate string\n                    var textRest = textWords.join(' ');\n\n                    var lower = 0;\n                    var upper = textRest.length - 1;\n\n                    while (lower <= upper) {\n                        var middle = Math.floor((lower + upper) / 2);\n\n                        var testLine = textRest.slice(0, middle + 1);\n\n                        if (measureWidth(testLine) + ellipsisWidth <= targetWidth) {\n                            lower = middle + 1;\n                        } else {\n                            upper = middle - 1;\n                        }\n                    }\n\n                    var lastLineText = textRest.slice(0, lower);\n\n                    if (trimWhitespace) {\n                        lastLineText = trimRight(lastLineText);\n\n                        // Remove blank lines from the end of text\n                        while (!lastLineText.length && lines.length) {\n                            var prevLine = lines.pop();\n\n                            lastLineText = trimRight(prevLine);\n                        }\n                    }\n\n                    resultLine = React.createElement(\n                        'span',\n                        null,\n                        lastLineText,\n                        ellipsis\n                    );\n                } else {\n                    // Binary search determining when the line breaks\n                    var _lower = 0;\n                    var _upper = textWords.length - 1;\n\n                    while (_lower <= _upper) {\n                        var _middle = Math.floor((_lower + _upper) / 2);\n\n                        var _testLine = textWords.slice(0, _middle + 1).join(' ');\n\n                        if (measureWidth(_testLine) <= targetWidth) {\n                            _lower = _middle + 1;\n                        } else {\n                            _upper = _middle - 1;\n                        }\n                    }\n\n                    // The first word of this line is too long to fit it\n                    if (_lower === 0) {\n                        // Jump to processing of last line\n                        line = numLines - 1;\n                        continue;\n                    }\n\n                    resultLine = textWords.slice(0, _lower).join(' ');\n                    textLines[0].splice(0, _lower);\n                }\n\n                lines.push(resultLine);\n            }\n\n            onTruncate(didTruncate);\n\n            return lines;\n        }\n    }, {\n        key: 'renderLine',\n        value: function renderLine(line, i, arr) {\n            if (i === arr.length - 1) {\n                return React.createElement(\n                    'span',\n                    { key: i },\n                    line\n                );\n            } else {\n                var br = React.createElement('br', { key: i + 'br' });\n\n                if (line) {\n                    return [React.createElement(\n                        'span',\n                        { key: i },\n                        line\n                    ), br];\n                } else {\n                    return br;\n                }\n            }\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _this2 = this;\n\n            var target = this.elements.target,\n                _props2 = this.props,\n                children = _props2.children,\n                ellipsis = _props2.ellipsis,\n                lines = _props2.lines,\n                spanProps = _objectWithoutProperties(_props2, ['children', 'ellipsis', 'lines']),\n                targetWidth = this.state.targetWidth,\n                getLines = this.getLines,\n                renderLine = this.renderLine,\n                onTruncate = this.onTruncate;\n\n            var text = void 0;\n\n            var mounted = !!(target && targetWidth);\n\n            if (typeof window !== 'undefined' && mounted) {\n                if (lines > 0) {\n                    text = getLines().map(renderLine);\n                } else {\n                    text = children;\n\n                    onTruncate(false);\n                }\n            }\n\n            delete spanProps.onTruncate;\n            delete spanProps.trimWhitespace;\n\n            return React.createElement(\n                'span',\n                _extends({}, spanProps, { ref: function ref(targetEl) {\n                        _this2.elements.target = targetEl;\n                    } }),\n                React.createElement(\n                    'span',\n                    null,\n                    text\n                ),\n                React.createElement(\n                    'span',\n                    { ref: function ref(textEl) {\n                            _this2.elements.text = textEl;\n                        } },\n                    children\n                ),\n                React.createElement(\n                    'span',\n                    { ref: function ref(ellipsisEl) {\n                            _this2.elements.ellipsis = ellipsisEl;\n                        }, style: this.styles.ellipsis },\n                    ellipsis\n                )\n            );\n        }\n    }]);\n\n    return Truncate;\n}(Component);\n\nTruncate.propTypes = {\n    children: PropTypes.node,\n    ellipsis: PropTypes.node,\n    lines: PropTypes.oneOfType([PropTypes.oneOf([false]), PropTypes.number]),\n    trimWhitespace: PropTypes.bool,\n    width: PropTypes.number,\n    onTruncate: PropTypes.func\n};\nTruncate.defaultProps = {\n    children: '',\n    ellipsis: '…',\n    lines: 1,\n    trimWhitespace: false,\n    width: 0\n};\nexport default Truncate;\n;\n","import React from 'react';\nimport {\n    Link\n} from 'react-router-dom';\nimport Truncate from 'react-truncate';\nimport {\n    Card,\n    CardBody,\n    Text,\n    TextContent,\n    TextVariants,\n    Grid,\n    GridItem\n} from '@patternfly/react-core';\nimport {\n    ChartDonut,\n    ChartLabel,\n    ChartTheme\n} from '@patternfly/react-charts';\nimport '../../Charts.scss';\n\nclass CompliancePolicyCard extends React.Component {\n    constructor(policy) {\n        super();\n        this.policy = policy.policy;\n        this.state = { cardTitle: <Truncate lines={1}>{this.policy.name}</Truncate> };\n        this.onMouseover = this.onMouseover.bind(this);\n        this.onMouseout = this.onMouseout.bind(this);\n    }\n\n    onMouseover() {\n        this.setState({ cardTitle: this.policy.name });\n    }\n\n    onMouseout() {\n        this.setState({ cardTitle: <Truncate lines={1}>{this.policy.name}</Truncate> });\n    }\n\n    render() {\n        const compliantHostCount = this.policy.compliant_host_count;\n        const totalHostCount = this.policy.total_host_count;\n        let donutValues = [\n            { x: 'Compliant', y: compliantHostCount },\n            { x: 'Non-compliant', y: totalHostCount - compliantHostCount }\n        ];\n        const compliancePercentage = Math.floor(100 *\n            (donutValues[0].y / (donutValues[0].y + donutValues[1].y))) + '%';\n        const label = (\n            <svg\n                className=\"chart-label\"\n                height={300}\n                width={300}\n            >\n                <ChartLabel\n                    style={{ fontSize: 26 }}\n                    text={compliancePercentage}\n                    textAnchor=\"middle\"\n                    verticalAnchor=\"middle\"\n                    x={150}\n                    y={135}\n                />\n                <ChartLabel\n                    style={{ fill: '#bbb' }}\n                    text=\"Compliant\"\n                    textAnchor=\"middle\"\n                    verticalAnchor=\"middle\"\n                    x={150}\n                    y={165}\n                />\n            </svg>\n        );\n\n        return (\n            <Card>\n                <CardBody>\n                    <Text style={{ fontWeight: '500', color: '#bbb' }} component={TextVariants.small}>External Policy</Text>\n                    <TextContent>\n                        <Text onMouseEnter={this.onMouseover.bind(this)} onMouseLeave={this.onMouseout.bind(this)}\n                            style={{ fontWeight: '500' }} component={TextVariants.h4}>\n                            {this.state.cardTitle}\n                        </Text>\n                    </TextContent>\n                    <TextContent className=\"chart-title\">\n                        <Grid>\n                            <GridItem style={{ display: 'inline-flex' }} span={12}>\n                                <TextContent>\n                                    <span style={{ fontSize: '30px', fontWeight: '500' }}>\n                                        { compliantHostCount }\n                                    </span>\n                                    <span style={{ fontWeight: '500', color: '#bbb' }}>\n                                        {' '}of{' '}\n                                    </span>\n                                    <span style={{ fontSize: '30px', fontWeight: '500' }}>\n                                        { totalHostCount }\n                                    </span>\n                                </TextContent>\n                            </GridItem>\n                            <GridItem span={8}>\n                                <Text style={{ fontWeight: '500', color: '#bbb' }} component={TextVariants.small}>\n                                    Systems Compliant\n                                </Text>\n                            </GridItem>\n                        </Grid>\n                    </TextContent>\n                    <hr/>\n                    <Grid>\n                        <GridItem style={{ textAlign: 'center' }} span={12}>\n                            <div className='chart-inline'>\n                                <div className='card-chart-container'>\n                                    {label}\n                                    <ChartDonut data={donutValues}\n                                        identifier={this.policy.name.replace(/ /g, '')}\n                                        theme={ChartTheme.light.blue}\n                                        height={205}\n                                        width={205}\n                                    />\n                                </div>\n                            </div>\n                        </GridItem>\n                    </Grid>\n                    <TextContent style={{ textAlign: 'right' }}>\n                        <Text component={TextVariants.small}>\n                            <Link to={'/policies/' + this.policy.id} >\n                                More Details\n                            </Link>\n                        </Text>\n                    </TextContent>\n                </CardBody>\n            </Card>\n        );\n    };\n};\n\nexport default CompliancePolicyCard;\n","import React from 'react';\nimport {\n    Grid,\n    GridItem,\n    Title,\n    Text,\n    TextContent,\n    TextVariants,\n    Button,\n    Bullseye,\n    EmptyState,\n    EmptyStateIcon,\n    EmptyStateBody,\n    EmptyStateAction\n} from '@patternfly/react-core';\nimport { ClipboardCheckIcon } from '@patternfly/react-icons';\nimport { routerParams } from '@red-hat-insights/insights-frontend-components';\nimport CompliancePolicyCard from '../CompliancePolicyCard/CompliancePolicyCard';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport ErrorPage from '../ErrorPage/ErrorPage';\n\nconst QUERY = gql`\n{\n    allProfiles {\n        id\n        name\n        ref_id\n        description\n        total_host_count\n        compliant_host_count\n    }\n}\n`;\n\nconst CompliancePoliciesCards = () => (\n    <Query query={QUERY}>\n        {({ data, error, loading }) => {\n            if (error) { return <ErrorPage error={error}/>; }\n\n            if (loading) { return 'Loading Policies...'; }\n\n            const policies = data.allProfiles;\n            let policyCards = [];\n            if (policies.length) {\n                policyCards = policies.map(\n                    (policy, i) =>\n                        <GridItem sm={12} md={12} lg={6} xl={4} key={i}>\n                            <CompliancePolicyCard\n                                key={i}\n                                policy={policy}\n                            />\n                        </GridItem>\n                );\n            } else {\n                policyCards = <Bullseye>\n                    <EmptyState>\n                        <EmptyStateIcon size=\"xl\" title=\"Compliance\" icon={ClipboardCheckIcon} />\n                        <br/>\n                        <Title size=\"lg\">Welcome to Compliance</Title>\n                        <EmptyStateBody>\n                            <TextContent>\n                                You have not uploaded any reports yet. Please generate a report using\n                                OpenSCAP:\n                                <Text component={TextVariants.blockquote}>\n                                    openscap xccdf eval --profile xccdf_org.ssgproject.content_profile_standard\n                                    --results scan.xml /usr/share/xml/scap/ssg/content/ssg-rhel7-ds.xml\n                                </Text>\n                                and upload it using the following command:\n                                <Text component={TextVariants.blockquote}>\n                                    sudo insights-client --verbose --payload scan.xml\n                                    --content-type application/vnd.redhat.compliance.something+tgz\n                                </Text>\n                            </TextContent>\n                        </EmptyStateBody>\n\n                        <EmptyStateAction>\n                            <Button\n                                variant=\"primary\"\n                                component=\"a\"\n                                target=\"_blank\"\n                                href=\"https://www.open-scap.org/getting-started/\">\n                                Get started with OpenSCAP\n                            </Button>\n                        </EmptyStateAction>\n                    </EmptyState>\n                </Bullseye>;\n\n            }\n\n            return (\n                <div className=\"policies-donuts\">\n                    <Grid gutter='md'>\n                        {policyCards}\n                    </Grid>\n                </div>\n            );\n        }}\n    </Query>\n);\n\nexport default routerParams(CompliancePoliciesCards);\n","import React from 'react';\nimport CompliancePoliciesCards from '../CompliancePoliciesCards/CompliancePoliciesCards';\nimport ComplianceTabs from '../ComplianceTabs/ComplianceTabs';\nimport { PageHeader, PageHeaderTitle, Main } from '@red-hat-insights/insights-frontend-components';\n\nconst CompliancePolicies = () => {\n    return (\n        <React.Fragment>\n            <PageHeader>\n                <PageHeaderTitle title=\"Compliance\" />\n                <ComplianceTabs/>\n            </PageHeader>\n            <Main>\n                <CompliancePoliciesCards />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default CompliancePolicies;\n"],"sourceRoot":""}