{"version":3,"sources":["webpack:///./src/SmartComponents/CompliancePolicies/CompliancePolicies.js"],"names":["QUERY","gql","CompliancePolicies","policies","useQuery","fetchPolicy","data","error","loading","refetch","undefined","profiles","edges","map","profile","node","stateValues","stateKey","className","title","length","gutter","mainButton","onWizardFinish","routerParams"],"mappings":"41BAqBA,IAAMA,EAAQC,IAAH,KA0BEC,EAAqB,WAAM,IAEhCC,EAFgC,EACIC,YAASJ,EAAO,CAAEK,YAAa,sBAAjEC,EAD8B,EAC9BA,KAAMC,EADwB,EACxBA,MAAOC,EADiB,EACjBA,QAASC,EADQ,EACRA,QAQ5B,OALIH,IACAC,OAAQG,EAAWF,OAAUE,EAC7BP,EAAWG,EAAKK,SAASC,MAAMC,KAAI,SAAAC,GAAO,OAAIA,EAAQC,SAGnD,kBAAC,IAAD,CAAWC,YAAc,CAAET,QAAOD,OAAME,YAC3C,kBAAC,IAAD,CAAeS,SAAS,SACpB,kBAAC,IAAD,CAAWV,MAAOA,KAEtB,kBAAC,IAAD,CAAeU,SAAS,WACpB,kBAAC,aAAD,CAAYC,UAAU,eAClB,kBAAC,kBAAD,CAAiBC,MAAM,mBAE3B,kBAAC,OAAD,KACI,kBAAC,IAAD,QAGR,kBAAC,IAAD,CAAeF,SAAS,QACpB,kBAAC,aAAD,CAAYC,UAAU,eAClB,kBAAC,kBAAD,CAAiBC,MAAM,mBAE3B,kBAAC,OAAD,KACMhB,GAAgC,IAApBA,EAASiB,OACnB,kBAAC,IAAD,CAAMC,OAAO,MAAK,kBAAC,uBAAD,CAAsBF,MAAM,cAC1CG,WAAY,kBAAC,IAAD,CAAcC,eAAgB,kBAAMd,UACpD,kBAAC,IAAD,CAAec,eAAgB,kBAAMd,KAAWN,SAAWA,QAOhEqB,cAAatB","file":"js/CompliancePolicies.js","sourcesContent":["import React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport {\n    Grid\n} from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle, Main } from '@redhat-cloud-services/frontend-components';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { ComplianceEmptyState } from '@redhat-cloud-services/frontend-components-inventory-compliance';\nimport {\n    ErrorPage,\n    LoadingPoliciesTable,\n    StateView,\n    StateViewPart\n} from 'PresentationalComponents';\n\nimport {\n    PoliciesTable,\n    CreatePolicy\n} from 'SmartComponents';\n\nconst QUERY = gql`\n{\n    profiles(search: \"external = false\") {\n        edges {\n            node {\n                id\n                name\n                refId\n                complianceThreshold\n                totalHostCount\n                majorOsVersion\n                benchmark {\n                    id\n                    title\n                    version\n                }\n                businessObjective {\n                    id\n                    title\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const CompliancePolicies = () => {\n    let { data, error, loading, refetch } = useQuery(QUERY, { fetchPolicy: 'cache-and-network' });\n    let policies;\n\n    if (data) {\n        error = undefined; loading = undefined;\n        policies = data.profiles.edges.map(profile => profile.node);\n    }\n\n    return <StateView stateValues={ { error, data, loading } }>\n        <StateViewPart stateKey='error'>\n            <ErrorPage error={error}/>\n        </StateViewPart>\n        <StateViewPart stateKey='loading'>\n            <PageHeader className='page-header'>\n                <PageHeaderTitle title=\"SCAP policies\" />\n            </PageHeader>\n            <Main>\n                <LoadingPoliciesTable />\n            </Main>\n        </StateViewPart>\n        <StateViewPart stateKey='data'>\n            <PageHeader className='page-header'>\n                <PageHeaderTitle title=\"SCAP policies\" />\n            </PageHeader>\n            <Main>\n                { policies && policies.length === 0 ?\n                    <Grid gutter='md'><ComplianceEmptyState title='No policies'\n                        mainButton={<CreatePolicy onWizardFinish={() => refetch()} />} /></Grid> :\n                    <PoliciesTable onWizardFinish={() => refetch()} policies={ policies } />\n                }\n            </Main>\n        </StateViewPart>\n    </StateView>;\n};\n\nexport default routerParams(CompliancePolicies);\n"],"sourceRoot":""}