{"version":3,"sources":["webpack:///./src/Utilities/graphql/mutations.js","webpack:///./node_modules/redux-form/es/createFormValueSelector.js","webpack:///./node_modules/redux-form/es/formValueSelector.js","webpack:///./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyRules.js","webpack:///./node_modules/redux-form/es/propTypes.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack:///./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack:///./src/SmartComponents/CreatePolicy/validate.js","webpack:///./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack:///./src/Utilities/Dispatcher.js","webpack:///./src/SmartComponents/DeletePolicy/DeletePolicy.js","webpack:///./src/SmartComponents/PoliciesTable/PoliciesTable.js","webpack:///./src/SmartComponents/CompliancePolicies/CompliancePolicies.js"],"names":["CREATE_PROFILE","gql","ASSOCIATE_SYSTEMS_TO_PROFILES","UPDATE_PROFILE","CREATE_BUSINESS_OBJECTIVE","DELETE_PROFILE","_ref","getIn","form","getFormState","nonNullGetFormState","state","_len","arguments","length","fields","Array","_key","reduce","accumulator","field","value","undefined","plain","setIn","BENCHMARKS_AND_PROFILES","CreateSCAPPolicy","selectedBenchmarkId","useQuery","data","error","loading","selectedBenchmark","validProfiles","profiles","benchmarkId","benchmarks","allBenchmarks","find","benchmark","id","userProfileRefIds","edges","filter","profile","node","map","refId","includes","Fragment","TextContent","Text","component","TextVariants","h1","h4","Form","FormGroup","label","isRequired","fieldId","title","version","key","Field","name","type","propTypes","string","selector","formValueSelector","compose","connect","reduxForm","destroyOnUnmount","forceUnregisterOnUnmount","QUERY","columns","transforms","sortable","ANSIBLE_ICON","original","EditPolicyRules","profileId","variables","remediationsEnabled","profileRules","rules","JSON","parse","any","bool","func","shape","oneOfType","object","number","formPropTypes","anyTouched","asyncValidating","dirty","invalid","initialized","initialValues","pristine","pure","submitting","submitAsSideEffect","submitFailed","submitSucceeded","valid","warning","array","insert","move","pop","push","remove","removeAll","shift","splice","swap","unshift","asyncValidate","autofill","blur","change","clearAsyncError","clearFields","clearSubmitErrors","destroy","dispatch","handleSubmit","initialize","reset","resetSection","touch","submit","untouch","triggerSubmit","clearSubmit","fieldInputPropTypes","checked","onBlur","onChange","onDragStart","onDrop","onFocus","fieldMetaPropTypes","active","autofilled","touched","visited","fieldArrayMetaPropTypes","fieldArrayFieldsPropTypes","forEach","get","getAll","EditPolicySystems","selectedSystemIds","SystemsTable","composed","props","width","compact","reduxFormPropTypes","defaultProps","entities","rows","entity","selected","EditPolicyDetails","ReduxFormTextInput","isDisabled","aria-describedby","ReduxFormTextArea","ProfileThresholdField","previousThreshold","complianceThreshold","description","REVIEW","ReviewCreatedPolicy","systemsCount","TextList","TextListVariants","dl","TextListItem","TextListItemVariants","dt","dd","FinishedCreatePolicy","percent","message","createProfile","cloneFromProfileId","client","mutate","mutation","input","associateSystems","systemIds","onWizardFinish","then","setState","prevState","this","result","catch","networkError","Bullseye","EmptyState","variant","EmptyStateVariant","full","EmptyStateIcon","size","icon","CogsIcon","Title","EmptyStateBody","Progress","measureLocation","ProgressMeasureLocation","outside","EmptyStateSecondaryActions","Button","onClick","onClose","React","Component","parseFloat","withApollo","validateFirstPage","validateSecondPage","CreatePolicy","isOpen","stepIdReached","toggleOpen","onNext","steps","enableNext","canJumpTo","nextButtonText","isFinishedStep","Wizard","isFullWidth","isFullHeight","dispatchAction","actionCreator","getStore","DeletePolicy","isModalOpen","policy","toggle","onDelete","useMutation","onCompleted","addNotification","onError","deletePolicy","Modal","isSmall","actions","aria-label","emptyRows","cells","headingLevel","colSpan","PoliciesTable","componentDidMount","setInitialCurrentRows","componentDidUpdate","prevProps","policies","itemsPerPage","policyRows","policiesToRows","currentRows","slice","allRows","totalHostCount","businessObjective","page","firstIndex","lastIndex","setPage","_event","changePage","setPerPage","handleSearch","debounce","search","filteredRows","row","match","actionResolver","rowData","history","event","rowId","paths","compliancePolicies","prev","policyToDelete","isDeleteModalOpen","Level","gutter","LevelItem","InputGroup","buttonTitle","onFilterChange","placeholder","Pagination","itemCount","dropDirection","onSetPage","onPerPageSelect","perPage","Table","className","isFooter","PaginationVariant","bottom","routerParams","CompliancePolicies","fetchPolicy","refetch","beta","window","location","pathname","split"],"mappings":"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","file":"js/CompliancePolicies.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport const CREATE_PROFILE = gql`\nmutation CreateProfile($input: createProfileInput!) {\n    createProfile(input: $input) {\n        profile {\n            id\n        }\n    }\n}\n`;\n\nexport const ASSOCIATE_SYSTEMS_TO_PROFILES = gql`\nmutation associateSystems($input: associateSystemsInput!) {\n    associateSystems(input: $input) {\n        profile {\n            id\n        }\n    }\n}\n`;\n\nexport const UPDATE_PROFILE = gql`\nmutation UpdateProfile($input: UpdateProfileInput!) {\n    updateProfile(input: $input) {\n        profile {\n            id,\n            complianceThreshold,\n            businessObjectiveId\n        }\n    }\n}\n`;\n\nexport const CREATE_BUSINESS_OBJECTIVE = gql`\nmutation createBusinessObjective($input: createBusinessObjectiveInput!) {\n    createBusinessObjective(input: $input) {\n        businessObjective {\n            id\n            title\n        }\n    }\n}\n`;\n\nexport const DELETE_PROFILE = gql`\nmutation DeleteProfile($input: deleteProfileInput!) {\n    deleteProfile(input: $input) {\n        profile {\n            id\n        }\n    }\n}\n`;\n","import invariant from 'invariant';\nimport plain from './structure/plain';\n\nvar createFormValueSelector = function createFormValueSelector(_ref) {\n  var getIn = _ref.getIn;\n  return function (form, getFormState) {\n    invariant(form, 'Form value must be specified');\n\n    var nonNullGetFormState = getFormState || function (state) {\n      return getIn(state, 'form');\n    };\n\n    return function (state) {\n      for (var _len = arguments.length, fields = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        fields[_key - 1] = arguments[_key];\n      }\n\n      invariant(fields.length, 'No fields specified');\n      return fields.length === 1 ? // only selecting one field, so return its value\n      getIn(nonNullGetFormState(state), form + \".values.\" + fields[0]) : // selecting many fields, so return an object of field values\n      fields.reduce(function (accumulator, field) {\n        var value = getIn(nonNullGetFormState(state), form + \".values.\" + field);\n        return value === undefined ? accumulator : plain.setIn(accumulator, field, value);\n      }, {});\n    };\n  };\n};\n\nexport default createFormValueSelector;","import createFormValueSelector from './createFormValueSelector';\nimport plain from './structure/plain';\nexport default createFormValueSelector(plain);","import React from 'react';\nimport {\n    Form,\n    FormGroup,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport { ProfileTypeSelect } from 'PresentationalComponents';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\nimport { formValueSelector, Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\n\nconst BENCHMARKS_AND_PROFILES = gql`\nquery benchmarksAndProfiles {\n    allBenchmarks {\n        id\n        title\n        version\n        profiles {\n            id\n            name\n            refId\n            description\n            complianceThreshold\n        }\n    }\n    profiles {\n        edges {\n            node {\n                id\n                refId\n                benchmarkId\n            }\n        }\n    }\n}\n`;\n\nconst CreateSCAPPolicy = ({ selectedBenchmarkId }) => {\n    const { data, error, loading } = useQuery(BENCHMARKS_AND_PROFILES);\n\n    const userProfileRefIdsForBenchmarkId = (profiles, benchmarkId) => (\n        profiles.filter(profile => benchmarkId === profile.node.benchmarkId).map(profile => profile.node.refId)\n    );\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const benchmarks = data.allBenchmarks;\n    let selectedBenchmark;\n    let validProfiles;\n    if (selectedBenchmarkId) {\n        selectedBenchmark = benchmarks.find(benchmark => benchmark.id === selectedBenchmarkId);\n        const userProfileRefIds = userProfileRefIdsForBenchmarkId(data.profiles.edges, selectedBenchmarkId);\n        validProfiles = selectedBenchmark.profiles.filter((profile) => !userProfileRefIds.includes(profile.refId));\n    }\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Create SCAP policy\n                </Text>\n                <Text component={TextVariants.h4}>\n                    Select the security guide and profile type for this policy.\n                </Text>\n            </TextContent>\n            <Form>\n                <FormGroup\n                    label=\"Security guide\"\n                    isRequired\n                    fieldId=\"benchmark\">\n                    { benchmarks && benchmarks.map((benchmark) => {\n                        const { title, version, id } = benchmark;\n                        return (\n                            <Text key={id}>\n                                <Field component='input'\n                                    name='benchmark'\n                                    type='radio'\n                                    value={id}\n                                    id={id}\n                                />\n                                {` ${title} - ${version}`}\n                            </Text>\n                        );\n                    })}\n                </FormGroup>\n                <FormGroup label=\"Profile type\" isRequired fieldId=\"profile-type\">\n                    <ProfileTypeSelect profiles={selectedBenchmark && validProfiles } />\n                </FormGroup>\n            </Form>\n        </React.Fragment>\n    );\n};\n\nCreateSCAPPolicy.propTypes = {\n    selectedBenchmarkId: propTypes.string\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            selectedBenchmarkId: selector(state, 'benchmark')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(CreateSCAPPolicy);\n","import React from 'react';\nimport { formValueSelector, reduxForm } from 'redux-form';\nimport { SystemRulesTable, ANSIBLE_ICON } from '@redhat-cloud-services/frontend-components-inventory-compliance';\nimport { EmptyTable, Spinner } from '@redhat-cloud-services/frontend-components';\nimport { sortable } from '@patternfly/react-table';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst QUERY = gql`\nquery Profile($profileId: String!){\n    profile(id: $profileId) {\n        name\n        refId\n        rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n        }\n    }\n}\n`;\n\nconst columns = [\n    { title: 'Rule', transforms: [sortable] },\n    { title: 'Severity', transforms: [sortable] },\n    { title: <React.Fragment>{ ANSIBLE_ICON } Ansible</React.Fragment>, transforms: [sortable], original: 'Ansible' }\n];\n\nexport const EditPolicyRules = ({ profileId }) => {\n    const { data, error, loading } = useQuery(QUERY, { variables: { profileId } });\n\n    if (error) { return error; }\n\n    if (loading) { return <EmptyTable><Spinner/></EmptyTable>; }\n\n    return (\n        <SystemRulesTable\n            remediationsEnabled={false}\n            columns={columns}\n            loading={loading}\n            profileRules={ !loading && [{\n                profile: { refId: data.profile.refId, name: data.profile.name },\n                rules: data.profile.rules\n            }]}\n        />\n    );\n};\n\nEditPolicyRules.propTypes = {\n    profileId: propTypes.string\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            profileId: JSON.parse(selector(state, 'profile')).id\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyRules);\n","import PropTypes from 'prop-types';\nvar any = PropTypes.any,\n    bool = PropTypes.bool,\n    func = PropTypes.func,\n    shape = PropTypes.shape,\n    string = PropTypes.string,\n    oneOfType = PropTypes.oneOfType,\n    object = PropTypes.object,\n    number = PropTypes.number;\nexport var formPropTypes = {\n  // State:\n  anyTouched: bool.isRequired,\n  // true if any of the fields have been marked as touched\n  asyncValidating: oneOfType([bool, string]).isRequired,\n  // true if async validation is running, a string if a field triggered async validation\n  dirty: bool.isRequired,\n  // true if any values are different from initialValues\n  error: any,\n  // form-wide error from '_error' key in validation result\n  form: string.isRequired,\n  // the name of the form\n  invalid: bool.isRequired,\n  // true if there are any validation errors\n  initialized: bool.isRequired,\n  // true if the form has been initialized\n  initialValues: object,\n  // the initialValues object passed to reduxForm\n  pristine: bool.isRequired,\n  // true if the values are the same as initialValues\n  pure: bool.isRequired,\n  // if true, implements shouldComponentUpdate\n  submitting: bool.isRequired,\n  // true if the form is in the process of being submitted\n  submitAsSideEffect: bool.isRequired,\n  // true if onSubmit result will be dispatched\n  submitFailed: bool.isRequired,\n  // true if the form was submitted and failed for any reason\n  submitSucceeded: bool.isRequired,\n  // true if the form was successfully submitted\n  valid: bool.isRequired,\n  // true if there are no validation errors\n  warning: any,\n  // form-wide warning from '_warning' key in validation result\n  // Actions:\n  array: shape({\n    insert: func.isRequired,\n    // function to insert a value into an array field\n    move: func.isRequired,\n    // function to move a value within an array field\n    pop: func.isRequired,\n    // function to pop a value off of an array field\n    push: func.isRequired,\n    // function to push a value onto an array field\n    remove: func.isRequired,\n    // function to remove a value from an array field\n    removeAll: func.isRequired,\n    // function to remove all the values from an array field\n    shift: func.isRequired,\n    // function to shift a value out of an array field\n    splice: func.isRequired,\n    // function to splice a value into an array field\n    swap: func.isRequired,\n    // function to swap values in an array field\n    unshift: func.isRequired // function to unshift a value into an array field\n\n  }),\n  asyncValidate: func.isRequired,\n  // function to trigger async validation\n  autofill: func.isRequired,\n  // action to set a value of a field and mark it as autofilled\n  blur: func.isRequired,\n  // action to mark a field as blurred\n  change: func.isRequired,\n  // action to change the value of a field\n  clearAsyncError: func.isRequired,\n  // action to clear the async error of a field\n  clearFields: func.isRequired,\n  // action to clean fields values for all fields\n  clearSubmitErrors: func.isRequired,\n  // action to remove submitErrors and error\n  destroy: func.isRequired,\n  // action to destroy the form's data in Redux\n  dispatch: func.isRequired,\n  // the Redux dispatch action\n  handleSubmit: func.isRequired,\n  // function to submit the form\n  initialize: func.isRequired,\n  // action to initialize form data\n  reset: func.isRequired,\n  // action to reset the form data to previously initialized values\n  resetSection: func.isRequired,\n  // action to reset the form sections data to previously initialized values\n  touch: func.isRequired,\n  // action to mark fields as touched\n  submit: func.isRequired,\n  // action to trigger a submission of the specified form\n  untouch: func.isRequired,\n  // action to mark fields as untouched\n  // triggerSubmit\n  triggerSubmit: bool,\n  // if true, submits the form on componentWillReceiveProps\n  clearSubmit: func.isRequired // called before a triggered submit, by default clears triggerSubmit\n\n};\nexport var fieldInputPropTypes = {\n  checked: bool,\n  name: string.isRequired,\n  onBlur: func.isRequired,\n  onChange: func.isRequired,\n  onDragStart: func.isRequired,\n  onDrop: func.isRequired,\n  onFocus: func.isRequired,\n  value: any\n};\nexport var fieldMetaPropTypes = {\n  active: bool.isRequired,\n  asyncValidating: bool.isRequired,\n  autofilled: bool.isRequired,\n  dirty: bool.isRequired,\n  dispatch: func.isRequired,\n  error: any,\n  form: string.isRequired,\n  invalid: bool.isRequired,\n  pristine: bool.isRequired,\n  submitting: bool.isRequired,\n  submitFailed: bool.isRequired,\n  touched: bool.isRequired,\n  valid: bool.isRequired,\n  visited: bool.isRequired,\n  warning: string\n};\nexport var fieldArrayMetaPropTypes = {\n  dirty: bool.isRequired,\n  error: any,\n  form: string.isRequired,\n  invalid: bool.isRequired,\n  pristine: bool.isRequired,\n  submitFailed: bool,\n  submitting: bool,\n  valid: bool.isRequired,\n  warning: string\n};\nexport var fieldArrayFieldsPropTypes = {\n  name: string.isRequired,\n  forEach: func.isRequired,\n  get: func.isRequired,\n  getAll: func.isRequired,\n  insert: func.isRequired,\n  length: number.isRequired,\n  map: func.isRequired,\n  move: func.isRequired,\n  pop: func.isRequired,\n  push: func.isRequired,\n  reduce: func.isRequired,\n  remove: func.isRequired,\n  removeAll: func.isRequired,\n  shift: func.isRequired,\n  swap: func.isRequired,\n  unshift: func.isRequired\n};\nexport var fieldPropTypes = {\n  input: shape(fieldInputPropTypes).isRequired,\n  meta: shape(fieldMetaPropTypes).isRequired\n};\nexport var fieldArrayPropTypes = {\n  fields: shape(fieldArrayFieldsPropTypes).isRequired,\n  meta: shape(fieldArrayMetaPropTypes).isRequired\n};\nexport default formPropTypes;","import React from 'react';\nimport { propTypes as reduxFormPropTypes, reduxForm } from 'redux-form';\nimport {\n    Form,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport SystemsTable from '../SystemsTable/SystemsTable';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst EditPolicySystems = ({ change, selectedSystemIds }) => {\n    const columns = [{\n        composed: ['facts.os_release', 'display_name'],\n        key: 'display_name',\n        title: 'System name',\n        props: {\n            width: 40\n        }\n    }, {\n        key: 'facts.compliance.profiles',\n        title: 'Profiles',\n        props: {\n            width: 40\n        }\n    }];\n\n    if (selectedSystemIds) {\n        change('systems', selectedSystemIds);\n    }\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Systems\n                </Text>\n                <Text component={TextVariants.h4}>\n                    Choose systems to scan with this policy. You can add and remove systems later.\n                </Text>\n            </TextContent>\n            <Form>\n                <SystemsTable columns={columns} remediationsEnabled={false} compact={true} />\n            </Form>\n        </React.Fragment>\n    );\n};\n\nEditPolicySystems.propTypes = {\n    selectedSystemIds: propTypes.array,\n    change: reduxFormPropTypes.change\n};\n\nEditPolicySystems.defaultProps = {\n    selectedSystemIds: []\n};\n\nconst mapStateToProps = ({ entities }) => ({\n    selectedSystemIds: entities && entities.rows ?\n        entities.rows.filter(entity => entity.selected).map(entity => entity.id) :\n        []\n});\n\nexport default compose(\n    connect(mapStateToProps),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicySystems);\n","import React from 'react';\nimport { compose } from 'redux';\nimport {\n    Form,\n    FormGroup,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport ProfileThresholdField from '../ProfileThresholdField/ProfileThresholdField';\nimport { ReduxFormTextInput, ReduxFormTextArea } from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport { Field, reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\n\nconst EditPolicyDetails = ({ profile }) => {\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Policy details\n                </Text>\n            </TextContent>\n            <Form id='editpolicydetails'>\n                <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n                    <Field\n                        component={ReduxFormTextInput}\n                        type='text'\n                        isRequired={true}\n                        isDisabled\n                        id=\"name\"\n                        name=\"name\"\n                        aria-describedby=\"name\"\n                    />\n                </FormGroup>\n                <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextInput}\n                        isDisabled\n                        id=\"refId\"\n                        name=\"refId\"\n                        aria-describedby=\"refId\"\n                    />\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"description\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextArea}\n                        id=\"description\"\n                        name=\"description\"\n                        aria-describedby=\"description\"\n                    />\n                </FormGroup>\n                <ProfileThresholdField previousThreshold={profile.complianceThreshold} />\n            </Form>\n        </React.Fragment>\n    );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n    profile: propTypes.object\n};\n\nexport default compose(\n    connect(\n        state => ({\n            profile: JSON.parse(selector(state, 'profile')),\n            initialValues: {\n                name: `${JSON.parse(selector(state, 'profile')).name}`,\n                refId: `${JSON.parse(selector(state, 'profile')).refId}`,\n                description: `${JSON.parse(selector(state, 'profile')).description}`,\n                benchmark: selector(state, 'benchmark'),\n                profile: selector(state, 'profile')\n            }\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyDetails);\n\nexport { EditPolicyDetails };\n","import React from 'react';\nimport {\n    Text,\n    TextVariants,\n    TextContent,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst REVIEW = gql`\nquery review($benchmarkId: String!) {\n    benchmark(id: $benchmarkId) {\n        title,\n        version\n    }\n}\n`;\n\nconst ReviewCreatedPolicy = ({ benchmarkId, name, refId, systemsCount }) => {\n    const { data, error, loading } = useQuery(REVIEW, { variables: { benchmarkId } });\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const benchmark = data.benchmark;\n\n    return (\n        <TextContent>\n            <Text component={TextVariants.h1}>\n                Review\n            </Text>\n            <Text component={TextVariants.h4}>\n                Review your policy before finishing. SCAP security guide, profile type\n                and name cannot be changed after initial creation. Make sure they are correct!\n            </Text>\n            <hr/>\n            <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>SCAP security guide</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                    {` ${benchmark.title} - ${benchmark.version}`}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Policy type</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ name }</TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Generated ID</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ refId }</TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Number of systems</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ systemsCount }</TextListItem>\n            </TextList>\n        </TextContent>\n    );\n};\n\nReviewCreatedPolicy.propTypes = {\n    benchmarkId: propTypes.string,\n    refId: propTypes.string,\n    name: propTypes.string,\n    systemsCount: propTypes.number\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect(\n    state => ({\n        benchmarkId: selector(state, 'benchmark'),\n        refId: selector(state, 'refId'),\n        name: selector(state, 'name'),\n        systemsCount: selector(state, 'systems').length\n    })\n)(ReviewCreatedPolicy);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Title,\n    Button,\n    Bullseye,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateSecondaryActions,\n    EmptyStateVariant,\n    Progress,\n    ProgressMeasureLocation,\n    EmptyStateIcon\n} from '@patternfly/react-core';\nimport { CogsIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from 'react-apollo';\nimport { CREATE_PROFILE, ASSOCIATE_SYSTEMS_TO_PROFILES } from '../../Utilities/graphql/mutations';\n\nclass FinishedCreatePolicy extends React.Component {\n    state = {\n        percent: 0,\n        message: 'Your Compliance policy is being created. After this is created, you may assign it to hosts and customize it.'\n    };\n\n    componentDidMount() {\n        this.createProfile().then((result) => {\n            this.setState(prevState => ({\n                message: 'Your Compliance policy has been created. Associating systems to it...',\n                percent: prevState.percent + 50,\n                profileId: result.data.createProfile.profile.id\n            }), this.associateSystems);\n        }).catch((error) => {\n            this.setState({\n                message: error.networkError.message\n            });\n        });\n    }\n\n    createProfile = () => {\n        const { benchmarkId, cloneFromProfileId, refId, name, description, complianceThreshold, client } = this.props;\n        return client.mutate({\n            mutation: CREATE_PROFILE,\n            variables: {\n                input: { benchmarkId, cloneFromProfileId, refId, name, description, complianceThreshold }\n            }\n        });\n    }\n\n    associateSystems = () => {\n        const { systemIds, client, onWizardFinish } = this.props;\n        const { profileId: id } = this.state;\n        return client.mutate({\n            mutation: ASSOCIATE_SYSTEMS_TO_PROFILES,\n            variables: {\n                input: { id, systemIds }\n            }\n        }).then(() => {\n            this.setState(prevState => ({\n                percent: prevState.percent + 50,\n                message: 'Your Compliance policy has been created and systems have been associated to it.'\n            }), onWizardFinish);\n        });\n    }\n\n    render() {\n        const { percent, message } = this.state;\n        return (\n            <Bullseye>\n                <EmptyState variant={EmptyStateVariant.full}>\n                    <EmptyStateIcon size='xl' icon={CogsIcon} />\n                    <br/>\n                    <Title size='lg'>\n                        {percent === 100 ? 'Profile creation complete' : 'Profile creation in progress'}\n                    </Title>\n                    <EmptyStateBody>\n                        <Progress\n                            id={'finished-create-policy'}\n                            value={percent}\n                            measureLocation={ProgressMeasureLocation.outside}\n                        />\n                    </EmptyStateBody>\n                    <EmptyStateBody>\n                        { message }\n                    </EmptyStateBody>\n                    <EmptyStateSecondaryActions>\n                        {percent === 100 ? <Button variant={'primary'} onClick={this.props.onClose}>Close</Button> : ''}\n                    </EmptyStateSecondaryActions>\n                </EmptyState>\n            </Bullseye>\n        );\n    }\n}\n\nFinishedCreatePolicy.propTypes = {\n    benchmarkId: propTypes.string.isRequired,\n    client: propTypes.object.isRequired,\n    cloneFromProfileId: propTypes.string.isRequired,\n    onClose: propTypes.func.isRequired,\n    refId: propTypes.string.isRequired,\n    name: propTypes.string.isRequired,\n    description: propTypes.string,\n    systemIds: propTypes.array,\n    complianceThreshold: propTypes.number,\n    onWizardFinish: propTypes.func\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            benchmarkId: selector(state, 'benchmark'),\n            cloneFromProfileId: JSON.parse(selector(state, 'profile')).id,\n            refId: selector(state, 'refId'),\n            name: selector(state, 'name'),\n            description: selector(state, 'description'),\n            complianceThreshold: parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n            systemIds: selector(state, 'systems')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: true,\n        forceUnregisterOnUnmount: true\n    }),\n    withApollo\n)(FinishedCreatePolicy);\n","export const validateFirstPage = (benchmark, profile) => {\n    if (!benchmark || !profile) {\n        return false;\n    } else {\n        return true;\n    }\n};\n\nexport const validateSecondPage = (name, refId) => {\n    if (!name || !refId) {\n        return false;\n    } else {\n        return true;\n    }\n};\n","import React from 'react';\nimport { Button, Wizard } from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport EditPolicyRules from './EditPolicyRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport { connect } from 'react-redux';\nimport {\n    validateFirstPage,\n    validateSecondPage\n} from './validate';\nimport propTypes from 'prop-types';\n\nclass CreatePolicy extends React.Component {\n    state = {\n        isOpen: this.props.isOpen,\n        stepIdReached: 1\n    };\n\n    toggleOpen = () => {\n        const { isOpen } = this.state;\n        this.setState({\n            isOpen: !isOpen\n        });\n    };\n\n    onNext = ({ id }) => {\n        this.setState({\n            stepIdReached: this.state.stepIdReached < id ? id : this.state.stepIdReached\n        });\n    };\n\n    render() {\n        const { isOpen, stepIdReached } = this.state;\n        const { benchmark, profile, name, refId, onWizardFinish } = this.props;\n\n        const steps = [\n            {\n                id: 1,\n                name: 'Create SCAP policy',\n                component: <CreateSCAPPolicy/>,\n                enableNext: validateFirstPage(benchmark, profile)\n            },\n            {\n                id: 2,\n                name: 'Details',\n                component: <EditPolicyDetails/>,\n                canJumpTo: stepIdReached >= 2,\n                enableNext: validateSecondPage(name, refId)\n            },\n            {\n                id: 3,\n                name: 'Rules',\n                component: <EditPolicyRules/>,\n                canJumpTo: stepIdReached >= 3\n            },\n            {\n                id: 4,\n                name: 'Systems',\n                component: <EditPolicySystems/>,\n                canJumpTo: stepIdReached >= 4\n            },\n            {\n                id: 5,\n                name: 'Review',\n                component: <ReviewCreatedPolicy/>,\n                nextButtonText: 'Finish',\n                canJumpTo: stepIdReached >= 5\n            },\n            {\n                id: 6,\n                name: 'Finished',\n                component: <FinishedCreatePolicy onWizardFinish={onWizardFinish} onClose={this.toggleOpen}/>,\n                isFinishedStep: true,\n                canJumpTo: stepIdReached >= 6\n            }\n        ];\n\n        return (\n            <React.Fragment>\n                <Button variant=\"primary\" onClick={this.toggleOpen}>\n                    Create new policy\n                </Button>\n                {isOpen && (\n                    <Wizard\n                        isOpen={isOpen}\n                        onClose={this.toggleOpen}\n                        isFullWidth\n                        isFullHeight\n                        title=\"Create SCAP policy\"\n                        description=\"Create a new policy for managing SCAP compliance\"\n                        steps={steps}\n                        onNext={this.onNext}\n                    />\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nCreatePolicy.propTypes = {\n    benchmark: propTypes.string,\n    profile: propTypes.string,\n    name: propTypes.string,\n    refId: propTypes.string,\n    isOpen: propTypes.bool,\n    onWizardFinish: propTypes.func\n};\n\nCreatePolicy.defaultProps = {\n    isOpen: false\n};\n\nconst selector = formValueSelector('policyForm');\nexport default connect(\n    state => ({\n        benchmark: selector(state, 'benchmark'),\n        profile: selector(state, 'profile'),\n        name: selector(state, 'name'),\n        refId: selector(state, 'refId')\n    })\n)(CreatePolicy);\n","import { getStore } from '../store';\nexport function dispatchAction(actionCreator) {\n    const store = getStore();\n    return store.dispatch(actionCreator);\n}\n","import {\n    Modal,\n    TextContent,\n    Button\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { DELETE_PROFILE } from '../../Utilities/graphql/mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { dispatchAction } from '../../Utilities/Dispatcher';\n\nconst DeletePolicy = ({ isModalOpen, policy, toggle, onDelete }) => {\n    const [deletePolicy] = useMutation(DELETE_PROFILE, {\n        onCompleted: () => {\n            dispatchAction(addNotification({\n                variant: 'success',\n                title: `Removed policy ${policy.name}`\n            }));\n            onDelete();\n            toggle();\n        },\n        onError: (error) => {\n            dispatchAction(addNotification({\n                variant: 'danger',\n                title: 'Error removing policy',\n                description: error.message\n            }));\n            onDelete();\n            toggle();\n        }\n    });\n    const { name, id } = policy;\n\n    return (\n        <Modal\n            isSmall\n            title='Delete policy'\n            isOpen={isModalOpen}\n            onClose={toggle}\n            actions={[\n                <Button key='destroy'\n                    aria-label=\"delete\"\n                    variant='danger'\n                    onClick={() => deletePolicy({ variables: { input: { id } } })}>\n                    Delete policy\n                </Button>,\n                <Button key='cancel' variant='secondary' onClick={toggle}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <TextContent>\n                Are you sure you want to delete <b>{ name }</b>?\n            </TextContent>\n            <TextContent>\n                This cannot be undone.\n            </TextContent>\n        </Modal>\n    );\n};\n\nDeletePolicy.propTypes = {\n    policy: propTypes.object,\n    toggle: propTypes.func,\n    isModalOpen: propTypes.bool,\n    onDelete: propTypes.func\n};\n\nexport default DeletePolicy;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { EmptyTable, SimpleTableFilter, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport {\n    Bullseye,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateVariant,\n    InputGroup,\n    Level,\n    LevelItem,\n    Pagination,\n    PaginationVariant,\n    Title\n} from '@patternfly/react-core';\nimport CreatePolicy from '../CreatePolicy/CreatePolicy';\nimport DeletePolicy from '../DeletePolicy/DeletePolicy';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { paths } from '../../Routes';\nimport debounce from 'lodash/debounce';\n\nconst emptyRows = [{\n    cells: [{\n        title: (\n            <EmptyTable>\n                <Bullseye>\n                    <EmptyState variant={ EmptyStateVariant.full }>\n                        <Title headingLevel=\"h5\" size=\"lg\">\n                                No matching policies found\n                        </Title>\n                        <EmptyStateBody>\n                                This filter criteria matches no policies. <br /> Try changing your filter settings.\n                        </EmptyStateBody>\n                    </EmptyState>\n                </Bullseye>\n            </EmptyTable>\n        ),\n        props: {\n            colSpan: 5\n        }\n    }]\n}];\n\nexport class PoliciesTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [\n                { title: 'Policy name' },\n                { title: 'Policy type' },\n                { title: 'Systems' },\n                { title: 'Business objective' },\n                { title: 'Compliance threshold' }\n            ],\n            page: 1,\n            itemsPerPage: 10,\n            search: '',\n            rows: [],\n            currentRows: [],\n            isDeleteModalOpen: false,\n            policyToDelete: {}\n        };\n    }\n\n    componentDidMount = () => {\n        this.setInitialCurrentRows();\n    }\n\n    componentDidUpdate = (prevProps) => {\n        const { policies } = this.props;\n        if (policies !== prevProps.policies) {\n            this.setInitialCurrentRows();\n        }\n    }\n\n    setInitialCurrentRows = () => {\n        const { policies } = this.props;\n        const { itemsPerPage } = this.state;\n        const policyRows = this.policiesToRows(policies);\n\n        this.setState({\n            currentRows: policyRows.slice(0, itemsPerPage),\n            rows: policyRows,\n            allRows: policyRows\n        });\n    }\n\n    policiesToRows = (policies) => {\n        return policies.map((policy) => {\n            return {\n                cells: [\n                    policy.name,\n                    'External',\n                    policy.totalHostCount,\n                    policy.businessObjective && policy.businessObjective.title || '--',\n                    `${policy.complianceThreshold}%`\n                ]\n            };\n        });\n    }\n\n    currentRows = (page, itemsPerPage, policyRows) => {\n        const { rows } = (policyRows) ? policyRows : this.state;\n\n        if (!rows.length) {\n            return [];\n        }\n\n        if (rows.length < itemsPerPage) { itemsPerPage = rows.length; }\n\n        const firstIndex = (page - 1) * itemsPerPage;\n        const lastIndex = page * itemsPerPage;\n        const newRows = rows.slice(firstIndex, lastIndex);\n\n        return newRows;\n    }\n\n    setPage = (_event, page) => {\n        const { itemsPerPage } = this.state;\n        this.changePage(page, itemsPerPage);\n    }\n\n    setPerPage = (_event, itemsPerPage) => {\n        const { page } = this.state;\n        this.changePage(page, itemsPerPage);\n    }\n\n    changePage = (page, itemsPerPage) => {\n        this.setState({\n            currentRows: this.currentRows(page, itemsPerPage),\n            page,\n            itemsPerPage\n        });\n    }\n\n    handleSearch = debounce(search => {\n        const { itemsPerPage, allRows } = this.state;\n        const filteredRows = allRows.filter(row => row.cells[0].match(search));\n        this.setState({\n            search,\n            rows: filteredRows,\n            currentRows: filteredRows.slice(0, itemsPerPage)\n        });\n    }, 500)\n\n    actionResolver = (rowData) => {\n        const { history, policies } = this.props;\n\n        return [\n            {\n                title: 'View latest results',\n                onClick: (event, rowId) => history.push(`${paths.compliancePolicies}/${policies[rowId].id}`)\n            },\n            {\n                title: 'Delete policy',\n                onClick: () => {\n                    this.setState((prev) => ({\n                        policyToDelete: policies[rowData.id],\n                        isDeleteModalOpen: !prev.isDeleteModalOpen\n                    }));\n                }\n            }\n        ];\n    }\n\n    render() {\n        const { onWizardFinish } = this.props;\n        const { rows, currentRows, columns, page, itemsPerPage, policyToDelete, isDeleteModalOpen } = this.state;\n        return (\n            <React.Fragment>\n                <DeletePolicy\n                    isModalOpen={isDeleteModalOpen}\n                    policy={policyToDelete}\n                    onDelete={onWizardFinish}\n                    toggle={() => this.setState((prev) => ({ isDeleteModalOpen: !prev.isDeleteModalOpen }))}\n                />\n                <TableToolbar>\n                    <Level gutter='md'>\n                        <LevelItem>\n                            <InputGroup>\n                                <SimpleTableFilter buttonTitle={ null }\n                                    onFilterChange={ this.handleSearch }\n                                    placeholder=\"Search\" />\n                            </InputGroup>\n                        </LevelItem>\n                        <LevelItem>\n                            { rows.length } results\n                        </LevelItem>\n                        <LevelItem>\n                            <CreatePolicy onWizardFinish={onWizardFinish} />\n                        </LevelItem>\n                    </Level>\n                    <Pagination\n                        page={ page }\n                        itemCount={ rows.length }\n                        dropDirection='down'\n                        onSetPage={ this.setPage }\n                        onPerPageSelect={ this.setPerPage }\n                        perPage={ itemsPerPage }\n                    />\n                </TableToolbar>\n                <Table\n                    aria-label='policies'\n                    className='compliance-policies-table'\n                    cells={ columns }\n                    actionResolver={this.actionResolver}\n                    rows={ (currentRows.length === 0) ? emptyRows : currentRows }>\n                    <TableHeader />\n                    <TableBody />\n                </Table>\n                <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n                    <Pagination\n                        page={ page }\n                        itemCount={ rows.length }\n                        dropDirection='up'\n                        onSetPage={ this.setPage }\n                        onPerPageSelect={ this.setPerPage }\n                        perPage={ itemsPerPage }\n                        variant={ PaginationVariant.bottom }\n                    />\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nPoliciesTable.propTypes = {\n    policies: propTypes.array.isRequired,\n    history: propTypes.object,\n    onWizardFinish: propTypes.func\n};\n\nPoliciesTable.defaultProps = {\n    policies: []\n};\n\nexport default routerParams(PoliciesTable);\n","import React from 'react';\nimport {\n    ComplianceTabs,\n    ErrorPage,\n    LoadingPoliciesTable\n} from 'PresentationalComponents';\nimport { PageHeader, PageHeaderTitle, Main } from '@redhat-cloud-services/frontend-components';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport PoliciesTable from '../PoliciesTable/PoliciesTable';\n\nconst QUERY = gql`\n{\n    profiles {\n        edges {\n            node {\n                id\n                name\n                refId\n                complianceThreshold\n                totalHostCount\n                businessObjective {\n                    id\n                    title\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const CompliancePolicies = () => {\n    const { data, error, loading, refetch } = useQuery(QUERY, { fetchPolicy: 'network-only' });\n\n    if (error) { return <ErrorPage error={error}/>; }\n\n    const beta = window.location.pathname.split('/')[1] === 'beta';\n\n    return (\n        <React.Fragment>\n            <PageHeader className={ beta ? 'beta-page-header' : 'stable-page-header' } >\n                <PageHeaderTitle title=\"Compliance policies\" />\n                { !loading && !beta && <ComplianceTabs/> }\n            </PageHeader>\n            <Main>\n                { loading ?\n                    <LoadingPoliciesTable /> :\n                    <PoliciesTable onWizardFinish={() => refetch()} policies={data.profiles.edges.map(profile => profile.node)} />\n                }\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default routerParams(CompliancePolicies);\n"],"sourceRoot":""}