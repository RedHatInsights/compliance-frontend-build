{"version":3,"sources":["webpack:///./src/SmartComponents/DeletePolicy/DeletePolicy.js","webpack:///./src/SmartComponents/PoliciesTable/PoliciesTable.js","webpack:///./src/SmartComponents/CompliancePolicies/CompliancePolicies.js"],"names":["DeletePolicy","isModalOpen","policy","toggle","onDelete","useMutation","DELETE_PROFILE","onCompleted","dispatchAction","addNotification","variant","title","name","onError","error","description","message","deletePolicy","id","Modal","isSmall","isOpen","isFooterLeftAligned","onClose","actions","Button","key","aria-label","onClick","variables","input","TextContent","propTypes","object","func","bool","emptyRows","cells","Bullseye","EmptyState","EmptyStateVariant","full","Title","headingLevel","size","EmptyStateBody","props","colSpan","FILTER_CONFIGURATION","type","conditionalFilterType","text","label","filter","policies","value","includes","PoliciesTable","filterConfigBuilder","FilterConfigBuilder","chipBuilder","getChipBuilder","filterBuilder","getFilterBuilder","columns","state","page","itemsPerPage","isDeleteModalOpen","policyToDelete","activeFilters","setPage","_event","changePage","setPerPage","setState","paginatedPolicies","slice","filteredPolicies","applyFilterToObjectArray","onFilterUpdate","deleteFilter","chips","removeFilterWithChip","clearAllFilter","initialDefaultState","onFilterDelete","clearAll","actionResolver","rowData","currentRowIndex","prev","onWizardFinish","this","filterChips","chipsFor","rows","map","to","original","Tooltip","position","content","benchmark","version","majorOsVersion","totalHostCount","businessObjective","complianceThreshold","policiesToRows","filterConfig","buildConfiguration","hideLabel","pagination","itemCount","length","dropDirection","onSetPage","onPerPageSelect","perPage","Fragment","activeFiltersConfig","filters","DataToolbarItem","CreatePolicy","Table","className","isFooter","Pagination","PaginationVariant","bottom","React","Component","array","isRequired","history","defaultProps","routerParams","QUERY","gql","CompliancePolicies","useQuery","fetchPolicy","data","loading","refetch","profiles","edges","profile","node","stateValues","stateKey"],"mappings":"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","file":"js/CompliancePolicies.js","sourcesContent":["import {\n    Modal,\n    TextContent,\n    Button\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { DELETE_PROFILE } from '../../Utilities/graphql/mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { dispatchAction } from '../../Utilities/Dispatcher';\n\nconst DeletePolicy = ({ isModalOpen, policy, toggle, onDelete }) => {\n    const [deletePolicy] = useMutation(DELETE_PROFILE, {\n        onCompleted: () => {\n            dispatchAction(addNotification({\n                variant: 'success',\n                title: `Removed policy ${policy.name}`\n            }));\n            onDelete();\n            toggle();\n        },\n        onError: (error) => {\n            dispatchAction(addNotification({\n                variant: 'danger',\n                title: 'Error removing policy',\n                description: error.message\n            }));\n            onDelete();\n            toggle();\n        }\n    });\n    const { name, id } = policy;\n\n    return (\n        <Modal\n            isSmall\n            title='Delete policy'\n            isOpen={isModalOpen}\n            isFooterLeftAligned\n            onClose={toggle}\n            actions={[\n                <Button key='destroy'\n                    aria-label=\"delete\"\n                    variant='danger'\n                    onClick={() => deletePolicy({ variables: { input: { id } } })}>\n                    Delete policy\n                </Button>,\n                <Button key='cancel' variant='secondary' onClick={toggle}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <TextContent>\n                Are you sure you want to delete <b>{ name }</b>?\n                <br/>\n                This cannot be undone.\n            </TextContent>\n        </Modal>\n    );\n};\n\nDeletePolicy.propTypes = {\n    policy: propTypes.object,\n    toggle: propTypes.func,\n    isModalOpen: propTypes.bool,\n    onDelete: propTypes.func\n};\n\nexport default DeletePolicy;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport {\n    Bullseye, EmptyState, EmptyStateBody, EmptyStateVariant, Pagination, PaginationVariant, Title,\n    DataToolbarItem, Tooltip\n} from '@patternfly/react-core';\nimport { EmptyTable, PrimaryToolbar, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport { FilterConfigBuilder } from '@redhat-cloud-services/frontend-components-inventory-compliance';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport CreatePolicy from '../CreatePolicy/CreatePolicy';\nimport DeletePolicy from '../DeletePolicy/DeletePolicy';\n\nconst emptyRows = [{\n    cells: [{\n        title: (\n            <EmptyTable>\n                <Bullseye>\n                    <EmptyState variant={ EmptyStateVariant.full }>\n                        <Title headingLevel=\"h5\" size=\"lg\">\n                                No matching policies found\n                        </Title>\n                        <EmptyStateBody>\n                                This filter criteria matches no policies. <br /> Try changing your filter settings.\n                        </EmptyStateBody>\n                    </EmptyState>\n                </Bullseye>\n            </EmptyTable>\n        ),\n        props: {\n            colSpan: 5\n        }\n    }]\n}];\n\nconst policiesToRows = (policies) => (\n    policies.map((policy) => (\n        {\n            cells: [\n                { title: <Link to={'/scappolicies/' + policy.id}>{policy.name}</Link>, original: policy.name },\n                {\n                    title: <Tooltip key={policy.id}\n                        position='right'\n                        content={\n                            <span>SCAP Security Guide (SSG): {policy.benchmark.title} - {policy.benchmark.version}</span>\n                        }\n                    >\n                        <span>\n                            RHEL {policy.majorOsVersion} (SSG {policy.benchmark.version})\n                        </span>\n                    </Tooltip>\n                },\n                policy.totalHostCount,\n                policy.businessObjective && policy.businessObjective.title || '--',\n                `${policy.complianceThreshold}%`\n            ]\n        }\n    ))\n);\n\nconst FILTER_CONFIGURATION = [\n    {\n        type: conditionalFilterType.text,\n        label: 'Name',\n        filter: (policies, value) => (\n            policies.filter((policy) => policy.name.includes(value))\n        )\n    }\n];\n\nexport class PoliciesTable extends React.Component {\n    filterConfigBuilder = new FilterConfigBuilder(FILTER_CONFIGURATION);\n    chipBuilder = this.filterConfigBuilder.getChipBuilder();\n    filterBuilder = this.filterConfigBuilder.getFilterBuilder();\n    columns = [\n        { title: 'Policy name' },\n        { title: 'Operating system' },\n        { title: 'Systems' },\n        { title: 'Business objective' },\n        { title: 'Compliance threshold' }\n    ]\n    state = {\n        page: 1,\n        itemsPerPage: 10,\n        isDeleteModalOpen: false,\n        policyToDelete: {},\n        activeFilters: {}\n    }\n\n    setPage = (_event, page) => (\n        this.changePage(page, this.state.itemsPerPage)\n    )\n\n    setPerPage = (_event, itemsPerPage) => (\n        this.changePage(1, itemsPerPage)\n    )\n\n    changePage = (page, itemsPerPage) => (\n        this.setState({\n            page,\n            itemsPerPage\n        })\n    )\n\n    paginatedPolicies = (policies) => (\n        policies.slice(\n            (this.state.page - 1) * this.state.itemsPerPage,\n            this.state.page * this.state.itemsPerPage\n        )\n    )\n\n    filteredPolicies = () => (\n        this.filterConfigBuilder.applyFilterToObjectArray(\n            this.props.policies, this.state.activeFilters\n        )\n    )\n\n    onFilterUpdate = (filter, value) => {\n        this.setState({\n            page: 1,\n            activeFilters: {\n                ...this.state.activeFilters,\n                [filter]: value\n            }\n        });\n    }\n\n    deleteFilter = (chips) => {\n        const activeFilters =  this.filterConfigBuilder.removeFilterWithChip(\n            chips, this.state.activeFilters\n        );\n        this.setState({\n            activeFilters\n        });\n    }\n\n    clearAllFilter = () => (\n        this.setState({\n            activeFilters: this.filterConfigBuilder.initialDefaultState()\n        })\n    )\n\n    onFilterDelete = (_event, chips, clearAll = false) => (\n        clearAll ? this.clearAllFilter() : this.deleteFilter(chips[0])\n    )\n\n    actionResolver = (rowData) => {\n        const { policies } = this.props;\n        const { itemsPerPage, page } = this.state;\n\n        const currentRowIndex = rowData.id + (page - 1) * itemsPerPage;\n\n        return [\n            {\n                title: 'Delete policy',\n                onClick: () => {\n                    this.setState((prev) => ({\n                        policyToDelete: policies[currentRowIndex],\n                        isDeleteModalOpen: !prev.isDeleteModalOpen\n                    }));\n                }\n            }\n        ];\n    }\n\n    render() {\n        const { onWizardFinish } = this.props;\n        const {\n            page, itemsPerPage, policyToDelete, isDeleteModalOpen\n        } = this.state;\n        const policies = this.filteredPolicies();\n        const filterChips = this.chipBuilder.chipsFor(this.state.activeFilters);\n        const rows = policiesToRows(this.paginatedPolicies(policies));\n        const filterConfig = this.filterConfigBuilder.buildConfiguration(\n            this.onFilterUpdate,\n            this.state.activeFilters,\n            { hideLabel: true }\n        );\n        const pagination = {\n            page,\n            itemCount: policies.length,\n            dropDirection: 'down',\n            onSetPage: this.setPage,\n            onPerPageSelect: this.setPerPage,\n            perPage: itemsPerPage\n        };\n\n        return <React.Fragment>\n            <PrimaryToolbar\n                filterConfig={ filterConfig }\n                activeFiltersConfig={{\n                    filters: filterChips,\n                    onDelete: this.onFilterDelete\n                }}\n                pagination={{\n                    ...pagination,\n                    dropDirection: 'down'\n                }}>\n                <DataToolbarItem>\n                    <CreatePolicy onWizardFinish={onWizardFinish} />\n                </DataToolbarItem>\n                <DataToolbarItem>\n                    { policies.length } results\n                </DataToolbarItem>\n            </PrimaryToolbar>\n            <Table\n                aria-label='policies'\n                className='compliance-policies-table'\n                cells={ this.columns }\n                actionResolver={ rows.length > 0 && this.actionResolver}\n                rows={ (rows.length === 0) ? emptyRows : rows }>\n                <TableHeader />\n                <TableBody />\n            </Table>\n            <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n                <Pagination\n                    { ...pagination }\n                    dropDirection='up'\n                    variant={ PaginationVariant.bottom }\n                />\n            </TableToolbar>\n            <DeletePolicy\n                isModalOpen={isDeleteModalOpen}\n                policy={policyToDelete}\n                onDelete={onWizardFinish}\n                toggle={() => this.setState((prev) => ({ isDeleteModalOpen: !prev.isDeleteModalOpen }))}\n            />\n        </React.Fragment>;\n    }\n}\n\nPoliciesTable.propTypes = {\n    policies: propTypes.array.isRequired,\n    history: propTypes.object,\n    onWizardFinish: propTypes.func\n};\n\nPoliciesTable.defaultProps = {\n    policies: []\n};\n\nexport { policiesToRows };\n\nexport default routerParams(PoliciesTable);\n","import React from 'react';\nimport {\n    CompliancePoliciesEmptyState,\n    ErrorPage,\n    LoadingPoliciesTable,\n    StateView,\n    StateViewPart\n} from 'PresentationalComponents';\nimport { PageHeader, PageHeaderTitle, Main } from '@redhat-cloud-services/frontend-components';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport PoliciesTable from '../PoliciesTable/PoliciesTable';\n\nconst QUERY = gql`\n{\n    profiles(search: \"external = false\") {\n        edges {\n            node {\n                id\n                name\n                refId\n                complianceThreshold\n                totalHostCount\n                majorOsVersion\n                benchmark {\n                    title\n                    version\n                }\n                businessObjective {\n                    id\n                    title\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const CompliancePolicies = () => {\n    const { data, error, loading, refetch } = useQuery(QUERY, { fetchPolicy: 'cache-and-network' });\n    let policies;\n\n    if (data) {\n        policies = data.profiles.edges.map(profile => profile.node);\n    }\n\n    return <StateView stateValues={ { error, data, loading } }>\n        <StateViewPart stateKey='error'>\n            <ErrorPage error={error}/>\n        </StateViewPart>\n        <StateViewPart stateKey='loading'>\n            <PageHeader className='page-header'>\n                <PageHeaderTitle title=\"SCAP policies\" />\n            </PageHeader>\n            <Main>\n                <LoadingPoliciesTable />\n            </Main>\n        </StateViewPart>\n        <StateViewPart stateKey='data'>\n            <PageHeader className='page-header'>\n                <PageHeaderTitle title=\"SCAP policies\" />\n            </PageHeader>\n            <Main>\n                { policies && policies.length === 0 ?\n                    <CompliancePoliciesEmptyState /> :\n                    <PoliciesTable onWizardFinish={() => refetch()} policies={ policies } />\n                }\n            </Main>\n        </StateViewPart>\n    </StateView>;\n};\n\nexport default routerParams(CompliancePolicies);\n"],"sourceRoot":""}