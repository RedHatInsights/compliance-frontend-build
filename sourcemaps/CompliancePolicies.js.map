{"version":3,"sources":["webpack:///./src/SmartComponents/DeletePolicy/DeletePolicy.js","webpack:///./src/SmartComponents/PoliciesTable/PoliciesTable.js","webpack:///./src/SmartComponents/CompliancePolicies/CompliancePolicies.js"],"names":["DeletePolicy","isModalOpen","policy","toggle","onDelete","useMutation","DELETE_PROFILE","onCompleted","dispatchAction","addNotification","variant","title","name","onError","error","description","message","deletePolicy","id","Modal","isSmall","isOpen","isFooterLeftAligned","onClose","actions","Button","key","aria-label","onClick","variables","input","TextContent","propTypes","object","func","bool","emptyRows","cells","Bullseye","EmptyState","EmptyStateVariant","full","Title","headingLevel","size","EmptyStateBody","props","colSpan","policiesToRows","policies","map","to","original","majorOsVersion","totalHostCount","businessObjective","complianceThreshold","PoliciesTable","columns","state","page","itemsPerPage","search","rows","currentRows","isDeleteModalOpen","policyToDelete","componentDidMount","setInitialCurrentRows","componentDidUpdate","prevProps","policyRows","setState","slice","allRows","length","firstIndex","lastIndex","setPage","_event","changePage","setPerPage","handleSearch","debounce","filteredRows","filter","row","match","actionResolver","rowData","history","currentRowIndex","push","paths","compliancePolicies","prev","onWizardFinish","this","Fragment","Level","gutter","LevelItem","InputGroup","buttonTitle","onFilterChange","placeholder","CreatePolicy","Pagination","itemCount","dropDirection","onSetPage","onPerPageSelect","perPage","Table","className","isFooter","PaginationVariant","bottom","React","Component","array","isRequired","defaultProps","routerParams","QUERY","gql","CompliancePolicies","useQuery","fetchPolicy","data","loading","refetch","beta","window","location","pathname","split","style","paddingBottom","profiles","edges","profile","node"],"mappings":"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","file":"js/CompliancePolicies.js","sourcesContent":["import {\n    Modal,\n    TextContent,\n    Button\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { DELETE_PROFILE } from '../../Utilities/graphql/mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { dispatchAction } from '../../Utilities/Dispatcher';\n\nconst DeletePolicy = ({ isModalOpen, policy, toggle, onDelete }) => {\n    const [deletePolicy] = useMutation(DELETE_PROFILE, {\n        onCompleted: () => {\n            dispatchAction(addNotification({\n                variant: 'success',\n                title: `Removed policy ${policy.name}`\n            }));\n            onDelete();\n            toggle();\n        },\n        onError: (error) => {\n            dispatchAction(addNotification({\n                variant: 'danger',\n                title: 'Error removing policy',\n                description: error.message\n            }));\n            onDelete();\n            toggle();\n        }\n    });\n    const { name, id } = policy;\n\n    return (\n        <Modal\n            isSmall\n            title='Delete policy'\n            isOpen={isModalOpen}\n            isFooterLeftAligned\n            onClose={toggle}\n            actions={[\n                <Button key='destroy'\n                    aria-label=\"delete\"\n                    variant='danger'\n                    onClick={() => deletePolicy({ variables: { input: { id } } })}>\n                    Delete policy\n                </Button>,\n                <Button key='cancel' variant='secondary' onClick={toggle}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <TextContent>\n                Are you sure you want to delete <b>{ name }</b>?\n            </TextContent>\n            <TextContent>\n                This cannot be undone.\n            </TextContent>\n        </Modal>\n    );\n};\n\nDeletePolicy.propTypes = {\n    policy: propTypes.object,\n    toggle: propTypes.func,\n    isModalOpen: propTypes.bool,\n    onDelete: propTypes.func\n};\n\nexport default DeletePolicy;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { EmptyTable, SimpleTableFilter, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport {\n    Bullseye,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateVariant,\n    InputGroup,\n    Level,\n    LevelItem,\n    Pagination,\n    PaginationVariant,\n    Title\n} from '@patternfly/react-core';\nimport {\n    CompliancePoliciesEmptyState\n} from 'PresentationalComponents';\nimport CreatePolicy from '../CreatePolicy/CreatePolicy';\nimport DeletePolicy from '../DeletePolicy/DeletePolicy';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { paths } from '../../Routes';\nimport debounce from 'lodash/debounce';\nimport {\n    Link\n} from 'react-router-dom';\n\nconst emptyRows = [{\n    cells: [{\n        title: (\n            <EmptyTable>\n                <Bullseye>\n                    <EmptyState variant={ EmptyStateVariant.full }>\n                        <Title headingLevel=\"h5\" size=\"lg\">\n                                No matching policies found\n                        </Title>\n                        <EmptyStateBody>\n                                This filter criteria matches no policies. <br /> Try changing your filter settings.\n                        </EmptyStateBody>\n                    </EmptyState>\n                </Bullseye>\n            </EmptyTable>\n        ),\n        props: {\n            colSpan: 5\n        }\n    }]\n}];\n\nconst policiesToRows = (policies) => (\n    policies.map((policy) => (\n        {\n            cells: [\n                { title: <Link to={'/policies/' + policy.id}>{policy.name}</Link>, original: policy.name },\n                `RHEL ${policy.majorOsVersion}`,\n                policy.totalHostCount,\n                policy.businessObjective && policy.businessObjective.title || '--',\n                `${policy.complianceThreshold}%`\n            ]\n        }\n    ))\n);\n\nexport class PoliciesTable extends React.Component {\n    columns = [\n        { title: 'Policy name' },\n        { title: 'Operating system' },\n        { title: 'Systems' },\n        { title: 'Business objective' },\n        { title: 'Compliance threshold' }\n    ]\n    state = {\n        columns: this.columns,\n        page: 1,\n        itemsPerPage: 10,\n        search: '',\n        rows: [],\n        currentRows: [],\n        isDeleteModalOpen: false,\n        policyToDelete: {}\n    }\n\n    componentDidMount = () => {\n        this.setInitialCurrentRows();\n    }\n\n    componentDidUpdate = (prevProps) => {\n        const { policies } = this.props;\n        if (policies !== prevProps.policies) {\n            this.setInitialCurrentRows();\n        }\n    }\n\n    setInitialCurrentRows = () => {\n        const { policies } = this.props;\n        const { itemsPerPage } = this.state;\n        const policyRows = policiesToRows(policies);\n\n        this.setState({\n            currentRows: policyRows.slice(0, itemsPerPage),\n            rows: policyRows,\n            allRows: policyRows\n        });\n    }\n\n    currentRows = (page, itemsPerPage, policyRows) => {\n        const { rows } = (policyRows) ? policyRows : this.state;\n\n        if (!rows.length) {\n            return [];\n        }\n\n        if (rows.length < itemsPerPage) { itemsPerPage = rows.length; }\n\n        const firstIndex = (page - 1) * itemsPerPage;\n        const lastIndex = page * itemsPerPage;\n        const newRows = rows.slice(firstIndex, lastIndex);\n\n        return newRows;\n    }\n\n    setPage = (_event, page) => {\n        const { itemsPerPage } = this.state;\n        this.changePage(page, itemsPerPage);\n    }\n\n    setPerPage = (_event, itemsPerPage) => {\n        const { page } = this.state;\n        this.changePage(page, itemsPerPage);\n    }\n\n    changePage = (page, itemsPerPage) => {\n        this.setState({\n            currentRows: this.currentRows(page, itemsPerPage),\n            page,\n            itemsPerPage\n        });\n    }\n\n    handleSearch = debounce(search => {\n        const { itemsPerPage, allRows } = this.state;\n        const filteredRows = allRows.filter(row => row.cells[0].original.match(search));\n        this.setState({\n            search,\n            page: 1,\n            rows: filteredRows,\n            currentRows: filteredRows.slice(0, itemsPerPage)\n        });\n    }, 500)\n\n    actionResolver = (rowData) => {\n        const { history, policies } = this.props;\n        const { itemsPerPage, page } = this.state;\n\n        const currentRowIndex = rowData.id + (page - 1) * itemsPerPage;\n\n        return [\n            {\n                title: 'View latest results',\n                onClick: () => history.push(`${paths.compliancePolicies}/${policies[currentRowIndex].id}`)\n            },\n            {\n                title: 'Delete policy',\n                onClick: () => {\n                    this.setState((prev) => ({\n                        policyToDelete: policies[currentRowIndex],\n                        isDeleteModalOpen: !prev.isDeleteModalOpen\n                    }));\n                }\n            }\n        ];\n    }\n\n    render() {\n        const { onWizardFinish } = this.props;\n        const { rows, currentRows, columns, page, itemsPerPage, policyToDelete, isDeleteModalOpen } = this.state;\n        if (rows.length === 0) {\n            return <CompliancePoliciesEmptyState />;\n        }\n\n        return (\n            <React.Fragment>\n                <DeletePolicy\n                    isModalOpen={isDeleteModalOpen}\n                    policy={policyToDelete}\n                    onDelete={onWizardFinish}\n                    toggle={() => this.setState((prev) => ({ isDeleteModalOpen: !prev.isDeleteModalOpen }))}\n                />\n                <TableToolbar>\n                    <Level gutter='md'>\n                        <LevelItem>\n                            <InputGroup>\n                                <SimpleTableFilter buttonTitle={ null }\n                                    onFilterChange={ this.handleSearch }\n                                    placeholder=\"Search\" />\n                            </InputGroup>\n                        </LevelItem>\n                        <LevelItem>\n                            { rows.length } results\n                        </LevelItem>\n                        <LevelItem>\n                            <CreatePolicy onWizardFinish={onWizardFinish} />\n                        </LevelItem>\n                    </Level>\n                    <Pagination\n                        page={ page }\n                        itemCount={ rows.length }\n                        dropDirection='down'\n                        onSetPage={ this.setPage }\n                        onPerPageSelect={ this.setPerPage }\n                        perPage={ itemsPerPage }\n                    />\n                </TableToolbar>\n                <Table\n                    aria-label='policies'\n                    className='compliance-policies-table'\n                    cells={ columns }\n                    actionResolver={this.actionResolver}\n                    rows={ (currentRows.length === 0) ? emptyRows : currentRows }>\n                    <TableHeader />\n                    <TableBody />\n                </Table>\n                <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n                    <Pagination\n                        page={ page }\n                        itemCount={ rows.length }\n                        dropDirection='up'\n                        onSetPage={ this.setPage }\n                        onPerPageSelect={ this.setPerPage }\n                        perPage={ itemsPerPage }\n                        variant={ PaginationVariant.bottom }\n                    />\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nPoliciesTable.propTypes = {\n    policies: propTypes.array.isRequired,\n    history: propTypes.object,\n    onWizardFinish: propTypes.func\n};\n\nPoliciesTable.defaultProps = {\n    policies: []\n};\n\nexport { policiesToRows };\n\nexport default routerParams(PoliciesTable);\n","import React from 'react';\nimport {\n    ComplianceTabs,\n    ErrorPage,\n    LoadingPoliciesTable\n} from 'PresentationalComponents';\nimport { PageHeader, PageHeaderTitle, Main } from '@redhat-cloud-services/frontend-components';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport PoliciesTable from '../PoliciesTable/PoliciesTable';\n\nconst QUERY = gql`\n{\n    profiles {\n        edges {\n            node {\n                id\n                name\n                refId\n                complianceThreshold\n                totalHostCount\n                majorOsVersion\n                businessObjective {\n                    id\n                    title\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const CompliancePolicies = () => {\n    const { data, error, loading, refetch } = useQuery(QUERY, { fetchPolicy: 'network-only' });\n\n    if (error) { return <ErrorPage error={error}/>; }\n\n    const beta = window.location.pathname.split('/')[1] === 'beta';\n\n    return (\n        <React.Fragment>\n            <PageHeader style={{ paddingBottom: '22px' }} className={ beta ? 'beta-page-header' : 'stable-page-header' } >\n                <PageHeaderTitle title=\"Compliance policies\" />\n                { !loading && !beta && <ComplianceTabs/> }\n            </PageHeader>\n            <Main>\n                { loading ?\n                    <LoadingPoliciesTable /> :\n                    <PoliciesTable onWizardFinish={() => refetch()} policies={data.profiles.edges.map(profile => profile.node)} />\n                }\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default routerParams(CompliancePolicies);\n"],"sourceRoot":""}