{"version":3,"sources":["webpack:///./src/Utilities/graphql/mutations.js","webpack:///./node_modules/@babel/runtime/helpers/slicedToArray.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableRest.js","webpack:///./node_modules/redux-form/es/createFormValueSelector.js","webpack:///./node_modules/redux-form/es/formValueSelector.js","webpack:///./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyRules.js","webpack:///./node_modules/redux-form/es/propTypes.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack:///./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack:///./src/SmartComponents/CreatePolicy/validate.js","webpack:///./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack:///./src/SmartComponents/DeletePolicy/DeletePolicy.js","webpack:///./src/SmartComponents/PoliciesTable/PoliciesTable.js","webpack:///./src/SmartComponents/CompliancePolicies/CompliancePolicies.js"],"names":["CREATE_PROFILE","gql","ASSOCIATE_SYSTEMS_TO_PROFILES","UPDATE_PROFILE","CREATE_BUSINESS_OBJECTIVE","DELETE_PROFILE","arrayWithHoles","iterableToArrayLimit","nonIterableRest","module","exports","arr","i","Array","isArray","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","TypeError","_ref","getIn","form","getFormState","nonNullGetFormState","state","_len","arguments","fields","_key","reduce","accumulator","field","plain","setIn","BENCHMARKS_AND_PROFILES","CreateSCAPPolicy","selectedBenchmarkId","useQuery","data","error","loading","selectedBenchmark","validProfiles","profiles","benchmarkId","benchmarks","allBenchmarks","find","benchmark","id","userProfileRefIds","edges","filter","profile","node","map","refId","includes","Fragment","TextContent","Text","component","TextVariants","h1","h4","Form","FormGroup","label","isRequired","fieldId","title","version","key","Field","name","type","propTypes","string","selector","formValueSelector","compose","connect","reduxForm","destroyOnUnmount","forceUnregisterOnUnmount","QUERY","columns","transforms","sortable","ANSIBLE_ICON","original","EditPolicyRules","profileId","variables","remediationsEnabled","profileRules","rules","JSON","parse","any","bool","func","shape","oneOfType","object","number","formPropTypes","anyTouched","asyncValidating","dirty","invalid","initialized","initialValues","pristine","pure","submitting","submitAsSideEffect","submitFailed","submitSucceeded","valid","warning","array","insert","move","pop","remove","removeAll","shift","splice","swap","unshift","asyncValidate","autofill","blur","change","clearAsyncError","clearFields","clearSubmitErrors","destroy","dispatch","handleSubmit","initialize","reset","resetSection","touch","submit","untouch","triggerSubmit","clearSubmit","fieldInputPropTypes","checked","onBlur","onChange","onDragStart","onDrop","onFocus","fieldMetaPropTypes","active","autofilled","touched","visited","fieldArrayMetaPropTypes","fieldArrayFieldsPropTypes","forEach","get","getAll","EditPolicySystems","selectedSystemIds","SystemsTable","composed","props","width","compact","reduxFormPropTypes","defaultProps","entities","rows","entity","selected","EditPolicyDetails","ReduxFormTextInput","isDisabled","aria-describedby","ReduxFormTextArea","ProfileThresholdField","previousThreshold","complianceThreshold","description","REVIEW","ReviewCreatedPolicy","systemsCount","TextList","TextListVariants","dl","TextListItem","TextListItemVariants","dt","dd","FinishedCreatePolicy","percent","message","createProfile","cloneFromProfileId","client","mutate","mutation","input","associateSystems","systemIds","onWizardFinish","then","setState","prevState","this","result","catch","networkError","Bullseye","EmptyState","variant","EmptyStateVariant","full","EmptyStateIcon","size","icon","CogsIcon","Title","EmptyStateBody","Progress","measureLocation","ProgressMeasureLocation","outside","EmptyStateSecondaryActions","Button","onClick","onClose","React","Component","parseFloat","withApollo","validateFirstPage","validateSecondPage","CreatePolicy","isOpen","stepIdReached","toggleOpen","onNext","steps","enableNext","canJumpTo","nextButtonText","isFinishedStep","Wizard","isFullWidth","isFullHeight","DeletePolicy","isModalOpen","policy","toggle","onDelete","useMutation","onCompleted","dispatchAction","addNotification","onError","deletePolicy","Modal","isSmall","actions","emptyRows","cells","headingLevel","colSpan","PoliciesTable","componentDidMount","setInitialCurrentRows","componentDidUpdate","prevProps","policies","itemsPerPage","policyRows","policiesToRows","currentRows","slice","allRows","totalHostCount","businessObjective","page","firstIndex","lastIndex","setPage","_event","changePage","setPerPage","handleSearch","debounce","search","filteredRows","row","match","actionResolver","rowData","history","event","rowId","paths","compliancePolicies","prev","policyToDelete","isDeleteModalOpen","Level","gutter","LevelItem","InputGroup","buttonTitle","onFilterChange","placeholder","Pagination","itemCount","dropDirection","onSetPage","onPerPageSelect","perPage","Table","aria-label","className","isFooter","PaginationVariant","bottom","routerParams","CompliancePolicies","fetchPolicy","refetch","beta","window","location","pathname","split"],"mappings":"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","file":"js/CompliancePolicies.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport const CREATE_PROFILE = gql`\nmutation CreateProfile($input: createProfileInput!) {\n    createProfile(input: $input) {\n        profile {\n            id\n        }\n    }\n}\n`;\n\nexport const ASSOCIATE_SYSTEMS_TO_PROFILES = gql`\nmutation associateSystems($input: associateSystemsInput!) {\n    associateSystems(input: $input) {\n        profile {\n            id\n        }\n    }\n}\n`;\n\nexport const UPDATE_PROFILE = gql`\nmutation UpdateProfile($input: UpdateProfileInput!) {\n    updateProfile(input: $input) {\n        profile {\n            id,\n            complianceThreshold,\n            businessObjectiveId\n        }\n    }\n}\n`;\n\nexport const CREATE_BUSINESS_OBJECTIVE = gql`\nmutation createBusinessObjective($input: createBusinessObjectiveInput!) {\n    createBusinessObjective(input: $input) {\n        businessObjective {\n            id\n            title\n        }\n    }\n}\n`;\n\nexport const DELETE_PROFILE = gql`\nmutation DeleteProfile($input: deleteProfileInput!) {\n    deleteProfile(input: $input) {\n        profile {\n            id\n        }\n    }\n}\n`;\n","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nmodule.exports = _nonIterableRest;","import invariant from 'invariant';\nimport plain from './structure/plain';\n\nvar createFormValueSelector = function createFormValueSelector(_ref) {\n  var getIn = _ref.getIn;\n  return function (form, getFormState) {\n    invariant(form, 'Form value must be specified');\n\n    var nonNullGetFormState = getFormState || function (state) {\n      return getIn(state, 'form');\n    };\n\n    return function (state) {\n      for (var _len = arguments.length, fields = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        fields[_key - 1] = arguments[_key];\n      }\n\n      invariant(fields.length, 'No fields specified');\n      return fields.length === 1 ? // only selecting one field, so return its value\n      getIn(nonNullGetFormState(state), form + \".values.\" + fields[0]) : // selecting many fields, so return an object of field values\n      fields.reduce(function (accumulator, field) {\n        var value = getIn(nonNullGetFormState(state), form + \".values.\" + field);\n        return value === undefined ? accumulator : plain.setIn(accumulator, field, value);\n      }, {});\n    };\n  };\n};\n\nexport default createFormValueSelector;","import createFormValueSelector from './createFormValueSelector';\nimport plain from './structure/plain';\nexport default createFormValueSelector(plain);","import React from 'react';\nimport {\n    Form,\n    FormGroup,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport { ProfileTypeSelect } from 'PresentationalComponents';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\nimport { formValueSelector, Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\n\nconst BENCHMARKS_AND_PROFILES = gql`\nquery benchmarksAndProfiles {\n    allBenchmarks {\n        id\n        title\n        version\n        profiles {\n            id\n            name\n            refId\n            description\n            complianceThreshold\n        }\n    }\n    profiles {\n        edges {\n            node {\n                id\n                refId\n                benchmarkId\n            }\n        }\n    }\n}\n`;\n\nconst CreateSCAPPolicy = ({ selectedBenchmarkId }) => {\n    const { data, error, loading } = useQuery(BENCHMARKS_AND_PROFILES);\n\n    const userProfileRefIdsForBenchmarkId = (profiles, benchmarkId) => (\n        profiles.filter(profile => benchmarkId === profile.node.benchmarkId).map(profile => profile.node.refId)\n    );\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const benchmarks = data.allBenchmarks;\n    let selectedBenchmark;\n    let validProfiles;\n    if (selectedBenchmarkId) {\n        selectedBenchmark = benchmarks.find(benchmark => benchmark.id === selectedBenchmarkId);\n        const userProfileRefIds = userProfileRefIdsForBenchmarkId(data.profiles.edges, selectedBenchmarkId);\n        validProfiles = selectedBenchmark.profiles.filter((profile) => !userProfileRefIds.includes(profile.refId));\n    }\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Create SCAP policy\n                </Text>\n                <Text component={TextVariants.h4}>\n                    Select the security guide and profile type for this policy.\n                </Text>\n            </TextContent>\n            <Form>\n                <FormGroup\n                    label=\"Security guide\"\n                    isRequired\n                    fieldId=\"benchmark\">\n                    { benchmarks && benchmarks.map((benchmark) => {\n                        const { title, version, id } = benchmark;\n                        return (\n                            <Text key={id}>\n                                <Field component='input'\n                                    name='benchmark'\n                                    type='radio'\n                                    value={id}\n                                    id={id}\n                                />\n                                {` ${title} - ${version}`}\n                            </Text>\n                        );\n                    })}\n                </FormGroup>\n                <FormGroup label=\"Profile type\" isRequired fieldId=\"profile-type\">\n                    <ProfileTypeSelect profiles={selectedBenchmark && validProfiles } />\n                </FormGroup>\n            </Form>\n        </React.Fragment>\n    );\n};\n\nCreateSCAPPolicy.propTypes = {\n    selectedBenchmarkId: propTypes.string\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            selectedBenchmarkId: selector(state, 'benchmark')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(CreateSCAPPolicy);\n","import React from 'react';\nimport { formValueSelector, reduxForm } from 'redux-form';\nimport { SystemRulesTable, ANSIBLE_ICON } from '@redhat-cloud-services/frontend-components-inventory-compliance';\nimport { EmptyTable, Spinner } from '@redhat-cloud-services/frontend-components';\nimport { sortable } from '@patternfly/react-table';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst QUERY = gql`\nquery Profile($profileId: String!){\n    profile(id: $profileId) {\n        name\n        refId\n        rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n        }\n    }\n}\n`;\n\nconst columns = [\n    { title: 'Rule', transforms: [sortable] },\n    { title: 'Severity', transforms: [sortable] },\n    { title: <React.Fragment>{ ANSIBLE_ICON } Ansible</React.Fragment>, transforms: [sortable], original: 'Ansible' }\n];\n\nconst EditPolicyRules = ({ profileId }) => {\n    const { data, error, loading } = useQuery(QUERY, { variables: { profileId } });\n\n    if (error) { return error; }\n\n    if (loading) { return <EmptyTable><Spinner/></EmptyTable>; }\n\n    return (\n        <SystemRulesTable\n            remediationsEnabled={false}\n            columns={columns}\n            loading={loading}\n            profileRules={ !loading && [{\n                profile: { refId: data.profile.refId, name: data.profile.name },\n                rules: data.profile.rules\n            }]}\n        />\n    );\n};\n\nEditPolicyRules.propTypes = {\n    profileId: propTypes.string\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            profileId: JSON.parse(selector(state, 'profile')).id\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyRules);\n","import PropTypes from 'prop-types';\nvar any = PropTypes.any,\n    bool = PropTypes.bool,\n    func = PropTypes.func,\n    shape = PropTypes.shape,\n    string = PropTypes.string,\n    oneOfType = PropTypes.oneOfType,\n    object = PropTypes.object,\n    number = PropTypes.number;\nexport var formPropTypes = {\n  // State:\n  anyTouched: bool.isRequired,\n  // true if any of the fields have been marked as touched\n  asyncValidating: oneOfType([bool, string]).isRequired,\n  // true if async validation is running, a string if a field triggered async validation\n  dirty: bool.isRequired,\n  // true if any values are different from initialValues\n  error: any,\n  // form-wide error from '_error' key in validation result\n  form: string.isRequired,\n  // the name of the form\n  invalid: bool.isRequired,\n  // true if there are any validation errors\n  initialized: bool.isRequired,\n  // true if the form has been initialized\n  initialValues: object,\n  // the initialValues object passed to reduxForm\n  pristine: bool.isRequired,\n  // true if the values are the same as initialValues\n  pure: bool.isRequired,\n  // if true, implements shouldComponentUpdate\n  submitting: bool.isRequired,\n  // true if the form is in the process of being submitted\n  submitAsSideEffect: bool.isRequired,\n  // true if onSubmit result will be dispatched\n  submitFailed: bool.isRequired,\n  // true if the form was submitted and failed for any reason\n  submitSucceeded: bool.isRequired,\n  // true if the form was successfully submitted\n  valid: bool.isRequired,\n  // true if there are no validation errors\n  warning: any,\n  // form-wide warning from '_warning' key in validation result\n  // Actions:\n  array: shape({\n    insert: func.isRequired,\n    // function to insert a value into an array field\n    move: func.isRequired,\n    // function to move a value within an array field\n    pop: func.isRequired,\n    // function to pop a value off of an array field\n    push: func.isRequired,\n    // function to push a value onto an array field\n    remove: func.isRequired,\n    // function to remove a value from an array field\n    removeAll: func.isRequired,\n    // function to remove all the values from an array field\n    shift: func.isRequired,\n    // function to shift a value out of an array field\n    splice: func.isRequired,\n    // function to splice a value into an array field\n    swap: func.isRequired,\n    // function to swap values in an array field\n    unshift: func.isRequired // function to unshift a value into an array field\n\n  }),\n  asyncValidate: func.isRequired,\n  // function to trigger async validation\n  autofill: func.isRequired,\n  // action to set a value of a field and mark it as autofilled\n  blur: func.isRequired,\n  // action to mark a field as blurred\n  change: func.isRequired,\n  // action to change the value of a field\n  clearAsyncError: func.isRequired,\n  // action to clear the async error of a field\n  clearFields: func.isRequired,\n  // action to clean fields values for all fields\n  clearSubmitErrors: func.isRequired,\n  // action to remove submitErrors and error\n  destroy: func.isRequired,\n  // action to destroy the form's data in Redux\n  dispatch: func.isRequired,\n  // the Redux dispatch action\n  handleSubmit: func.isRequired,\n  // function to submit the form\n  initialize: func.isRequired,\n  // action to initialize form data\n  reset: func.isRequired,\n  // action to reset the form data to previously initialized values\n  resetSection: func.isRequired,\n  // action to reset the form sections data to previously initialized values\n  touch: func.isRequired,\n  // action to mark fields as touched\n  submit: func.isRequired,\n  // action to trigger a submission of the specified form\n  untouch: func.isRequired,\n  // action to mark fields as untouched\n  // triggerSubmit\n  triggerSubmit: bool,\n  // if true, submits the form on componentWillReceiveProps\n  clearSubmit: func.isRequired // called before a triggered submit, by default clears triggerSubmit\n\n};\nexport var fieldInputPropTypes = {\n  checked: bool,\n  name: string.isRequired,\n  onBlur: func.isRequired,\n  onChange: func.isRequired,\n  onDragStart: func.isRequired,\n  onDrop: func.isRequired,\n  onFocus: func.isRequired,\n  value: any\n};\nexport var fieldMetaPropTypes = {\n  active: bool.isRequired,\n  asyncValidating: bool.isRequired,\n  autofilled: bool.isRequired,\n  dirty: bool.isRequired,\n  dispatch: func.isRequired,\n  error: any,\n  form: string.isRequired,\n  invalid: bool.isRequired,\n  pristine: bool.isRequired,\n  submitting: bool.isRequired,\n  submitFailed: bool.isRequired,\n  touched: bool.isRequired,\n  valid: bool.isRequired,\n  visited: bool.isRequired,\n  warning: string\n};\nexport var fieldArrayMetaPropTypes = {\n  dirty: bool.isRequired,\n  error: any,\n  form: string.isRequired,\n  invalid: bool.isRequired,\n  pristine: bool.isRequired,\n  submitFailed: bool,\n  submitting: bool,\n  valid: bool.isRequired,\n  warning: string\n};\nexport var fieldArrayFieldsPropTypes = {\n  name: string.isRequired,\n  forEach: func.isRequired,\n  get: func.isRequired,\n  getAll: func.isRequired,\n  insert: func.isRequired,\n  length: number.isRequired,\n  map: func.isRequired,\n  move: func.isRequired,\n  pop: func.isRequired,\n  push: func.isRequired,\n  reduce: func.isRequired,\n  remove: func.isRequired,\n  removeAll: func.isRequired,\n  shift: func.isRequired,\n  swap: func.isRequired,\n  unshift: func.isRequired\n};\nexport var fieldPropTypes = {\n  input: shape(fieldInputPropTypes).isRequired,\n  meta: shape(fieldMetaPropTypes).isRequired\n};\nexport var fieldArrayPropTypes = {\n  fields: shape(fieldArrayFieldsPropTypes).isRequired,\n  meta: shape(fieldArrayMetaPropTypes).isRequired\n};\nexport default formPropTypes;","import React from 'react';\nimport { propTypes as reduxFormPropTypes, reduxForm } from 'redux-form';\nimport {\n    Form,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport SystemsTable from '../SystemsTable/SystemsTable';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst EditPolicySystems = ({ change, selectedSystemIds }) => {\n    const columns = [{\n        composed: ['facts.os_release', 'display_name'],\n        key: 'display_name',\n        title: 'System name',\n        props: {\n            width: 40\n        }\n    }, {\n        key: 'facts.compliance.profiles',\n        title: 'Profiles',\n        props: {\n            width: 40\n        }\n    }];\n\n    if (selectedSystemIds) {\n        change('systems', selectedSystemIds);\n    }\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Systems\n                </Text>\n                <Text component={TextVariants.h4}>\n                    Choose systems to scan with this policy. You can add and remove systems later.\n                </Text>\n            </TextContent>\n            <Form>\n                <SystemsTable columns={columns} remediationsEnabled={false} compact={true} />\n            </Form>\n        </React.Fragment>\n    );\n};\n\nEditPolicySystems.propTypes = {\n    selectedSystemIds: propTypes.array,\n    change: reduxFormPropTypes.change\n};\n\nEditPolicySystems.defaultProps = {\n    selectedSystemIds: []\n};\n\nconst mapStateToProps = ({ entities }) => ({\n    selectedSystemIds: entities && entities.rows ?\n        entities.rows.filter(entity => entity.selected).map(entity => entity.id) :\n        []\n});\n\nexport default compose(\n    connect(mapStateToProps),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicySystems);\n","import React from 'react';\nimport { compose } from 'redux';\nimport {\n    Form,\n    FormGroup,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport ProfileThresholdField from '../ProfileThresholdField/ProfileThresholdField';\nimport { ReduxFormTextInput, ReduxFormTextArea } from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport { Field, reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\n\nconst EditPolicyDetails = ({ profile }) => {\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Policy details\n                </Text>\n            </TextContent>\n            <Form id='editpolicydetails'>\n                <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n                    <Field\n                        component={ReduxFormTextInput}\n                        type='text'\n                        isRequired={true}\n                        isDisabled\n                        id=\"name\"\n                        name=\"name\"\n                        aria-describedby=\"name\"\n                    />\n                </FormGroup>\n                <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextInput}\n                        isDisabled\n                        id=\"refId\"\n                        name=\"refId\"\n                        aria-describedby=\"refId\"\n                    />\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"description\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextArea}\n                        id=\"description\"\n                        name=\"description\"\n                        aria-describedby=\"description\"\n                    />\n                </FormGroup>\n                <ProfileThresholdField previousThreshold={profile.complianceThreshold} />\n            </Form>\n        </React.Fragment>\n    );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n    profile: propTypes.object\n};\n\nexport default compose(\n    connect(\n        state => ({\n            profile: JSON.parse(selector(state, 'profile')),\n            initialValues: {\n                name: `${JSON.parse(selector(state, 'profile')).name}`,\n                refId: `${JSON.parse(selector(state, 'profile')).refId}`,\n                description: `${JSON.parse(selector(state, 'profile')).description}`,\n                benchmark: selector(state, 'benchmark'),\n                profile: selector(state, 'profile')\n            }\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyDetails);\n\nexport { EditPolicyDetails };\n","import React from 'react';\nimport {\n    Text,\n    TextVariants,\n    TextContent,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst REVIEW = gql`\nquery review($benchmarkId: String!) {\n    benchmark(id: $benchmarkId) {\n        title,\n        version\n    }\n}\n`;\n\nconst ReviewCreatedPolicy = ({ benchmarkId, name, refId, systemsCount }) => {\n    const { data, error, loading } = useQuery(REVIEW, { variables: { benchmarkId } });\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const benchmark = data.benchmark;\n\n    return (\n        <TextContent>\n            <Text component={TextVariants.h1}>\n                Review\n            </Text>\n            <Text component={TextVariants.h4}>\n                Review your policy before finishing. SCAP security guide, profile type\n                and name cannot be changed after initial creation. Make sure they are correct!\n            </Text>\n            <hr/>\n            <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>SCAP security guide</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                    {` ${benchmark.title} - ${benchmark.version}`}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Policy type</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ name }</TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Generated ID</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ refId }</TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Number of systems</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ systemsCount }</TextListItem>\n            </TextList>\n        </TextContent>\n    );\n};\n\nReviewCreatedPolicy.propTypes = {\n    benchmarkId: propTypes.string,\n    refId: propTypes.string,\n    name: propTypes.string,\n    systemsCount: propTypes.number\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect(\n    state => ({\n        benchmarkId: selector(state, 'benchmark'),\n        refId: selector(state, 'refId'),\n        name: selector(state, 'name'),\n        systemsCount: selector(state, 'systems').length\n    })\n)(ReviewCreatedPolicy);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Title,\n    Button,\n    Bullseye,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateSecondaryActions,\n    EmptyStateVariant,\n    Progress,\n    ProgressMeasureLocation,\n    EmptyStateIcon\n} from '@patternfly/react-core';\nimport { CogsIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from 'react-apollo';\nimport { CREATE_PROFILE, ASSOCIATE_SYSTEMS_TO_PROFILES } from '../../Utilities/graphql/mutations';\n\nclass FinishedCreatePolicy extends React.Component {\n    state = {\n        percent: 0,\n        message: 'Your Compliance policy is being created. After this is created, you may assign it to hosts and customize it.'\n    };\n\n    componentDidMount() {\n        this.createProfile().then((result) => {\n            this.setState(prevState => ({\n                message: 'Your Compliance policy has been created. Associating systems to it...',\n                percent: prevState.percent + 50,\n                profileId: result.data.createProfile.profile.id\n            }), this.associateSystems);\n        }).catch((error) => {\n            this.setState({\n                message: error.networkError.message\n            });\n        });\n    }\n\n    createProfile = () => {\n        const { benchmarkId, cloneFromProfileId, refId, name, description, complianceThreshold, client } = this.props;\n        return client.mutate({\n            mutation: CREATE_PROFILE,\n            variables: {\n                input: { benchmarkId, cloneFromProfileId, refId, name, description, complianceThreshold }\n            }\n        });\n    }\n\n    associateSystems = () => {\n        const { systemIds, client, onWizardFinish } = this.props;\n        const { profileId: id } = this.state;\n        return client.mutate({\n            mutation: ASSOCIATE_SYSTEMS_TO_PROFILES,\n            variables: {\n                input: { id, systemIds }\n            }\n        }).then(() => {\n            this.setState(prevState => ({\n                percent: prevState.percent + 50,\n                message: 'Your Compliance policy has been created and systems have been associated to it.'\n            }), onWizardFinish);\n        });\n    }\n\n    render() {\n        const { percent, message } = this.state;\n        return (\n            <Bullseye>\n                <EmptyState variant={EmptyStateVariant.full}>\n                    <EmptyStateIcon size='xl' icon={CogsIcon} />\n                    <br/>\n                    <Title size='lg'>\n                        {percent === 100 ? 'Profile creation complete' : 'Profile creation in progress'}\n                    </Title>\n                    <EmptyStateBody>\n                        <Progress\n                            id={'finished-create-policy'}\n                            value={percent}\n                            measureLocation={ProgressMeasureLocation.outside}\n                        />\n                    </EmptyStateBody>\n                    <EmptyStateBody>\n                        { message }\n                    </EmptyStateBody>\n                    <EmptyStateSecondaryActions>\n                        {percent === 100 ? <Button variant={'primary'} onClick={this.props.onClose}>Close</Button> : ''}\n                    </EmptyStateSecondaryActions>\n                </EmptyState>\n            </Bullseye>\n        );\n    }\n}\n\nFinishedCreatePolicy.propTypes = {\n    benchmarkId: propTypes.string.isRequired,\n    client: propTypes.object.isRequired,\n    cloneFromProfileId: propTypes.string.isRequired,\n    onClose: propTypes.func.isRequired,\n    refId: propTypes.string.isRequired,\n    name: propTypes.string.isRequired,\n    description: propTypes.string,\n    systemIds: propTypes.array,\n    complianceThreshold: propTypes.number,\n    onWizardFinish: propTypes.func\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            benchmarkId: selector(state, 'benchmark'),\n            cloneFromProfileId: JSON.parse(selector(state, 'profile')).id,\n            refId: selector(state, 'refId'),\n            name: selector(state, 'name'),\n            description: selector(state, 'description'),\n            complianceThreshold: parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n            systemIds: selector(state, 'systems')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: true,\n        forceUnregisterOnUnmount: true\n    }),\n    withApollo\n)(FinishedCreatePolicy);\n","export const validateFirstPage = (benchmark, profile) => {\n    if (!benchmark || !profile) {\n        return false;\n    } else {\n        return true;\n    }\n};\n\nexport const validateSecondPage = (name, refId) => {\n    if (!name || !refId) {\n        return false;\n    } else {\n        return true;\n    }\n};\n","import React from 'react';\nimport { Button, Wizard } from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport EditPolicyRules from './EditPolicyRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport { connect } from 'react-redux';\nimport {\n    validateFirstPage,\n    validateSecondPage\n} from './validate';\nimport propTypes from 'prop-types';\n\nclass CreatePolicy extends React.Component {\n    state = {\n        isOpen: this.props.isOpen,\n        stepIdReached: 1\n    };\n\n    toggleOpen = () => {\n        const { isOpen } = this.state;\n        this.setState({\n            isOpen: !isOpen\n        });\n    };\n\n    onNext = ({ id }) => {\n        this.setState({\n            stepIdReached: this.state.stepIdReached < id ? id : this.state.stepIdReached\n        });\n    };\n\n    render() {\n        const { isOpen, stepIdReached } = this.state;\n        const { benchmark, profile, name, refId, onWizardFinish } = this.props;\n\n        const steps = [\n            {\n                id: 1,\n                name: 'Create SCAP policy',\n                component: <CreateSCAPPolicy/>,\n                enableNext: validateFirstPage(benchmark, profile)\n            },\n            {\n                id: 2,\n                name: 'Details',\n                component: <EditPolicyDetails/>,\n                canJumpTo: stepIdReached >= 2,\n                enableNext: validateSecondPage(name, refId)\n            },\n            {\n                id: 3,\n                name: 'Rules',\n                component: <EditPolicyRules/>,\n                canJumpTo: stepIdReached >= 3\n            },\n            {\n                id: 4,\n                name: 'Systems',\n                component: <EditPolicySystems/>,\n                canJumpTo: stepIdReached >= 4\n            },\n            {\n                id: 5,\n                name: 'Review',\n                component: <ReviewCreatedPolicy/>,\n                nextButtonText: 'Finish',\n                canJumpTo: stepIdReached >= 5\n            },\n            {\n                id: 6,\n                name: 'Finished',\n                component: <FinishedCreatePolicy onWizardFinish={onWizardFinish} onClose={this.toggleOpen}/>,\n                isFinishedStep: true,\n                canJumpTo: stepIdReached >= 6\n            }\n        ];\n\n        return (\n            <React.Fragment>\n                <Button variant=\"primary\" onClick={this.toggleOpen}>\n                    Create new policy\n                </Button>\n                {isOpen && (\n                    <Wizard\n                        isOpen={isOpen}\n                        onClose={this.toggleOpen}\n                        isFullWidth\n                        isFullHeight\n                        title=\"Create SCAP policy\"\n                        description=\"Create a new policy for managing SCAP compliance\"\n                        steps={steps}\n                        onNext={this.onNext}\n                    />\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nCreatePolicy.propTypes = {\n    benchmark: propTypes.string,\n    profile: propTypes.string,\n    name: propTypes.string,\n    refId: propTypes.string,\n    isOpen: propTypes.bool,\n    onWizardFinish: propTypes.func\n};\n\nCreatePolicy.defaultProps = {\n    isOpen: false\n};\n\nconst selector = formValueSelector('policyForm');\nexport default connect(\n    state => ({\n        benchmark: selector(state, 'benchmark'),\n        profile: selector(state, 'profile'),\n        name: selector(state, 'name'),\n        refId: selector(state, 'refId')\n    })\n)(CreatePolicy);\n","import {\n    Modal,\n    TextContent,\n    Button\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { DELETE_PROFILE } from '../../Utilities/graphql/mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { dispatchAction } from '../../Utilities/Dispatcher';\n\nconst DeletePolicy = ({ isModalOpen, policy, toggle, onDelete }) => {\n    const [deletePolicy] = useMutation(DELETE_PROFILE, {\n        onCompleted: () => {\n            dispatchAction(addNotification({\n                variant: 'success',\n                title: `Removed policy ${policy.name}`\n            }));\n            onDelete();\n            toggle();\n        },\n        onError: (error) => {\n            dispatchAction(addNotification({\n                variant: 'danger',\n                title: 'Error removing policy',\n                description: error.message\n            }));\n            onDelete();\n            toggle();\n        }\n    });\n    const { name, id } = policy;\n\n    return (\n        <Modal\n            isSmall\n            title='Delete policy'\n            isOpen={isModalOpen}\n            onClose={toggle}\n            actions={[\n                <Button key='destroy' variant='danger' onClick={() => deletePolicy({ variables: { input: { id } } })}>\n                    Delete policy\n                </Button>,\n                <Button key='cancel' variant='secondary' onClick={toggle}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <TextContent>\n                Are you sure you want to delete <b>{ name }</b>?\n            </TextContent>\n            <TextContent>\n                This cannot be undone.\n            </TextContent>\n        </Modal>\n    );\n};\n\nDeletePolicy.propTypes = {\n    policy: propTypes.object,\n    toggle: propTypes.func,\n    isModalOpen: propTypes.bool,\n    onDelete: propTypes.func\n};\n\nexport default DeletePolicy;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { EmptyTable, SimpleTableFilter, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport {\n    Bullseye,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateVariant,\n    InputGroup,\n    Level,\n    LevelItem,\n    Pagination,\n    PaginationVariant,\n    Title\n} from '@patternfly/react-core';\nimport CreatePolicy from '../CreatePolicy/CreatePolicy';\nimport DeletePolicy from '../DeletePolicy/DeletePolicy';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { paths } from '../../Routes';\nimport debounce from 'lodash/debounce';\n\nconst emptyRows = [{\n    cells: [{\n        title: (\n            <EmptyTable>\n                <Bullseye>\n                    <EmptyState variant={ EmptyStateVariant.full }>\n                        <Title headingLevel=\"h5\" size=\"lg\">\n                                No matching policies found\n                        </Title>\n                        <EmptyStateBody>\n                                This filter criteria matches no policies. <br /> Try changing your filter settings.\n                        </EmptyStateBody>\n                    </EmptyState>\n                </Bullseye>\n            </EmptyTable>\n        ),\n        props: {\n            colSpan: 5\n        }\n    }]\n}];\n\nexport class PoliciesTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [\n                { title: 'Policy name' },\n                { title: 'Policy type' },\n                { title: 'Systems' },\n                { title: 'Business objective' },\n                { title: 'Compliance threshold' }\n            ],\n            page: 1,\n            itemsPerPage: 10,\n            search: '',\n            rows: [],\n            currentRows: [],\n            isDeleteModalOpen: false,\n            policyToDelete: {}\n        };\n    }\n\n    componentDidMount = () => {\n        this.setInitialCurrentRows();\n    }\n\n    componentDidUpdate = (prevProps) => {\n        const { policies } = this.props;\n        if (policies !== prevProps.policies) {\n            this.setInitialCurrentRows();\n        }\n    }\n\n    setInitialCurrentRows = () => {\n        const { policies } = this.props;\n        const { itemsPerPage } = this.state;\n        const policyRows = this.policiesToRows(policies);\n\n        this.setState({\n            currentRows: policyRows.slice(0, itemsPerPage),\n            rows: policyRows,\n            allRows: policyRows\n        });\n    }\n\n    policiesToRows = (policies) => {\n        return policies.map((policy) => {\n            return {\n                cells: [\n                    policy.name,\n                    'External',\n                    policy.totalHostCount,\n                    policy.businessObjective && policy.businessObjective.title || '--',\n                    `${policy.complianceThreshold}%`\n                ]\n            };\n        });\n    }\n\n    currentRows = (page, itemsPerPage, policyRows) => {\n        const { rows } = (policyRows) ? policyRows : this.state;\n\n        if (!rows.length) {\n            return [];\n        }\n\n        if (rows.length < itemsPerPage) { itemsPerPage = rows.length; }\n\n        const firstIndex = (page - 1) * itemsPerPage;\n        const lastIndex = page * itemsPerPage;\n        const newRows = rows.slice(firstIndex, lastIndex);\n\n        return newRows;\n    }\n\n    setPage = (_event, page) => {\n        const { itemsPerPage } = this.state;\n        this.changePage(page, itemsPerPage);\n    }\n\n    setPerPage = (_event, itemsPerPage) => {\n        const { page } = this.state;\n        this.changePage(page, itemsPerPage);\n    }\n\n    changePage = (page, itemsPerPage) => {\n        this.setState({\n            currentRows: this.currentRows(page, itemsPerPage),\n            page,\n            itemsPerPage\n        });\n    }\n\n    handleSearch = debounce(search => {\n        const { itemsPerPage, allRows } = this.state;\n        const filteredRows = allRows.filter(row => row.cells[0].match(search));\n        this.setState({\n            search,\n            rows: filteredRows,\n            currentRows: filteredRows.slice(0, itemsPerPage)\n        });\n    }, 500)\n\n    actionResolver = (rowData) => {\n        const { history, policies } = this.props;\n\n        return [\n            {\n                title: 'View latest results',\n                onClick: (event, rowId) => history.push(`${paths.compliancePolicies}/${policies[rowId].id}`)\n            },\n            {\n                title: 'Delete policy',\n                onClick: () => {\n                    this.setState((prev) => ({\n                        policyToDelete: policies[rowData.id],\n                        isDeleteModalOpen: !prev.isDeleteModalOpen\n                    }));\n                }\n            }\n        ];\n    }\n\n    render() {\n        const { onWizardFinish } = this.props;\n        const { rows, currentRows, columns, page, itemsPerPage, policyToDelete, isDeleteModalOpen } = this.state;\n        return (\n            <React.Fragment>\n                <DeletePolicy\n                    isModalOpen={isDeleteModalOpen}\n                    policy={policyToDelete}\n                    onDelete={onWizardFinish}\n                    toggle={() => this.setState((prev) => ({ isDeleteModalOpen: !prev.isDeleteModalOpen }))}\n                />\n                <TableToolbar>\n                    <Level gutter='md'>\n                        <LevelItem>\n                            <InputGroup>\n                                <SimpleTableFilter buttonTitle={ null }\n                                    onFilterChange={ this.handleSearch }\n                                    placeholder=\"Search\" />\n                            </InputGroup>\n                        </LevelItem>\n                        <LevelItem>\n                            { rows.length } results\n                        </LevelItem>\n                        <LevelItem>\n                            <CreatePolicy onWizardFinish={onWizardFinish} />\n                        </LevelItem>\n                    </Level>\n                    <Pagination\n                        page={ page }\n                        itemCount={ rows.length }\n                        dropDirection='down'\n                        onSetPage={ this.setPage }\n                        onPerPageSelect={ this.setPerPage }\n                        perPage={ itemsPerPage }\n                    />\n                </TableToolbar>\n                <Table\n                    aria-label='policies'\n                    className='compliance-policies-table'\n                    cells={ columns }\n                    actionResolver={this.actionResolver}\n                    rows={ (currentRows.length === 0) ? emptyRows : currentRows }>\n                    <TableHeader />\n                    <TableBody />\n                </Table>\n                <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n                    <Pagination\n                        page={ page }\n                        itemCount={ rows.length }\n                        dropDirection='up'\n                        onSetPage={ this.setPage }\n                        onPerPageSelect={ this.setPerPage }\n                        perPage={ itemsPerPage }\n                        variant={ PaginationVariant.bottom }\n                    />\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nPoliciesTable.propTypes = {\n    policies: propTypes.array.isRequired,\n    history: propTypes.object,\n    onWizardFinish: propTypes.func\n};\n\nPoliciesTable.defaultProps = {\n    policies: []\n};\n\nexport default routerParams(PoliciesTable);\n","import React from 'react';\nimport {\n    ComplianceTabs,\n    ErrorPage,\n    LoadingPoliciesTable\n} from 'PresentationalComponents';\nimport { PageHeader, PageHeaderTitle, Main } from '@redhat-cloud-services/frontend-components';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport PoliciesTable from '../PoliciesTable/PoliciesTable';\n\nconst QUERY = gql`\n{\n    profiles {\n        edges {\n            node {\n                id\n                name\n                refId\n                complianceThreshold\n                totalHostCount\n                businessObjective {\n                    id\n                    title\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const CompliancePolicies = () => {\n    const { data, error, loading, refetch } = useQuery(QUERY, { fetchPolicy: 'network-only' });\n\n    if (error) { return <ErrorPage error={error}/>; }\n\n    const beta = window.location.pathname.split('/')[1] === 'beta';\n\n    return (\n        <React.Fragment>\n            <PageHeader className={ beta ? 'beta-page-header' : 'stable-page-header' } >\n                <PageHeaderTitle title=\"Compliance policies\" />\n                { !loading && !beta && <ComplianceTabs/> }\n            </PageHeader>\n            <Main>\n                { loading ?\n                    <LoadingPoliciesTable /> :\n                    <PoliciesTable onWizardFinish={() => refetch()} policies={data.profiles.edges.map(profile => profile.node)} />\n                }\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default routerParams(CompliancePolicies);\n"],"sourceRoot":""}