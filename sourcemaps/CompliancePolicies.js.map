{"version":3,"sources":["webpack:///./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyRules.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack:///./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack:///./src/SmartComponents/CreatePolicy/validate.js","webpack:///./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack:///./src/SmartComponents/DeletePolicy/DeletePolicy.js","webpack:///./src/SmartComponents/PoliciesTable/PoliciesTable.js","webpack:///./src/SmartComponents/CompliancePolicies/CompliancePolicies.js","webpack:///./node_modules/redux-form/es/propTypes.js"],"names":["BENCHMARKS_AND_PROFILES","gql","CreateSCAPPolicy","selectedBenchmarkId","useQuery","data","error","loading","selectedBenchmark","validProfiles","profiles","benchmarkId","benchmarks","latestBenchmarks","find","benchmark","id","userProfileRefIds","edges","filter","profile","node","map","refId","includes","Fragment","TextContent","Text","component","TextVariants","h1","h4","Form","FormGroup","label","isRequired","fieldId","title","version","key","Field","name","type","value","propTypes","string","selector","formValueSelector","compose","connect","state","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","QUERY","columns","transforms","sortable","ANSIBLE_ICON","original","EditPolicyRules","selected","profileId","dispatch","change","variables","useEffect","rules","rule","remediationsEnabled","tailoringEnabled","selectedFilter","handleSelect","selectedRuleRefIds","meta","field","payload","profileRules","selectedRefIds","func","reduxFormPropTypes","JSON","parse","EditPolicySystems","selectedSystemIds","SystemsTable","composed","props","width","compact","showActions","showAllSystems","enableExport","array","defaultProps","entities","rows","entity","EditPolicyDetails","ReduxFormTextInput","isDisabled","aria-describedby","ReduxFormTextArea","ProfileThresholdField","previousThreshold","complianceThreshold","object","initialValues","description","REVIEW","ReviewCreatedPolicy","systemsCount","TextList","TextListVariants","dl","TextListItem","TextListItemVariants","dt","dd","number","length","FinishedCreatePolicy","percent","message","createProfile","cloneFromProfileId","client","mutate","mutation","CREATE_PROFILE","input","associateSystems","systemIds","onWizardFinish","ASSOCIATE_SYSTEMS_TO_PROFILES","then","setState","prevState","this","result","catch","networkError","Bullseye","EmptyState","variant","EmptyStateVariant","full","EmptyStateIcon","size","icon","CogsIcon","Title","EmptyStateBody","Progress","measureLocation","ProgressMeasureLocation","outside","EmptyStateSecondaryActions","Button","onClick","onClose","React","Component","arrayOf","parseFloat","withApollo","validateFirstPage","validateSecondPage","validateThirdPage","CreatePolicy","isOpen","stepIdReached","toggleOpen","onNext","steps","enableNext","canJumpTo","nextButtonText","isFinishedStep","Wizard","isFullWidth","isFullHeight","isFooterLeftAligned","bool","DeletePolicy","isModalOpen","policy","toggle","onDelete","useMutation","DELETE_PROFILE","onCompleted","dispatchAction","addNotification","onError","deletePolicy","Modal","isSmall","actions","aria-label","emptyRows","cells","headingLevel","colSpan","policiesToRows","policies","to","majorOsVersion","totalHostCount","businessObjective","PoliciesTable","page","itemsPerPage","search","currentRows","isDeleteModalOpen","policyToDelete","componentDidMount","setInitialCurrentRows","componentDidUpdate","prevProps","policyRows","slice","allRows","firstIndex","lastIndex","setPage","_event","changePage","setPerPage","handleSearch","debounce","filteredRows","row","match","actionResolver","rowData","history","currentRowIndex","push","paths","compliancePolicies","prev","Level","gutter","LevelItem","InputGroup","buttonTitle","onFilterChange","placeholder","Pagination","itemCount","dropDirection","onSetPage","onPerPageSelect","perPage","Table","className","isFooter","PaginationVariant","bottom","routerParams","CompliancePolicies","fetchPolicy","refetch","beta","window","location","pathname","split","style","paddingBottom","any","shape","oneOfType","formPropTypes","anyTouched","asyncValidating","dirty","invalid","initialized","pristine","pure","submitting","submitAsSideEffect","submitFailed","submitSucceeded","valid","warning","insert","move","pop","remove","removeAll","shift","splice","swap","unshift","asyncValidate","autofill","blur","clearAsyncError","clearFields","clearSubmitErrors","destroy","handleSubmit","initialize","reset","resetSection","touch","submit","untouch","triggerSubmit","clearSubmit","fieldInputPropTypes","checked","onBlur","onChange","onDragStart","onDrop","onFocus","fieldMetaPropTypes","active","autofilled","touched","visited","fieldArrayMetaPropTypes","fieldArrayFieldsPropTypes","forEach","get","getAll","reduce"],"mappings":"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","file":"js/CompliancePolicies.js","sourcesContent":["import React from 'react';\nimport {\n    Form,\n    FormGroup,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport { ProfileTypeSelect } from 'PresentationalComponents';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\nimport { formValueSelector, Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\n\nconst BENCHMARKS_AND_PROFILES = gql`\nquery benchmarksAndProfiles {\n    latestBenchmarks {\n        id\n        title\n        version\n        profiles {\n            id\n            name\n            refId\n            description\n            complianceThreshold\n        }\n    }\n    profiles {\n        edges {\n            node {\n                id\n                refId\n                benchmarkId\n            }\n        }\n    }\n}\n`;\n\nconst CreateSCAPPolicy = ({ selectedBenchmarkId }) => {\n    const { data, error, loading } = useQuery(BENCHMARKS_AND_PROFILES);\n\n    const userProfileRefIdsForBenchmarkId = (profiles, benchmarkId) => (\n        profiles.filter(profile => benchmarkId === profile.node.benchmarkId).map(profile => profile.node.refId)\n    );\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const benchmarks = data.latestBenchmarks;\n    let selectedBenchmark;\n    let validProfiles;\n    if (selectedBenchmarkId) {\n        selectedBenchmark = benchmarks.find(benchmark => benchmark.id === selectedBenchmarkId);\n        const userProfileRefIds = userProfileRefIdsForBenchmarkId(data.profiles.edges, selectedBenchmarkId);\n        validProfiles = selectedBenchmark.profiles.filter((profile) => !userProfileRefIds.includes(profile.refId));\n    }\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Create SCAP policy\n                </Text>\n                <Text component={TextVariants.h4}>\n                    Select the security guide and policy type\n                </Text>\n            </TextContent>\n            <Form>\n                <FormGroup\n                    label=\"Security guide\"\n                    isRequired\n                    fieldId=\"benchmark\">\n                    { benchmarks && benchmarks.map((benchmark) => {\n                        const { title, version, id } = benchmark;\n                        return (\n                            <Text key={id}>\n                                <Field component='input'\n                                    name='benchmark'\n                                    type='radio'\n                                    value={id}\n                                    id={id}\n                                />\n                                {` ${title} - ${version}`}\n                            </Text>\n                        );\n                    })}\n                </FormGroup>\n                <FormGroup label=\"Policy type\" isRequired fieldId=\"policy-type\">\n                    <ProfileTypeSelect profiles={selectedBenchmark && validProfiles } />\n                </FormGroup>\n            </Form>\n        </React.Fragment>\n    );\n};\n\nCreateSCAPPolicy.propTypes = {\n    selectedBenchmarkId: propTypes.string\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            selectedBenchmarkId: selector(state, 'benchmark')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(CreateSCAPPolicy);\n","import React, { useEffect } from 'react';\nimport { propTypes as reduxFormPropTypes, formValueSelector, reduxForm } from 'redux-form';\nimport { SystemRulesTable, ANSIBLE_ICON } from '@redhat-cloud-services/frontend-components-inventory-compliance';\nimport { EmptyTable, Spinner } from '@redhat-cloud-services/frontend-components';\nimport { sortable } from '@patternfly/react-table';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst QUERY = gql`\nquery benchmarkAndProfile($benchmarkId: String!, $profileId: String!){\n    benchmark(id: $benchmarkId) {\n        rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n        }\n    }\n    profile(id: $profileId) {\n        name\n        refId\n        rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n        }\n    }\n}\n`;\n\nconst columns = [\n    { title: 'Rule', transforms: [sortable] },\n    { title: 'Severity', transforms: [sortable] },\n    { title: <React.Fragment>{ ANSIBLE_ICON } Ansible</React.Fragment>, transforms: [sortable], original: 'Ansible' }\n];\n\nexport const EditPolicyRules = ({ profileId, benchmarkId, dispatch, change }) => {\n    const { data, error, loading } = useQuery(QUERY, { variables: { profileId, benchmarkId } });\n\n    let selected;\n\n    useEffect(() => {\n        change('selectedRuleRefIds', selected);\n    }, [data]);\n\n    if (error) { return error; }\n\n    if (loading) { return <EmptyTable><Spinner/></EmptyTable>; }\n\n    selected = data.profile.rules.map((rule) => rule.refId);\n\n    return (\n        <SystemRulesTable\n            remediationsEnabled={false}\n            tailoringEnabled\n            selectedFilter\n            columns={columns}\n            loading={loading}\n            handleSelect={((selectedRuleRefIds) => {\n                dispatch({\n                    type: '@@redux-form/CHANGE',\n                    meta: {\n                        field: 'selectedRuleRefIds',\n                        form: 'policyForm'\n                    },\n                    payload: selectedRuleRefIds\n                });\n            })}\n            profileRules={ !loading && [{\n                profile: { refId: data.profile.refId, name: data.profile.name },\n                rules: data.benchmark.rules\n            }]}\n            selectedRefIds={selected}\n        />\n    );\n};\n\nEditPolicyRules.propTypes = {\n    profileId: propTypes.string,\n    benchmarkId: propTypes.string,\n    dispatch: propTypes.func,\n    change: reduxFormPropTypes.change\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            benchmarkId: selector(state, 'benchmark'),\n            profileId: JSON.parse(selector(state, 'profile')).id\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyRules);\n","import React, { useEffect } from 'react';\nimport { propTypes as reduxFormPropTypes, reduxForm } from 'redux-form';\nimport {\n    Form,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport { SystemsTableWithApollo as SystemsTable } from '../SystemsTable/SystemsTable';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst EditPolicySystems = ({ change, selectedSystemIds }) => {\n    const columns = [{\n        composed: ['facts.os_release', 'display_name'],\n        key: 'facts.compliance.display_name',\n        title: 'System name',\n        props: {\n            width: 40\n        }\n    }, {\n        key: 'facts.compliance.profiles',\n        title: 'Policies',\n        props: {\n            width: 40\n        }\n    }];\n\n    useEffect(() => {\n        if (selectedSystemIds) {\n            change('systems', selectedSystemIds);\n        }\n    }, [selectedSystemIds]);\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Systems\n                </Text>\n                <Text component={TextVariants.h4}>\n                    Choose systems to scan with this policy. You can add and remove systems later.\n                </Text>\n            </TextContent>\n            <Form>\n                <SystemsTable\n                    columns={columns}\n                    remediationsEnabled={false}\n                    compact\n                    showActions={ false }\n                    showAllSystems\n                    enableExport={ false }/>\n            </Form>\n        </React.Fragment>\n    );\n};\n\nEditPolicySystems.propTypes = {\n    selectedSystemIds: propTypes.array,\n    change: reduxFormPropTypes.change\n};\n\nEditPolicySystems.defaultProps = {\n    selectedSystemIds: []\n};\n\nconst mapStateToProps = ({ entities }) => ({\n    selectedSystemIds: entities && entities.rows ?\n        entities.rows.filter(entity => entity.selected).map(entity => entity.id) :\n        []\n});\n\nexport default compose(\n    connect(mapStateToProps),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicySystems);\n","import React from 'react';\nimport { compose } from 'redux';\nimport {\n    Form,\n    FormGroup,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport ProfileThresholdField from '../ProfileThresholdField/ProfileThresholdField';\nimport { ReduxFormTextInput, ReduxFormTextArea } from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport { Field, reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\n\nconst EditPolicyDetails = ({ profile }) => {\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Policy details\n                </Text>\n            </TextContent>\n            <Form id='editpolicydetails'>\n                <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n                    <Field\n                        component={ReduxFormTextInput}\n                        type='text'\n                        isRequired={true}\n                        isDisabled\n                        id=\"name\"\n                        name=\"name\"\n                        aria-describedby=\"name\"\n                    />\n                </FormGroup>\n                <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextInput}\n                        isDisabled\n                        id=\"refId\"\n                        name=\"refId\"\n                        aria-describedby=\"refId\"\n                    />\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"description\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextArea}\n                        id=\"description\"\n                        name=\"description\"\n                        aria-describedby=\"description\"\n                    />\n                </FormGroup>\n                <ProfileThresholdField previousThreshold={profile.complianceThreshold} />\n            </Form>\n        </React.Fragment>\n    );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n    profile: propTypes.object\n};\n\nexport default compose(\n    connect(\n        state => ({\n            profile: JSON.parse(selector(state, 'profile')),\n            initialValues: {\n                name: `${JSON.parse(selector(state, 'profile')).name}`,\n                refId: `${JSON.parse(selector(state, 'profile')).refId}`,\n                description: `${JSON.parse(selector(state, 'profile')).description}`,\n                benchmark: selector(state, 'benchmark'),\n                profile: selector(state, 'profile')\n            }\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyDetails);\n\nexport { EditPolicyDetails };\n","import React from 'react';\nimport {\n    Text,\n    TextVariants,\n    TextContent,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst REVIEW = gql`\nquery review($benchmarkId: String!) {\n    benchmark(id: $benchmarkId) {\n        title,\n        version\n    }\n}\n`;\n\nconst ReviewCreatedPolicy = ({ benchmarkId, name, refId, systemsCount }) => {\n    const { data, error, loading } = useQuery(REVIEW, { variables: { benchmarkId } });\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const benchmark = data.benchmark;\n\n    return (\n        <TextContent>\n            <Text component={TextVariants.h1}>\n                Review\n            </Text>\n            <Text component={TextVariants.h4}>\n                Review your policy before finishing. SCAP security guide, policy type\n                and name cannot be changed after initial creation. Make sure they are correct!\n            </Text>\n            <hr/>\n            <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>SCAP security guide</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                    {` ${benchmark.title} - ${benchmark.version}`}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Policy type</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ name }</TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Generated ID</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ refId }</TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Number of systems</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ systemsCount }</TextListItem>\n            </TextList>\n        </TextContent>\n    );\n};\n\nReviewCreatedPolicy.propTypes = {\n    benchmarkId: propTypes.string,\n    refId: propTypes.string,\n    name: propTypes.string,\n    systemsCount: propTypes.number\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect(\n    state => ({\n        benchmarkId: selector(state, 'benchmark'),\n        refId: selector(state, 'refId'),\n        name: selector(state, 'name'),\n        systemsCount: selector(state, 'systems').length\n    })\n)(ReviewCreatedPolicy);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Title,\n    Button,\n    Bullseye,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateSecondaryActions,\n    EmptyStateVariant,\n    Progress,\n    ProgressMeasureLocation,\n    EmptyStateIcon\n} from '@patternfly/react-core';\nimport { CogsIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from '@apollo/react-hoc';\nimport { CREATE_PROFILE, ASSOCIATE_SYSTEMS_TO_PROFILES } from '../../Utilities/graphql/mutations';\n\nclass FinishedCreatePolicy extends React.Component {\n    state = {\n        percent: 0,\n        message: 'Your Compliance policy is being created. After this is created, you may assign it to hosts and customize it.'\n    };\n\n    componentDidMount() {\n        this.createProfile().then((result) => {\n            this.setState(prevState => ({\n                message: 'Your Compliance policy has been created. Associating systems to it...',\n                percent: prevState.percent + 50,\n                profileId: result.data.createProfile.profile.id\n            }), this.associateSystems);\n        }).catch((error) => {\n            this.setState({\n                message: error.networkError.message\n            });\n        });\n    }\n\n    createProfile = () => {\n        const { benchmarkId, cloneFromProfileId, refId, name, description,\n            complianceThreshold, selectedRuleRefIds, client } = this.props;\n        return client.mutate({\n            mutation: CREATE_PROFILE,\n            variables: {\n                input: { benchmarkId, cloneFromProfileId, refId, name, description, complianceThreshold, selectedRuleRefIds }\n            }\n        });\n    }\n\n    associateSystems = () => {\n        const { systemIds, client, onWizardFinish } = this.props;\n        const { profileId: id } = this.state;\n        return client.mutate({\n            mutation: ASSOCIATE_SYSTEMS_TO_PROFILES,\n            variables: {\n                input: { id, systemIds }\n            }\n        }).then(() => {\n            this.setState(prevState => ({\n                percent: prevState.percent + 50,\n                message: 'Your Compliance policy has been created and systems have been associated to it.'\n            }), onWizardFinish);\n        });\n    }\n\n    render() {\n        const { percent, message } = this.state;\n        return (\n            <Bullseye>\n                <EmptyState variant={EmptyStateVariant.full}>\n                    <EmptyStateIcon size='xl' icon={CogsIcon} />\n                    <br/>\n                    <Title size='lg'>\n                        {percent === 100 ? 'Policy creation complete' : 'Policy creation in progress'}\n                    </Title>\n                    <EmptyStateBody>\n                        <Progress\n                            id={'finished-create-policy'}\n                            value={percent}\n                            measureLocation={ProgressMeasureLocation.outside}\n                        />\n                    </EmptyStateBody>\n                    <EmptyStateBody>\n                        { message }\n                    </EmptyStateBody>\n                    <EmptyStateSecondaryActions>\n                        {percent === 100 ? <Button variant={'primary'} onClick={this.props.onClose}>Close</Button> : ''}\n                    </EmptyStateSecondaryActions>\n                </EmptyState>\n            </Bullseye>\n        );\n    }\n}\n\nFinishedCreatePolicy.propTypes = {\n    benchmarkId: propTypes.string.isRequired,\n    client: propTypes.object.isRequired,\n    cloneFromProfileId: propTypes.string.isRequired,\n    onClose: propTypes.func.isRequired,\n    refId: propTypes.string.isRequired,\n    name: propTypes.string.isRequired,\n    description: propTypes.string,\n    systemIds: propTypes.array,\n    complianceThreshold: propTypes.number,\n    onWizardFinish: propTypes.func,\n    selectedRuleRefIds: propTypes.arrayOf(propTypes.string).isRequired\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            benchmarkId: selector(state, 'benchmark'),\n            cloneFromProfileId: JSON.parse(selector(state, 'profile')).id,\n            refId: selector(state, 'refId'),\n            name: selector(state, 'name'),\n            description: selector(state, 'description'),\n            complianceThreshold: parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n            systemIds: selector(state, 'systems'),\n            selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: true,\n        forceUnregisterOnUnmount: true\n    }),\n    withApollo\n)(FinishedCreatePolicy);\n","export const validateFirstPage = (benchmark, profile) => {\n    if (!benchmark || !profile) {\n        return false;\n    } else {\n        return true;\n    }\n};\n\nexport const validateSecondPage = (name, refId) => {\n    if (!name || !refId) {\n        return false;\n    } else {\n        return true;\n    }\n};\n\nexport const validateThirdPage = (selectedRuleRefIds) => {\n    if (!selectedRuleRefIds) {\n        return false;\n    } else {\n        return true;\n    }\n};\n","import React from 'react';\nimport { Button, Wizard } from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport EditPolicyRules from './EditPolicyRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport { connect } from 'react-redux';\nimport {\n    validateFirstPage,\n    validateSecondPage,\n    validateThirdPage\n} from './validate';\nimport propTypes from 'prop-types';\n\nclass CreatePolicy extends React.Component {\n    state = {\n        isOpen: this.props.isOpen,\n        stepIdReached: 1\n    };\n\n    toggleOpen = () => {\n        const { isOpen } = this.state;\n        this.setState({\n            isOpen: !isOpen\n        });\n    };\n\n    onNext = ({ id }) => {\n        this.setState({\n            stepIdReached: this.state.stepIdReached < id ? id : this.state.stepIdReached\n        });\n    };\n\n    render() {\n        const { isOpen, stepIdReached } = this.state;\n        const { benchmark, profile, name, refId, selectedRuleRefIds, onWizardFinish } = this.props;\n\n        const steps = [\n            {\n                id: 1,\n                name: 'Create SCAP policy',\n                component: <CreateSCAPPolicy/>,\n                enableNext: validateFirstPage(benchmark, profile)\n            },\n            {\n                id: 2,\n                name: 'Details',\n                component: <EditPolicyDetails/>,\n                canJumpTo: stepIdReached >= 2,\n                enableNext: validateSecondPage(name, refId)\n            },\n            {\n                id: 3,\n                name: 'Rules',\n                component: <EditPolicyRules/>,\n                canJumpTo: stepIdReached >= 3,\n                enableNext: validateThirdPage(selectedRuleRefIds)\n            },\n            {\n                id: 4,\n                name: 'Systems',\n                component: <EditPolicySystems/>,\n                canJumpTo: stepIdReached >= 4\n            },\n            {\n                id: 5,\n                name: 'Review',\n                component: <ReviewCreatedPolicy/>,\n                nextButtonText: 'Finish',\n                canJumpTo: stepIdReached >= 5\n            },\n            {\n                id: 6,\n                name: 'Finished',\n                component: <FinishedCreatePolicy onWizardFinish={onWizardFinish} onClose={this.toggleOpen}/>,\n                isFinishedStep: true,\n                canJumpTo: stepIdReached >= 6\n            }\n        ];\n\n        return (\n            <React.Fragment>\n                <Button variant=\"primary\" onClick={this.toggleOpen}>\n                    Create new policy\n                </Button>\n                {isOpen && (\n                    <Wizard\n                        isOpen={isOpen}\n                        onClose={this.toggleOpen}\n                        isFullWidth\n                        isFullHeight\n                        isFooterLeftAligned\n                        title=\"Create SCAP policy\"\n                        description=\"Create a new policy for managing SCAP compliance\"\n                        steps={steps}\n                        onNext={this.onNext}\n                    />\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nCreatePolicy.propTypes = {\n    benchmark: propTypes.string,\n    profile: propTypes.string,\n    name: propTypes.string,\n    refId: propTypes.string,\n    selectedRuleRefIds: propTypes.arrayOf(propTypes.string).isRequired,\n    isOpen: propTypes.bool,\n    onWizardFinish: propTypes.func\n};\n\nCreatePolicy.defaultProps = {\n    isOpen: false\n};\n\nconst selector = formValueSelector('policyForm');\nexport default connect(\n    state => ({\n        benchmark: selector(state, 'benchmark'),\n        profile: selector(state, 'profile'),\n        name: selector(state, 'name'),\n        refId: selector(state, 'refId'),\n        selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n    })\n)(CreatePolicy);\n","import {\n    Modal,\n    TextContent,\n    Button\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { DELETE_PROFILE } from '../../Utilities/graphql/mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { dispatchAction } from '../../Utilities/Dispatcher';\n\nconst DeletePolicy = ({ isModalOpen, policy, toggle, onDelete }) => {\n    const [deletePolicy] = useMutation(DELETE_PROFILE, {\n        onCompleted: () => {\n            dispatchAction(addNotification({\n                variant: 'success',\n                title: `Removed policy ${policy.name}`\n            }));\n            onDelete();\n            toggle();\n        },\n        onError: (error) => {\n            dispatchAction(addNotification({\n                variant: 'danger',\n                title: 'Error removing policy',\n                description: error.message\n            }));\n            onDelete();\n            toggle();\n        }\n    });\n    const { name, id } = policy;\n\n    return (\n        <Modal\n            isSmall\n            title='Delete policy'\n            isOpen={isModalOpen}\n            isFooterLeftAligned\n            onClose={toggle}\n            actions={[\n                <Button key='destroy'\n                    aria-label=\"delete\"\n                    variant='danger'\n                    onClick={() => deletePolicy({ variables: { input: { id } } })}>\n                    Delete policy\n                </Button>,\n                <Button key='cancel' variant='secondary' onClick={toggle}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <TextContent>\n                Are you sure you want to delete <b>{ name }</b>?\n            </TextContent>\n            <TextContent>\n                This cannot be undone.\n            </TextContent>\n        </Modal>\n    );\n};\n\nDeletePolicy.propTypes = {\n    policy: propTypes.object,\n    toggle: propTypes.func,\n    isModalOpen: propTypes.bool,\n    onDelete: propTypes.func\n};\n\nexport default DeletePolicy;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { EmptyTable, SimpleTableFilter, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport {\n    Bullseye,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateVariant,\n    InputGroup,\n    Level,\n    LevelItem,\n    Pagination,\n    PaginationVariant,\n    Title\n} from '@patternfly/react-core';\nimport CreatePolicy from '../CreatePolicy/CreatePolicy';\nimport DeletePolicy from '../DeletePolicy/DeletePolicy';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { paths } from '../../Routes';\nimport debounce from 'lodash/debounce';\nimport {\n    Link\n} from 'react-router-dom';\n\nconst emptyRows = [{\n    cells: [{\n        title: (\n            <EmptyTable>\n                <Bullseye>\n                    <EmptyState variant={ EmptyStateVariant.full }>\n                        <Title headingLevel=\"h5\" size=\"lg\">\n                                No matching policies found\n                        </Title>\n                        <EmptyStateBody>\n                                This filter criteria matches no policies. <br /> Try changing your filter settings.\n                        </EmptyStateBody>\n                    </EmptyState>\n                </Bullseye>\n            </EmptyTable>\n        ),\n        props: {\n            colSpan: 5\n        }\n    }]\n}];\n\nconst policiesToRows = (policies) => (\n    policies.map((policy) => (\n        {\n            cells: [\n                { title: <Link to={'/policies/' + policy.id}>{policy.name}</Link>, original: policy.name },\n                `RHEL ${policy.majorOsVersion}`,\n                policy.totalHostCount,\n                policy.businessObjective && policy.businessObjective.title || '--',\n                `${policy.complianceThreshold}%`\n            ]\n        }\n    ))\n);\n\nexport class PoliciesTable extends React.Component {\n    columns = [\n        { title: 'Policy name' },\n        { title: 'Operating system' },\n        { title: 'Systems' },\n        { title: 'Business objective' },\n        { title: 'Compliance threshold' }\n    ]\n    state = {\n        columns: this.columns,\n        page: 1,\n        itemsPerPage: 10,\n        search: '',\n        rows: [],\n        currentRows: [],\n        isDeleteModalOpen: false,\n        policyToDelete: {}\n    }\n\n    componentDidMount = () => {\n        this.setInitialCurrentRows();\n    }\n\n    componentDidUpdate = (prevProps) => {\n        const { policies } = this.props;\n        if (policies !== prevProps.policies) {\n            this.setInitialCurrentRows();\n        }\n    }\n\n    setInitialCurrentRows = () => {\n        const { policies } = this.props;\n        const { itemsPerPage } = this.state;\n        const policyRows = policiesToRows(policies);\n\n        this.setState({\n            currentRows: policyRows.slice(0, itemsPerPage),\n            rows: policyRows,\n            allRows: policyRows\n        });\n    }\n\n    currentRows = (page, itemsPerPage, policyRows) => {\n        const { rows } = (policyRows) ? policyRows : this.state;\n\n        if (!rows.length) {\n            return [];\n        }\n\n        if (rows.length < itemsPerPage) { itemsPerPage = rows.length; }\n\n        const firstIndex = (page - 1) * itemsPerPage;\n        const lastIndex = page * itemsPerPage;\n        const newRows = rows.slice(firstIndex, lastIndex);\n\n        return newRows;\n    }\n\n    setPage = (_event, page) => {\n        const { itemsPerPage } = this.state;\n        this.changePage(page, itemsPerPage);\n    }\n\n    setPerPage = (_event, itemsPerPage) => {\n        const { page } = this.state;\n        this.changePage(page, itemsPerPage);\n    }\n\n    changePage = (page, itemsPerPage) => {\n        this.setState({\n            currentRows: this.currentRows(page, itemsPerPage),\n            page,\n            itemsPerPage\n        });\n    }\n\n    handleSearch = debounce(search => {\n        const { itemsPerPage, allRows } = this.state;\n        const filteredRows = allRows.filter(row => row.cells[0].original.match(search));\n        this.setState({\n            search,\n            page: 1,\n            rows: filteredRows,\n            currentRows: filteredRows.slice(0, itemsPerPage)\n        });\n    }, 500)\n\n    actionResolver = (rowData) => {\n        const { history, policies } = this.props;\n        const { itemsPerPage, page } = this.state;\n\n        const currentRowIndex = rowData.id + (page - 1) * itemsPerPage;\n\n        return [\n            {\n                title: 'View latest results',\n                onClick: () => history.push(`${paths.compliancePolicies}/${policies[currentRowIndex].id}`)\n            },\n            {\n                title: 'Delete policy',\n                onClick: () => {\n                    this.setState((prev) => ({\n                        policyToDelete: policies[currentRowIndex],\n                        isDeleteModalOpen: !prev.isDeleteModalOpen\n                    }));\n                }\n            }\n        ];\n    }\n\n    render() {\n        const { onWizardFinish } = this.props;\n        const { rows, currentRows, columns, page, itemsPerPage, policyToDelete, isDeleteModalOpen } = this.state;\n        return (\n            <React.Fragment>\n                <DeletePolicy\n                    isModalOpen={isDeleteModalOpen}\n                    policy={policyToDelete}\n                    onDelete={onWizardFinish}\n                    toggle={() => this.setState((prev) => ({ isDeleteModalOpen: !prev.isDeleteModalOpen }))}\n                />\n                <TableToolbar>\n                    <Level gutter='md'>\n                        <LevelItem>\n                            <InputGroup>\n                                <SimpleTableFilter buttonTitle={ null }\n                                    onFilterChange={ this.handleSearch }\n                                    placeholder=\"Search\" />\n                            </InputGroup>\n                        </LevelItem>\n                        <LevelItem>\n                            { rows.length } results\n                        </LevelItem>\n                        <LevelItem>\n                            <CreatePolicy onWizardFinish={onWizardFinish} />\n                        </LevelItem>\n                    </Level>\n                    <Pagination\n                        page={ page }\n                        itemCount={ rows.length }\n                        dropDirection='down'\n                        onSetPage={ this.setPage }\n                        onPerPageSelect={ this.setPerPage }\n                        perPage={ itemsPerPage }\n                    />\n                </TableToolbar>\n                <Table\n                    aria-label='policies'\n                    className='compliance-policies-table'\n                    cells={ columns }\n                    actionResolver={this.actionResolver}\n                    rows={ (currentRows.length === 0) ? emptyRows : currentRows }>\n                    <TableHeader />\n                    <TableBody />\n                </Table>\n                <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n                    <Pagination\n                        page={ page }\n                        itemCount={ rows.length }\n                        dropDirection='up'\n                        onSetPage={ this.setPage }\n                        onPerPageSelect={ this.setPerPage }\n                        perPage={ itemsPerPage }\n                        variant={ PaginationVariant.bottom }\n                    />\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nPoliciesTable.propTypes = {\n    policies: propTypes.array.isRequired,\n    history: propTypes.object,\n    onWizardFinish: propTypes.func\n};\n\nPoliciesTable.defaultProps = {\n    policies: []\n};\n\nexport { policiesToRows };\n\nexport default routerParams(PoliciesTable);\n","import React from 'react';\nimport {\n    ComplianceTabs,\n    ErrorPage,\n    LoadingPoliciesTable\n} from 'PresentationalComponents';\nimport { PageHeader, PageHeaderTitle, Main } from '@redhat-cloud-services/frontend-components';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport PoliciesTable from '../PoliciesTable/PoliciesTable';\n\nconst QUERY = gql`\n{\n    profiles {\n        edges {\n            node {\n                id\n                name\n                refId\n                complianceThreshold\n                totalHostCount\n                majorOsVersion\n                businessObjective {\n                    id\n                    title\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const CompliancePolicies = () => {\n    const { data, error, loading, refetch } = useQuery(QUERY, { fetchPolicy: 'network-only' });\n\n    if (error) { return <ErrorPage error={error}/>; }\n\n    const beta = window.location.pathname.split('/')[1] === 'beta';\n\n    return (\n        <React.Fragment>\n            <PageHeader style={{ paddingBottom: '22px' }} className={ beta ? 'beta-page-header' : 'stable-page-header' } >\n                <PageHeaderTitle title=\"Compliance policies\" />\n                { !loading && !beta && <ComplianceTabs/> }\n            </PageHeader>\n            <Main>\n                { loading ?\n                    <LoadingPoliciesTable /> :\n                    <PoliciesTable onWizardFinish={() => refetch()} policies={data.profiles.edges.map(profile => profile.node)} />\n                }\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default routerParams(CompliancePolicies);\n","import PropTypes from 'prop-types';\nvar any = PropTypes.any,\n    bool = PropTypes.bool,\n    func = PropTypes.func,\n    shape = PropTypes.shape,\n    string = PropTypes.string,\n    oneOfType = PropTypes.oneOfType,\n    object = PropTypes.object,\n    number = PropTypes.number;\nexport var formPropTypes = {\n  // State:\n  anyTouched: bool.isRequired,\n  // true if any of the fields have been marked as touched\n  asyncValidating: oneOfType([bool, string]).isRequired,\n  // true if async validation is running, a string if a field triggered async validation\n  dirty: bool.isRequired,\n  // true if any values are different from initialValues\n  error: any,\n  // form-wide error from '_error' key in validation result\n  form: string.isRequired,\n  // the name of the form\n  invalid: bool.isRequired,\n  // true if there are any validation errors\n  initialized: bool.isRequired,\n  // true if the form has been initialized\n  initialValues: object,\n  // the initialValues object passed to reduxForm\n  pristine: bool.isRequired,\n  // true if the values are the same as initialValues\n  pure: bool.isRequired,\n  // if true, implements shouldComponentUpdate\n  submitting: bool.isRequired,\n  // true if the form is in the process of being submitted\n  submitAsSideEffect: bool.isRequired,\n  // true if onSubmit result will be dispatched\n  submitFailed: bool.isRequired,\n  // true if the form was submitted and failed for any reason\n  submitSucceeded: bool.isRequired,\n  // true if the form was successfully submitted\n  valid: bool.isRequired,\n  // true if there are no validation errors\n  warning: any,\n  // form-wide warning from '_warning' key in validation result\n  // Actions:\n  array: shape({\n    insert: func.isRequired,\n    // function to insert a value into an array field\n    move: func.isRequired,\n    // function to move a value within an array field\n    pop: func.isRequired,\n    // function to pop a value off of an array field\n    push: func.isRequired,\n    // function to push a value onto an array field\n    remove: func.isRequired,\n    // function to remove a value from an array field\n    removeAll: func.isRequired,\n    // function to remove all the values from an array field\n    shift: func.isRequired,\n    // function to shift a value out of an array field\n    splice: func.isRequired,\n    // function to splice a value into an array field\n    swap: func.isRequired,\n    // function to swap values in an array field\n    unshift: func.isRequired // function to unshift a value into an array field\n\n  }),\n  asyncValidate: func.isRequired,\n  // function to trigger async validation\n  autofill: func.isRequired,\n  // action to set a value of a field and mark it as autofilled\n  blur: func.isRequired,\n  // action to mark a field as blurred\n  change: func.isRequired,\n  // action to change the value of a field\n  clearAsyncError: func.isRequired,\n  // action to clear the async error of a field\n  clearFields: func.isRequired,\n  // action to clean fields values for all fields\n  clearSubmitErrors: func.isRequired,\n  // action to remove submitErrors and error\n  destroy: func.isRequired,\n  // action to destroy the form's data in Redux\n  dispatch: func.isRequired,\n  // the Redux dispatch action\n  handleSubmit: func.isRequired,\n  // function to submit the form\n  initialize: func.isRequired,\n  // action to initialize form data\n  reset: func.isRequired,\n  // action to reset the form data to previously initialized values\n  resetSection: func.isRequired,\n  // action to reset the form sections data to previously initialized values\n  touch: func.isRequired,\n  // action to mark fields as touched\n  submit: func.isRequired,\n  // action to trigger a submission of the specified form\n  untouch: func.isRequired,\n  // action to mark fields as untouched\n  // triggerSubmit\n  triggerSubmit: bool,\n  // if true, submits the form on componentWillReceiveProps\n  clearSubmit: func.isRequired // called before a triggered submit, by default clears triggerSubmit\n\n};\nexport var fieldInputPropTypes = {\n  checked: bool,\n  name: string.isRequired,\n  onBlur: func.isRequired,\n  onChange: func.isRequired,\n  onDragStart: func.isRequired,\n  onDrop: func.isRequired,\n  onFocus: func.isRequired,\n  value: any\n};\nexport var fieldMetaPropTypes = {\n  active: bool.isRequired,\n  asyncValidating: bool.isRequired,\n  autofilled: bool.isRequired,\n  dirty: bool.isRequired,\n  dispatch: func.isRequired,\n  error: any,\n  form: string.isRequired,\n  invalid: bool.isRequired,\n  pristine: bool.isRequired,\n  submitting: bool.isRequired,\n  submitFailed: bool.isRequired,\n  touched: bool.isRequired,\n  valid: bool.isRequired,\n  visited: bool.isRequired,\n  warning: string\n};\nexport var fieldArrayMetaPropTypes = {\n  dirty: bool.isRequired,\n  error: any,\n  form: string.isRequired,\n  invalid: bool.isRequired,\n  pristine: bool.isRequired,\n  submitFailed: bool,\n  submitting: bool,\n  valid: bool.isRequired,\n  warning: string\n};\nexport var fieldArrayFieldsPropTypes = {\n  name: string.isRequired,\n  forEach: func.isRequired,\n  get: func.isRequired,\n  getAll: func.isRequired,\n  insert: func.isRequired,\n  length: number.isRequired,\n  map: func.isRequired,\n  move: func.isRequired,\n  pop: func.isRequired,\n  push: func.isRequired,\n  reduce: func.isRequired,\n  remove: func.isRequired,\n  removeAll: func.isRequired,\n  shift: func.isRequired,\n  swap: func.isRequired,\n  unshift: func.isRequired\n};\nexport var fieldPropTypes = {\n  input: shape(fieldInputPropTypes).isRequired,\n  meta: shape(fieldMetaPropTypes).isRequired\n};\nexport var fieldArrayPropTypes = {\n  fields: shape(fieldArrayFieldsPropTypes).isRequired,\n  meta: shape(fieldArrayMetaPropTypes).isRequired\n};\nexport default formPropTypes;"],"sourceRoot":""}