{"version":3,"file":"js/264.b91bbf6a7cc258aa42f3.js","mappings":"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","sources":["webpack:///./src/PresentationalComponents/SystemPolicyCard/UnsupportedSSGVersion.js","webpack:///./src/PresentationalComponents/SystemPolicyCard/SystemPolicyCard.js","webpack:///./src/PresentationalComponents/SystemPolicyCards/SystemPolicyCards.js","webpack:///./src/SmartComponents/SystemDetails/NoReportsState.js","webpack:///./src/SmartComponents/SystemDetails/NoPoliciesState.js","webpack:///./src/SmartComponents/SystemDetails/ComplianceDetail.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { Popover, Alert } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { supportedConfigsLink } from '@/constants';\n\nconst UnsupportedSSGVersion = ({ ssgVersion, style }) => {\n  const bodyContent =\n    'This system was using an incompatible version of the SSG at the time this report was generated.' +\n    ' Assessment of rules failed/passed on this system is a best-guess effort and may not be accurate.';\n  const footerContent = (\n    <a target=\"_blank\" rel=\"noopener noreferrer\" href={supportedConfigsLink}>\n      Supported SSG versions\n    </a>\n  );\n\n  return (\n    <Alert\n      variant=\"warning\"\n      isInline\n      style={style}\n      title={\n        <React.Fragment>\n          Unsupported SSG version ({ssgVersion})\n          <Popover position=\"right\" {...{ bodyContent, footerContent }}>\n            <OutlinedQuestionCircleIcon\n              style={{\n                marginLeft: '.5em',\n                cursor: 'pointer',\n                color: 'var(--pf-global--Color--200)',\n              }}\n            />\n          </Popover>\n        </React.Fragment>\n      }\n    />\n  );\n};\n\nUnsupportedSSGVersion.propTypes = {\n  ssgVersion: propTypes.string,\n  style: propTypes.object,\n};\n\nexport default UnsupportedSSGVersion;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n} from '@patternfly/react-icons';\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  Text,\n  TextContent,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Truncate from '@redhat-cloud-services/frontend-components/Truncate';\nimport UnsupportedSSGVersion from './UnsupportedSSGVersion';\n\nclass SystemPolicyCard extends React.Component {\n  complianceIcon = (compliant) =>\n    compliant ? (\n      <div className=\"ins-c-policy-card ins-m-compliant\">\n        <CheckCircleIcon /> Compliant\n      </div>\n    ) : (\n      <div className=\"ins-c-policy-card ins-m-noncompliant\">\n        <ExclamationCircleIcon /> Not compliant\n      </div>\n    );\n\n  fixedPercentage = (value, fixed = 0, withPercent = true) =>\n    value.toFixed(fixed) + (withPercent ? '%' : '');\n\n  render() {\n    const { policy, style } = this.props;\n    const {\n      rulesFailed,\n      compliant,\n      lastScanned,\n      score,\n      ssgVersion,\n      supported,\n      name,\n      policyType,\n    } = policy;\n    const passedPercentage = this.fixedPercentage(score);\n    const truncateDefaults = { expandOnMouseOver: true, hideExpandText: true };\n\n    return (\n      <Card style={style}>\n        <CardBody>\n          <TextContent className=\"margin-bottom-md\">\n            <Text\n              className=\"margin-bottom-top-none\"\n              component={TextVariants.h4}\n            >\n              <Truncate text={name} length={110} {...truncateDefaults} />\n            </Text>\n            <Text\n              style={{ color: 'var(--pf-global--Color--200)' }}\n              component={TextVariants.small}\n            >\n              <Truncate text={policyType} length={110} {...truncateDefaults} />\n            </Text>\n          </TextContent>\n          <div className=\"margin-bottom-md\">\n            {supported && this.complianceIcon(compliant)}\n            <Text component={TextVariants.small}>\n              {rulesFailed} rule{rulesFailed === 1 ? '' : 's'} failed{' '}\n              <Tooltip\n                position=\"bottom\"\n                maxWidth=\"22em\"\n                content={\n                  'The system compliance score is calculated by OpenSCAP and ' +\n                  'is a normalized weighted sum of rules selected for this policy.'\n                }\n              >\n                <span>(Score: {passedPercentage})</span>\n              </Tooltip>\n            </Text>\n          </div>\n          <Text className=\"margin-bottom-none\" component={TextVariants.small}>\n            <Text>SSG version: {ssgVersion}</Text>\n            <Text>\n              Last scanned:{' '}\n              {lastScanned !== 'Never' ? (\n                <DateFormat date={Date.parse(lastScanned)} type=\"relative\" />\n              ) : (\n                lastScanned\n              )}\n            </Text>\n          </Text>\n        </CardBody>\n        {!supported && (\n          <CardFooter style={{ padding: '0' }}>\n            <UnsupportedSSGVersion\n              ssgVersion={ssgVersion}\n              style={{\n                paddingTop: 'var(--pf-c-alert--PaddingTop)',\n                paddingRight: 'var(--pf-c-card--child--PaddingRight)',\n                paddingLeft: 'var(--pf-c-card--child--PaddingLeft)',\n                paddingBottom: 'var(--pf-c-alert--PaddingBottom)',\n              }}\n            />\n          </CardFooter>\n        )}\n      </Card>\n    );\n  }\n}\n\nSystemPolicyCard.propTypes = {\n  policy: PropTypes.shape({\n    rulesPassed: PropTypes.number,\n    rulesFailed: PropTypes.number,\n    score: PropTypes.number,\n    lastScanned: PropTypes.string,\n    refId: PropTypes.string,\n    name: PropTypes.string,\n    policyType: PropTypes.string,\n    compliant: PropTypes.bool,\n    ssgVersion: PropTypes.string,\n    supported: PropTypes.bool,\n  }),\n  style: PropTypes.object,\n};\n\nexport default SystemPolicyCard;\n","import React from 'react';\nimport { Grid, GridItem, Card, CardBody } from '@patternfly/react-core';\nimport SystemPolicyCard from '../SystemPolicyCard';\nimport propTypes from 'prop-types';\nimport { Instagram } from 'react-content-loader';\n\nclass SystemPolicyCards extends React.Component {\n  systemPolicyCards() {\n    const { policies } = this.props;\n    return policies\n      .filter((policy) => policy.rulesFailed + policy.rulesPassed > 0)\n      .map((policy, i) => (\n        <GridItem sm={12} md={12} lg={6} xl={4} key={i}>\n          <SystemPolicyCard policy={policy} style={{ height: '100%' }} />\n        </GridItem>\n      ));\n  }\n\n  render() {\n    const { loading } = this.props;\n\n    return (\n      <React.Fragment>\n        <Grid hasGutter>\n          {this.systemPolicyCards()}\n          {loading &&\n            [...Array(3)].map((_item, i) => (\n              <GridItem span={4} key={i}>\n                <Card>\n                  <CardBody>\n                    <Instagram />\n                  </CardBody>\n                </Card>\n              </GridItem>\n            ))}\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nSystemPolicyCards.propTypes = {\n  policies: propTypes.array,\n  loading: propTypes.bool,\n};\n\nSystemPolicyCards.defaultProps = {\n  policies: [],\n};\n\nexport default SystemPolicyCards;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { CloudSecurityIcon } from '@patternfly/react-icons';\nimport {\n  Title,\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n} from '@patternfly/react-core';\n\nconst NoReportsState = ({ system }) =>\n  system?.hasPolicy && !system?.testResultProfiles?.length ? (\n    <Bullseye>\n      <EmptyState>\n        <EmptyStateIcon\n          icon={CloudSecurityIcon}\n          title=\"Compliance\"\n          size=\"xl\"\n          style={{\n            fontWeight: '500',\n            color: 'var(--pf-global--primary-color--100)',\n          }}\n        />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          No results reported\n        </Title>\n        <EmptyStateBody>\n          This system is part of {system?.policies?.length}\n          {system?.policies?.length > 1 ? ' policies' : ' policy'}, but has not\n          returned any results.\n        </EmptyStateBody>\n        <EmptyStateBody>\n          Reports are returned when the system checks into Insights. By default,\n          systems check in every 24 hours.\n        </EmptyStateBody>\n      </EmptyState>\n    </Bullseye>\n  ) : (\n    <></>\n  );\n\nNoReportsState.propTypes = {\n  system: propTypes.shape({\n    hasPolicy: propTypes.bool,\n    testResultProfiles: propTypes.array,\n    policies: propTypes.array,\n  }),\n};\n\nexport default NoReportsState;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { BackgroundLink } from 'PresentationalComponents';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport {\n  Title,\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStatePrimary,\n  EmptyStateSecondaryActions,\n  EmptyStateIcon,\n} from '@patternfly/react-core';\n\nconst NoPoliciesState = ({ system }) =>\n  system?.hasPolicy ? (\n    <></>\n  ) : (\n    <Bullseye>\n      <EmptyState>\n        <EmptyStateIcon icon={PlusCircleIcon} />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          This system is not part of any SCAP policies defined within\n          Compliance.\n        </Title>\n        <EmptyStateBody>\n          To assess and monitor compliance against a SCAP policy for this\n          system, add it to an existing policy or create a new policy.\n        </EmptyStateBody>\n        <EmptyStatePrimary>\n          <BackgroundLink to=\"/scappolicies/new\">\n            <Button variant=\"primary\" ouiaId=\"CreateNewPolicyButton\">\n              Create new policy\n            </Button>\n          </BackgroundLink>\n        </EmptyStatePrimary>\n        <EmptyStateSecondaryActions>\n          <Button\n            variant=\"link\"\n            component=\"a\"\n            href=\"/insights/compliance/scappolicies\"\n          >\n            View compliance policies\n          </Button>\n        </EmptyStateSecondaryActions>\n      </EmptyState>\n    </Bullseye>\n  );\n\nNoPoliciesState.propTypes = {\n  system: propTypes.shape({\n    hasPolicy: propTypes.bool,\n  }),\n};\n\nexport default NoPoliciesState;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport SystemPolicyCards from '../../PresentationalComponents/SystemPolicyCards';\nimport RulesTable from '@/PresentationalComponents/RulesTable/RulesTable';\nimport ComplianceEmptyState from 'PresentationalComponents/ComplianceEmptyState';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { ApolloClient, HttpLink, InMemoryCache } from 'apollo-boost';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport './compliance.scss';\nimport { ErrorCard } from 'PresentationalComponents';\nimport { IntlProvider } from 'react-intl';\nimport NoReportsState from './NoReportsState';\nimport NoPoliciesState from './NoPoliciesState';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nconst COMPLIANCE_API_ROOT = '/api/compliance';\n\nconst QUERY = gql`\n  query System($systemId: String!) {\n    system(id: $systemId) {\n      id\n      name\n      hasPolicy\n      policies {\n        id\n      }\n      testResultProfiles {\n        id\n        name\n        policyType\n        refId\n        compliant\n        rulesFailed\n        rulesPassed\n        lastScanned\n        score\n        supported\n        ssgVersion\n        majorOsVersion\n        policy {\n          id\n        }\n        rules {\n          title\n          severity\n          rationale\n          refId\n          description\n          compliant\n          remediationAvailable\n          references\n          identifier\n        }\n      }\n    }\n  }\n`;\n\nconst SystemQuery = ({ data: { system }, loading, hidePassed }) => (\n  <React.Fragment>\n    <SystemPolicyCards\n      policies={system?.testResultProfiles}\n      loading={loading}\n    />\n    <NoPoliciesState system={system} />\n    <NoReportsState system={system} />\n    <br />\n    {system?.testResultProfiles?.length ? (\n      <RulesTable\n        remediationAvailableFilter\n        handleSelect={() => undefined}\n        hidePassed={hidePassed}\n        system={{\n          ...system,\n          supported:\n            (system?.testResultProfiles || []).filter(\n              (profile) => profile.supported\n            ).length > 0,\n        }}\n        profileRules={system?.testResultProfiles.map((profile) => ({\n          system,\n          profile,\n          rules: profile.rules,\n        }))}\n        loading={loading}\n        options={{\n          sortBy: {\n            index: 4,\n            direction: 'asc',\n            property: 'severity',\n          },\n        }}\n      />\n    ) : undefined}\n  </React.Fragment>\n);\n\nSystemQuery.propTypes = {\n  data: propTypes.shape({\n    system: propTypes.shape({\n      hasPolicy: propTypes.bool,\n      policies: propTypes.shape({\n        id: propTypes.string,\n      }),\n      profiles: propTypes.array,\n      testResultProfiles: propTypes.array,\n    }),\n  }),\n  loading: propTypes.bool,\n  hidePassed: propTypes.bool,\n};\n\nSystemQuery.defaultProps = {\n  loading: true,\n};\n\nconst SystemDetails = ({ inventoryId, hidePassed, client }) => {\n  let { data, error, loading } = useQuery(QUERY, {\n    variables: { systemId: inventoryId },\n    client,\n    fetchPolicy: 'no-cache',\n  });\n  const is404 = error?.networkError?.statusCode === 404;\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  if (error && !is404) {\n    const errorMsg = `Oops! Error loading System data: ${error}`;\n    return <ErrorCard message={errorMsg} />;\n  }\n\n  return (\n    <div className=\"ins-c-compliance__scope\">\n      {!data?.system || is404 ? (\n        <ComplianceEmptyState title=\"No policies are reporting for this system\" />\n      ) : (\n        <SystemQuery hidePassed={hidePassed} data={data} loading={loading} />\n      )}\n    </div>\n  );\n};\n\nSystemDetails.propTypes = {\n  inventoryId: propTypes.string,\n  client: propTypes.object,\n  hidePassed: propTypes.bool,\n};\n\nSystemDetails.defaultProps = {\n  client: new ApolloClient({\n    link: new HttpLink({\n      uri: COMPLIANCE_API_ROOT + '/graphql',\n      credentials: 'include',\n    }),\n    cache: new InMemoryCache(),\n  }),\n};\n\nconst WrappedSystemDetails = ({\n  customItnl,\n  customRouter,\n  intlProps,\n  ...props\n}) => {\n  const IntlWrapper = customItnl ? IntlProvider : React.Fragment;\n  const RouterWrapper = customRouter ? Router : React.Fragment;\n\n  return (\n    <RouterWrapper>\n      <IntlWrapper {...(customItnl && intlProps)}>\n        <SystemDetails {...props} />\n      </IntlWrapper>\n    </RouterWrapper>\n  );\n};\n\nWrappedSystemDetails.propTypes = {\n  customItnl: propTypes.bool,\n  intlProps: propTypes.any,\n  customRouter: propTypes.bool,\n};\n\nexport default WrappedSystemDetails;\n"],"names":["UnsupportedSSGVersion","ssgVersion","style","footerContent","target","rel","href","supportedConfigsLink","Alert","variant","isInline","title","Popover","position","bodyContent","marginLeft","cursor","color","propTypes","SystemPolicyCard","compliant","className","value","fixed","withPercent","toFixed","this","props","policy","rulesFailed","lastScanned","score","supported","name","policyType","passedPercentage","fixedPercentage","truncateDefaults","expandOnMouseOver","hideExpandText","Card","CardBody","TextContent","Text","component","TextVariants","Truncate","text","length","complianceIcon","Tooltip","maxWidth","content","DateFormat","date","Date","parse","type","CardFooter","padding","paddingTop","paddingRight","paddingLeft","paddingBottom","React","PropTypes","rulesPassed","refId","SystemPolicyCards","policies","filter","map","i","GridItem","sm","md","lg","xl","key","height","loading","Grid","hasGutter","systemPolicyCards","Array","_item","span","defaultProps","NoReportsState","system","hasPolicy","testResultProfiles","Bullseye","EmptyState","EmptyStateIcon","icon","CloudSecurityIcon","size","fontWeight","Title","headingLevel","EmptyStateBody","NoPoliciesState","PlusCircleIcon","EmptyStatePrimary","to","Button","ouiaId","EmptyStateSecondaryActions","QUERY","gql","SystemQuery","data","hidePassed","RulesTable","remediationAvailableFilter","handleSelect","profile","profileRules","rules","options","sortBy","index","direction","property","undefined","id","profiles","SystemDetails","inventoryId","client","useQuery","variables","systemId","fetchPolicy","error","is404","networkError","statusCode","Spinner","errorMsg","message","ComplianceEmptyState","ApolloClient","link","HttpLink","uri","COMPLIANCE_API_ROOT","credentials","cache","InMemoryCache","WrappedSystemDetails","customItnl","customRouter","intlProps","IntlWrapper","IntlProvider","RouterWrapper","Router"],"sourceRoot":""}