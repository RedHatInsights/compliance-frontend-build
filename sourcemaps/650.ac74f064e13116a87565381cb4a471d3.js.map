{"version":3,"file":"js/650.852d7c381113ea6da80c.js","mappings":"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","sources":["webpack:///./src/SmartComponents/ComplianceSystems/ComplianceSystems.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeDetailsRow.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeTable.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeTooltip.js","webpack:///./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyProfilesRules.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack:///./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack:///./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack:///./src/SmartComponents/DeletePolicy/DeletePolicy.js","webpack:///./src/SmartComponents/DeleteReport/DeleteReport.js","webpack:///./src/SmartComponents/EditPolicy/constants.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyRulesTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicySystemsTab.js","webpack:///./src/SmartComponents/EditPolicy/components/NewRulesAlert.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyForm.js","webpack:///./src/SmartComponents/EditPolicy/hooks/index.js","webpack:///./src/SmartComponents/EditPolicy/hooks/usePolicyQueries.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicy.js","webpack:///./src/SmartComponents/SystemsTable/Cells.js","webpack:///./src/SmartComponents/SystemsTable/Columns.js","webpack:///./src/SmartComponents/InventoryDetails/InventoryDetails.js","webpack:///./src/PresentationalComponents/ComplianceRemediationButton/constants.js","webpack:///./src/PresentationalComponents/ComplianceRemediationButton/RemediationButton.js","webpack:///./src/PresentationalComponents/ComplianceRemediationButton/hooks.js","webpack:///./src/SmartComponents/SystemsTable/constants.js","webpack:///./src/SmartComponents/SystemsTable/hooks.js","webpack:///./src/SmartComponents/SystemsTable/SystemsTable.js","webpack:///./src/Utilities/hooks/usePromiseQueue.js","webpack:///./src/store/Reducers/SystemStore.js"],"sourcesContent":["/* eslint-disable react/display-name */\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { nowrap } from '@patternfly/react-table';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport { SystemsTable } from 'SmartComponents';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst QUERY = gql`\n  {\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n        }\n      }\n    }\n  }\n`;\n\nconst DEFAULT_FILTER = 'has_test_results = true or has_policy = true';\n\nexport const ComplianceSystems = () => {\n  const { data, error, loading } = useQuery(QUERY);\n  const policies = data?.profiles?.edges.map(({ node }) => node);\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"page-header\">\n        <PageHeaderTitle title=\"Compliance systems\" />\n      </PageHeader>\n      <section className=\"pf-c-page__main-section\">\n        <StateViewWithError stateValues={{ error, data, loading }}>\n          <StateViewPart stateKey=\"data\">\n            {policies && (\n              <SystemsTable\n                columns={[\n                  Columns.customName({\n                    showLink: true,\n                  }),\n                  Columns.inventoryColumn('tags'),\n                  Columns.OS,\n                  Columns.Policies,\n                  Columns.inventoryColumn('updated', {\n                    props: { isStatic: true },\n                    transforms: [nowrap],\n                  }),\n                ]}\n                defaultFilter={DEFAULT_FILTER}\n                systemProps={{\n                  isFullView: true,\n                }}\n                showOsMinorVersionFilter={policies.map(\n                  (policy) => policy.osMajorVersion\n                )}\n                showComplianceSystemsInfo\n                enableEditPolicy={false}\n                remediationsEnabled={false}\n                policies={policies}\n              />\n            )}\n          </StateViewPart>\n        </StateViewWithError>\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default ComplianceSystems;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Text } from '@patternfly/react-core';\n\nconst PolicyTypeDetailsRow = ({ item: { description }, key }) => {\n  return (\n    <Text key={key} style={{ margin: 'var(--pf-global--spacer--lg) 0' }}>\n      {description}\n    </Text>\n  );\n};\n\nPolicyTypeDetailsRow.propTypes = {\n  item: propTypes.object,\n  key: propTypes.string,\n};\n\nexport default PolicyTypeDetailsRow;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { fitContent, info } from '@patternfly/react-table';\nimport { InUseProfileLabel } from 'PresentationalComponents';\nimport { TableToolsTable } from 'Utilities/hooks/useTableTools';\nimport { renderComponent } from 'Utilities/helpers';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport PolicyTypeDetailsRow from './PolicyTypeDetailsRow';\nimport { emptyRows } from 'Utilities/hooks/useTableTools/Components/NoResultsTable';\n\nconst NameCell = ({ name, disabled }) => {\n  return (\n    <>\n      {disabled && <InUseProfileLabel compact />}\n      {name}\n    </>\n  );\n};\n\nNameCell.propTypes = {\n  name: propTypes.string,\n  disabled: propTypes.boolean,\n};\n\nconst PolicyTypeTable = ({ profiles, onChange, selectedProfile }) => {\n  const columns = [\n    {\n      title: 'Policy name',\n      key: 'name',\n      transforms: [\n        info({\n          tooltip:\n            'In use policies have already been used and therefore can not be applied to another SCAP Policy under the selected OS.',\n        }),\n      ],\n      sortByProp: 'name',\n      renderFunc: renderComponent(NameCell),\n    },\n    {\n      title: 'Supported OS versions',\n      transforms: [fitContent],\n      sortByProp: 'supportedOsVersions',\n      renderFunc: (_data, _id, profile) =>\n        profile.supportedOsVersions.join(', '),\n    },\n  ];\n\n  return (\n    <TableToolsTable\n      items={profiles.map((profile) => ({\n        ...profile,\n        rowProps: {\n          selected: profile.id === selectedProfile?.id,\n          disableSelection: profile.disabled,\n        },\n      }))}\n      filters={{\n        filterConfig: [\n          {\n            type: conditionalFilterType.text,\n            label: 'Policy Name',\n            filter: (policyTypes, value) =>\n              policyTypes.filter((policyType) =>\n                policyType?.name.toLowerCase().includes(value.toLowerCase())\n              ),\n          },\n        ],\n      }}\n      columns={columns}\n      options={{\n        detailsComponent: PolicyTypeDetailsRow,\n        onRadioSelect: (_event, _value, _rowIdx, { itemId }) =>\n          onChange && onChange(profiles.find(({ id }) => id === itemId)),\n        sortBy: {\n          index: 2,\n          direction: 'asc',\n          property: 'name',\n        },\n        emptyRows: emptyRows('policy types', columns.length),\n      }}\n      variant=\"compact\"\n    />\n  );\n};\n\nPolicyTypeTable.propTypes = {\n  profiles: propTypes.array,\n  onChange: propTypes.func,\n  selectedProfile: propTypes.string,\n};\n\nexport default PolicyTypeTable;\n","import React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\n\nconst PolicyTypeTooltip = () => (\n  <Tooltip\n    position=\"right\"\n    content=\"Policy types are OpenSCAP policies that are supported by RHEL.\n        For each major version of RHEL, users can create one policy of each type.\"\n  >\n    <OutlinedQuestionCircleIcon className=\"grey-icon\" />\n  </Tooltip>\n);\n\nexport default PolicyTypeTooltip;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  Tile,\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport PolicyTypesTable from './Components/PolicyTypeTable';\nimport PolicyTypeTooltip from './Components/PolicyTypeTooltip';\n\nconst SUPPORTED_PROFILES = gql`\n  query supportedProfilesByOSMajor {\n    osMajorVersions {\n      edges {\n        node {\n          osMajorVersion\n          profiles {\n            id\n            name\n            refId\n            description\n            supportedOsVersions\n            benchmark {\n              id\n              refId\n            }\n          }\n        }\n      }\n    }\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          refId\n          benchmark {\n            refId\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const CreateSCAPPolicy = ({\n  change,\n  selectedProfile,\n  selectedOsMajorVersion,\n}) => {\n  const { data, error, loading } = useQuery(SUPPORTED_PROFILES, {\n    fetchPolicy: 'no-cache',\n  });\n  const isInUse = (profileRefId, benchmarkRedId) =>\n    !!data?.profiles?.edges\n      .map(({ node }) => node)\n      .find(\n        (profile) =>\n          profile.refId === profileRefId &&\n          benchmarkRedId === profile.benchmark.refId\n      );\n  const osMajorVersions = data?.osMajorVersions?.edges.map(({ node }) => node);\n  const selectedOsMajorVersionObject = osMajorVersions?.find(\n    ({ osMajorVersion }) => osMajorVersion === selectedOsMajorVersion\n  );\n  const profilesToSelect = selectedOsMajorVersionObject?.profiles.map(\n    (profile) => ({\n      ...profile,\n      disabled: isInUse(profile.refId, profile.benchmark.refId),\n    })\n  );\n\n  return (\n    <StateViewWithError stateValues={{ error, data, loading }}>\n      <StateViewPart stateKey=\"loading\">\n        <Spinner />\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <TextContent>\n          <Text component={TextVariants.h1} className=\"pf-u-mb-md\">\n            Create SCAP policy\n          </Text>\n          <Text className=\"pf-u-mb-md\">\n            Select the operating system and policy type for this policy.\n          </Text>\n        </TextContent>\n        <Form>\n          <FormGroup label=\"Operating system\" isRequired fieldId=\"benchmark\">\n            {osMajorVersions &&\n              osMajorVersions.map(({ osMajorVersion }) => (\n                <Tile\n                  key={`rhel${osMajorVersion}-select`}\n                  className=\"pf-u-mr-md\"\n                  title={`RHEL ${osMajorVersion}`}\n                  onClick={() => {\n                    change('osMajorVersion', osMajorVersion);\n                  }}\n                  isSelected={selectedOsMajorVersion === osMajorVersion}\n                  isStacked\n                />\n              ))}\n          </FormGroup>\n\n          {selectedOsMajorVersion && (\n            <FormGroup\n              isRequired\n              labelIcon={<PolicyTypeTooltip />}\n              label=\"Policy type\"\n              fieldId=\"policy-type\"\n            >\n              <PolicyTypesTable\n                aria-label=\"PolicyTypeTable\"\n                profiles={profilesToSelect}\n                onChange={(policy) => {\n                  change('profile', policy);\n                  change('benchmark', policy.benchmark.id);\n                  change('selectedRuleRefIds', undefined);\n                  change('systems', []);\n                }}\n                selectedProfile={selectedProfile}\n              />\n            </FormGroup>\n          )}\n        </Form>\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nCreateSCAPPolicy.propTypes = {\n  change: reduxFormPropTypes.change,\n  selectedProfile: propTypes.object,\n  selectedOsMajorVersion: propTypes.string,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    selectedProfile: selector(state, 'profile'),\n    selectedOsMajorVersion: selector(state, 'osMajorVersion'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(CreateSCAPPolicy);\n","import React, { useLayoutEffect } from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  Title,\n  Text,\n  TextContent,\n  TextVariants,\n  EmptyState,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\nimport useFeature from 'Utilities/hooks/useFeature';\n\nconst PROFILES_QUERY = gql`\n  query Profiles($filter: String!, $enableRuleTree: Boolean = false) {\n    profiles(search: $filter) {\n      edges {\n        node {\n          id\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          benchmark {\n            id\n            latestSupportedOsMinorVersions\n            ruleTree @include(if: $enableRuleTree)\n            valueDefinitions {\n              defaultValue\n              description\n              id\n              refId\n              title\n              valueType\n            }\n          }\n          rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n          values\n        }\n      }\n    }\n  }\n`;\n\nconst BENCHMARKS_QUERY = gql`\n  query Benchmarks($filter: String!, $enableRuleTree: Boolean = false) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        ruleTree @include(if: $enableRuleTree)\n        valueDefinitions {\n          defaultValue\n          description\n          id\n          refId\n          title\n          valueType\n        }\n        profiles {\n          id\n          refId\n          osMajorVersion\n        }\n        version\n      }\n    }\n  }\n`;\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nexport const EditPolicyProfilesRules = ({\n  policy,\n  selectedRuleRefIds,\n  change,\n  osMajorVersion,\n  osMinorVersionCounts,\n  ruleValues,\n}) => {\n  const ruleGroups = useFeature('ruleGroups');\n  const columns = [Columns.Name, Columns.Severity, Columns.Remediation];\n  const osMinorVersions = osMinorVersionCounts\n    .map((i) => i.osMinorVersion)\n    .sort();\n  const benchmarkSearch =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const {\n    data: benchmarksData,\n    error: benchmarksError,\n    loading: benchmarksLoading,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter: benchmarkSearch,\n      enableRuleTree: ruleGroups,\n    },\n    skip: osMinorVersions.length === 0,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  let tabsData = osMinorVersionCounts.map(\n    ({ osMinorVersion, count: systemCount }) => {\n      osMinorVersion = `${osMinorVersion}`;\n      let profile;\n      if (benchmarks) {\n        const benchmark = getBenchmarkBySupportedOsMinor(\n          benchmarks,\n          osMinorVersion\n        );\n        if (benchmark) {\n          profile = getBenchmarkProfile(benchmark, policy.refId);\n          if (profile) {\n            profile = {\n              ...profile,\n              benchmark,\n            };\n          }\n        }\n      }\n\n      return {\n        profile,\n        systemCount,\n        newOsMinorVersion: osMinorVersion,\n      };\n    }\n  );\n  tabsData = tabsData.filter(({ profile }) => !!profile);\n\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n  const profileIds = Object.keys(profileToOsMinorMap);\n  const filter = profileIds.map((i) => `id = ${i}`).join(' OR ');\n  const skipProfilesQuery = benchmarksLoading || filter.length === 0;\n  const {\n    data: profilesData,\n    error: profilesError,\n    loading: profilesLoading,\n  } = useQuery(PROFILES_QUERY, {\n    variables: {\n      filter,\n      enableRuleTree: ruleGroups,\n    },\n    skip: skipProfilesQuery,\n  });\n  const error = benchmarksError || profilesError;\n  const dataState = profileIds?.length > 0 ? profilesData : undefined;\n  const loadingState = profilesLoading || benchmarksLoading ? true : undefined;\n  const noRuleSets = !error && !loadingState && profileIds?.length === 0;\n  const profiles = skipProfilesQuery\n    ? []\n    : profilesData?.profiles.edges.map((p) => p.node);\n\n  const setSelectedRuleRefIds = (newSelection) => {\n    change('selectedRuleRefIds', newSelection);\n  };\n\n  const setRuleValues = (policyId, valueDefinition, valueValue) => {\n    const newRuleValues = {\n      ...(ruleValues || {}),\n      [policyId]: {\n        ...(ruleValues || {})[policyId],\n        [valueDefinition.refId]: valueValue,\n      },\n    };\n\n    change('ruleValues', newRuleValues);\n  };\n\n  useLayoutEffect(() => {\n    if (!loadingState) {\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      const newSelection = profilesWithRulesToSelection(\n        profilesWithOs,\n        selectedRuleRefIds,\n        { only: true }\n      );\n      setSelectedRuleRefIds(newSelection);\n    }\n  }, [JSON.stringify(profiles), loadingState]);\n\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-pb-md\">\n        <Text component={TextVariants.h1}>Rules</Text>\n        <Text>\n          Customize your <b>{policy.name}</b> SCAP policy by including and\n          excluding rules.\n        </Text>\n        <Text>\n          Each release of RHEL is supported with a unique and specific version\n          of the SCAP Security Guide (SSG). You must customize each version of\n          SSG for each release of RHEL.\n        </Text>\n      </TextContent>\n\n      <StateViewWithError\n        stateValues={{\n          error,\n          data: dataState,\n          loading: loadingState,\n          noRuleSets,\n        }}\n      >\n        <StateViewPart stateKey=\"noRuleSets\">\n          <EmptyState>\n            <Title headingLevel=\"h1\" size=\"xl\">\n              No rules can be configured\n            </Title>\n            <EmptyStateBody>\n              The policy type selected does not exist for the systems and OS\n              versions selected in the previous steps.\n            </EmptyStateBody>\n          </EmptyState>\n        </StateViewPart>\n        <StateViewPart stateKey=\"loading\">\n          <EmptyTable>\n            <Spinner />\n          </EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n          <TabbedRules\n            tabsData={tabsData}\n            selectedRuleRefIds={selectedRuleRefIds}\n            setRuleValues={setRuleValues}\n            ruleValues={ruleValues}\n            columns={columns}\n            remediationsEnabled={false}\n            selectedFilter\n            level={1}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            ouiaId=\"RHELVersions\"\n            resetLink={true}\n            rulesPageLink={true}\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </React.Fragment>\n  );\n};\n\nEditPolicyProfilesRules.propTypes = {\n  policy: propTypes.object,\n  change: reduxFormPropTypes.change,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  selectedRuleRefIds: propTypes.array,\n  ruleValues: propTypes.array,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    policy: selector(state, 'profile'),\n    osMajorVersion: selector(state, 'osMajorVersion'),\n    osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n    selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n    ruleValues: selector(state, 'ruleValues'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyProfilesRules);\n","import React from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  reduxForm,\n  formValueSelector,\n} from 'redux-form';\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  WizardContextConsumer,\n} from '@patternfly/react-core';\nimport { SystemsTable } from 'SmartComponents';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { countOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n        <br />\n        Policies must be created with at least one system.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Choose a different operating system, or connect{' '}\n        <b>RHEL {osMajorVersion}</b> systems to Insights.\n      </Text>\n    </TextContent>\n    <WizardContextConsumer>\n      {({ goToStepById }) => (\n        <Button onClick={() => goToStepById(1)}>\n          Choose a different operating system\n        </Button>\n      )}\n    </WizardContextConsumer>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n        <br />\n        Systems can be added or removed at any time.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nexport const EditPolicySystems = ({\n  policy,\n  change,\n  osMajorVersion,\n  selectedSystems,\n}) => {\n  const onSystemSelect = (newSelectedSystems) => {\n    change('systems', newSelectedSystems);\n    change('osMinorVersionCounts', countOsMinorVersions(newSelectedSystems));\n  };\n  const osMinorVersions = policy.supportedOsVersions.map(\n    (version) => version.split('.')[1]\n  );\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-mb-md\">\n        <Text component={TextVariants.h1}>Systems</Text>\n      </TextContent>\n      <Form>\n        <FormGroup>\n          <SystemsTable\n            showOsMinorVersionFilter={[osMajorVersion]}\n            prependComponent={\n              <PrependComponent osMajorVersion={osMajorVersion} />\n            }\n            emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n            columns={[\n              {\n                ...Columns.Name,\n                props: {\n                  width: 40,\n                },\n                sortBy: ['name'],\n              },\n              Columns.inventoryColumn('tags'),\n              Columns.OperatingSystem,\n            ]}\n            remediationsEnabled={false}\n            compact\n            showActions={false}\n            defaultFilter={\n              osMajorVersion &&\n              `os_major_version = ${osMajorVersion} AND os_minor_version ^ (${osMinorVersions.join(\n                ','\n              )})`\n            }\n            enableExport={false}\n            preselectedSystems={selectedSystems}\n            onSelect={onSystemSelect}\n          />\n        </FormGroup>\n      </Form>\n    </React.Fragment>\n  );\n};\n\nEditPolicySystems.propTypes = {\n  osMajorVersion: propTypes.string,\n  policy: propTypes.object,\n  selectedSystems: propTypes.array,\n  change: reduxFormPropTypes.change,\n};\n\nEditPolicySystems.defaultProps = {\n  selectedSystems: [],\n};\n\nconst selector = formValueSelector('policyForm');\nconst mapStateToProps = (state) => ({\n  policy: selector(state, 'profile'),\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  selectedSystems: selector(state, 'systems'),\n});\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicySystems);\n","import React, { useEffect } from 'react';\nimport { compose } from 'redux';\nimport {\n  Field,\n  reduxForm,\n  formValueSelector,\n  propTypes as reduxFormPropTypes,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  ReduxFormTextInput,\n  ReduxFormTextArea,\n} from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport {\n  ProfileThresholdField,\n  PolicyBusinessObjectiveTooltip,\n} from 'PresentationalComponents';\n\nexport const EditPolicyDetails = ({ change, policy, refId }) => {\n  useEffect(() => {\n    if (policy && policy.refId !== refId) {\n      change('name', `${policy.name}`);\n      change('refId', `${policy.refId}`);\n      change('description', `${policy.description}`);\n    }\n  }, [policy]);\n\n  return (\n    <React.Fragment>\n      <TextContent>\n        <Text component={TextVariants.h1}>Details</Text>\n      </TextContent>\n      <br />\n      <Form id=\"editpolicydetails\">\n        <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n          <Field\n            component={ReduxFormTextInput}\n            type=\"text\"\n            isRequired={true}\n            id=\"name\"\n            name=\"name\"\n            aria-describedby=\"name\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            isDisabled\n            id=\"refId\"\n            name=\"refId\"\n            aria-describedby=\"refId\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Description\" fieldId=\"description\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextArea}\n            id=\"description\"\n            name=\"description\"\n            aria-describedby=\"description\"\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Business objective\"\n          labelIcon={<PolicyBusinessObjectiveTooltip />}\n          fieldId=\"businessObjective\"\n        >\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            id=\"businessObjective\"\n            name=\"businessObjective\"\n            aria-describedby=\"businessObjective\"\n            defaultValue={policy.businessObjective}\n          />\n        </FormGroup>\n        <ProfileThresholdField previousThreshold={100} />\n      </Form>\n    </React.Fragment>\n  );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n  policy: propTypes.object,\n  refId: propTypes.string,\n  change: reduxFormPropTypes.change,\n};\n\nconst mapStateToProps = (state) => {\n  const policy = selector(state, 'profile');\n  return {\n    policy,\n    refId: selector(state, 'refId'),\n    initialValues: {\n      name: `${policy.name}`,\n      refId: `${policy.refId}`,\n      description: `${policy.description}`,\n      benchmark: selector(state, 'benchmark'),\n      osMajorVersion: selector(state, 'osMajorVersion'),\n      profile: selector(state, 'profile'),\n    },\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyDetails);\n","import React from 'react';\nimport {\n  Label,\n  Text,\n  TextVariants,\n  TextContent,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\n\nconst ReviewCreatedPolicy = ({\n  name,\n  businessObjective,\n  complianceThreshold,\n  parentProfileName,\n  osMinorVersionCounts,\n  osMajorVersion,\n}) => (\n  <TextContent>\n    <Text component={TextVariants.h1}>Review</Text>\n    <Text>Review your SCAP policy before finishing.</Text>\n    <Text component={TextVariants.h3} style={{ marginTop: 0 }}>\n      {name}\n    </Text>\n    <TextList component={TextListVariants.dl}>\n      <TextListItem component={TextListItemVariants.dt}>\n        Policy type\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        {parentProfileName}\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dt}>\n        Compliance threshold\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        {complianceThreshold}%\n      </TextListItem>\n      {businessObjective && (\n        <React.Fragment>\n          <TextListItem component={TextListItemVariants.dt}>\n            Business objective\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {businessObjective}\n          </TextListItem>\n        </React.Fragment>\n      )}\n      <TextListItem component={TextListItemVariants.dt}>Systems</TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        <TextList component={TextListVariants.dl}>\n          {osMinorVersionCounts.map(({ osMinorVersion, count }) => (\n            <React.Fragment key={osMinorVersion}>\n              <TextListItem\n                component={TextListItemVariants.dt}\n                style={{ fontWeight: 'normal' }}\n              >\n                RHEL {osMajorVersion}.{osMinorVersion}\n              </TextListItem>\n              <TextListItem component={TextListItemVariants.dd}>\n                <Label color=\"grey\" isCompact={true}>\n                  {count} {count > 1 ? 'systems' : 'system'}\n                </Label>\n              </TextListItem>\n            </React.Fragment>\n          ))}\n        </TextList>\n      </TextListItem>\n    </TextList>\n  </TextContent>\n);\n\nReviewCreatedPolicy.propTypes = {\n  benchmarkId: propTypes.string,\n  refId: propTypes.string,\n  name: propTypes.string,\n  businessObjective: propTypes.string,\n  complianceThreshold: propTypes.number,\n  parentProfileName: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  osMajorVersion: propTypes.string.isRequired,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect((state) => ({\n  benchmarkId: selector(state, 'benchmark'),\n  refId: selector(state, 'refId'),\n  name: selector(state, 'name'),\n  businessObjective: selector(state, 'businessObjective'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  complianceThreshold:\n    parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n  parentProfileName: selector(state, 'profile').name,\n  rulesCount: selector(state, 'selectedRuleRefIds').length,\n}))(ReviewCreatedPolicy);\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Title,\n  Button,\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  List,\n  ListItem,\n} from '@patternfly/react-core';\nimport {\n  ProgressBar,\n  LinkWithPermission as Link,\n} from 'PresentationalComponents';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from '@apollo/client/react/hoc';\nimport { usePolicy } from 'Mutations';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nconst EmtpyStateWithErrors = ({ errors }) =>\n  errors && Array.isArray(errors) && errors.length > 0 ? (\n    <EmptyStateBody className=\"wizard-failed-errors\">\n      <List>\n        {errors.map((error) => (\n          <ListItem key={error}>{error}</ListItem>\n        ))}\n      </List>\n    </EmptyStateBody>\n  ) : null;\n\nEmtpyStateWithErrors.propTypes = {\n  errors: propTypes.array,\n};\n\nexport const FinishedCreatePolicy = ({\n  onWizardFinish,\n  cloneFromProfileId,\n  description,\n  name,\n  complianceThreshold,\n  businessObjective,\n  refId,\n  benchmarkId,\n  systems,\n  selectedRuleRefIds,\n  ruleValues: values,\n}) => {\n  const [percent, setPercent] = useState(0);\n  const [message, setMessage] = useState('This usually takes a minute or two.');\n  const [errors, setErrors] = useState(null);\n  const [failed, setFailed] = useState(false);\n  const updatePolicy = usePolicy();\n\n  const onProgress = (progress) => {\n    setPercent(progress * 100);\n  };\n\n  const submitForm = () => {\n    const newPolicy = {\n      cloneFromProfileId,\n      description,\n      name,\n      complianceThreshold,\n      businessObjective: { title: businessObjective },\n      refId,\n      benchmarkId,\n      hosts: systems,\n      selectedRuleRefIds,\n      values,\n    };\n\n    updatePolicy(null, newPolicy, onProgress)\n      .then(({ id }) => {\n        setPercent(100);\n        setMessage();\n        dispatchNotification({\n          variant: 'success',\n          title: `Created policy \"${name}\"`,\n          autoDismiss: true,\n          description: (\n            <span>\n              From the <strong>SCAP Policies</strong> list, open{' '}\n              <Link to={`/scappolicies/${id}`}>{name}</Link>.\n            </span>\n          ),\n        });\n      })\n      .catch((error) => {\n        setMessage(error.networkError?.message);\n        setErrors(error.networkError?.result?.errors);\n        setFailed(true);\n        dispatchNotification({\n          variant: 'danger',\n          title: 'Error creating policy',\n          description: error.message,\n        });\n      });\n  };\n\n  useEffect(() => {\n    submitForm();\n  }, []);\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={WrenchIcon} />\n        <br />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          Creating policy\n        </Title>\n        <EmptyStateBody>\n          <ProgressBar percent={percent} failed={failed} />\n        </EmptyStateBody>\n        <EmptyStateBody className={failed && 'wizard-failed-message'}>\n          {message}\n        </EmptyStateBody>\n        <EmtpyStateWithErrors error={errors} />\n        <EmptyStateSecondaryActions>\n          {(percent === 100 || failed) && (\n            <Button\n              variant={'primary'}\n              ouiaId=\"ReturnToAppButton\"\n              onClick={() => {\n                onWizardFinish();\n              }}\n            >\n              {failed ? 'Back' : 'Return to application'}\n            </Button>\n          )}\n        </EmptyStateSecondaryActions>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nFinishedCreatePolicy.propTypes = {\n  benchmarkId: propTypes.string.isRequired,\n  businessObjective: propTypes.object,\n  cloneFromProfileId: propTypes.string.isRequired,\n  refId: propTypes.string.isRequired,\n  name: propTypes.string.isRequired,\n  description: propTypes.string,\n  systems: propTypes.array,\n  complianceThreshold: propTypes.number,\n  onWizardFinish: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string).isRequired,\n  ruleValues: propTypes.object,\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => {\n    return {\n      benchmarkId: selector(state, 'benchmark'),\n      businessObjective: selector(state, 'businessObjective'),\n      cloneFromProfileId: selector(state, 'profile').id,\n      refId: selector(state, 'refId'),\n      name: selector(state, 'name'),\n      description: selector(state, 'description'),\n      complianceThreshold:\n        parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n      systems: selector(state, 'systems'),\n      selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n      ruleValues: selector(state, 'ruleValues'),\n    };\n  }),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: true,\n    forceUnregisterOnUnmount: true,\n  }),\n  withApollo\n)(FinishedCreatePolicy);\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { formValueSelector, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport { default as EditPolicyRules } from './EditPolicyProfilesRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport {\n  validateBenchmarkPage,\n  validateDetailsPage,\n  validateRulesPage,\n  validateSystemsPage,\n} from './validate';\n\nexport const CreatePolicyForm = ({\n  benchmark,\n  osMajorVersion,\n  complianceThreshold,\n  name,\n  profile,\n  refId,\n  selectedRuleRefIds,\n  systemIds,\n  reset,\n}) => {\n  const history = useHistory();\n  const [stepIdReached, setStepIdReached] = useState(1);\n  const resetAnchor = () => {\n    const { location } = history;\n    if (location.hash) {\n      history.push({ ...location, hash: '' });\n    }\n  };\n\n  const onNext = ({ id }) => {\n    setStepIdReached(stepIdReached < id ? id : stepIdReached);\n    resetAnchor();\n  };\n\n  const onClose = () => {\n    reset();\n    history.push('/scappolicies');\n  };\n\n  const steps = [\n    {\n      id: 1,\n      name: 'Create SCAP policy',\n      component: <CreateSCAPPolicy />,\n      enableNext: validateBenchmarkPage(benchmark, osMajorVersion, profile),\n    },\n    {\n      id: 2,\n      name: 'Details',\n      component: <EditPolicyDetails />,\n      canJumpTo: stepIdReached >= 2,\n      enableNext: validateDetailsPage(name, refId, complianceThreshold),\n    },\n    {\n      id: 3,\n      name: 'Systems',\n      component: <EditPolicySystems />,\n      canJumpTo: stepIdReached >= 3,\n      enableNext: validateSystemsPage(systemIds),\n    },\n    {\n      id: 4,\n      name: 'Rules',\n      component: <EditPolicyRules />,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 4,\n      enableNext: validateRulesPage(selectedRuleRefIds),\n    },\n    {\n      id: 5,\n      name: 'Review',\n      component: <ReviewCreatedPolicy osMajorVersion={osMajorVersion} />,\n      nextButtonText: 'Finish',\n      canJumpTo:\n        validateRulesPage(selectedRuleRefIds) &&\n        systemIds?.length > 0 &&\n        stepIdReached >= 5,\n    },\n    {\n      id: 6,\n      name: 'Finished',\n      component: <FinishedCreatePolicy onWizardFinish={onClose} />,\n      isFinishedStep: true,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 6,\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <Wizard\n        width={1220}\n        className=\"compliance\"\n        isOpen\n        onNext={onNext}\n        onGoToStep={resetAnchor}\n        onBack={resetAnchor}\n        onClose={onClose}\n        title=\"Create SCAP policy\"\n        description=\"Create a new policy for managing SCAP compliance\"\n        steps={steps}\n      />\n    </React.Fragment>\n  );\n};\n\nCreatePolicyForm.propTypes = {\n  benchmark: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  complianceThreshold: propTypes.string,\n  businessObjective: propTypes.object,\n  dispatch: propTypes.func,\n  isOpen: propTypes.bool,\n  name: propTypes.string,\n  onWizardFinish: propTypes.func,\n  profile: propTypes.string,\n  refId: propTypes.string,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string),\n  systemIds: propTypes.arrayOf(propTypes.string),\n  reset: propTypes.func,\n};\n\nCreatePolicyForm.defaultProps = {\n  isOpen: false,\n};\n\nconst CreatePolicy = reduxForm({\n  form: 'policyForm',\n})(CreatePolicyForm);\n\nconst selector = formValueSelector('policyForm');\nexport default connect((state) => ({\n  benchmark: selector(state, 'benchmark'),\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  businessObjective: selector(state, 'businessObjective'),\n  complianceThreshold: selector(state, 'complianceThreshold') || 100,\n  name: selector(state, 'name'),\n  profile: selector(state, 'profile'),\n  refId: selector(state, 'refId'),\n  selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  systemIds: selector(state, 'systems'),\n}))(CreatePolicy);\n","import { Button, Checkbox, ModalVariant, Text } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { DELETE_PROFILE } from 'Mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ComplianceModal } from 'PresentationalComponents';\nimport { dispatchAction } from 'Utilities/Dispatcher';\n\nconst DeletePolicy = () => {\n  const [deleteEnabled, setDeleteEnabled] = useState(false);\n  const location = useLocation();\n  const history = useHistory();\n  const { name, id } = location.state.policy;\n  const onClose = () => {\n    history.push('/scappolicies');\n  };\n\n  const [deletePolicy] = useMutation(DELETE_PROFILE, {\n    onCompleted: () => {\n      dispatchAction(\n        addNotification({\n          variant: 'success',\n          title: `Deleted \"${name}\" and its associated reports`,\n        })\n      );\n      onClose();\n    },\n    onError: (error) => {\n      dispatchAction(\n        addNotification({\n          variant: 'danger',\n          title: 'Error removing policy',\n          description: error.message,\n        })\n      );\n      onClose();\n    },\n  });\n\n  return (\n    <ComplianceModal\n      variant={ModalVariant.small}\n      title=\"Delete policy?\"\n      titleIconVariant=\"warning\"\n      ouiaId=\"DeletePolicyModal\"\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"destroy\"\n          ouiaId=\"DeletePolicyButton\"\n          aria-label=\"delete\"\n          isDisabled={!deleteEnabled}\n          variant=\"danger\"\n          onClick={() => deletePolicy({ variables: { input: { id } } })}\n        >\n          Delete policy and associated reports\n        </Button>,\n        <Button\n          key=\"cancel\"\n          ouiaId=\"DeletePolicyCancelButton\"\n          variant=\"secondary\"\n          onClick={onClose}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <Text className=\"policy-delete-body-text\">\n        Deleting the policy <b>{name}</b> will also delete its associated\n        reports.\n      </Text>\n      <Checkbox\n        label=\"I understand this will delete the policy and all associated reports\"\n        id={`deleting-policy-check-${id}`}\n        isChecked={deleteEnabled}\n        onChange={setDeleteEnabled}\n      />\n    </ComplianceModal>\n  );\n};\n\nDeletePolicy.propTypes = {\n  policy: propTypes.object,\n};\n\nexport default DeletePolicy;\n","import { Button, ModalVariant, TextContent } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { DELETE_REPORT } from 'Mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ComplianceModal } from 'PresentationalComponents';\nimport { dispatchAction } from 'Utilities/Dispatcher';\n\nconst DeleteReport = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const { id } = location.state?.profile;\n  const onClose = () => {\n    history.push(location.state.background);\n  };\n\n  const onDelete = () => {\n    history.push('/reports');\n  };\n\n  const [deleteReport] = useMutation(DELETE_REPORT, {\n    onCompleted: () => {\n      dispatchAction(\n        addNotification({\n          variant: 'success',\n          title: 'Report deleted',\n          description:\n            'Systems associated with this policy will upload reports on the next check-in.',\n        })\n      );\n      onDelete();\n    },\n    onError: (error) => {\n      dispatchAction(\n        addNotification({\n          variant: 'danger',\n          title: 'Error removing report',\n          description: error.message,\n        })\n      );\n      onClose();\n    },\n  });\n  return (\n    <ComplianceModal\n      isOpen\n      variant={ModalVariant.small}\n      title=\"Delete report?\"\n      titleIconVariant=\"warning\"\n      ouiaId=\"DeleteReportModal\"\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"destroy\"\n          ouiaId=\"DeleteReportButton\"\n          aria-label=\"delete\"\n          variant=\"danger\"\n          onClick={() =>\n            deleteReport({\n              variables: {\n                input: {\n                  profileId: id,\n                },\n              },\n            })\n          }\n        >\n          Delete report\n        </Button>,\n        <Button\n          key=\"cancel\"\n          ouiaId=\"DeleteReportCancelButton\"\n          variant=\"secondary\"\n          onClick={() => onClose()}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        Deleting a report is permanent and cannot be undone.\n      </TextContent>\n    </ComplianceModal>\n  );\n};\n\nDeleteReport.propTypes = {\n  onClose: propTypes.func,\n  isModalOpen: propTypes.bool,\n  onDelete: propTypes.func,\n  policyId: propTypes.string,\n};\n\nDeleteReport.defaultProps = {\n  onDelete: () => {},\n  onClose: () => {},\n};\n\nexport default DeleteReport;\n","import gql from 'graphql-tag';\n\nexport const PROFILES_QUERY = gql`\n  query Profiles($filter: String!, $enableRuleTree: Boolean = false) {\n    profiles(search: $filter) {\n      edges {\n        node {\n          id\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          policy {\n            id\n          }\n          policyType\n          benchmark {\n            id\n            refId\n            latestSupportedOsMinorVersions\n            osMajorVersion\n            version\n            ruleTree @include(if: $enableRuleTree)\n            valueDefinitions {\n              defaultValue\n              description\n              id\n              refId\n              title\n              valueType\n            }\n          }\n          rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n          values\n        }\n      }\n    }\n  }\n`;\n\nexport const BENCHMARKS_QUERY = gql`\n  query Benchmarks($filter: String!, $enableRuleTree: Boolean = false) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        ruleTree @include(if: $enableRuleTree)\n        valueDefinitions {\n          defaultValue\n          description\n          id\n          refId\n          title\n          valueType\n        }\n        profiles {\n          id\n          refId\n          ssgVersion\n        }\n      }\n    }\n  }\n`;\n\nexport const MULTIVERSION_QUERY = gql`\n  query Profile($policyId: String!, $enableRuleTree: Boolean = false) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      external\n      description\n      totalHostCount\n      compliantHostCount\n      complianceThreshold\n      osMajorVersion\n      supportedOsVersions\n      lastScanned\n      policyType\n      policy {\n        id\n        name\n        refId\n        profiles {\n          id\n          parentProfileId\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          values\n          benchmark {\n            id\n            title\n            latestSupportedOsMinorVersions\n            osMajorVersion\n            version\n            ruleTree @include(if: $enableRuleTree)\n          }\n          rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n            values\n          }\n        }\n      }\n      businessObjective {\n        id\n        title\n      }\n      hosts {\n        id\n        osMinorVersion\n        osMajorVersion\n      }\n    }\n  }\n`;\n\nexport const RULE_VALUE_DEFINITIONS_QUERY = gql`\n  query Profile($policyId: String!, $enableRuleTree: Boolean = false) {\n    profile(id: $policyId) {\n      id\n      policy {\n        id\n        refId\n        profiles {\n          id\n          parentProfileId\n          refId\n          benchmark {\n            id\n            ruleTree @include(if: $enableRuleTree)\n            valueDefinitions {\n              defaultValue\n              description\n              id\n              refId\n              title\n              valueType\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  Text,\n  TextContent,\n  Title,\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport { sortingByProp } from 'Utilities/helpers';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\nimport { BENCHMARKS_QUERY } from './constants';\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst EditPolicyRulesTabEmptyState = () => (\n  <EmptyState>\n    <Title headingLevel=\"h5\" size=\"lg\">\n      No rules can be configured\n    </Title>\n    <EmptyStateBody>\n      This policy has no associated systems, and therefore no rules can be\n      configured.\n    </EmptyStateBody>\n    <EmptyStateBody>\n      Add at least one system to configure rules for this policy.\n    </EmptyStateBody>\n  </EmptyState>\n);\n\nexport const toTabsData = (policy, osMinorVersionCounts, benchmarks) =>\n  Object.values(osMinorVersionCounts)\n    .sort(sortingByProp('osMinorVersion', 'desc'))\n    .map(({ osMinorVersion, count: systemCount }) => {\n      osMinorVersion = `${osMinorVersion}`;\n      let profile = policy.policy.profiles.find(\n        (profile) => profile.osMinorVersion === osMinorVersion\n      );\n      let osMajorVersion = policy.osMajorVersion;\n\n      if (!profile && benchmarks) {\n        const benchmark = getBenchmarkBySupportedOsMinor(\n          benchmarks,\n          osMinorVersion\n        );\n        if (benchmark) {\n          const benchmarkProfile = getBenchmarkProfile(benchmark, policy.refId);\n          if (benchmarkProfile) {\n            profile = policy.policy.profiles.find(\n              (profile) =>\n                profile.parentProfileId === benchmarkProfile.id &&\n                profile.osMinorVersion === osMinorVersion\n            );\n\n            profile = {\n              ...benchmarkProfile,\n              benchmark,\n              osMajorVersion,\n              ...profile,\n            };\n          }\n        }\n      }\n\n      return {\n        profile,\n        systemCount,\n        newOsMinorVersion: osMinorVersion,\n      };\n    })\n    .filter(({ profile, newOsMinorVersion }) => !!profile && newOsMinorVersion);\n\nexport const EditPolicyRulesTab = ({\n  policy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  osMinorVersionCounts,\n  setRuleValues,\n  ruleValues: ruleValuesProp,\n}) => {\n  const osMajorVersion = policy?.osMajorVersion;\n  const osMinorVersions = Object.keys(osMinorVersionCounts).sort();\n  const benchmarkSearch =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const {\n    data: benchmarksData,\n    error,\n    loading,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter: benchmarkSearch,\n    },\n    skip: osMinorVersions.length === 0,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  const tabsData = toTabsData(policy, osMinorVersionCounts, benchmarks);\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n\n  const dataState = !loading && tabsData?.length > 0 ? tabsData : undefined;\n\n  useEffect(() => {\n    if (policy.policy.profiles) {\n      const profiles = policy.policy.profiles;\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      setSelectedRuleRefIds((prevSelection) => {\n        const newSelection = profilesWithRulesToSelection(\n          profilesWithOs,\n          prevSelection\n        );\n        return newSelection;\n      });\n    }\n  }, [policy.policy.profiles]);\n\n  const ruleValues = (policy) => {\n    const mergeValues = (policyId, values) => {\n      return {\n        ...values,\n        ...(ruleValuesProp?.[policyId] || {}),\n      };\n    };\n\n    return Object.fromEntries(\n      policy?.policy?.profiles?.map(\n        ({ id, values, benchmark: { valueDefinitions } }) => [\n          id,\n          mergeValues(id, values, valueDefinitions),\n        ]\n      ) || []\n    );\n  };\n\n  return (\n    <StateViewWithError\n      stateValues={{\n        error,\n        data: !error && dataState,\n        loading,\n        empty: !loading && !dataState && !error,\n      }}\n    >\n      <StateViewPart stateKey=\"loading\">\n        <EmptyTable>\n          <Spinner />\n        </EmptyTable>\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <TextContent>\n          <Text>\n            Different release versions of RHEL are associated with different\n            versions of the SCAP Security Guide (SSG), therefore each release\n            must be customized independently.\n          </Text>\n        </TextContent>\n        <TabbedRules\n          resetLink\n          rulesPageLink\n          selectedFilter\n          remediationsEnabled={false}\n          columns={[Columns.Name, Columns.Severity, Columns.Remediation]}\n          tabsData={tabsData}\n          ruleValues={ruleValues(policy)}\n          selectedRuleRefIds={selectedRuleRefIds}\n          setSelectedRuleRefIds={setSelectedRuleRefIds}\n          setRuleValues={setRuleValues}\n          level={1}\n          ouiaId=\"RHELVersions\"\n        />\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">\n        <EditPolicyRulesTabEmptyState />\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nEditPolicyRulesTab.propTypes = {\n  setNewRuleTabs: propTypes.func,\n  policy: propTypes.object,\n  osMinorVersionCounts: propTypes.shape({\n    osMinorVersion: propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    }),\n  }),\n  selectedRuleRefIds: propTypes.array,\n  setSelectedRuleRefIds: propTypes.func,\n  setRuleValues: propTypes.func,\n  ruleValues: propTypes.array,\n};\n\nexport default EditPolicyRulesTab;\n","import React from 'react';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { SystemsTable } from 'SmartComponents';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>Connect RHEL {osMajorVersion} systems to Insights.</Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst EditPolicySystemsTab = ({ policy, onSystemSelect, selectedSystems }) => {\n  const { id: policyId, osMajorVersion, supportedOsVersions } = policy;\n  const osMinorVersions = supportedOsVersions.map(\n    (version) => version.split('.')[1]\n  );\n  const osFilter =\n    osMajorVersion &&\n    `os_major_version = ${osMajorVersion} AND os_minor_version ^ (${osMinorVersions.join(\n      ','\n    )})`;\n  const defaultFilter = osFilter\n    ? `${osFilter} or policy_id = ${policyId}`\n    : `policy_id = ${policyId}`;\n\n  return (\n    <React.Fragment>\n      <SystemsTable\n        columns={[\n          Columns.Name,\n          Columns.inventoryColumn('tags'),\n          Columns.OperatingSystem,\n        ]}\n        showOsMinorVersionFilter={[osMajorVersion]}\n        prependComponent={<PrependComponent osMajorVersion={osMajorVersion} />}\n        emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n        compact\n        showActions={false}\n        defaultFilter={defaultFilter}\n        enableExport={false}\n        remediationsEnabled={false}\n        preselectedSystems={selectedSystems}\n        onSelect={onSystemSelect}\n      />\n    </React.Fragment>\n  );\n};\n\nEditPolicySystemsTab.propTypes = {\n  policy: propTypes.object,\n  newRuleTabs: propTypes.bool,\n  onSystemSelect: propTypes.func,\n  selectedSystems: propTypes.array,\n};\n\nexport default EditPolicySystemsTab;\n","import React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { Alert, AlertActionLink } from '@patternfly/react-core';\n\nconst NewRulesAlert = () => {\n  const history = useHistory();\n  const location = useLocation();\n\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title=\"You selected a system that has a release version previously not included in this policy.\"\n      actionLinks={\n        <AlertActionLink\n          onClick={() => history.push({ ...location, hash: '#rules' })}\n        >\n          Open rule editing\n        </AlertActionLink>\n      }\n    >\n      <p>\n        If you have edited any rules for this policy, you will need to do so for\n        this release version as well.\n      </p>\n    </Alert>\n  );\n};\n\nexport default NewRulesAlert;\n","import React, { useCallback, useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { Form, Tab, TabTitleText } from '@patternfly/react-core';\nimport { RoutedTabs } from 'PresentationalComponents';\nimport EditPolicyRulesTab from './EditPolicyRulesTab';\nimport EditPolicySystemsTab from './EditPolicySystemsTab';\nimport NewRulesAlert from './components/NewRulesAlert';\nimport { mapCountOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport { profilesWithRulesToSelection } from 'PresentationalComponents/TabbedRules';\nimport { thresholdValid } from '../CreatePolicy/validate';\nimport { useNewRulesAlertState } from './hooks/index';\n\nconst profilesToOsMinorMap = (profiles, hosts) =>\n  (profiles || []).reduce((acc, profile) => {\n    if (profile.osMinorVersion !== '') {\n      acc[profile.osMinorVersion] ||= {\n        osMinorVersion: profile.osMinorVersion,\n        count: 0,\n      };\n    }\n\n    return acc;\n  }, mapCountOsMinorVersions(hosts || []));\n\nconst EditPolicyForm = ({\n  policy,\n  setUpdatedPolicy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  selectedSystems,\n  setSelectedSystems,\n  setRuleValues,\n  ruleValues,\n}) => {\n  const policyProfiles = policy?.policy?.profiles || [];\n  const [osMinorVersionCounts, setOsMinorVersionCounts] = useState({});\n  const [newRulesAlert, setNewRulesAlert] = useNewRulesAlertState(false);\n\n  const handleSystemSelect = useCallback(\n    (newSelectedSystems) => {\n      const policyMinorVersions = policy.hosts.map(\n        ({ osMinorVersion }) => osMinorVersion\n      );\n      const hasNewOsMinorVersions =\n        newSelectedSystems.filter(\n          ({ osMinorVersion }) => !policyMinorVersions.includes(osMinorVersion)\n        ).length > 0;\n\n      setSelectedSystems(newSelectedSystems);\n      setNewRulesAlert(hasNewOsMinorVersions);\n      setOsMinorVersionCounts(\n        profilesToOsMinorMap(policyProfiles, newSelectedSystems)\n      );\n    },\n    [policyProfiles, selectedRuleRefIds]\n  );\n\n  useEffect(() => {\n    if (policy) {\n      const complianceThresholdValid = thresholdValid(\n        policy.complianceThreshold\n      );\n      const profilesWithOsMinor = policyProfiles.filter(\n        ({ osMinorVersion }) => !!osMinorVersion\n      );\n      setUpdatedPolicy({\n        ...policy,\n        complianceThresholdValid,\n      });\n\n      setSelectedRuleRefIds(profilesWithRulesToSelection(profilesWithOsMinor));\n      handleSystemSelect(policy.hosts);\n    }\n  }, [policy]);\n\n  return (\n    <Form>\n      <RoutedTabs ouiaId=\"EditSystems\" defaultTab=\"systems\" id=\"policy-tabs\">\n        <Tab\n          eventKey=\"rules\"\n          ouiaId=\"Rules\"\n          title={<TabTitleText>Rules</TabTitleText>}\n        >\n          <EditPolicyRulesTab\n            policy={policy}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            setRuleValues={setRuleValues}\n            ruleValues={ruleValues}\n            selectedRuleRefIds={selectedRuleRefIds}\n            osMinorVersionCounts={osMinorVersionCounts}\n          />\n        </Tab>\n        <Tab\n          eventKey=\"systems\"\n          ouiaId=\"Systems\"\n          title={<TabTitleText>Systems</TabTitleText>}\n        >\n          <EditPolicySystemsTab\n            policy={policy}\n            selectedSystems={selectedSystems}\n            onSystemSelect={handleSystemSelect}\n          />\n          {newRulesAlert && <NewRulesAlert />}\n        </Tab>\n      </RoutedTabs>\n    </Form>\n  );\n};\n\nEditPolicyForm.propTypes = {\n  policy: propTypes.object,\n  updatedPolicy: propTypes.object,\n  setUpdatedPolicy: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.object),\n  setSelectedRuleRefIds: propTypes.func,\n  setSelectedSystems: propTypes.func,\n  selectedSystems: propTypes.array,\n  setRuleValues: propTypes.func,\n  ruleValues: propTypes.array,\n};\n\nexport default EditPolicyForm;\n","import { useState } from 'react';\n\nexport const useNewRulesAlertState = (...args) => useState(...args);\n","import { useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { MULTIVERSION_QUERY, RULE_VALUE_DEFINITIONS_QUERY } from '../constants';\n\nconst appendBenchmark = (profileWithValueDefinitions) => (profile) => ({\n  ...profile,\n  benchmark: {\n    ...profile.benchmark,\n    ...profileWithValueDefinitions.profile.policy.profiles.find(\n      ({ id }) => profile.id === id\n    ).benchmark,\n  },\n});\n\nconst mergeQueries = (profileData, profileWithValueDefinitions) => {\n  const appendBenchmarkFunction = appendBenchmark(profileWithValueDefinitions);\n\n  return {\n    ...profileData?.profile,\n    policy: {\n      ...profileData.profile.policy,\n      profiles: profileData.profile.policy?.profiles?.map(\n        appendBenchmarkFunction\n      ),\n    },\n  };\n};\n\nconst usePolicyQueries = () => {\n  const { policy_id: policyId } = useParams();\n  const { data, loading, error } = useQuery(MULTIVERSION_QUERY, {\n    variables: { policyId },\n  });\n  const {\n    data: ruleValueDefinitionsData,\n    loading: ruleValueDefinitionsLoading,\n    error: ruleValueDefinitionsError,\n  } = useQuery(RULE_VALUE_DEFINITIONS_QUERY, {\n    variables: { policyId },\n  });\n\n  const policy = useMemo(\n    () =>\n      data?.profile && ruleValueDefinitionsData?.profile\n        ? mergeQueries(data, ruleValueDefinitionsData)\n        : undefined,\n    [data, ruleValueDefinitionsData]\n  );\n\n  return {\n    policy,\n    loading: loading && ruleValueDefinitionsLoading,\n    error: error || ruleValueDefinitionsError,\n  };\n};\n\nexport default usePolicyQueries;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Button, Spinner } from '@patternfly/react-core';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport {\n  ComplianceModal,\n  StateViewWithError,\n  StateViewPart,\n} from 'PresentationalComponents';\nimport EditPolicyForm from './EditPolicyForm';\nimport { useOnSave, useLinkToPolicy } from './hooks';\nimport usePolicyQueries from './hooks/usePolicyQueries.js';\n\nexport const EditPolicy = ({ route }) => {\n  const { policy, loading, error } = usePolicyQueries();\n\n  const linkToPolicy = useLinkToPolicy();\n  const [updatedPolicy, setUpdatedPolicy] = useState(null);\n  const [selectedRuleRefIds, setSelectedRuleRefIds] = useState([]);\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const [ruleValues, setRuleValuesState] = useState({});\n\n  const saveEnabled = updatedPolicy && !updatedPolicy.complianceThresholdValid;\n  const updatedPolicyHostsAndRules = {\n    ...updatedPolicy,\n    selectedRuleRefIds,\n    hosts: selectedSystems,\n    values: ruleValues,\n  };\n  const [isSaving, onSave] = useOnSave(policy, updatedPolicyHostsAndRules);\n\n  const setRuleValues = (policyId, valueDefinition, valueValue) => {\n    const existingValues = Object.fromEntries(\n      policy?.policy.profiles.map((profile) => {\n        return [profile.id, profile.values];\n      }) || []\n    );\n\n    setRuleValuesState((currentValues) => ({\n      ...existingValues,\n      ...currentValues,\n      [policyId]: {\n        ...existingValues[policyId],\n        ...currentValues[policyId],\n        [valueDefinition.id]: valueValue,\n      },\n    }));\n  };\n\n  const actions = [\n    <Button\n      isDisabled={saveEnabled}\n      key=\"save\"\n      ouiaId=\"EditPolicySaveButton\"\n      variant=\"primary\"\n      spinnerAriaValueText=\"Saving\"\n      isLoading={isSaving}\n      onClick={onSave}\n    >\n      Save\n    </Button>,\n    <Button\n      key=\"cancel\"\n      ouiaId=\"EditPolicyCancelButton\"\n      variant=\"link\"\n      onClick={() => linkToPolicy()}\n    >\n      Cancel\n    </Button>,\n  ];\n\n  useTitleEntity(route, policy?.name);\n\n  return (\n    <ComplianceModal\n      isOpen\n      position={'top'}\n      style={{ minHeight: '350px' }}\n      variant={'large'}\n      ouiaId=\"EditPolicyModal\"\n      title={`Edit ${policy ? policy.name : ''}`}\n      onClose={() => linkToPolicy()}\n      actions={actions}\n    >\n      <StateViewWithError stateValues={{ policy, loading, error }}>\n        <StateViewPart stateKey=\"loading\">\n          <Spinner />\n        </StateViewPart>\n        <StateViewPart stateKey=\"policy\">\n          <EditPolicyForm\n            {...{\n              policy,\n              updatedPolicy,\n              setUpdatedPolicy,\n              selectedRuleRefIds,\n              setSelectedRuleRefIds,\n              selectedSystems,\n              setSelectedSystems,\n              setRuleValues,\n              ruleValues,\n            }}\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </ComplianceModal>\n  );\n};\n\nEditPolicy.propTypes = {\n  route: propTypes.object,\n};\n\nexport default EditPolicy;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\n\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Truncate from '@redhat-cloud-services/frontend-components/Truncate';\nimport {\n  UnsupportedSSGVersion,\n  ComplianceScore as PresentationalComplianceScore,\n  LinkWithPermission as Link,\n} from 'PresentationalComponents';\nimport {\n  // profilesRulesFailed,\n  complianceScoreData,\n  NEVER,\n} from 'Utilities/ruleHelpers';\n\nconst SystemLink = ({ id, children }) => (\n  <Link to={{ pathname: `/systems/${id}` }}>{children}</Link>\n);\n\nSystemLink.propTypes = {\n  id: propTypes.string,\n  children: propTypes.node,\n};\n\nexport const Name = ({\n  id,\n  name,\n  osMajorVersion,\n  osMinorVersion,\n  showOsInfo = false,\n  showLink = false,\n}) => {\n  const hasOsInfo = (osMajorVersion, osMinorVersion) =>\n    !!osMajorVersion && !!osMinorVersion && showOsInfo;\n\n  return (\n    <TextContent>\n      {showLink ? <SystemLink {...{ id }}>{name}</SystemLink> : name}\n\n      {hasOsInfo(osMajorVersion, osMinorVersion) && (\n        <Text component={TextVariants.small}>\n          RHEL {osMajorVersion}.{osMinorVersion}\n        </Text>\n      )}\n    </TextContent>\n  );\n};\n\nName.propTypes = {\n  id: propTypes.string,\n  name: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersion: propTypes.string,\n  showOsInfo: propTypes.bool,\n  showLink: propTypes.bool,\n};\n\nexport const profilesSsgVersions = (profiles) =>\n  profiles\n    .map((p) => p.ssgVersion)\n    .filter((version) => !!version)\n    .join(', ');\n\nexport const SSGVersion = ({ ssgVersion = 'Not available', supported }) =>\n  supported ? (\n    ssgVersion\n  ) : (\n    <UnsupportedSSGVersion messageVariant=\"singular\">\n      {ssgVersion}\n    </UnsupportedSSGVersion>\n  );\n\nSSGVersion.propTypes = {\n  supported: propTypes.bool,\n  ssgVersion: propTypes.string,\n};\n\nexport const SSGVersions = ({ testResultProfiles = [] }) =>\n  testResultProfiles.length !== 0\n    ? testResultProfiles.map((profile) => (\n        <SSGVersion\n          key={`ssgversion-${profile.id}`}\n          ssgVersion={profile?.benchmark?.version}\n          supported={profile?.supported}\n        />\n      ))\n    : 'Unknown';\n\nSSGVersions.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const Policies = ({ policies }) =>\n  (policies || []).length > 0 && (\n    <Truncate\n      inline\n      text={policies.map((p) => p.name).join(', ')}\n      length={215}\n    />\n  );\n\nPolicies.propTypes = {\n  policies: propTypes.array,\n};\n\nexport const FailedRules = ({ id, testResultProfiles }) => {\n  const rulesFailed = testResultProfiles.reduce(\n    (acc, { rulesFailed }) => acc + parseInt(rulesFailed || 0),\n    0\n  );\n\n  return (\n    <SystemLink {...{ id }}>{rulesFailed > 0 ? rulesFailed : 'N/A'}</SystemLink>\n  );\n};\n\nFailedRules.propTypes = {\n  id: propTypes.string,\n  testResultProfiles: propTypes.array,\n};\n\nexport { complianceScoreData };\nexport const ComplianceScore = ({ testResultProfiles }) => {\n  const { score, supported, compliant } = testResultProfiles[0] || {};\n  return testResultProfiles.length > 0 ? (\n    <PresentationalComplianceScore {...{ score, supported, compliant }} />\n  ) : (\n    'N/A'\n  );\n};\n\nComplianceScore.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nconst NeverScanned = () => (\n  <Tooltip\n    position=\"right\"\n    content={\n      <Fragment>\n        This system has never returned a report for this policy. This may be\n        because it is disconnected, or the insights-client on this system is not\n        configured to use Compliance.\n      </Fragment>\n    }\n  >\n    <div>\n      <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n      {' ' + NEVER}\n    </div>\n  </Tooltip>\n);\n\nexport const lastScanned = (profiles) => {\n  const dates = profiles.map((profile) => new Date(profile.lastScanned));\n  const last = new Date(\n    Math.max.apply(\n      null,\n      dates.filter((date) => isFinite(date))\n    )\n  );\n  const result =\n    last instanceof Date && isFinite(last) ? last : <NeverScanned />;\n\n  return result;\n};\n\nexport const LastScanned = ({ testResultProfiles: profiles }) => {\n  const lastScannedDate = lastScanned(profiles || []);\n\n  return lastScannedDate instanceof Date ? (\n    <DateFormat date={Date.parse(lastScannedDate)} type=\"relative\" />\n  ) : (\n    lastScannedDate\n  );\n};\n\nLastScanned.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const operatingSystemString = ({ osMinorVersion, osMajorVersion }) =>\n  `RHEL ${osMajorVersion}.${osMinorVersion}`;\n\nexport const OperatingSystem = (system) => operatingSystemString(system);\n","import React from 'react';\nimport { nowrap } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport { complianceScoreString } from 'PresentationalComponents';\nimport { renderComponent } from 'Utilities/helpers';\n\nimport {\n  Name as NameCell,\n  ComplianceScore as ComplianceScoreCell,\n  FailedRules as FailedRulesCell,\n  LastScanned as LastScannedCell,\n  Policies as PoliciesCell,\n  SSGVersions as SsgVersionCell,\n  complianceScoreData,\n  lastScanned,\n  operatingSystemString,\n  OperatingSystem as OperatingSystemCell,\n} from './Cells';\n\nconst disableSorting = { isStatic: true };\n\nexport const compileColumnRenderFunc = ({ cell, ...column }) => ({\n  ...column,\n  renderFunc: renderComponent(cell, column.props),\n});\n\nexport const customColumn = (column, props) =>\n  compileColumnRenderFunc({\n    ...column,\n    props: {\n      ...column.props,\n      ...props,\n    },\n  });\n\nexport const Name = compileColumnRenderFunc({\n  key: 'name',\n  title: 'Name',\n  sortBy: ['name'],\n  props: {\n    width: 40,\n  },\n  renderExport: (system) => `${system.name} (${operatingSystemString(system)})`,\n  cell: NameCell,\n});\n\nexport const customName = (props) => ({\n  ...Name,\n  props: {\n    ...Name.props,\n    ...props,\n  },\n  renderFunc: renderComponent(NameCell, props),\n});\n\nexport const SsgVersion = {\n  title: 'SSG version',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  sortBy: ['ssg_version'],\n  key: 'ssg_version',\n  renderExport: (testResultProfiles) =>\n    testResultProfiles\n      .map(\n        ({ supported, benchmark: { version } }) =>\n          `${!supported ? '!' : ''}${version}`\n      )\n      .join(', '),\n  renderFunc: renderComponent(SsgVersionCell),\n};\n\nexport const Policies = {\n  title: 'Policies',\n  transforms: [nowrap],\n  key: 'policies',\n  exportKey: 'policies',\n  renderExport: (policies) => policies.map(({ name }) => name).join(', '),\n  props: {\n    width: 40,\n    ...disableSorting,\n  },\n  renderFunc: renderComponent(PoliciesCell),\n};\n\nexport const FailedRules = {\n  title: 'Failed rules',\n  key: 'failedRules',\n  exportKey: 'profiles',\n  transforms: [nowrap],\n  props: {\n    width: 5,\n    ...disableSorting,\n  },\n  renderExport: (profiles) =>\n    profiles.reduce(\n      (failedRules, { rulesFailed }) => failedRules + rulesFailed,\n      0\n    ),\n  renderFunc: renderComponent(FailedRulesCell),\n};\n\nexport const ComplianceScore = {\n  title: 'Compliance score',\n  key: 'complianceScore',\n  exportKey: 'testResultProfiles',\n  transforms: [nowrap],\n  props: {\n    width: 5,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) =>\n    complianceScoreString(complianceScoreData(testResultProfiles)).trim(),\n  renderFunc: renderComponent(ComplianceScoreCell),\n};\n\nexport const LastScanned = {\n  title: 'Last scanned',\n  key: 'lastScanned',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  props: {\n    width: 10,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) => lastScanned(testResultProfiles),\n  renderFunc: renderComponent(LastScannedCell),\n};\n\nexport const OperatingSystem = compileColumnRenderFunc({\n  title: 'Operating system',\n  key: 'operatingSystem',\n  sortBy: ['osMajorVersion', 'osMinorVersion'],\n  transforms: [nowrap],\n  renderExport: (cell) => operatingSystemString(cell),\n  cell: OperatingSystemCell,\n});\n\nexport const OS = compileColumnRenderFunc({\n  title: (\n    <Tooltip content={<span>Operating System</span>}>\n      <span>OS</span>\n    </Tooltip>\n  ),\n  original: 'Operating System',\n  key: 'operatingSystem',\n  dataLabel: 'OS',\n  transforms: [nowrap],\n  sortBy: ['osMajorVersion', 'osMinorVersion'],\n  props: {\n    width: 10,\n  },\n  renderExport: (cell) => operatingSystemString(cell),\n  cell: OperatingSystemCell,\n});\n\nexport const inventoryColumn = (column, props) => ({\n  key: column,\n  ...props,\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Skeleton, {\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { registryDecorator } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport {\n  DetailWrapper,\n  InventoryDetailHead,\n} from '@redhat-cloud-services/frontend-components/Inventory';\n\n@registryDecorator()\nclass InventoryDetails extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <DetailWrapper\n        onLoad={({ mergeWithDetail }) =>\n          this.getRegistry().register({\n            ...mergeWithDetail(),\n          })\n        }\n        inventoryId={this.props.inventoryId}\n      >\n        <InventoryDetailHead fallback={<Skeleton size={SkeletonSize.md} />} />\n      </DetailWrapper>\n    );\n  }\n}\n\nInventoryDetails.propTypes = {\n  entity: propTypes.object,\n  inventoryId: propTypes.string,\n};\n\nconst ConnectedInventoryDetails = (props) => {\n  return <InventoryDetails {...props} />;\n};\n\nexport default ConnectedInventoryDetails;\n","import { gql } from 'graphql-tag';\n\nexport const DEFAULT_SYSTEMS_PER_BATCH = 3;\nexport const DEFAULT_CONNCURRENT_REQUESTS_FOR_ISSUES = 3;\n\nexport const GET_SYSTEMS_ISSUES = gql`\n  query getSystems(\n    $filter: String!\n    $policyId: ID\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          testResultProfiles(policyId: $policyId) {\n            id\n            refId\n            score\n            lastScanned\n            compliant\n            rulesFailed\n            rulesPassed\n            supported\n            osMajorVersion\n            rules {\n              id\n              refId\n              precedence\n              compliant\n              remediationAvailable\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\nimport { default as RemediationRemediationButton } from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport { useIssuesFetch } from './hooks';\nimport FallbackButton from './components/FallBackButton';\n\nconst RemediationButton = ({\n  rules,\n  systems,\n  policyId,\n  onRemediationCreated,\n  ...buttonProps\n}) => {\n  const { isLoading: isLoadingIssues, fetch } = useIssuesFetch(\n    policyId,\n    rules,\n    systems\n  );\n\n  return (\n    <RemediationRemediationButton\n      isDisabled={systems?.length === 0 || isLoadingIssues}\n      onRemediationCreated={(result) => {\n        dispatchNotification(result.getNotification());\n      }}\n      dataProvider={fetch}\n      buttonProps={{\n        ouiaId: 'RemediateButton',\n        isLoading: isLoadingIssues,\n      }}\n      fallback={<FallbackButton />}\n      {...buttonProps}\n    >\n      Remediate\n    </RemediationRemediationButton>\n  );\n};\n\nRemediationButton.propTypes = {\n  rules: propTypes.array,\n  systems: propTypes.array,\n  onRemediationCreated: propTypes.func,\n  policyId: propTypes.string,\n};\n\nexport default RemediationButton;\n","import { useCallback } from 'react';\nimport { useApolloClient } from '@apollo/client';\nimport usePromiseQueue from 'Utilities/hooks/usePromiseQueue';\nimport {\n  GET_SYSTEMS_ISSUES,\n  DEFAULT_SYSTEMS_PER_BATCH,\n  DEFAULT_CONNCURRENT_REQUESTS_FOR_ISSUES,\n} from './constants';\nimport { remediationData } from './helpers';\n\nexport const useIssuesFetch = (policyId, rules, systems) => {\n  const client = useApolloClient();\n  const { isResolving, results, resolve } = usePromiseQueue(\n    DEFAULT_CONNCURRENT_REQUESTS_FOR_ISSUES\n  );\n\n  const fetchFunction = useCallback(\n    async (perPage, page) => {\n      const systemIds =\n        systems.length > 0 ? `id ^ (${systems.join(',')})` : undefined;\n\n      return (\n        await client.query({\n          query: GET_SYSTEMS_ISSUES,\n          fetchPolicy: 'no-cache',\n          variables: {\n            perPage,\n            page,\n            filter: `(${systemIds}) AND policy_id = ${policyId}`,\n            policyId,\n          },\n        })\n      ).data.systems;\n    },\n    [systems, policyId]\n  );\n\n  const fetch = useCallback(\n    async (batchSize = DEFAULT_SYSTEMS_PER_BATCH) => {\n      const pages = Math.ceil(systems?.length / batchSize) || 1;\n      const results = await resolve(\n        [...new Array(pages)].map(\n          (_, pageIdx) => () => fetchFunction(batchSize, pageIdx + 1)\n        )\n      );\n\n      return results && remediationData(results);\n    },\n    [systems]\n  );\n\n  return {\n    isLoading: isResolving,\n    data: results && remediationData(results),\n    fetch,\n  };\n};\n","import gql from 'graphql-tag';\nimport pickBy from 'lodash/pickBy';\nimport {\n  systemsPolicyFilterConfiguration,\n  systemsOsFilterConfiguration,\n  systemsOsMinorFilterConfiguration,\n} from '@/constants';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { entitiesReducer } from 'Store/Reducers/SystemStore';\n\nexport const GET_MINIMAL_SYSTEMS = gql`\n  query getSystems(\n    $filter: String!\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n          osMinorVersion\n          culledTimestamp\n          staleWarningTimestamp\n          staleTimestamp\n          insightsId\n          lastScanned\n          updated\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_SYSTEMS_OSES = gql`\n  query getSystems($filter: String!) {\n    systems(search: $filter) {\n      osVersions\n    }\n  }\n`;\n\nexport const policyFilter = (policies, osFilter) => [\n  ...systemsPolicyFilterConfiguration(policies),\n  ...(osFilter ? systemsOsFilterConfiguration(policies) : []),\n];\n\nexport const osMinorVersionFilter = (...args) =>\n  systemsOsMinorFilterConfiguration(...args);\n\nexport const initFilterState = (filterConfig) =>\n  pickBy(filterConfig.initialDefaultState(), (value) => !!value);\n\nexport const defaultOnLoad =\n  (columns) =>\n  ({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n    getRegistry().register({\n      ...mergeWithEntities(entitiesReducer(INVENTORY_ACTION_TYPES, columns)),\n    });\n\nexport const ssgVersionFilter = (ssgVersions) => [\n  {\n    type: conditionalFilterType.checkbox,\n    label: 'SSG Version',\n    filterString: (value) => `ssg_version = ${value}`,\n    items: ssgVersions.map((ssgVersion) => ({\n      label: ssgVersion,\n      value: ssgVersion,\n    })),\n  },\n];\n","import React, { useEffect, useLayoutEffect, useState } from 'react';\nimport { useApolloClient, useQuery } from '@apollo/client';\nimport { useDispatch } from 'react-redux';\nimport { Spinner } from '@patternfly/react-core';\nimport debounce from '@redhat-cloud-services/frontend-components-utilities/debounce';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport { osMinorVersionFilter, GET_SYSTEMS_OSES } from './constants';\nimport useExport from 'Utilities/hooks/useTableTools/useExport';\nimport { useBulkSelect } from 'Utilities/hooks/useTableTools/useBulkSelect';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\nimport usePromiseQueue from 'Utilities/hooks/usePromiseQueue';\n\nconst groupByMajorVersion = (versions = [], showFilter = []) => {\n  const showVersion = (version) => {\n    if (showFilter.length > 0) {\n      return showFilter.map(String).includes(String(version));\n    } else {\n      return true;\n    }\n  };\n\n  return versions.reduce((acc, currentValue) => {\n    if (showVersion(currentValue.major)) {\n      acc[String(currentValue.major)] = [\n        ...new Set([...(acc[currentValue.major] || []), currentValue.minor]),\n      ];\n    }\n\n    return acc;\n  }, []);\n};\n\nexport const useOsMinorVersionFilter = (showFilter, fetchArguments = {}) => {\n  let { data } = useQuery(GET_SYSTEMS_OSES, {\n    skip: !showFilter,\n    ...fetchArguments,\n  });\n  const { osVersions } = data?.systems || {};\n\n  return showFilter\n    ? osMinorVersionFilter(groupByMajorVersion(osVersions, showFilter))\n    : [];\n};\n\nexport const useSystemsFilter = (\n  filterString,\n  showOnlySystemsWithTestResults,\n  defaultFilter\n) => {\n  const combindedFilter = [\n    ...(showOnlySystemsWithTestResults ? ['has_test_results = true'] : []),\n    ...(filterString?.length > 0 ? [filterString] : []),\n  ].join(' and ');\n  const filter = defaultFilter\n    ? `(${defaultFilter})` +\n      (combindedFilter ? ` and (${combindedFilter})` : '')\n    : combindedFilter;\n\n  return filter;\n};\n\nconst renameInventoryAttributes = ({\n  culledTimestamp,\n  staleWarningTimestamp,\n  staleTimestamp,\n  insightsId,\n  ...system\n}) => ({\n  ...system,\n  insights_id: insightsId,\n  culled_timestamp: culledTimestamp,\n  stale_warning_timestamp: staleWarningTimestamp,\n  stale_timestamp: staleTimestamp,\n});\n\nexport const useFetchSystems = ({\n  query,\n  onComplete,\n  variables = {},\n  onError,\n}) => {\n  const client = useApolloClient();\n\n  return (perPage, page, requestVariables = {}) =>\n    client\n      .query({\n        query,\n        fetchResults: true,\n        fetchPolicy: 'no-cache',\n        variables: {\n          perPage,\n          page,\n          ...variables,\n          ...requestVariables,\n        },\n      })\n      .then(({ data }) => {\n        const systems = data?.systems?.edges?.map((e) => e.node) || [];\n        const entities = systemsWithRuleObjectsFailed(systems).map(\n          renameInventoryAttributes\n        );\n        const result = {\n          entities,\n          meta: {\n            ...(requestVariables.tags && { tags: requestVariables.tags }),\n            totalCount: data?.systems?.totalCount || 0,\n          },\n        };\n\n        onComplete && onComplete(result);\n        return result;\n      })\n      .catch((error) => {\n        if (onError) {\n          onError(error);\n          return { entities: [], meta: { totalCount: 0 } };\n        } else {\n          throw error;\n        }\n      });\n};\n\nconst useFetchBatched = () => {\n  const { isResolving: isLoading, resolve } = usePromiseQueue();\n\n  return {\n    isLoading,\n    fetchBatched: (fetchFunction, total, filter, batchSize = 50) => {\n      const pages = Math.ceil(total / batchSize) || 1;\n\n      const results = resolve(\n        [...new Array(pages)].map(\n          (_, pageIdx) => () => fetchFunction(batchSize, pageIdx + 1, filter)\n        )\n      );\n\n      return results;\n    },\n  };\n};\n\nconst buildApiFilters = (filters = {}) => {\n  const { tagFilters, ...otherFilters } = filters;\n  const tagsApiFilter = tagFilters\n    ? {\n        tags: tagFilters.flatMap((tagFilter) =>\n          tagFilter.values.map(\n            (tag) =>\n              `${encodeURIComponent(tagFilter.key)}/${encodeURIComponent(\n                tag.tagKey\n              )}=${encodeURIComponent(tag.value)}`\n          )\n        ),\n      }\n    : {};\n\n  return {\n    ...otherFilters,\n    ...tagsApiFilter,\n  };\n};\n\nexport const useGetEntities = (fetchEntities, { selected, columns } = {}) => {\n  const appendDirection = (attributes, direction) =>\n    attributes.map((attribute) => `${attribute}:${direction}`);\n\n  const findColumnByKey = (key) =>\n    (columns || []).find((column) => column.key === key);\n\n  return async (\n    _ids,\n    { page = 1, per_page: perPage, orderBy, orderDirection, filters }\n  ) => {\n    const sortableColumn = findColumnByKey(orderBy);\n    const sortBy =\n      sortableColumn && sortableColumn.sortBy\n        ? appendDirection(sortableColumn.sortBy, orderDirection)\n        : undefined;\n    const filterForApi = buildApiFilters(filters);\n\n    const fetchedEntities = await fetchEntities(perPage, page, {\n      ...filterForApi,\n      sortBy,\n    });\n    const {\n      entities,\n      meta: { totalCount },\n    } = fetchedEntities || {};\n\n    return {\n      results: entities.map((entity) => ({\n        ...entity,\n        selected: (selected || []).map((id) => id).includes(entity.id),\n      })),\n      orderBy,\n      orderDirection,\n      total: totalCount,\n    };\n  };\n};\n\n// This hook is primarily meant to work around issues in the inventory\nexport const useInventoryUtilities = (\n  inventory,\n  selectedSystems,\n  activeFilters\n) => {\n  const dispatch = useDispatch();\n\n  // Resets the Inventory to a loading state\n  // and prevents previously shown columns and rows to appear\n  useLayoutEffect(() => {\n    dispatch({\n      type: 'INVENTORY_INIT',\n    });\n  }, []);\n\n  // Ensures rows are marked as selected\n  useEffect(() => {\n    dispatch({\n      type: 'SELECT_ENTITIES',\n      payload: {\n        selected: selectedSystems,\n      },\n    });\n  }, [selectedSystems]);\n\n  // Filters do not yet trigger the inventory to call getEntities\n  // and the page would not reset to page 1\n  const resetPage = () => {\n    Promise.resolve(\n      dispatch({\n        type: 'RESET_PAGE',\n      })\n    ).then(() => inventory?.current?.onRefreshData());\n  };\n\n  // The debounce is to not have filter updates collide or get out of order.\n  const debounceResetPage = debounce(resetPage, 50);\n\n  useEffect(() => {\n    debounceResetPage();\n  }, [activeFilters]);\n};\n\nconst toIdFilter = (ids) =>\n  ids?.length > 0 ? `id ^ (${ids.join(',')})` : undefined;\n\nexport const useSystemsExport = ({\n  columns,\n  selected,\n  total,\n  fetchArguments,\n}) => {\n  const { isLoading, fetchBatched } = useFetchBatched();\n  const selectionFilter = selected ? toIdFilter(selected) : undefined;\n  const fetchSystems = useFetchSystems({\n    query: fetchArguments.query,\n    variables: {\n      ...fetchArguments.variables,\n      ...(fetchArguments.tags && { tags: fetchArguments.tags }),\n      filter: selectionFilter\n        ? `${fetchArguments.variables.filter} and (${selectionFilter})`\n        : fetchArguments.variables.filter,\n    },\n    onError: () => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Couldn’t download export',\n        description: 'Reinitiate this export to try again.',\n      });\n    },\n  });\n\n  const selectedFilter = () =>\n    selected?.length > 0 ? toIdFilter(selected) : undefined;\n\n  const exporter = async () => {\n    const fetchedItems = await fetchBatched(\n      fetchSystems,\n      total,\n      selectedFilter()\n    );\n\n    return fetchedItems.flatMap((result) => result.entities);\n  };\n\n  const {\n    toolbarProps: { exportConfig },\n  } = useExport({\n    exporter,\n    columns,\n    isDisabled: total === 0 || isLoading,\n    onStart: () => {\n      dispatchNotification({\n        variant: 'info',\n        title: 'Preparing export',\n        description: 'Once complete, your download will start automatically.',\n      });\n    },\n    onComplete: () => {\n      dispatchNotification({\n        variant: 'success',\n        title: 'Downloading export',\n      });\n    },\n  });\n\n  return exportConfig;\n};\n\nexport const useSystemBulkSelect = ({\n  total,\n  onSelect,\n  preselected,\n  fetchArguments,\n  currentPageIds,\n}) => {\n  const { isLoading, fetchBatched } = useFetchBatched();\n  // This is meant as a compatibility layer and to be removed\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const fetchSystems = useFetchSystems({\n    ...fetchArguments,\n    onError: (error) => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error selecting systems',\n        description: error.message,\n      });\n    },\n  });\n\n  const fetchFunc = async (fetchIds) => {\n    if (fetchIds.length === 0) {\n      return [];\n    }\n\n    const idFilter = toIdFilter(fetchIds);\n    const results = await fetchBatched(fetchSystems, fetchIds.length, {\n      ...(idFilter && { filter: idFilter }),\n    });\n\n    return results.flatMap((result) => result.entities);\n  };\n\n  const onSelectCallback = async (selectedIds) => {\n    const systems = await fetchFunc(selectedIds);\n    setSelectedSystems(systems);\n    onSelect && onSelect(systems);\n  };\n\n  const itemIdsInTable = async () => {\n    const results = await fetchBatched(fetchSystems, total);\n    return results.flatMap((result) => result.entities.map(({ id }) => id));\n  };\n\n  const bulkSelect = useBulkSelect({\n    total,\n    onSelect: onSelectCallback,\n    preselected,\n    itemIdsInTable,\n    itemIdsOnPage: () => currentPageIds,\n  });\n\n  return {\n    selectedSystems,\n    ...bulkSelect,\n    toolbarProps: {\n      ...bulkSelect.toolbarProps,\n      bulkSelect: {\n        ...bulkSelect.toolbarProps.bulkSelect,\n        ...(isLoading\n          ? {\n              isDisabled: true,\n              toggleProps: {\n                children: [<Spinner size=\"md\" key=\"spinner\" />],\n              },\n            }\n          : {}),\n      },\n    },\n  };\n};\n","import React, { useMemo, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Spinner } from '@patternfly/react-core';\nimport { TableVariant } from '@patternfly/react-table';\n// eslint-disable-next-line max-len\nimport RemediationButton from '@/PresentationalComponents/ComplianceRemediationButton/RemediationButton';\nimport {\n  DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n  COMPLIANT_SYSTEMS_FILTER_CONFIGURATION,\n} from '@/constants';\nimport { ErrorPage, StateView, StateViewPart } from 'PresentationalComponents';\nimport useFilterConfig from 'Utilities/hooks/useTableTools/useFilterConfig';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { policyFilter, defaultOnLoad, ssgVersionFilter } from './constants';\nimport {\n  useFetchSystems,\n  useGetEntities,\n  useOsMinorVersionFilter,\n  useInventoryUtilities,\n  useSystemsExport,\n  useSystemsFilter,\n  useSystemBulkSelect,\n} from './hooks';\nimport { constructQuery } from '../../Utilities/helpers';\n\nexport const SystemsTable = ({\n  columns,\n  showAllSystems,\n  policyId,\n  showActions,\n  enableExport,\n  compliantFilter,\n  policies,\n  showOnlySystemsWithTestResults,\n  showOsFilter,\n  error,\n  showComplianceSystemsInfo,\n  compact,\n  remediationsEnabled,\n  systemProps,\n  defaultFilter,\n  emptyStateComponent,\n  prependComponent,\n  showOsMinorVersionFilter,\n  preselectedSystems,\n  onSelect: onSelectProp,\n  noSystemsTable,\n  tableProps,\n  ssgVersions,\n  dedicatedAction,\n}) => {\n  const inventory = useRef(null);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [perPage, setPerPage] = useState(50);\n  const [currentTags, setCurrentTags] = useState([]);\n\n  const osMinorVersionFilter = useOsMinorVersionFilter(\n    showOsMinorVersionFilter,\n    {\n      variables: {\n        filter: defaultFilter,\n        ...(policyId && { policyId }),\n      },\n    }\n  );\n\n  const {\n    toolbarProps: conditionalFilter,\n    filterString,\n    activeFilterValues,\n  } = useFilterConfig({\n    filters: {\n      filterConfig: [\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(policies?.length > 0 ? policyFilter(policies, showOsFilter) : []),\n        ...(ssgVersions ? ssgVersionFilter(ssgVersions) : []),\n        ...osMinorVersionFilter,\n      ],\n    },\n  });\n  const systemsFilter = useSystemsFilter(\n    filterString(),\n    showOnlySystemsWithTestResults,\n    defaultFilter\n  );\n\n  const constructedQuery = useMemo(() => constructQuery(columns), [columns]);\n\n  const systemFetchArguments = useMemo(\n    () => ({\n      query: constructedQuery.query,\n      variables: {\n        ...constructedQuery.fragments,\n        tags: currentTags,\n        filter: systemsFilter,\n        ...(policyId && { policyId }),\n      },\n    }),\n    [constructedQuery, currentTags, systemsFilter, policyId]\n  );\n\n  const preselection = useMemo(\n    () => preselectedSystems.map(({ id }) => id),\n    [preselectedSystems]\n  );\n\n  const {\n    selectedIds,\n    tableProps: bulkSelectTableProps,\n    toolbarProps: bulkSelectToolBarProps,\n  } = useSystemBulkSelect({\n    total,\n    perPage,\n    onSelect: onSelectProp,\n    preselected: preselection,\n    fetchArguments: systemFetchArguments,\n    currentPageIds: items.map(({ id }) => id),\n  });\n\n  useInventoryUtilities(inventory, selectedIds, activeFilterValues);\n\n  const onComplete = (result) => {\n    setTotal(result.meta.totalCount);\n    setItems(result.entities);\n    setPerPage(result.perPage);\n    setIsLoaded(true);\n    setCurrentTags && setCurrentTags(result.meta.tags);\n\n    if (\n      emptyStateComponent &&\n      result.meta.totalCount === 0 &&\n      activeFilterValues.length === 0 &&\n      (typeof result?.meta?.tags === 'undefined' ||\n        result?.meta?.tags?.length === 0)\n    ) {\n      setIsEmpty(true);\n    }\n  };\n\n  const fetchSystems = useFetchSystems({\n    ...systemFetchArguments,\n    onComplete,\n  });\n  const getEntities = useGetEntities(fetchSystems, {\n    selected: selectedIds,\n    columns,\n  });\n  const exportConfig = useSystemsExport({\n    columns,\n    filter: systemsFilter,\n    selected: selectedIds,\n    total,\n    fetchArguments: {\n      ...systemFetchArguments,\n    },\n  });\n\n  const mergedColumns = (defaultColumns) =>\n    columns.map((column) => {\n      const isStringCol = typeof column === 'string';\n      const key = isStringCol ? column : column.key;\n      const defaultColumn = defaultColumns.find(\n        (defaultCol) => defaultCol.key === key\n      );\n      return {\n        ...defaultColumn,\n        ...(isStringCol ? { key: column } : column),\n        props: {\n          ...defaultColumn?.props,\n          ...column?.props,\n        },\n      };\n    });\n\n  return (\n    <StateView\n      stateValues={{\n        error,\n        noError: error === undefined && !isEmpty,\n        empty: isEmpty,\n      }}\n    >\n      <StateViewPart stateKey=\"error\">\n        {!!prependComponent && prependComponent}\n        <ErrorPage error={error} />\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">{emptyStateComponent}</StateViewPart>\n      <StateViewPart stateKey=\"noError\">\n        {!!prependComponent && isLoaded && prependComponent}\n        {showComplianceSystemsInfo && (\n          <Alert\n            isInline\n            variant=\"info\"\n            ouiaId=\"SystemsListIsDifferentAlert\"\n            title={\n              'The list of systems in this view is different than those that appear in the Inventory. ' +\n              'Only systems currently associated with or reporting against compliance policies are displayed.'\n            }\n          />\n        )}\n        <InventoryTable\n          {...systemProps}\n          disableDefaultColumns\n          columns={mergedColumns}\n          noSystemsTable={noSystemsTable}\n          ref={inventory}\n          getEntities={getEntities}\n          hideFilters={{ all: true, tags: false }}\n          showTags\n          onLoad={defaultOnLoad(columns)}\n          tableProps={{\n            ...bulkSelectTableProps,\n            isStickyHeader: true,\n            ...tableProps,\n          }}\n          fallback={<Spinner />}\n          variant={compact ? TableVariant.compact : ''}\n          {...bulkSelectToolBarProps}\n          {...(!showAllSystems && {\n            ...conditionalFilter,\n            ...(remediationsEnabled && {\n              dedicatedAction: (\n                <RemediationButton policyId={policyId} systems={selectedIds} />\n              ),\n            }),\n          })}\n          {...(dedicatedAction ? { dedicatedAction: dedicatedAction } : {})}\n          {...(enableExport && { exportConfig })}\n          {...(showActions && {\n            actions: [\n              {\n                title: 'View in inventory',\n                onClick: (_event, _index, { id }) => {\n                  window.location.href = `${window.location.origin}/insights/inventory/${id}`;\n                },\n              },\n            ],\n          })}\n        />\n      </StateViewPart>\n    </StateView>\n  );\n};\n\nSystemsTable.propTypes = {\n  columns: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.shape({}), PropTypes.string])\n  ),\n  policies: PropTypes.arrayOf(PropTypes.shape({})),\n  showAllSystems: PropTypes.bool,\n  policyId: PropTypes.string,\n  query: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  showActions: PropTypes.bool,\n  enableExport: PropTypes.bool,\n  compliantFilter: PropTypes.bool,\n  showOnlySystemsWithTestResults: PropTypes.bool,\n  showOsFilter: PropTypes.bool,\n  showComplianceSystemsInfo: PropTypes.bool,\n  error: PropTypes.object,\n  compact: PropTypes.bool,\n  remediationsEnabled: PropTypes.bool,\n  defaultFilter: PropTypes.string,\n  systemProps: PropTypes.shape({\n    isFullView: PropTypes.bool,\n  }),\n  emptyStateComponent: PropTypes.node,\n  prependComponent: PropTypes.node,\n  showOsMinorVersionFilter: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  preselectedSystems: PropTypes.array,\n  onSelect: PropTypes.func,\n  noSystemsTable: PropTypes.node,\n  tableProps: PropTypes.object,\n  ssgVersions: PropTypes.array,\n  dedicatedAction: PropTypes.object,\n};\n\nSystemsTable.defaultProps = {\n  policyId: '',\n  showActions: true,\n  enableExport: true,\n  compliantFilter: false,\n  showOnlySystemsWithTestResults: false,\n  showComplianceSystemsInfo: false,\n  compact: false,\n  remediationsEnabled: true,\n  preselectedSystems: [],\n};\n\nexport default SystemsTable;\n","import { useCallback, useState } from 'react';\nimport pAll from 'p-all';\n\nconst DEFAULT_CONCURRENT_PROMISES = 2;\n\nconst usePromiseQueue = (limit = DEFAULT_CONCURRENT_PROMISES) => {\n  const [isResolving, setIsResolving] = useState(false);\n  const [promiseResults, setPromiseResults] = useState();\n\n  const resolve = useCallback(\n    async (fns) => {\n      await setPromiseResults(undefined);\n      await setIsResolving(true);\n      const results = await pAll(fns, {\n        concurrency: limit,\n      });\n\n      await setIsResolving(false);\n      await setPromiseResults(results);\n\n      return results;\n    },\n    [limit]\n  );\n\n  return {\n    isResolving,\n    results: promiseResults,\n    resolve,\n  };\n};\n\nexport default usePromiseQueue;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { sortingByProp } from 'Utilities/helpers';\n\nconst selectRows = (rows, selected) =>\n  rows.map((row) => ({\n    ...row,\n    selected: selected.includes(row.id),\n  }));\n\nexport const entitiesReducer = () =>\n  applyReducerHash({\n    ['INVENTORY_INIT']: () => ({\n      rows: [],\n      total: 0,\n    }),\n    ['RESET_PAGE']: (state) => ({\n      ...state,\n      page: 1,\n    }),\n    ['SELECT_ENTITIES']: (state, { payload: { selected } }) => ({\n      ...state,\n      rows: selectRows(state.rows, selected),\n    }),\n  });\n\nexport const mapCountOsMinorVersions = (systems) => {\n  if (!systems) {\n    return {};\n  }\n\n  return systems.reduce((acc, { osMinorVersion }) => {\n    if (osMinorVersion !== undefined && osMinorVersion !== null) {\n      (acc[osMinorVersion] = acc[osMinorVersion] || {\n        osMinorVersion,\n        count: 0,\n      }).count++;\n    }\n\n    return acc;\n  }, {});\n};\n\nexport const countOsMinorVersions = (systems) =>\n  Object.values(mapCountOsMinorVersions(systems)).sort(\n    sortingByProp('osMinorVersion', 'desc')\n  );\n"],"names":["QUERY","gql","_templateObject","_taggedTemplateLiteral","ComplianceSystems","_data$profiles","_useQuery","useQuery","data","error","loading","policies","profiles","edges","map","_ref","node","React","PageHeader","className","PageHeaderTitle","title","StateViewWithError","stateValues","StateViewPart","stateKey","SystemsTable","columns","Columns","showLink","props","isStatic","transforms","nowrap","defaultFilter","systemProps","isFullView","showOsMinorVersionFilter","policy","osMajorVersion","showComplianceSystemsInfo","enableEditPolicy","remediationsEnabled","PolicyTypeDetailsRow","description","item","key","Text","style","margin","propTypes","NameCell","name","disabled","InUseProfileLabel","compact","PolicyTypeTable","_ref2","onChange","selectedProfile","info","tooltip","sortByProp","renderFunc","renderComponent","fitContent","_data","_id","profile","supportedOsVersions","join","TableToolsTable","items","_objectSpread","rowProps","selected","id","disableSelection","filters","filterConfig","type","conditionalFilterType","label","filter","policyTypes","value","policyType","toLowerCase","includes","options","detailsComponent","onRadioSelect","_event","_value","_rowIdx","_ref3","itemId","find","_ref4","sortBy","index","direction","property","emptyRows","length","variant","Tooltip","position","content","OutlinedQuestionCircleIcon","SUPPORTED_PROFILES","CreateSCAPPolicy","_data$osMajorVersions","change","selectedOsMajorVersion","fetchPolicy","osMajorVersions","selectedOsMajorVersionObject","profilesToSelect","profileRefId","refId","benchmarkRedId","benchmark","Spinner","TextContent","component","TextVariants","Form","FormGroup","isRequired","fieldId","_ref5","Tile","concat","onClick","isSelected","isStacked","labelIcon","PolicyTypeTooltip","PolicyTypesTable","undefined","reduxFormPropTypes","selector","formValueSelector","compose","connect","state","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","PROFILES_QUERY","BENCHMARKS_QUERY","_templateObject2","EditPolicyProfilesRules","_benchmarksData$bench","selectedRuleRefIds","osMinorVersionCounts","ruleValues","ruleGroups","useFeature","osMinorVersions","i","osMinorVersion","sort","benchmarkSearch","variables","enableRuleTree","skip","benchmarksData","benchmarksError","benchmarksLoading","benchmarks","nodes","tabsData","systemCount","count","_benchmark$latestSupp","latestSupportedOsMinorVersions","getBenchmarkBySupportedOsMinor","benchmarkProfile","getBenchmarkProfile","newOsMinorVersion","profileToOsMinorMap","tabsDataToOsMinorMap","profileIds","Object","keys","skipProfilesQuery","_useQuery2","profilesData","profilesError","profilesLoading","dataState","loadingState","noRuleSets","p","setSelectedRuleRefIds","newSelection","useLayoutEffect","profilesWithOs","extendProfilesByOsMinor","profilesWithRulesToSelection","only","JSON","stringify","EmptyState","Title","headingLevel","size","EmptyStateBody","EmptyTable","TabbedRules","setRuleValues","policyId","valueDefinition","valueValue","newRuleValues","_defineProperty","selectedFilter","level","ouiaId","resetLink","rulesPageLink","WizardContextConsumer","goToStepById","Button","PrependComponent","EditPolicySystems","selectedSystems","version","split","prependComponent","emptyStateComponent","width","showActions","enableExport","preselectedSystems","onSelect","newSelectedSystems","countOsMinorVersions","defaultProps","EditPolicyDetails","useEffect","Field","ReduxFormTextInput","isDisabled","ReduxFormTextArea","PolicyBusinessObjectiveTooltip","defaultValue","businessObjective","ProfileThresholdField","previousThreshold","initialValues","ReviewCreatedPolicy","complianceThreshold","parentProfileName","marginTop","TextList","TextListVariants","TextListItem","TextListItemVariants","fontWeight","Label","color","isCompact","benchmarkId","parseFloat","rulesCount","EmtpyStateWithErrors","errors","Array","isArray","List","ListItem","FinishedCreatePolicy","onWizardFinish","cloneFromProfileId","systems","values","_useState","useState","_useState2","_slicedToArray","percent","setPercent","_useState3","_useState4","message","setMessage","_useState5","_useState6","setErrors","_useState7","_useState8","failed","setFailed","updatePolicy","usePolicy","onProgress","progress","hosts","then","dispatchNotification","autoDismiss","Link","to","catch","_error$networkError","_error$networkError2","_error$networkError2$","networkError","result","Bullseye","EmptyStateVariant","EmptyStateIcon","icon","WrenchIcon","ProgressBar","EmptyStateSecondaryActions","withApollo","CreatePolicyForm","systemIds","reset","history","useHistory","stepIdReached","setStepIdReached","resetAnchor","location","hash","push","onClose","steps","enableNext","validateBenchmarkPage","canJumpTo","validateDetailsPage","validateSystemsPage","EditPolicyRules","validateRulesPage","nextButtonText","isFinishedStep","Wizard","isOpen","onNext","onGoToStep","onBack","dispatch","CreatePolicy","DeletePolicy","deleteEnabled","setDeleteEnabled","useLocation","_location$state$polic","_useMutation","useMutation","DELETE_PROFILE","onCompleted","dispatchAction","addNotification","onError","deletePolicy","ComplianceModal","ModalVariant","titleIconVariant","actions","input","Checkbox","isChecked","DeleteReport","_location$state","background","DELETE_REPORT","deleteReport","profileId","isModalOpen","onDelete","MULTIVERSION_QUERY","_templateObject3","RULE_VALUE_DEFINITIONS_QUERY","_templateObject4","EditPolicyRulesTabEmptyState","EditPolicyRulesTab","ruleValuesProp","sortingByProp","parentProfileId","toTabsData","prevSelection","empty","_policy$policy","_policy$policy$profil","mergeValues","fromEntries","valueDefinitions","setNewRuleTabs","EditPolicySystemsTab","onSystemSelect","osFilter","newRuleTabs","Alert","isInline","actionLinks","AlertActionLink","EditPolicyForm","setUpdatedPolicy","setSelectedSystems","policyProfiles","setOsMinorVersionCounts","_useNewRulesAlertStat","arguments","useNewRulesAlertState","_useNewRulesAlertStat2","newRulesAlert","setNewRulesAlert","handleSystemSelect","useCallback","policyMinorVersions","hasNewOsMinorVersions","reduce","acc","_profile$osMinorVersi","mapCountOsMinorVersions","complianceThresholdValid","thresholdValid","profilesWithOsMinor","RoutedTabs","defaultTab","Tab","eventKey","TabTitleText","NewRulesAlert","updatedPolicy","useParams","policy_id","ruleValueDefinitionsData","ruleValueDefinitionsLoading","ruleValueDefinitionsError","useMemo","profileData","appendBenchmarkFunction","profileWithValueDefinitions","appendBenchmark","_profileData$profile$","_profileData$profile$2","EditPolicy","route","_usePolicyQueries","usePolicyQueries","linkToPolicy","useLinkToPolicy","setRuleValuesState","saveEnabled","updatedPolicyHostsAndRules","_useOnSave","useOnSave","_useOnSave2","isSaving","onSave","spinnerAriaValueText","isLoading","useTitleEntity","minHeight","existingValues","currentValues","SystemLink","children","pathname","Name","_ref2$showOsInfo","showOsInfo","_ref2$showLink","hasOsInfo","SSGVersion","_ref3$ssgVersion","ssgVersion","supported","UnsupportedSSGVersion","messageVariant","SSGVersions","_ref4$testResultProfi","testResultProfiles","_profile$benchmark","Policies","Truncate","inline","text","FailedRules","_ref6","rulesFailed","_ref7","parseInt","ComplianceScore","_ref8","_ref9","score","compliant","PresentationalComplianceScore","NeverScanned","Fragment","ExclamationTriangleIcon","NEVER","lastScanned","dates","Date","last","Math","max","apply","date","isFinite","LastScanned","_ref10","lastScannedDate","DateFormat","parse","operatingSystemString","_ref11","OperatingSystem","system","disableSorting","compileColumnRenderFunc","cell","column","_objectWithoutProperties","_excluded","renderExport","customName","SsgVersion","exportKey","SsgVersionCell","PoliciesCell","failedRules","FailedRulesCell","complianceScoreString","complianceScoreData","trim","ComplianceScoreCell","LastScannedCell","OperatingSystemCell","OS","original","dataLabel","inventoryColumn","InventoryDetails","registryDecorator","_dec","_class","_React$Component","_inherits","_super","_classCallCheck","call","_createClass","_this","DetailWrapper","onLoad","mergeWithDetail","getRegistry","register","inventoryId","this","InventoryDetailHead","fallback","Skeleton","SkeletonSize","entity","DEFAULT_SYSTEMS_PER_BATCH","GET_SYSTEMS_ISSUES","RemediationButton","rules","buttonProps","onRemediationCreated","_useIssuesFetch","client","useApolloClient","_usePromiseQueue","usePromiseQueue","isResolving","results","resolve","fetchFunction","_asyncToGenerator","_regeneratorRuntime","_callee","perPage","page","_context","prev","next","query","abrupt","sent","stop","_x","_x2","fetch","_callee2","batchSize","pages","_args2","_context2","ceil","_toConsumableArray","_","pageIdx","remediationData","useIssuesFetch","isLoadingIssues","RemediationRemediationButton","_extends","getNotification","dataProvider","FallbackButton","GET_SYSTEMS_OSES","policyFilter","systemsPolicyFilterConfiguration","systemsOsFilterConfiguration","osMinorVersionFilter","systemsOsMinorFilterConfiguration","defaultOnLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","entitiesReducer","ssgVersionFilter","ssgVersions","filterString","groupByMajorVersion","showFilter","currentValue","major","String","Set","minor","useOsMinorVersionFilter","fetchArguments","osVersions","renameInventoryAttributes","culledTimestamp","staleWarningTimestamp","staleTimestamp","insightsId","insights_id","culled_timestamp","stale_warning_timestamp","stale_timestamp","useFetchSystems","onComplete","_ref3$variables","requestVariables","fetchResults","_data$systems","_data$systems$edges","_data$systems2","e","entities","systemsWithRuleObjectsFailed","meta","tags","totalCount","useFetchBatched","fetchBatched","total","buildApiFilters","tagFilters","otherFilters","_excluded2","tagsApiFilter","flatMap","tagFilter","tag","encodeURIComponent","tagKey","toIdFilter","ids","showAllSystems","compliantFilter","showOnlySystemsWithTestResults","showOsFilter","onSelectProp","noSystemsTable","tableProps","dedicatedAction","inventory","useRef","isEmpty","setIsEmpty","isLoaded","setIsLoaded","setItems","setTotal","_useState9","_useState10","setPerPage","_useState11","_useState12","currentTags","setCurrentTags","_useFilterConfig","useFilterConfig","DEFAULT_SYSTEMS_FILTER_CONFIGURATION","COMPLIANT_SYSTEMS_FILTER_CONFIGURATION","conditionalFilter","toolbarProps","activeFilterValues","systemsFilter","combindedFilter","useSystemsFilter","constructedQuery","constructQuery","systemFetchArguments","fragments","_useSystemBulkSelect","preselected","currentPageIds","_useFetchBatched2","fetchSystems","fetchFunc","_ref12","_callee3","fetchIds","idFilter","_context3","_x3","onSelectCallback","_ref13","_callee4","selectedIds","_context4","_x4","itemIdsInTable","_ref14","_callee5","_context5","_ref15","bulkSelect","useBulkSelect","itemIdsOnPage","toggleProps","useSystemBulkSelect","bulkSelectTableProps","bulkSelectToolBarProps","activeFilters","useDispatch","payload","debounceResetPage","debounce","Promise","_inventory$current","current","onRefreshData","useInventoryUtilities","getEntities","fetchEntities","appendDirection","attributes","attribute","findColumnByKey","_ids","_ref6$page","orderBy","orderDirection","sortableColumn","filterForApi","fetchedEntities","per_page","useGetEntities","_result$meta","_result$meta2","_result$meta2$tags","exportConfig","_useFetchBatched","selectionFilter","exporter","fetchedItems","useExport","onStart","useSystemsExport","StateView","noError","ErrorPage","InventoryTable","disableDefaultColumns","defaultColumns","isStringCol","defaultColumn","defaultCol","ref","hideFilters","all","showTags","isStickyHeader","TableVariant","_index","window","href","origin","PropTypes","DEFAULT_CONCURRENT_PROMISES","limit","setIsResolving","promiseResults","setPromiseResults","fns","pAll","concurrency","selectRows","rows","row","_applyReducerHash","applyReducerHash"],"sourceRoot":""}