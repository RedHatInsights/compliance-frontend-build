{"version":3,"file":"js/9253.1663164958213.fca215929c1bdc7c3211.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/plus-circle-icon.js","webpack:///./src/PresentationalComponents/SystemPolicyCard/UnsupportedSSGVersion.js","webpack:///./src/PresentationalComponents/SystemPolicyCard/SystemPolicyCard.js","webpack:///./src/PresentationalComponents/SystemPolicyCards/SystemPolicyCards.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/NotConnected/NotConnected.js","webpack:///./src/SmartComponents/SystemDetails/NoPoliciesState.js","webpack:///./src/SmartComponents/SystemDetails/NoReportsState.js","webpack:///./src/SmartComponents/SystemDetails/EmptyState.js","webpack:///./src/SmartComponents/SystemDetails/ComplianceDetail.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const PlusCircleIconConfig = {\n  name: 'PlusCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PlusCircleIcon = createIcon(PlusCircleIconConfig);\n\nexport default PlusCircleIcon;","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Popover, Alert } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { supportedConfigsLink } from '@/constants';\n\nconst UnsupportedSSGVersion = ({ ssgVersion, style, ...props }) => {\n  const bodyContent =\n    'This system was using an incompatible version of the SSG at the time this report was generated.' +\n    ' Assessment of rules failed/passed on this system is a best-guess effort and may not be accurate.';\n  const footerContent = (\n    <a target=\"_blank\" rel=\"noopener noreferrer\" href={supportedConfigsLink}>\n      Supported SSG versions\n    </a>\n  );\n\n  return (\n    <Alert\n      variant=\"warning\"\n      isInline\n      style={style}\n      title={\n        <React.Fragment>\n          Unsupported SSG version ({ssgVersion})\n          <Popover position=\"right\" {...{ bodyContent, footerContent }}>\n            <OutlinedQuestionCircleIcon\n              style={{\n                marginLeft: '.5em',\n                cursor: 'pointer',\n                color: 'var(--pf-global--Color--200)',\n              }}\n            />\n          </Popover>\n        </React.Fragment>\n      }\n      {...props}\n    />\n  );\n};\n\nUnsupportedSSGVersion.propTypes = {\n  ssgVersion: propTypes.string,\n  style: propTypes.object,\n};\n\nexport default UnsupportedSSGVersion;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n} from '@patternfly/react-icons';\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  Text,\n  TextContent,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Truncate from '@redhat-cloud-services/frontend-components/Truncate';\nimport UnsupportedSSGVersion from './UnsupportedSSGVersion';\n\nclass SystemPolicyCard extends React.Component {\n  complianceIcon = (compliant) =>\n    compliant ? (\n      <div className=\"ins-c-policy-card ins-m-compliant\">\n        <CheckCircleIcon /> Compliant\n      </div>\n    ) : (\n      <div className=\"ins-c-policy-card ins-m-noncompliant\">\n        <ExclamationCircleIcon /> Not compliant\n      </div>\n    );\n\n  fixedPercentage = (value, fixed = 0, withPercent = true) =>\n    value.toFixed(fixed) + (withPercent ? '%' : '');\n\n  render() {\n    const { policy, style, onClick, isSelected } = this.props;\n    const {\n      rulesFailed,\n      compliant,\n      lastScanned,\n      score,\n      benchmark: { version: ssgVersion },\n      supported,\n      name,\n      policyType,\n    } = policy;\n    const passedPercentage = this.fixedPercentage(score);\n    const truncateDefaults = { expandOnMouseOver: true, hideExpandText: true };\n\n    return (\n      <Card\n        ouiaId=\"PolicyCard\"\n        onClick={(event) => {\n          event.stopPropagation();\n          onClick(policy);\n        }}\n        isSelectable\n        isSelected={isSelected}\n        style={style}\n      >\n        <CardBody>\n          <TextContent className=\"margin-bottom-md\">\n            <Text\n              ouiaId=\"PolicyCardName\"\n              className=\"margin-bottom-top-none\"\n              component={TextVariants.h4}\n            >\n              <Truncate text={name} length={110} {...truncateDefaults} />\n            </Text>\n            <Text\n              ouiaId=\"PolicyCardType\"\n              style={{ color: 'var(--pf-global--Color--200)' }}\n              component={TextVariants.small}\n            >\n              <Truncate text={policyType} length={110} {...truncateDefaults} />\n            </Text>\n          </TextContent>\n          <div className=\"margin-bottom-md\">\n            {supported && this.complianceIcon(compliant)}\n            <Text\n              ouiaId=\"PolicyCardFailedRulesScore\"\n              component={TextVariants.small}\n            >\n              {rulesFailed} rule{rulesFailed === 1 ? '' : 's'} failed{' '}\n              <Tooltip\n                position=\"bottom\"\n                maxWidth=\"22em\"\n                content={\n                  'The system compliance score is calculated by OpenSCAP and ' +\n                  'is a normalized weighted sum of rules selected for this policy.'\n                }\n              >\n                <span>\n                  (Score: {supported ? passedPercentage : 'Unsupported'})\n                </span>\n              </Tooltip>\n            </Text>\n          </div>\n          <Text className=\"margin-bottom-none\" component={TextVariants.small}>\n            <Text ouiaId=\"PolicyCardSSGVersion\">SSG version: {ssgVersion}</Text>\n            <Text ouiaId=\"PolicyCardLastScanned\">\n              Last scanned:{' '}\n              {lastScanned !== 'Never' ? (\n                <DateFormat date={Date.parse(lastScanned)} type=\"relative\" />\n              ) : (\n                lastScanned\n              )}\n            </Text>\n          </Text>\n        </CardBody>\n        {!supported && (\n          <CardFooter style={{ padding: '0' }}>\n            <UnsupportedSSGVersion\n              ouiaId=\"PolicyCardUnsupportedSSG\"\n              ssgVersion={ssgVersion}\n              style={{\n                paddingTop: 'var(--pf-c-alert--PaddingTop)',\n                paddingRight: 'var(--pf-c-card--child--PaddingRight)',\n                paddingLeft: 'var(--pf-c-card--child--PaddingLeft)',\n                paddingBottom: 'var(--pf-c-alert--PaddingBottom)',\n              }}\n            />\n          </CardFooter>\n        )}\n      </Card>\n    );\n  }\n}\n\nSystemPolicyCard.propTypes = {\n  policy: PropTypes.shape({\n    rulesPassed: PropTypes.number,\n    rulesFailed: PropTypes.number,\n    score: PropTypes.number,\n    lastScanned: PropTypes.string,\n    refId: PropTypes.string,\n    name: PropTypes.string,\n    policyType: PropTypes.string,\n    compliant: PropTypes.bool,\n    benchmark: PropTypes.string,\n    supported: PropTypes.bool,\n  }),\n  style: PropTypes.object,\n  onClick: PropTypes.func,\n  isSelected: PropTypes.bool,\n};\n\nexport default SystemPolicyCard;\n","import React from 'react';\nimport { Grid, GridItem, Card, CardBody } from '@patternfly/react-core';\nimport SystemPolicyCard from '../SystemPolicyCard';\nimport propTypes from 'prop-types';\nimport { Instagram } from 'react-content-loader';\n\nclass SystemPolicyCards extends React.Component {\n  systemPolicyCards() {\n    const { policies, selectedPolicies, onCardClick } = this.props;\n\n    return policies\n      .filter((policy) => policy.rulesFailed + policy.rulesPassed > 0)\n      .map((policy, i) => (\n        <GridItem sm={12} md={12} lg={6} xl={4} key={i}>\n          <SystemPolicyCard\n            policy={policy}\n            style={{ height: '100%' }}\n            onClick={(policy) => onCardClick(policy)}\n            isSelected={selectedPolicies?.find(\n              (policyId) => policyId === policy.id\n            )}\n          />\n        </GridItem>\n      ));\n  }\n\n  render() {\n    const { loading } = this.props;\n\n    return (\n      <React.Fragment>\n        <Grid hasGutter>\n          {this.systemPolicyCards()}\n          {loading &&\n            [...Array(3)].map((_item, i) => (\n              <GridItem span={4} key={i}>\n                <Card>\n                  <CardBody>\n                    <Instagram />\n                  </CardBody>\n                </Card>\n              </GridItem>\n            ))}\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nSystemPolicyCards.propTypes = {\n  policies: propTypes.array,\n  loading: propTypes.bool,\n  onCardClick: propTypes.func,\n  selectedPolicies: propTypes.string,\n};\n\nSystemPolicyCards.defaultProps = {\n  policies: [],\n};\n\nexport default SystemPolicyCards;\n","import React from 'react';\nimport { Button, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { DisconnectedIcon } from '@patternfly/react-icons';\nvar NotConnected = function (_a) {\n    var _b = _a.titleText, titleText = _b === void 0 ? 'This system isn’t connected to Insights yet' : _b, _c = _a.bodyText, bodyText = _c === void 0 ? 'To get started, activate the Insights client for this system.' : _c, _d = _a.buttonText, buttonText = _d === void 0 ? 'Learn how to activate the Insights client' : _d;\n    return (React.createElement(EmptyState, null,\n        React.createElement(EmptyStateIcon, { icon: DisconnectedIcon }),\n        React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, titleText),\n        React.createElement(EmptyStateBody, null, bodyText),\n        React.createElement(Button, { variant: \"primary\", component: \"a\", href: \"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\", target: \"_blank\", rel: \"noopener noreferrer\", className: \"pf-u-mt-lg\" }, buttonText)));\n};\nexport default NotConnected;\n//# sourceMappingURL=NotConnected.js.map","import React from 'react';\nimport { BackgroundLink, LinkButton } from 'PresentationalComponents';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport {\n  Title,\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStatePrimary,\n  EmptyStateSecondaryActions,\n  EmptyStateIcon,\n} from '@patternfly/react-core';\n\nconst NoPoliciesState = () => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        This system is not part of any SCAP policies defined within Compliance.\n      </Title>\n      <EmptyStateBody>\n        To assess and monitor compliance against a SCAP policy for this system,\n        add it to an existing policy or create a new policy.\n      </EmptyStateBody>\n      <EmptyStatePrimary>\n        <BackgroundLink\n          to=\"/scappolicies/new\"\n          variant=\"primary\"\n          ouiaId=\"CreateNewPolicyButton\"\n          component={LinkButton}\n        >\n          Create new policy\n        </BackgroundLink>\n      </EmptyStatePrimary>\n      <EmptyStateSecondaryActions>\n        <Button variant=\"link\" component=\"a\" href=\"/scappolicies\">\n          View compliance policies\n        </Button>\n      </EmptyStateSecondaryActions>\n    </EmptyState>\n  </Bullseye>\n);\n\nexport default NoPoliciesState;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { CloudSecurityIcon } from '@patternfly/react-icons';\nimport {\n  Title,\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n} from '@patternfly/react-core';\n\nconst NoReportsState = ({ system }) => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon\n        icon={CloudSecurityIcon}\n        title=\"Compliance\"\n        size=\"xl\"\n        style={{\n          fontWeight: '500',\n          color: 'var(--pf-global--primary-color--100)',\n        }}\n      />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        No results reported\n      </Title>\n      <EmptyStateBody>\n        This system is part of {system?.policies?.length}\n        {system?.policies?.length > 1 ? ' policies' : ' policy'}, but has not\n        returned any results.\n      </EmptyStateBody>\n      <EmptyStateBody>\n        Reports are returned when the system checks into Insights. By default,\n        systems check in every 24 hours.\n      </EmptyStateBody>\n    </EmptyState>\n  </Bullseye>\n);\n\nNoReportsState.propTypes = {\n  system: propTypes.shape({\n    policies: propTypes.array,\n  }),\n};\n\nexport default NoReportsState;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\nimport NoPoliciesState from './NoPoliciesState';\nimport NoReportsState from './NoReportsState';\n\nconst EmptyState = ({ system }) => {\n  if (!system?.insightsId) {\n    return <NotConnected />;\n  } else {\n    if (!system?.hasPolicy) {\n      return <NoPoliciesState system={system} />;\n    } else if (system?.hasPolicy && system?.testResultProfiles?.length === 0) {\n      return <NoReportsState system={system} />;\n    }\n  }\n};\n\nEmptyState.propTypes = {\n  system: propTypes.object,\n};\n\nexport default EmptyState;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport SystemPolicyCards from '../../PresentationalComponents/SystemPolicyCards';\nimport RulesTable from '@/PresentationalComponents/RulesTable/RulesTable';\nimport ComplianceEmptyState from 'PresentationalComponents/ComplianceEmptyState';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { ApolloClient, HttpLink, InMemoryCache } from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/client';\n\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport './compliance.scss';\nimport { ErrorCard } from 'PresentationalComponents';\nimport { IntlProvider } from 'react-intl';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from 'Store';\nimport EmptyState from './EmptyState';\n\nconst COMPLIANCE_API_ROOT = '/api/compliance';\n\nconst QUERY = gql`\n  query System($systemId: String!) {\n    system(id: $systemId) {\n      id\n      name\n      hasPolicy\n      insightsId\n      policies {\n        id\n      }\n      testResultProfiles {\n        id\n        name\n        policyType\n        refId\n        compliant\n        rulesFailed\n        rulesPassed\n        lastScanned\n        score\n        supported\n        osMajorVersion\n        benchmark {\n          version\n        }\n        policy {\n          id\n        }\n        rules {\n          title\n          severity\n          rationale\n          refId\n          description\n          compliant\n          remediationAvailable\n          references\n          identifier\n          precedence\n        }\n      }\n    }\n  }\n`;\n\nconst SystemQuery = ({ data: { system }, loading, hidePassed }) => {\n  const [selectedPolicies, setSelectedPolicies] = useState();\n  const policies = system?.testResultProfiles;\n  const setOrUnsetPolicy = (policy) => {\n    if (!policy) {\n      return;\n    }\n    const policyIncluded = selectedPolicies?.find(\n      (policyId) => policy?.id === policyId\n    );\n    if (policyIncluded) {\n      const newSelection = selectedPolicies?.filter(\n        (policyId) => policy.id !== policyId\n      );\n      setSelectedPolicies(newSelection.length > 0 ? newSelection : undefined);\n    } else {\n      setSelectedPolicies([...(selectedPolicies || []), policy?.id]);\n    }\n  };\n\n  const onDeleteFilter = (chips, clearAll) => {\n    const chipNames = chips\n      .find((chips) => chips.category === 'Policy')\n      ?.chips.map((chip) => chip.name);\n    const policyId = policies.find(({ name }) => chipNames?.includes(name))?.id;\n\n    if (policyId) {\n      !clearAll\n        ? setOrUnsetPolicy(\n            policyId\n              ? {\n                  id: policyId,\n                }\n              : {}\n          )\n        : setSelectedPolicies(undefined);\n    }\n  };\n\n  return (\n    <>\n      <SystemPolicyCards\n        policies={policies}\n        loading={loading}\n        selectedPolicies={selectedPolicies}\n        onCardClick={(policy) => {\n          setOrUnsetPolicy(policy);\n        }}\n      />\n      <br />\n      {system?.testResultProfiles?.length ? (\n        <RulesTable\n          ansibleSupportFilter\n          hidePassed={hidePassed}\n          system={{\n            ...system,\n            supported:\n              (system?.testResultProfiles || []).filter(\n                (profile) => profile.supported\n              ).length > 0,\n          }}\n          profileRules={system?.testResultProfiles.map((profile) => ({\n            system,\n            profile,\n            rules: profile.rules,\n          }))}\n          loading={loading}\n          options={{\n            sortBy: {\n              index: 4,\n              direction: 'asc',\n              property: 'severity',\n            },\n            onDeleteFilter,\n          }}\n          activeFilters={{\n            policy: selectedPolicies,\n          }}\n        />\n      ) : (\n        <EmptyState system={system} />\n      )}\n    </>\n  );\n};\n\nSystemQuery.propTypes = {\n  data: propTypes.shape({\n    system: propTypes.shape({\n      hasPolicy: propTypes.bool,\n      policies: propTypes.shape({\n        id: propTypes.string,\n      }),\n      profiles: propTypes.array,\n      testResultProfiles: propTypes.array,\n    }),\n  }),\n  loading: propTypes.bool,\n  hidePassed: propTypes.bool,\n};\n\nSystemQuery.defaultProps = {\n  loading: true,\n};\n\nexport const SystemDetails = ({ inventoryId, hidePassed, ...props }) => {\n  let { data, error, loading } = useQuery(QUERY, {\n    variables: { systemId: inventoryId },\n    fetchPolicy: 'no-cache',\n  });\n  const is404 = error?.networkError?.statusCode === 404;\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  if (error && !is404) {\n    const errorMsg = `Oops! Error loading System data: ${error}`;\n    return <ErrorCard message={errorMsg} />;\n  }\n\n  return (\n    <div className=\"ins-c-compliance__scope\">\n      {!data?.system || is404 ? (\n        <ComplianceEmptyState title=\"No policies are reporting for this system\" />\n      ) : (\n        <SystemQuery\n          {...props}\n          hidePassed={hidePassed}\n          data={data}\n          loading={loading}\n        />\n      )}\n    </div>\n  );\n};\n\nSystemDetails.propTypes = {\n  inventoryId: propTypes.string,\n  hidePassed: propTypes.bool,\n};\n\nconst WrappedSystemDetails = ({\n  customItnl,\n  customRouter,\n  intlProps,\n  client,\n  ...props\n}) => {\n  const IntlWrapper = customItnl ? IntlProvider : React.Fragment;\n  const RouterWrapper = customRouter ? Router : React.Fragment;\n  const store = init().getStore();\n\n  return (\n    <RouterWrapper>\n      <IntlWrapper {...(customItnl && intlProps)}>\n        <ApolloProvider client={client}>\n          <Provider store={store}>\n            <SystemDetails {...props} />\n          </Provider>\n        </ApolloProvider>\n      </IntlWrapper>\n    </RouterWrapper>\n  );\n};\n\nWrappedSystemDetails.propTypes = {\n  customItnl: propTypes.bool,\n  intlProps: propTypes.any,\n  customRouter: propTypes.bool,\n  client: propTypes.object,\n};\n\nWrappedSystemDetails.defaultProps = {\n  client: new ApolloClient({\n    link: new HttpLink({\n      uri: COMPLIANCE_API_ROOT + '/graphql',\n      credentials: 'include',\n    }),\n    cache: new InMemoryCache(),\n  }),\n};\n\nexport default WrappedSystemDetails;\n"],"names":["PlusCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","PlusCircleIcon","UnsupportedSSGVersion","ssgVersion","style","props","footerContent","target","rel","href","supportedConfigsLink","Alert","variant","isInline","title","Popover","position","bodyContent","marginLeft","cursor","color","propTypes","SystemPolicyCard","compliant","className","value","fixed","withPercent","toFixed","this","policy","onClick","isSelected","rulesFailed","lastScanned","score","benchmark","version","supported","policyType","passedPercentage","fixedPercentage","truncateDefaults","expandOnMouseOver","hideExpandText","Card","ouiaId","event","stopPropagation","isSelectable","CardBody","TextContent","Text","component","TextVariants","Truncate","text","length","complianceIcon","Tooltip","maxWidth","content","DateFormat","date","Date","parse","type","CardFooter","padding","paddingTop","paddingRight","paddingLeft","paddingBottom","React","PropTypes","rulesPassed","refId","SystemPolicyCards","policies","selectedPolicies","onCardClick","filter","map","i","GridItem","sm","md","lg","xl","key","find","policyId","id","loading","Grid","hasGutter","systemPolicyCards","Array","_item","span","defaultProps","_a","_b","titleText","_c","bodyText","_d","buttonText","EmptyState","EmptyStateIcon","icon","DisconnectedIcon","Title","headingLevel","size","EmptyStateBody","Button","Bullseye","EmptyStatePrimary","to","LinkButton","EmptyStateSecondaryActions","NoReportsState","system","CloudSecurityIcon","fontWeight","insightsId","hasPolicy","testResultProfiles","QUERY","gql","SystemQuery","data","hidePassed","useState","setSelectedPolicies","setOrUnsetPolicy","newSelection","undefined","RulesTable","ansibleSupportFilter","profile","profileRules","rules","options","sortBy","index","direction","property","onDeleteFilter","chips","clearAll","chipNames","category","chip","includes","activeFilters","profiles","SystemDetails","inventoryId","useQuery","variables","systemId","fetchPolicy","error","is404","networkError","statusCode","Spinner","errorMsg","message","ComplianceEmptyState","WrappedSystemDetails","customItnl","customRouter","intlProps","client","IntlWrapper","IntlProvider","RouterWrapper","Router","store","init","getStore","ApolloProvider","ApolloClient","link","HttpLink","uri","COMPLIANCE_API_ROOT","credentials","cache","InMemoryCache"],"sourceRoot":""}