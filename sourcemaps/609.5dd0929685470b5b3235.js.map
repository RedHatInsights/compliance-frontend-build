{"version":3,"sources":["webpack:///./src/Mutations/graphql/mutations.js","webpack:///./src/Mutations/hooks/usePolicy.js","webpack:///./src/Mutations/hooks/useCreateBusinessObjective.js","webpack:///./src/Mutations/hooks/usePolicyMutation.js","webpack:///./src/Mutations/hooks/useAssociateSystems.js","webpack:///./src/Mutations/hooks/useAssociateRules.js","webpack:///./src/Utilities/Dispatcher.js"],"names":["CREATE_PROFILE","gql","ASSOCIATE_SYSTEMS_TO_PROFILES","ASSOCIATE_RULES_TO_PROFILE","UPDATE_PROFILE","CREATE_BUSINESS_OBJECTIVE","DELETE_PROFILE","DELETE_REPORT","create","createBusinessObjective","useMutation","policy","newBusinessObjective","businessObjective","title","id","variables","input","data","error","policyMutation","updateProfile","createProfile","updatedPolicy","businessObjectiveId","name","description","complianceThreshold","details","parseFloat","policyInput","result","mutatedPolicy","profile","cloneFromProfileId","refId","benchmarkId","usePolicyMutation","associateSystems","hosts","systemIds","map","h","useAssociateSystems","associateRules","profiles","ruleRefIds","find","parentProfileId","ruleInput","useAssociateRules","onProgress","selectedRuleRefIds","expectedUpdates","length","progress","dispatchProgress","profileSelectedRuleRefIds","dispatchAction","actionCreator","getStore","dispatch"],"mappings":"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","file":"js/609.c03fc474c1eebc3c1728.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport const CREATE_PROFILE = gql`\nmutation CreateProfile($input: createProfileInput!) {\n    createProfile(input: $input) {\n        profile {\n            id\n        }\n    }\n}\n`;\n\nexport const ASSOCIATE_SYSTEMS_TO_PROFILES = gql`\nmutation associateSystems($input: associateSystemsInput!) {\n    associateSystems(input: $input) {\n        profile {\n            id\n            policy {\n                id\n                profiles {\n                    id\n                    parentProfileId\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const ASSOCIATE_PROFILES_TO_SYSTEM = gql`\nmutation associateProfiles($input: associateProfilesInput!) {\n    associateProfiles(input: $input) {\n        system {\n            id\n            name\n            profiles {\n                id\n                name\n            }\n        }\n    }\n}\n`;\n\nexport const ASSOCIATE_RULES_TO_PROFILE = gql`\nmutation associateRules($input: associateRulesInput!) {\n    associateRules(input: $input) {\n        profile {\n            id\n        }\n    }\n}\n`;\n\nexport const UPDATE_PROFILE = gql`\nmutation UpdateProfile($input: UpdateProfileInput!) {\n    updateProfile(input: $input) {\n        profile {\n            id,\n            name,\n            complianceThreshold,\n            businessObjectiveId,\n            description\n        }\n    }\n}\n`;\n\nexport const CREATE_BUSINESS_OBJECTIVE = gql`\nmutation createBusinessObjective($input: createBusinessObjectiveInput!) {\n    createBusinessObjective(input: $input) {\n        businessObjective {\n            id\n            title\n        }\n    }\n}\n`;\n\nexport const DELETE_PROFILE = gql`\nmutation DeleteProfile($input: deleteProfileInput!) {\n    deleteProfile(input: $input) {\n        profile {\n            id\n        }\n    }\n}\n`;\n\nexport const DELETE_REPORT = gql`\nmutation DeleteReport($input: deleteTestResultsInput!) {\n    deleteTestResults(input: $input) {\n        profile {\n            id\n        }\n    }\n}\n`;\n","import useCreateBusinessObjective from './useCreateBusinessObjective';\nimport usePolicyMutation from './usePolicyMutation';\nimport useAssociateSystems from './useAssociateSystems';\nimport useAssociateRules from './useAssociateRules';\n\nconst usePolicy = () => {\n    const createBusinessObjective = useCreateBusinessObjective();\n    const policyMutation = usePolicyMutation();\n    const associateSystems = useAssociateSystems();\n    const associateRules = useAssociateRules();\n\n    return async (policy, updatedPolicy, onProgress) => {\n        const selectedRuleRefIds = updatedPolicy?.selectedRuleRefIds || [];\n\n        const expectedUpdates = 3 + selectedRuleRefIds.length;\n        let progress = 0;\n        const dispatchProgress = () => {\n            if (onProgress) {\n                onProgress((++progress) / expectedUpdates);\n            }\n        };\n\n        const businessObjectiveId = await createBusinessObjective(policy, updatedPolicy?.businessObjective);\n        dispatchProgress();\n\n        const mutatedPolicy = await policyMutation(policy?.id, updatedPolicy, businessObjectiveId);\n        dispatchProgress();\n\n        if (!policy) {\n            policy = mutatedPolicy;\n        }\n\n        const { policy: { profiles } } = await associateSystems(policy, updatedPolicy.hosts);\n        dispatchProgress();\n\n        for (const profileSelectedRuleRefIds of selectedRuleRefIds) {\n            await associateRules(profileSelectedRuleRefIds, profiles);\n            dispatchProgress();\n        }\n    };\n};\n\nexport default usePolicy;\n","import { useMutation } from '@apollo/client';\nimport { CREATE_BUSINESS_OBJECTIVE } from '../graphql/mutations';\n\nconst useCreateBusinessObjective = () => {\n    const [create] = useMutation(CREATE_BUSINESS_OBJECTIVE);\n\n    return async (policy, newBusinessObjective) => {\n        if (policy?.businessObjective?.title === newBusinessObjective?.title) {\n            return policy?.businessObjective?.id;\n        } else if (newBusinessObjective?.title === '') {\n            return null;\n        } else {\n            const { data, error } = await create({ variables: {\n                input: { title: newBusinessObjective.title }\n            } });\n\n            if (error) { throw error; }\n\n            return data.createBusinessObjective.businessObjective.id;\n        }\n    };\n};\n\nexport default useCreateBusinessObjective;\n","import { useMutation } from '@apollo/client';\nimport { CREATE_PROFILE, UPDATE_PROFILE } from '../graphql/mutations';\n\nconst usePolicyMutation = () => {\n    const [updateProfile] = useMutation(UPDATE_PROFILE);\n    const [createProfile] = useMutation(CREATE_PROFILE);\n\n    return async (id, updatedPolicy, businessObjectiveId) => {\n        const { name, description, complianceThreshold } = updatedPolicy;\n        const details = {\n            name,\n            description,\n            complianceThreshold: parseFloat(complianceThreshold),\n            ...businessObjectiveId && { businessObjectiveId }\n        };\n\n        let mutatedPolicy;\n        let error;\n        if (id) {\n            const policyInput = { id, ...details };\n\n            const result = await updateProfile({ variables: { input: policyInput } });\n            mutatedPolicy = result.data?.updateProfile?.profile;\n            error = result.error;\n        } else {\n            const { cloneFromProfileId, refId, benchmarkId } = updatedPolicy;\n            const policyInput = {\n                ...details,\n                cloneFromProfileId,\n                refId,\n                benchmarkId\n            };\n\n            const result = await createProfile({ variables: { input: policyInput } });\n            mutatedPolicy = result.data?.createProfile?.profile;\n            error = result.error;\n        }\n\n        if (error) {\n            throw error;\n        }\n\n        return mutatedPolicy;\n    };\n};\n\nexport default usePolicyMutation;\n","import { useMutation } from '@apollo/client';\nimport { ASSOCIATE_SYSTEMS_TO_PROFILES } from '../graphql/mutations';\n\nconst useAssociateSystems = () => {\n    const [associateSystems] = useMutation(ASSOCIATE_SYSTEMS_TO_PROFILES);\n\n    return async ({ id }, hosts) => {\n        const { data, error } = await associateSystems({\n            variables: { input: {\n                id,\n                systemIds: hosts.map((h) => (h.id))\n            } }\n        });\n\n        if (error) { throw error; }\n\n        return data?.associateSystems?.profile;\n    };\n};\n\nexport default useAssociateSystems;\n","import { useMutation } from '@apollo/client';\nimport { ASSOCIATE_RULES_TO_PROFILE } from '../graphql/mutations';\n\nconst useAssociateRules = () => {\n    const [associateRules] = useMutation(ASSOCIATE_RULES_TO_PROFILE);\n\n    return async ({ id, ruleRefIds }, profiles) => {\n        const profile = profiles.find((profile) => (\n            profile.id === id || profile.parentProfileId === id\n        ));\n        const ruleInput = {\n            id: profile?.id,\n            ruleRefIds\n        };\n\n        const { error } = await associateRules({ variables: { input: ruleInput } });\n        if (error) { throw error; }\n    };\n};\n\nexport default useAssociateRules;\n","import { getStore } from 'Store';\n\nexport function dispatchAction(actionCreator) {\n    const store = getStore();\n    return store.dispatch(actionCreator);\n}\n"],"sourceRoot":""}