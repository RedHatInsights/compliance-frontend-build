{"version":3,"file":"js/DeleteReport.1643978350173.5868a7236d9c15cd0854.js","mappings":"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","sources":["webpack:///./src/Mutations/graphql/mutations.js","webpack:///./src/Mutations/hooks/usePolicy.js","webpack:///./src/Mutations/hooks/useCreateBusinessObjective.js","webpack:///./src/Mutations/hooks/usePolicyMutation.js","webpack:///./src/Mutations/hooks/useAssociateSystems.js","webpack:///./src/Mutations/hooks/useAssociateRules.js","webpack:///./src/SmartComponents/DeleteReport/DeleteReport.js"],"sourcesContent":["import gql from 'graphql-tag';\n\nexport const CREATE_PROFILE = gql`\n  mutation CreateProfile($input: createProfileInput!) {\n    createProfile(input: $input) {\n      profile {\n        id\n      }\n    }\n  }\n`;\n\nexport const ASSOCIATE_SYSTEMS_TO_PROFILES = gql`\n  mutation associateSystems($input: associateSystemsInput!) {\n    associateSystems(input: $input) {\n      profile {\n        id\n        policy {\n          id\n          profiles {\n            id\n            parentProfileId\n            osMinorVersion\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const ASSOCIATE_PROFILES_TO_SYSTEM = gql`\n  mutation associateProfiles($input: associateProfilesInput!) {\n    associateProfiles(input: $input) {\n      system {\n        id\n        name\n        profiles {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ASSOCIATE_RULES_TO_PROFILE = gql`\n  mutation associateRules($input: associateRulesInput!) {\n    associateRules(input: $input) {\n      profile {\n        id\n      }\n    }\n  }\n`;\n\nexport const UPDATE_PROFILE = gql`\n  mutation UpdateProfile($input: UpdateProfileInput!) {\n    updateProfile(input: $input) {\n      profile {\n        id\n        name\n        complianceThreshold\n        businessObjectiveId\n        description\n      }\n    }\n  }\n`;\n\nexport const CREATE_BUSINESS_OBJECTIVE = gql`\n  mutation createBusinessObjective($input: createBusinessObjectiveInput!) {\n    createBusinessObjective(input: $input) {\n      businessObjective {\n        id\n        title\n      }\n    }\n  }\n`;\n\nexport const DELETE_PROFILE = gql`\n  mutation DeleteProfile($input: deleteProfileInput!) {\n    deleteProfile(input: $input) {\n      profile {\n        id\n      }\n    }\n  }\n`;\n\nexport const DELETE_REPORT = gql`\n  mutation DeleteReport($input: deleteTestResultsInput!) {\n    deleteTestResults(input: $input) {\n      profile {\n        id\n      }\n    }\n  }\n`;\n","import useCreateBusinessObjective from './useCreateBusinessObjective';\nimport usePolicyMutation from './usePolicyMutation';\nimport useAssociateSystems from './useAssociateSystems';\nimport useAssociateRules from './useAssociateRules';\n\nconst usePolicy = () => {\n  const createBusinessObjective = useCreateBusinessObjective();\n  const policyMutation = usePolicyMutation();\n  const associateSystems = useAssociateSystems();\n  const associateRules = useAssociateRules();\n\n  return async (policy, updatedPolicy, onProgress) => {\n    const selectedRuleRefIds = updatedPolicy?.selectedRuleRefIds || [];\n\n    const expectedUpdates = 3 + selectedRuleRefIds.length;\n    let progress = 0;\n    const dispatchProgress = () => {\n      if (onProgress) {\n        onProgress(++progress / expectedUpdates);\n      }\n    };\n\n    const businessObjectiveId = await createBusinessObjective(\n      policy,\n      updatedPolicy?.businessObjective\n    );\n    dispatchProgress();\n\n    const mutatedPolicy = await policyMutation(\n      policy?.id,\n      updatedPolicy,\n      businessObjectiveId\n    );\n    dispatchProgress();\n\n    if (!policy) {\n      policy = mutatedPolicy;\n    }\n\n    const {\n      policy: { profiles },\n    } = await associateSystems(policy, updatedPolicy.hosts);\n    dispatchProgress();\n\n    for (const profileSelectedRuleRefIds of selectedRuleRefIds) {\n      await associateRules(profileSelectedRuleRefIds, profiles);\n      dispatchProgress();\n    }\n\n    return mutatedPolicy;\n  };\n};\n\nexport default usePolicy;\n","import { useMutation } from '@apollo/client';\nimport { CREATE_BUSINESS_OBJECTIVE } from '../graphql/mutations';\n\nconst useCreateBusinessObjective = () => {\n  const [create] = useMutation(CREATE_BUSINESS_OBJECTIVE);\n\n  return async (policy, newBusinessObjective) => {\n    if (policy?.businessObjective?.title === newBusinessObjective?.title) {\n      return policy?.businessObjective?.id;\n    } else if (newBusinessObjective?.title === '') {\n      return null;\n    } else {\n      const { data, error } = await create({\n        variables: {\n          input: { title: newBusinessObjective.title },\n        },\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      return data.createBusinessObjective.businessObjective.id;\n    }\n  };\n};\n\nexport default useCreateBusinessObjective;\n","import { useMutation } from '@apollo/client';\nimport { CREATE_PROFILE, UPDATE_PROFILE } from '../graphql/mutations';\n\nconst usePolicyMutation = () => {\n  const [updateProfile] = useMutation(UPDATE_PROFILE);\n  const [createProfile] = useMutation(CREATE_PROFILE);\n\n  return async (id, updatedPolicy, businessObjectiveId) => {\n    const { name, description, complianceThreshold } = updatedPolicy;\n    const details = {\n      name,\n      description,\n      businessObjectiveId,\n      complianceThreshold: parseFloat(complianceThreshold),\n    };\n\n    let mutatedPolicy;\n    let error;\n    if (id) {\n      const policyInput = { id, ...details };\n\n      const result = await updateProfile({ variables: { input: policyInput } });\n      mutatedPolicy = result.data?.updateProfile?.profile;\n      error = result.error;\n    } else {\n      const { cloneFromProfileId, refId, benchmarkId } = updatedPolicy;\n      const policyInput = {\n        ...details,\n        cloneFromProfileId,\n        refId,\n        benchmarkId,\n      };\n\n      const result = await createProfile({ variables: { input: policyInput } });\n      mutatedPolicy = result.data?.createProfile?.profile;\n      error = result.error;\n    }\n\n    if (error) {\n      throw error;\n    }\n\n    return mutatedPolicy;\n  };\n};\n\nexport default usePolicyMutation;\n","import { useMutation } from '@apollo/client';\nimport { ASSOCIATE_SYSTEMS_TO_PROFILES } from '../graphql/mutations';\n\nconst useAssociateSystems = () => {\n  const [associateSystems] = useMutation(ASSOCIATE_SYSTEMS_TO_PROFILES);\n\n  return async ({ id }, hosts) => {\n    const { data, error } = await associateSystems({\n      variables: {\n        input: {\n          id,\n          systemIds: hosts.map((h) => h.id),\n        },\n      },\n    });\n\n    if (error) {\n      throw error;\n    }\n\n    return data?.associateSystems?.profile;\n  };\n};\n\nexport default useAssociateSystems;\n","import { useMutation } from '@apollo/client';\nimport { ASSOCIATE_RULES_TO_PROFILE } from '../graphql/mutations';\n\nconst useAssociateRules = () => {\n  const [associateRules] = useMutation(ASSOCIATE_RULES_TO_PROFILE);\n\n  return async ({ id, osMinorVersion, ruleRefIds }, profiles) => {\n    const profile = profiles.find(\n      (profile) =>\n        profile.id === id ||\n        (profile.parentProfileId === id &&\n          profile.osMinorVersion === osMinorVersion)\n    );\n    const ruleInput = {\n      id: profile?.id,\n      ruleRefIds,\n    };\n\n    const { error } = await associateRules({ variables: { input: ruleInput } });\n    if (error) {\n      throw error;\n    }\n  };\n};\n\nexport default useAssociateRules;\n","import { Button, ModalVariant, TextContent } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { DELETE_REPORT } from 'Mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ComplianceModal } from 'PresentationalComponents';\nimport { dispatchAction } from 'Utilities/Dispatcher';\n\nconst DeleteReport = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const { id } = location.state?.profile;\n  const onClose = () => {\n    history.push(location.state.background);\n  };\n\n  const onDelete = () => {\n    history.push('/reports');\n  };\n\n  const [deleteReport] = useMutation(DELETE_REPORT, {\n    onCompleted: () => {\n      dispatchAction(\n        addNotification({\n          variant: 'success',\n          title: 'Report deleted',\n          description:\n            'Systems associated with this policy will upload reports on the next check-in.',\n        })\n      );\n      onDelete();\n    },\n    onError: (error) => {\n      dispatchAction(\n        addNotification({\n          variant: 'danger',\n          title: 'Error removing report',\n          description: error.message,\n        })\n      );\n      onClose();\n    },\n  });\n  return (\n    <ComplianceModal\n      isOpen\n      variant={ModalVariant.small}\n      title=\"Delete report\"\n      ouiaId=\"DeleteReportModal\"\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"destroy\"\n          ouiaId=\"DeleteReportButton\"\n          aria-label=\"delete\"\n          variant=\"danger\"\n          onClick={() =>\n            deleteReport({\n              variables: {\n                input: {\n                  profileId: id,\n                },\n              },\n            })\n          }\n        >\n          Delete report\n        </Button>,\n        <Button\n          key=\"cancel\"\n          ouiaId=\"DeleteReportCancelButton\"\n          variant=\"secondary\"\n          onClick={() => onClose()}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        Deleting a report is permanent and cannot be undone.\n      </TextContent>\n    </ComplianceModal>\n  );\n};\n\nDeleteReport.propTypes = {\n  onClose: propTypes.func,\n  isModalOpen: propTypes.bool,\n  onDelete: propTypes.func,\n  policyId: propTypes.string,\n};\n\nDeleteReport.defaultProps = {\n  onDelete: () => {},\n  onClose: () => {},\n};\n\nexport default DeleteReport;\n"],"names":["CREATE_PROFILE","gql","ASSOCIATE_SYSTEMS_TO_PROFILES","ASSOCIATE_RULES_TO_PROFILE","UPDATE_PROFILE","CREATE_BUSINESS_OBJECTIVE","DELETE_PROFILE","DELETE_REPORT","create","createBusinessObjective","useMutation","policy","newBusinessObjective","businessObjective","title","id","variables","input","data","error","policyMutation","updateProfile","createProfile","updatedPolicy","businessObjectiveId","name","description","complianceThreshold","details","parseFloat","policyInput","result","mutatedPolicy","profile","cloneFromProfileId","refId","benchmarkId","usePolicyMutation","associateSystems","hosts","systemIds","map","h","useAssociateSystems","associateRules","profiles","osMinorVersion","ruleRefIds","find","parentProfileId","ruleInput","useAssociateRules","onProgress","selectedRuleRefIds","expectedUpdates","length","progress","dispatchProgress","profileSelectedRuleRefIds","DeleteReport","history","useHistory","location","useLocation","state","onClose","push","background","onCompleted","dispatchAction","addNotification","variant","onError","message","deleteReport","C","isOpen","ModalVariant","ouiaId","actions","Button","key","onClick","profileId","TextContent","propTypes","isModalOpen","onDelete","policyId","defaultProps"],"sourceRoot":""}