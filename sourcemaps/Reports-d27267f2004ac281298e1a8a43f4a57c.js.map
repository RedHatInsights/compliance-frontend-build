{"version":3,"sources":["webpack:///./src/SmartComponents/Reports/Reports.js"],"names":["QUERY","gql","Reports","profiles","useQuery","fetchPolicy","data","error","loading","edges","map","profile","node","filter","totalHostCount","undefined","Fragment","title","stateValues","stateKey","className","hasGutter"],"mappings":"4iCASA,IAAMA,EAAQC,IAAH,KAmCEC,EAAU,WAAM,IAErBC,EAFqB,EACMC,mBAASJ,EAAO,CAAEK,YAAa,sBAAxDC,EADmB,EACnBA,KAAMC,EADa,EACbA,MAAOC,EADM,EACNA,QAanB,OAVIF,IACAH,EAAWG,EAAKH,SAASM,MAAMC,KAAI,SAACC,GAAD,OAC/BA,EAAQC,QACTC,QAAO,SAACF,GAAD,OACNA,EAAQG,eAAiB,KAE7BP,OAAQQ,EACRP,OAAUO,GAGP,kBAAC,IAAMC,SAAP,KACH,kBAAC,aAAD,KACI,kBAAC,kBAAD,CAAiBC,MAAM,wBAE3B,kBAAC,OAAD,KACI,kBAAC,IAAD,CAAoBC,YAAc,CAAEX,QAAOD,OAAME,YAC7C,kBAAC,IAAD,CAAeW,SAAS,WACpB,yBAAKC,UAAU,mBACX,kBAAC,OAAD,CAAMC,WAAS,GACX,kBAAC,IAAD,SAIZ,kBAAC,IAAD,CAAeF,SAAS,QACpB,yBAAKC,UAAU,mBACX,kBAAC,OAAD,CAAMC,WAAS,GACX,kBAAC,IAAD,CAAgBlB,SAAWA,WASxCD","file":"js/Reports-70e4d3b9005452ee7726.js","sourcesContent":["import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { Grid } from '@patternfly/react-core';\nimport { PageHeader, PageHeaderTitle, Main } from '@redhat-cloud-services/frontend-components';\nimport {\n    LoadingComplianceCards, ReportCardGrid, StateViewPart, StateViewWithError\n} from 'PresentationalComponents';\n\nconst QUERY = gql`\n{\n    profiles(search: \"has_test_results = true\", limit: 1000){\n        edges {\n            node {\n                id\n                name\n                refId\n                description\n                totalHostCount\n                compliantHostCount\n                majorOsVersion\n                complianceThreshold\n                businessObjective {\n                    id\n                    title\n                }\n                policy {\n                    id\n                    benchmark {\n                        id\n                        version\n                    }\n                }\n                benchmark {\n                    id\n                    version\n                }\n            }\n        }\n\n    }\n}\n`;\n\nexport const Reports = () => {\n    let { data, error, loading } = useQuery(QUERY, { fetchPolicy: 'cache-and-network' });\n    let profiles;\n\n    if (data) {\n        profiles = data.profiles.edges.map((profile) => (\n            profile.node\n        )).filter((profile) => (\n            profile.totalHostCount > 0\n        ));\n        error = undefined;\n        loading = undefined;\n    }\n\n    return <React.Fragment>\n        <PageHeader>\n            <PageHeaderTitle title=\"Compliance reports\" />\n        </PageHeader>\n        <Main>\n            <StateViewWithError stateValues={ { error, data, loading } }>\n                <StateViewPart stateKey='loading'>\n                    <div className=\"policies-donuts\">\n                        <Grid hasGutter>\n                            <LoadingComplianceCards />\n                        </Grid>\n                    </div>\n                </StateViewPart>\n                <StateViewPart stateKey='data'>\n                    <div className=\"policies-donuts\">\n                        <Grid hasGutter>\n                            <ReportCardGrid profiles={ profiles } />\n                        </Grid>\n                    </div>\n                </StateViewPart>\n            </StateViewWithError>\n        </Main>\n    </React.Fragment>;\n};\n\nexport default Reports;\n"],"sourceRoot":""}