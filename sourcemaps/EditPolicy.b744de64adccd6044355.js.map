{"version":3,"sources":["webpack:///./src/SmartComponents/ComplianceSystems/ComplianceSystems.js","webpack:///./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyProfilesRules.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack:///./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack:///./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyDetailsTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyRulesTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicySystemsTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyForm.js","webpack:///./src/SmartComponents/EditPolicy/hooks.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicy.js","webpack:///./src/SmartComponents/SystemsTable/Cells.js","webpack:///./src/SmartComponents/SystemsTable/Columns.js","webpack:///./src/SmartComponents/SystemsTable/constants.js","webpack:///./src/SmartComponents/InventoryDetails/InventoryDetails.js","webpack:///./src/Utilities/hooks/api/utils/ApiClient.js","webpack:///./src/Utilities/hooks/api/useApi.js","webpack:///./src/Utilities/hooks/api/useCollection.js","webpack:///./src/Utilities/hooks/useTableTools/useExport.js","webpack:///./src/SmartComponents/SystemsTable/hooks.js","webpack:///./src/SmartComponents/SystemsTable/InventoryTable.js","webpack:///./src/store/Reducers/SystemStore.js"],"names":["QUERY","gql","ComplianceSystems","useQuery","data","error","loading","policies","profiles","edges","map","node","className","title","stateValues","stateKey","columns","Columns","showLink","showOsInfo","query","GET_SYSTEMS","defaultFilter","systemProps","isFullView","showOsMinorVersionFilter","policy","majorOsVersion","showComplianceSystemsInfo","enableEditPolicy","remediationsEnabled","BENCHMARKS_AND_PROFILES","PolicyTooltip","Tooltip","position","content","CreateSCAPPolicy","change","selectedBenchmarkId","fetchPolicy","Spinner","selectedBenchmark","validProfiles","benchmark","benchmarks","latestBenchmarks","find","id","userProfileRefIds","filter","profile","refId","disabled","includes","TextContent","Text","component","TextVariants","Form","FormGroup","label","isRequired","fieldId","sort","a","b","localeCompare","osMajorVersion","Tile","key","onClick","setBenchmark","isSelected","isStacked","labelIcon","undefined","propTypes","reduxFormPropTypes","selector","formValueSelector","compose","connect","state","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","PROFILES_QUERY","BENCHMARKS_QUERY","EditPolicyProfilesRules","selectedRuleRefIds","osMinorVersionCounts","osMinorVersions","i","osMinorVersion","benchmarkSearch","join","variables","skip","length","benchmarksData","benchmarksError","benchmarksLoading","nodes","tabsData","systemCount","count","latestSupportedOsMinorVersions","getBenchmarkBySupportedOsMinor","profileRefId","benchmarkProfile","getBenchmarkProfile","newOsMinorVersion","profileToOsMinorMap","tabsDataToOsMinorMap","profileIds","Object","keys","skipProfilesQuery","profilesData","profilesError","profilesLoading","dataState","loadingState","noRuleSets","p","setSelectedRuleRefIds","newSelection","useLayoutEffect","profilesWithOs","extendProfilesByOsMinor","profilesWithRulesToSelection","only","name","EmptyState","Title","headingLevel","size","EmptyStateBody","EmptyTable","TabbedRules","selectedFilter","level","JSON","parse","WizardContextConsumer","goToStepById","Button","PrependComponent","EditPolicySystems","selectedSystems","prependComponent","emptyStateComponent","props","width","sortBy","compact","showActions","GET_SYSTEMS_WITHOUT_FAILED_RULES","enableExport","preselectedSystems","onSelect","newSelectedSystems","countOsMinorVersions","defaultProps","EditPolicyDetails","useEffect","description","Field","ReduxFormTextInput","type","aria-describedby","isDisabled","ReduxFormTextArea","defaultValue","businessObjective","previousThreshold","complianceThreshold","initialValues","REVIEW","ReviewCreatedPolicy","benchmarkId","parentProfileName","style","marginTop","TextList","TextListVariants","TextListItem","TextListItemVariants","fontWeight","parseFloat","rulesCount","EmtpyStateWithErrors","errors","Array","isArray","List","ListItem","FinishedCreatePolicy","onWizardFinish","cloneFromProfileId","systems","useState","percent","setPercent","message","setMessage","setErrors","failed","setFailed","updatePolicy","usePolicy","onProgress","progress","hosts","then","dispatchNotification","variant","autoDismiss","catch","networkError","result","Bullseye","EmptyStateVariant","EmptyStateIcon","icon","WrenchIcon","EmptyStateSecondaryActions","ouiaId","withApollo","CreatePolicy","systemIds","history","useHistory","stepIdReached","setStepIdReached","resetAnchor","location","hash","push","onClose","steps","enableNext","validateBenchmarkPage","canJumpTo","validateDetailsPage","validateSystemsPage","validateRulesPage","nextButtonText","isFinishedStep","Wizard","isOpen","onNext","onGoToStep","onBack","dispatch","EditPolicyDetailsTab","setUpdatedPolicy","validThreshold","setValidThreshold","threshold","valid","thresholdValid","useThresholdValidate","validateThreshold","TextArea","height","onChange","value","TextInput","validated","helperTextInvalid","helperText","complianceThresholdValid","EditPolicyRulesTabEmptyState","EditPolicyRulesTab","setNewRuleTabs","values","sortingByProp","parentProfileId","toTabsData","tab","prevSelection","empty","EditPolicySystemsTab","newRuleTabs","onSystemSelect","Alert","isInline","actionLinks","AlertActionLink","EditPolicyForm","setSelectedSystems","policyProfiles","setOsMinorVersionCounts","handleSystemSelect","reduce","acc","mapCountOsMinorVersions","profilesWithOsMinor","updateSelectedRuleRefIds","defaultTab","Tab","eventKey","TabTitleText","useLinkToPolicy","anchor","useAnchor","linkToBackground","useLinkToBackground","MULTIVERSION_QUERY","EditPolicy","route","policyId","useParams","policy_id","linkToPolicy","updatedPolicy","saveEnabled","updatedPolicyHostsAndRules","isSaving","setIsSaving","Promise","resolve","useOnSave","onSave","actions","spinnerAriaValueText","isLoading","useTitleEntity","Modal","minHeight","SystemLink","children","Link","to","pathname","Name","hasOsInfo","SSGVersion","ssgVersion","supported","messageVariant","SSGVersions","testResultProfiles","DetailsLink","FailedRules","rulesFailed","profilesRulesFailed","NEVER","complianceScoreData","scoreTotal","score","rulesPassed","profilesRulesPassed","numScored","compliant","every","lastScanned","systemSupportedByProfiles","ComplianceScore","complianceScore","dates","Date","last","Math","max","apply","date","isFinite","LastScanned","lastScannedDate","DateFormat","operatingSystemString","disableSorting","isStatic","compileColumnRenderFunc","cell","column","renderFunc","renderComponent","renderExport","system","NameCell","customName","SsgVersion","transforms","nowrap","exportKey","SsgVersionCell","Policies","export","DetailsLinkCell","FailedRulesCell","complianceScoreString","trim","ComplianceScoreCell","LastScannedCell","OperatingSystem","policyFilter","osFilter","systemsPolicyFilterConfiguration","systemsOsFilterConfiguration","osMinorVersionFilter","systemsOsMinorFilterConfiguration","defaultOnLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","getRegistry","register","entitiesReducer","InventoryDetails","registryDecorator","DetailWrapper","onLoad","mergeWithDetail","InventoryDetail","fallback","Skeleton","SkeletonSize","hideBack","React","entity","options","Accept","this","apiBase","path","authenticate","onUnauthorised","defaultHeaders","headers","DEFAULT_API_HEADERS","apiProps","method","callAuthenticate","fetch","checkForEmptyResponse","response","checkForErrors","json","finalCatch","promise","reject","params","credentials","fullPath","url","URL","window","origin","encodeURIComponent","search","URLSearchParams","body","stringify","status","ignore404","responseCloneJson","clone","request","ApiClient","includeAttributes","prop","attributes","newEntity","includePropAndDelete","normalizeData","jsonNormalized","normalize","normalizedJson","relationships","entries","forEach","item","relationship","relationshipData","v","includeRelationship","fetchCollection","apiClient","collection","get","normalized","meta","total","ENCODINGS","csv","filename","format","CSV_FILE_PREFIX","toISOString","encoding","linkAndDownload","link","document","createElement","href","download","click","textForCell","row","getProperty","csvForItems","items","csvRows","encodeURI","jsonForItems","object","camelCase","useOsMinorVersionFilter","showFilter","supportedSsgs","dependencies","collectionState","setCollectionState","useApi","COMPLIANCE_API_ROOT","include","useCollection","showVersion","version","String","currentValue","Set","groupByMajorVersion","useFetchSystems","onComplete","client","useApolloClient","perPage","page","requestVariables","fetchResults","e","entities","systemsWithRuleObjectsFailed","totalCount","toIdFilter","ids","InventoryTable","showAllSystems","compliantFilter","showOnlySystemsWithTestResults","showOsFilter","onSelectProp","noSystemsTable","inventory","useRef","isEmpty","setIsEmpty","isLoaded","setIsLoaded","setItems","setTotal","setSelected","selectedSystemIds","isPageSelected","onSelectCallback","selected","_event","select","_index","console","onBulkSelect","selectedSystemsWithoutItems","useOnSelect","selectedCount","useFilterConfig","DEFAULT_SYSTEMS_FILTER_CONFIGURATION","COMPLIANT_SYSTEMS_FILTER_CONFIGURATION","conditionalFilter","activeFilters","filterString","activeFilterValues","useDispatch","payload","debounceResetPage","debounce","current","onRefreshData","useInventoryUtilities","systemsFilter","combindedFilter","useSystemsFilter","getEntities","fetchEntities","appendDirection","direction","attribute","findColumnByKey","_ids","per_page","orderBy","orderDirection","filters","sortableColumn","fetchedEntities","results","useGetEntities","exportConfig","selectionFilter","fetchSystems","fetchBatched","pages","floor","all","_","pageIdx","exporter","exportableColumns","exportWithFormat","formater","info","toolbarProps","useExport","fetchedItems","flatMap","useSystemsExport","noError","ref","hideFilters","tags","registeredWith","stale","tableProps","canSelectAll","TableVariant","bulkSelect","checked","dedicatedAction","ComplianceRemediationButton","allSystems","selectedRules","beta","split","PropTypes","selectRows","rows","INVENTORY_ACTION","applyReducerHash","LOAD_ENTITIES_PENDING","LOAD_ENTITIES_FULFILLED"],"mappings":"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","file":"js/EditPolicy.d64fb3f84bb908bc44af.js","sourcesContent":["/* eslint-disable react/display-name */\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport { InventoryTable } from 'SmartComponents';\nimport { GET_SYSTEMS } from '../SystemsTable/constants';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst QUERY = gql`\n{\n    profiles(search: \"external = false and canonical = false\") {\n        edges {\n            node {\n                id\n                name\n                refId\n                majorOsVersion\n            }\n        }\n    }\n}\n`;\n\nconst DEFAULT_FILTER = 'has_test_results = true or has_policy = true';\n\nexport const ComplianceSystems = () => {\n    const { data, error, loading } = useQuery(QUERY);\n    const policies = data?.profiles?.edges.map(({ node }) => node);\n\n    return (\n        <React.Fragment>\n            <PageHeader className='page-header'>\n                <PageHeaderTitle title=\"Systems\" />\n            </PageHeader>\n            <Main>\n                <StateViewWithError stateValues={ { error, data, loading } }>\n                    <StateViewPart stateKey=\"data\">\n                        { policies && <InventoryTable\n                            columns={[\n                                Columns.customName({\n                                    showLink: true,\n                                    showOsInfo: true\n                                }),\n                                Columns.Policies,\n                                Columns.DetailsLink\n                            ]}\n                            query={GET_SYSTEMS}\n                            defaultFilter={ DEFAULT_FILTER }\n                            systemProps={{\n                                isFullView: true\n                            }}\n                            showOsMinorVersionFilter={ policies.map((policy) => (policy.majorOsVersion)) }\n                            showComplianceSystemsInfo\n                            enableEditPolicy={ false }\n                            remediationsEnabled={ false }\n                            policies={ policies } /> }\n                    </StateViewPart>\n                </StateViewWithError>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default ComplianceSystems;\n","import React from 'react';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport {\n    Form,\n    FormGroup,\n    Text,\n    TextContent,\n    TextVariants,\n    Tile,\n    Tooltip\n} from '@patternfly/react-core';\nimport { ProfileTypeSelect } from 'PresentationalComponents';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { propTypes as reduxFormPropTypes, formValueSelector, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\n\nconst BENCHMARKS_AND_PROFILES = gql`\nquery benchmarksAndProfiles {\n    latestBenchmarks {\n        id\n        title\n        refId\n        version\n        osMajorVersion\n        profiles {\n            id\n            name\n            refId\n            description\n            complianceThreshold\n        }\n    }\n    profiles(search: \"external = false and canonical = false\") {\n        edges {\n            node {\n                id\n                refId\n                benchmark {\n                    refId\n                }\n            }\n        }\n    }\n}\n`;\n\nconst PolicyTooltip = () => (\n    <Tooltip\n        position=\"right\"\n        content=\"Policy types are OpenSCAP policies that are supported by RHEL.\n        For each major version of RHEL, users can create one policy of each type.\">\n        <OutlinedQuestionCircleIcon className=\"grey-icon\"/>\n    </Tooltip>\n);\n\nexport const CreateSCAPPolicy = ({ change, selectedBenchmarkId }) => {\n    const { data, error, loading } = useQuery(BENCHMARKS_AND_PROFILES, { fetchPolicy: 'no-cache' });\n\n    const inUseProfileRefIds = (profiles, benchmark) => (\n        profiles.filter(profile => benchmark.refId === profile.node.benchmark.refId).map(profile => profile.node.refId)\n    );\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const benchmarks = data.latestBenchmarks;\n    let selectedBenchmark;\n    let validProfiles;\n    if (selectedBenchmarkId) {\n        selectedBenchmark = benchmarks.find(benchmark => benchmark.id === selectedBenchmarkId);\n        const userProfileRefIds = inUseProfileRefIds(data.profiles.edges, selectedBenchmark);\n        validProfiles = selectedBenchmark.profiles.map((profile) => ({\n            ...profile,\n            disabled: userProfileRefIds.includes(profile.refId)\n        }));\n    }\n\n    const setBenchmark = ({ id, osMajorVersion }) => {\n        if (selectedBenchmark?.osMajorVersion !== osMajorVersion) {\n            change('systems', []);\n        }\n\n        change('benchmark', id);\n        change('osMajorVersion', osMajorVersion);\n    };\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1} className=\"pf-u-mb-md\">\n                    Create SCAP policy\n                </Text>\n                <Text className=\"pf-u-mb-md\">\n                    Select the operating system and policy type for this policy.\n                </Text>\n            </TextContent>\n            <Form>\n                <FormGroup\n                    label=\"Operating system\"\n                    isRequired\n                    fieldId=\"benchmark\">\n                    { benchmarks && benchmarks.sort((a, b) => a.refId.localeCompare(b.refId)).map((benchmark) => {\n                        const { id, osMajorVersion } = benchmark;\n                        return (\n                            <Tile\n                                key={id}\n                                className=\"pf-u-mr-md\"\n                                title={ `RHEL ${osMajorVersion}` }\n                                onClick={ () => setBenchmark(benchmark) }\n                                isSelected={ selectedBenchmarkId === id }\n                                isStacked />\n                        );\n                    })}\n                </FormGroup>\n                <FormGroup\n                    isRequired\n                    labelIcon={<PolicyTooltip/>}\n                    label=\"Policy type\"\n                    fieldId=\"policy-type\">\n                    <ProfileTypeSelect\n                        profiles={selectedBenchmark && validProfiles }\n                        onClick={ () => {\n                            change('selectedRuleRefIds', undefined);\n                        }}/>\n                </FormGroup>\n            </Form>\n        </React.Fragment>\n    );\n};\n\nCreateSCAPPolicy.propTypes = {\n    selectedBenchmarkId: propTypes.string,\n    change: reduxFormPropTypes.change\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            selectedBenchmarkId: selector(state, 'benchmark')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(CreateSCAPPolicy);\n","import React, { useLayoutEffect } from 'react';\nimport { propTypes as reduxFormPropTypes, formValueSelector, reduxForm } from 'redux-form';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n    Title, Text, TextContent, TextVariants,\n    EmptyState, EmptyStateBody\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n    TabbedRules, profilesWithRulesToSelection, tabsDataToOsMinorMap, extendProfilesByOsMinor\n} from 'PresentationalComponents/TabbedRules';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\n\nconst PROFILES_QUERY = gql`\nquery Profiles($filter: String!){\n    profiles(search: $filter){\n        edges {\n            node {\n                id\n                name\n                refId\n                osMinorVersion\n                osMajorVersion\n                policy {\n                    id\n\n                }\n                policyType\n                benchmark {\n                    id\n                    refId\n                    latestSupportedOsMinorVersions\n                    osMajorVersion\n                }\n                ssgVersion\n                rules {\n                    id\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n    }\n}\n`;\n\nconst BENCHMARKS_QUERY = gql`\nquery Benchmarks($filter: String!){\n    benchmarks(search: $filter){\n        nodes {\n            id\n            latestSupportedOsMinorVersions\n            profiles {\n                id\n                refId\n                osMajorVersion\n                ssgVersion\n            }\n        }\n    }\n}\n`;\n\nconst getBenchmarkProfile = (benchmark, profileRefId) => (\n    benchmark.profiles.find((benchmarkProfile) => (benchmarkProfile.refId === profileRefId))\n);\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) => (\n    benchmarks.find((benchmark) =>\n        benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n    )\n);\n\nexport const EditPolicyProfilesRules = ({ policy, selectedRuleRefIds, change, osMajorVersion, osMinorVersionCounts }) => {\n    const columns = [Columns.Name, Columns.Severity, Columns.Ansible];\n    const osMinorVersions = osMinorVersionCounts.map((i) => (i.osMinorVersion)).sort();\n    const benchmarkSearch = `os_major_version = ${ osMajorVersion } ` +\n        `and latest_supported_os_minor_version ^ \"${ osMinorVersions.join(',') }\"`;\n\n    const {\n        data: benchmarksData,\n        error: benchmarksError,\n        loading: benchmarksLoading\n    } = useQuery(BENCHMARKS_QUERY, {\n        variables: {\n            filter: benchmarkSearch\n        },\n        skip: osMinorVersions.length === 0\n    });\n\n    const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n    let tabsData = osMinorVersionCounts.map(({ osMinorVersion, count: systemCount }) => {\n        osMinorVersion = `${osMinorVersion}`;\n        let profile;\n        if (benchmarks) {\n            const benchmark = getBenchmarkBySupportedOsMinor(benchmarks, osMinorVersion);\n            if (benchmark) {\n                profile = getBenchmarkProfile(benchmark, policy.refId);\n                if (profile) {\n                    profile = {\n                        ...profile,\n                        benchmark\n                    };\n                }\n            }\n        }\n\n        return {\n            profile,\n            systemCount,\n            newOsMinorVersion: osMinorVersion\n        };\n    });\n    tabsData = tabsData.filter(({ profile }) => !!profile);\n\n    const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n    const profileIds = Object.keys(profileToOsMinorMap);\n    const filter = profileIds.map((i) => `id = ${ i }`).join(' OR ');\n    const skipProfilesQuery = benchmarksLoading || filter.length === 0;\n    const { data: profilesData, error: profilesError, loading: profilesLoading } = useQuery(PROFILES_QUERY, {\n        variables: {\n            filter\n        },\n        skip: skipProfilesQuery\n    });\n    const error = benchmarksError || profilesError;\n    const dataState = ((profileIds?.length > 0) ? profilesData : undefined);\n    const loadingState = ((profilesLoading || benchmarksLoading) ? true : undefined);\n    const noRuleSets = !error && !loadingState && profileIds?.length === 0;\n    const profiles = skipProfilesQuery ? [] : profilesData?.profiles.edges.map((p) => (p.node));\n\n    const setSelectedRuleRefIds = (newSelection) => {\n        change('selectedRuleRefIds', newSelection);\n    };\n\n    useLayoutEffect(() => {\n        if (!loadingState) {\n            const profilesWithOs = extendProfilesByOsMinor(profiles, profileToOsMinorMap);\n            const newSelection = profilesWithRulesToSelection(\n                profilesWithOs, selectedRuleRefIds, { only: true }\n            );\n            setSelectedRuleRefIds(newSelection);\n        }\n    }, [profiles, loadingState]);\n\n    return <React.Fragment>\n        <TextContent className='pf-u-pb-md'>\n            <Text component={TextVariants.h1}>\n                Rules\n            </Text>\n            <Text>\n                Customize your <b>{ policy.name }</b> SCAP policy by including and excluding rules.\n            </Text>\n            <Text>\n                Each release of RHEL is supported with a unique and specific version of the SCAP Security\n                Guide (SSG). You must customize each version of SSG for each release of RHEL.\n            </Text>\n        </TextContent>\n\n        <StateViewWithError stateValues={ { error, data: dataState, loading: loadingState, noRuleSets } }>\n            <StateViewPart stateKey=\"noRuleSets\">\n                <EmptyState>\n                    <Title headingLevel=\"h1\" size=\"xl\">\n                        No rules can be configured\n                    </Title>\n                    <EmptyStateBody>\n                        The policy type selected does not exist for the systems and\n                        OS versions selected in the previous steps.\n                    </EmptyStateBody>\n                </EmptyState>\n            </StateViewPart>\n            <StateViewPart stateKey=\"loading\">\n                <EmptyTable><Spinner/></EmptyTable>\n            </StateViewPart>\n            <StateViewPart stateKey=\"data\">\n                <TabbedRules\n                    tabsData={ tabsData }\n                    selectedRuleRefIds={ selectedRuleRefIds }\n                    columns={ columns }\n                    remediationsEnabled={ false }\n                    selectedFilter\n                    level={ 1 }\n                    setSelectedRuleRefIds={ setSelectedRuleRefIds } />\n            </StateViewPart>\n        </StateViewWithError>\n    </React.Fragment>;\n};\n\nEditPolicyProfilesRules.propTypes = {\n    policy: propTypes.object,\n    change: reduxFormPropTypes.change,\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    selectedRuleRefIds: propTypes.array\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            policy: JSON.parse(selector(state, 'profile')),\n            osMajorVersion: selector(state, 'osMajorVersion'),\n            osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n            selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyProfilesRules);\n","import React from 'react';\nimport { propTypes as reduxFormPropTypes, reduxForm, formValueSelector } from 'redux-form';\nimport { Button, Form, FormGroup, Text, TextContent, TextVariants, WizardContextConsumer } from '@patternfly/react-core';\nimport { InventoryTable } from 'SmartComponents';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { countOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n    <React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                You do not have any <b>RHEL { osMajorVersion }</b> systems connected to Insights and enabled for Compliance.<br/>\n                Policies must be created with at least one system.\n            </Text>\n        </TextContent>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Choose a different operating system, or connect <b>RHEL { osMajorVersion }</b> systems to Insights.\n            </Text>\n        </TextContent>\n        <WizardContextConsumer>\n            { ({ goToStepById }) => <Button onClick={() => goToStepById(1)}>Choose a different operating system</Button> }\n        </WizardContextConsumer>\n    </React.Fragment>\n);\n\nEmptyState.propTypes = {\n    osMajorVersion: propTypes.string\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n    <React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Select which of your <b>RHEL { osMajorVersion }</b> systems should be included\n                in this policy.<br />\n                Systems can be added or removed at any time.\n            </Text>\n        </TextContent>\n    </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n    osMajorVersion: propTypes.string\n};\n\nexport const EditPolicySystems = ({ change, osMajorVersion, selectedSystems }) => {\n    const onSystemSelect = (newSelectedSystems) => {\n        change('systems', newSelectedSystems);\n        change('osMinorVersionCounts', countOsMinorVersions(newSelectedSystems));\n    };\n\n    return (\n        <React.Fragment>\n            <TextContent className=\"pf-u-mb-md\">\n                <Text component={TextVariants.h1}>\n                    Systems\n                </Text>\n            </TextContent>\n            <Form>\n                <FormGroup>\n                    <InventoryTable\n                        showOsMinorVersionFilter={ [osMajorVersion] }\n                        prependComponent={ <PrependComponent osMajorVersion={ osMajorVersion } /> }\n                        emptyStateComponent={ <EmptyState osMajorVersion={ osMajorVersion } /> }\n                        columns={[{\n                            ...Columns.Name,\n                            props: {\n                                width: 40\n                            },\n                            sortBy: ['name']\n                        }, {\n                            ...Columns.OperatingSystem,\n                            props: {},\n                            sortBy: ['osMajorVersion', 'osMinorVersion']\n                        }]}\n                        remediationsEnabled={false}\n                        compact\n                        showActions={ false }\n                        query={ GET_SYSTEMS_WITHOUT_FAILED_RULES }\n                        defaultFilter={ osMajorVersion && `os_major_version = ${osMajorVersion}` }\n                        enableExport={ false }\n                        preselectedSystems={ selectedSystems }\n                        onSelect={ onSystemSelect } />\n                </FormGroup>\n            </Form>\n        </React.Fragment>\n    );\n};\n\nEditPolicySystems.propTypes = {\n    osMajorVersion: propTypes.string,\n    selectedSystems: propTypes.array,\n    change: reduxFormPropTypes.change\n};\n\nEditPolicySystems.defaultProps = {\n    selectedSystems: []\n};\n\nconst selector = formValueSelector('policyForm');\nconst mapStateToProps = (state) => ({\n    osMajorVersion: selector(state, 'osMajorVersion'),\n    selectedSystems: selector(state, 'systems')\n});\n\nexport default compose(\n    connect(mapStateToProps),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicySystems);\n","import React, { useEffect } from 'react';\nimport { compose } from 'redux';\nimport { Field, reduxForm, formValueSelector, propTypes as reduxFormPropTypes } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Form, FormGroup, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { ReduxFormTextInput, ReduxFormTextArea } from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport {\n    ProfileThresholdField,\n    PolicyBusinessObjectiveTooltip\n} from 'PresentationalComponents';\n\nexport const EditPolicyDetails = ({ change, policy, refId }) => {\n\n    useEffect(() => {\n        if (policy && policy.refId !== refId) {\n            change('name', `${policy.name}`);\n            change('refId', `${policy.refId}`);\n            change('description', `${policy.description}`);\n        }\n    }, [policy]);\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Details\n                </Text>\n            </TextContent>\n            <br/>\n            <Form id='editpolicydetails'>\n                <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n                    <Field\n                        component={ReduxFormTextInput}\n                        type='text'\n                        isRequired={true}\n                        id=\"name\"\n                        name=\"name\"\n                        aria-describedby=\"name\" />\n                </FormGroup>\n                <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextInput}\n                        isDisabled\n                        id=\"refId\"\n                        name=\"refId\"\n                        aria-describedby=\"refId\" />\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"description\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextArea}\n                        id=\"description\"\n                        name=\"description\"\n                        aria-describedby=\"description\" />\n                </FormGroup>\n                <FormGroup\n                    label=\"Business objective\"\n                    labelIcon={ <PolicyBusinessObjectiveTooltip /> }\n                    fieldId=\"businessObjective\">\n                    <Field\n                        type=\"text\"\n                        component={ ReduxFormTextInput }\n                        id=\"businessObjective\"\n                        name=\"businessObjective\"\n                        aria-describedby=\"businessObjective\"\n                        defaultValue={ policy.businessObjective } />\n                </FormGroup>\n                <ProfileThresholdField\n                    previousThreshold={ policy.complianceThreshold } />\n            </Form>\n        </React.Fragment>\n    );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n    policy: propTypes.object,\n    refId: propTypes.string,\n    change: reduxFormPropTypes.change\n};\n\nconst mapStateToProps = (state) => {\n    const policy = JSON.parse(selector(state, 'profile'));\n    return {\n        policy,\n        refId: selector(state, 'refId'),\n        initialValues: {\n            name: `${policy.name}`,\n            refId: `${policy.refId}`,\n            description: `${policy.description}`,\n            benchmark: selector(state, 'benchmark'),\n            osMajorVersion: selector(state, 'osMajorVersion'),\n            profile: selector(state, 'profile')\n        }\n    };\n};\n\nexport default compose(\n    connect(mapStateToProps),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyDetails);\n","import React from 'react';\nimport {\n    Text,\n    TextVariants,\n    TextContent,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useQuery } from '@apollo/client';\n\nconst REVIEW = gql`\nquery review($benchmarkId: String!) {\n    benchmark(id: $benchmarkId) {\n        id\n        osMajorVersion\n    }\n}\n`;\n\nconst ReviewCreatedPolicy = ({\n    benchmarkId, name, businessObjective, complianceThreshold, parentProfileName, osMinorVersionCounts\n}) => {\n    const { data, error, loading } = useQuery(REVIEW, { variables: { benchmarkId } });\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const { benchmark: { osMajorVersion } } = data;\n\n    return (\n        <TextContent>\n            <Text component={TextVariants.h1}>\n                Review\n            </Text>\n            <Text>\n                Review your SCAP policy before finishing.\n            </Text>\n            <Text component={TextVariants.h3} style={ { marginTop: 0 } }>{ name }</Text>\n            <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>Policy type</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ parentProfileName }</TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Compliance threshold</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ complianceThreshold }%</TextListItem>\n                { businessObjective &&\n                    <React.Fragment>\n                        <TextListItem component={TextListItemVariants.dt}>Business objective</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{ businessObjective }</TextListItem>\n                    </React.Fragment>\n                }\n                <TextListItem component={TextListItemVariants.dt}>Systems</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                    <TextList component={TextListVariants.dl}>\n                        { osMinorVersionCounts.map(({ osMinorVersion, count }) => (\n                            <React.Fragment key={osMinorVersion}>\n                                <TextListItem component={TextListItemVariants.dt} style={{ fontWeight: 'normal' }}>\n                                    RHEL {osMajorVersion}.{osMinorVersion}\n                                </TextListItem>\n                                <TextListItem component={TextListItemVariants.dd}>\n                                    { count } { count > 1 ? 'systems' : 'system' }\n                                </TextListItem>\n                            </React.Fragment>\n                        )) }\n                    </TextList>\n                </TextListItem>\n            </TextList>\n        </TextContent>\n    );\n};\n\nReviewCreatedPolicy.propTypes = {\n    benchmarkId: propTypes.string,\n    refId: propTypes.string,\n    name: propTypes.string,\n    businessObjective: propTypes.string,\n    complianceThreshold: propTypes.number,\n    parentProfileName: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    }))\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect(\n    state => ({\n        benchmarkId: selector(state, 'benchmark'),\n        refId: selector(state, 'refId'),\n        name: selector(state, 'name'),\n        businessObjective: selector(state, 'businessObjective'),\n        osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n        complianceThreshold: parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n        parentProfileName: JSON.parse(selector(state, 'profile')).name,\n        rulesCount: selector(state, 'selectedRuleRefIds').length\n    })\n)(ReviewCreatedPolicy);\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Title, Button, Bullseye, EmptyState, EmptyStateBody, EmptyStateSecondaryActions,\n    EmptyStateVariant, EmptyStateIcon, List, ListItem\n} from '@patternfly/react-core';\nimport { ProgressBar } from 'PresentationalComponents';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from '@apollo/client/react/hoc';\nimport { usePolicy } from 'Mutations';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nconst EmtpyStateWithErrors = ({ errors }) => (\n    (errors && Array.isArray(errors) && errors.length > 0) ? (\n        <EmptyStateBody className='wizard-failed-errors'>\n            <List>\n                {\n                    errors.map((error) => (\n                        <ListItem key={ error }>{ error }</ListItem>\n                    ))\n                }\n            </List>\n        </EmptyStateBody>\n    ) : null\n);\n\nEmtpyStateWithErrors.propTypes = {\n    errors: propTypes.array\n};\n\nexport const FinishedCreatePolicy = ({\n    onWizardFinish,\n    cloneFromProfileId,\n    description,\n    name,\n    complianceThreshold,\n    businessObjective,\n    refId,\n    benchmarkId,\n    systems,\n    selectedRuleRefIds\n}) => {\n    const [percent, setPercent] = useState(0);\n    const [message, setMessage] = useState('This usually takes a minute or two.');\n    const [errors, setErrors] = useState(null);\n    const [failed, setFailed] = useState(false);\n    const updatePolicy = usePolicy();\n\n    const onProgress = (progress) => {\n        setPercent(progress * 100);\n    };\n\n    useEffect(() => {\n        const newPolicy = {\n            cloneFromProfileId,\n            description,\n            name,\n            complianceThreshold,\n            businessObjective: { title: businessObjective },\n            refId,\n            benchmarkId,\n            hosts: systems,\n            selectedRuleRefIds\n        };\n\n        updatePolicy(null, newPolicy, onProgress).then(() => {\n            setPercent(100);\n            setMessage();\n            dispatchNotification({\n                variant: 'success',\n                title: `Policy created`,\n                autoDismiss: true,\n                description: <span>\n                    From the <strong>SCAP Policies</strong> page, open { name }.\n                </span>\n            });\n        }).catch((error) => {\n            setMessage(error.networkError?.message);\n            setErrors(error.networkError?.result?.errors);\n            setFailed(true);\n            dispatchNotification({\n                variant: 'danger',\n                title: 'Error creating policy',\n                description: error.message\n            });\n        });\n    }, []);\n\n    return (\n        <Bullseye>\n            <EmptyState variant={EmptyStateVariant.full}>\n                <EmptyStateIcon icon={WrenchIcon} />\n                <br/>\n                <Title headingLevel=\"h1\" size='lg'>\n                    Creating policy\n                </Title>\n                <EmptyStateBody>\n                    <ProgressBar percent={percent} failed={failed} />\n                </EmptyStateBody>\n                <EmptyStateBody className={failed && 'wizard-failed-message'}>\n                    { message }\n                </EmptyStateBody>\n                <EmtpyStateWithErrors error={ errors } />\n                <EmptyStateSecondaryActions>\n                    {\n                        (percent === 100 || failed) &&\n                            <Button\n                                variant={'primary'}\n                                ouiaId=\"ReturnToAppButton\"\n                                onClick={() => { onWizardFinish(); }}>\n                                { failed ? 'Back' : 'Return to application' }\n                            </Button>\n                    }\n                </EmptyStateSecondaryActions>\n            </EmptyState>\n        </Bullseye>\n    );\n};\n\nFinishedCreatePolicy.propTypes = {\n    benchmarkId: propTypes.string.isRequired,\n    businessObjective: propTypes.object,\n    cloneFromProfileId: propTypes.string.isRequired,\n    refId: propTypes.string.isRequired,\n    name: propTypes.string.isRequired,\n    description: propTypes.string,\n    systems: propTypes.array,\n    complianceThreshold: propTypes.number,\n    onWizardFinish: propTypes.func,\n    selectedRuleRefIds: propTypes.arrayOf(propTypes.string).isRequired\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            benchmarkId: selector(state, 'benchmark'),\n            businessObjective: selector(state, 'businessObjective'),\n            cloneFromProfileId: JSON.parse(selector(state, 'profile')).id,\n            refId: selector(state, 'refId'),\n            name: selector(state, 'name'),\n            description: selector(state, 'description'),\n            complianceThreshold: parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n            systems: selector(state, 'systems'),\n            selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: true,\n        forceUnregisterOnUnmount: true\n    }),\n    withApollo\n)(FinishedCreatePolicy);\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport { default as EditPolicyRules } from './EditPolicyProfilesRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport { validateBenchmarkPage, validateDetailsPage, validateRulesPage, validateSystemsPage } from './validate';\n\nexport const CreatePolicy = ({\n    benchmark, osMajorVersion, complianceThreshold, name, profile, refId, selectedRuleRefIds, systemIds\n}) => {\n    const history = useHistory();\n    const [stepIdReached, setStepIdReached] = useState(1);\n\n    const resetAnchor = () => {\n        const { location } = history;\n        if (location.hash) {\n            history.push({ ...location, hash: '' });\n        }\n    };\n\n    const onNext = ({ id }) => {\n        setStepIdReached(stepIdReached < id ? id : stepIdReached);\n        resetAnchor();\n    };\n\n    const onClose = () => {\n        history.push('/scappolicies');\n    };\n\n    const steps = [\n        {\n            id: 1,\n            name: 'Create SCAP policy',\n            component: <CreateSCAPPolicy/>,\n            enableNext: validateBenchmarkPage(benchmark, osMajorVersion, profile)\n        },\n        {\n            id: 2,\n            name: 'Details',\n            component: <EditPolicyDetails/>,\n            canJumpTo: stepIdReached >= 2,\n            enableNext: validateDetailsPage(name, refId, complianceThreshold)\n        },\n        {\n            id: 3,\n            name: 'Systems',\n            component: <EditPolicySystems/>,\n            canJumpTo: stepIdReached >= 3,\n            enableNext: validateSystemsPage(systemIds)\n        },\n        {\n            id: 4,\n            name: 'Rules',\n            component: <EditPolicyRules/>,\n            canJumpTo: systemIds?.length > 0 && stepIdReached >= 4,\n            enableNext: validateRulesPage(selectedRuleRefIds)\n        },\n        {\n            id: 5,\n            name: 'Review',\n            component: <ReviewCreatedPolicy/>,\n            nextButtonText: 'Finish',\n            canJumpTo: (\n                validateRulesPage(selectedRuleRefIds) &&\n                systemIds?.length > 0 &&\n                stepIdReached >= 5\n            )\n        },\n        {\n            id: 6,\n            name: 'Finished',\n            component: <FinishedCreatePolicy onWizardFinish={ onClose } />,\n            isFinishedStep: true,\n            canJumpTo: systemIds?.length > 0 && stepIdReached >= 6\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <Wizard\n                isOpen\n                onNext={ onNext }\n                onGoToStep={ resetAnchor }\n                onBack={ resetAnchor }\n                onClose={ onClose }\n                title=\"Create SCAP policy\"\n                description=\"Create a new policy for managing SCAP compliance\"\n                steps={ steps } />\n        </React.Fragment>\n    );\n};\n\nCreatePolicy.propTypes = {\n    benchmark: propTypes.string,\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    complianceThreshold: propTypes.string,\n    businessObjective: propTypes.object,\n    dispatch: propTypes.func,\n    isOpen: propTypes.bool,\n    name: propTypes.string,\n    onWizardFinish: propTypes.func,\n    profile: propTypes.string,\n    refId: propTypes.string,\n    selectedRuleRefIds: propTypes.arrayOf(propTypes.string),\n    systemIds: propTypes.arrayOf(propTypes.string)\n};\n\nCreatePolicy.defaultProps = {\n    isOpen: false\n};\n\nconst selector = formValueSelector('policyForm');\nexport default connect(\n    state => ({\n        benchmark: selector(state, 'benchmark'),\n        osMajorVersion: selector(state, 'osMajorVersion'),\n        osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n        businessObjective: selector(state, 'businessObjective'),\n        complianceThreshold: selector(state, 'complianceThreshold') || '100.0',\n        name: selector(state, 'name'),\n        profile: selector(state, 'profile'),\n        refId: selector(state, 'refId'),\n        selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n        systemIds: selector(state, 'systems')\n    })\n)(CreatePolicy);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    FormGroup, TextArea, TextInput\n} from '@patternfly/react-core';\nimport {\n    PolicyThresholdTooltip,\n    PolicyBusinessObjectiveTooltip\n} from 'PresentationalComponents';\nimport { thresholdValid } from '../CreatePolicy/validate';\n\nexport const useThresholdValidate = () => {\n    const [validThreshold, setValidThreshold] = useState(true);\n    return [validThreshold, (threshold) => {\n        const valid = thresholdValid(threshold);\n        setValidThreshold(valid);\n        return valid;\n    }];\n};\n\nconst EditPolicyDetailsTab = ({ policy, setUpdatedPolicy }) => {\n    const [validThreshold, validateThreshold] = useThresholdValidate();\n\n    return <div className=\"pf-c-form\">\n        <FormGroup label=\"Policy description\" isRequired fieldId=\"description\">\n            <TextArea\n                style={ { width: 800, height: 110 } }\n                isRequired\n                type=\"text\"\n                id=\"description\"\n                name=\"description\"\n                aria-describedby=\"description\"\n                defaultValue={ policy.description }\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) => ({\n                        ...policy,\n                        description: value\n                    }));\n                }} />\n        </FormGroup>\n\n        <FormGroup\n            label=\"Business objective\"\n            labelIcon={ <PolicyBusinessObjectiveTooltip /> }\n            fieldId=\"business-objective\">\n            <TextInput\n                type=\"text\"\n                style={ { width: 300 } }\n                id=\"business-objective\"\n                name=\"business-objective\"\n                aria-describedby=\"business-objective\"\n                defaultValue={ policy?.businessObjective?.title }\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) =>({\n                        ...policy,\n                        businessObjective: {\n                            ...policy.businessObjective,\n                            title: value\n                        }\n                    }));\n                }} />\n        </FormGroup>\n\n        <FormGroup\n            validated={ validThreshold ? 'default' : 'error' }\n            label='Compliance threshold (%)'\n            labelIcon={ <PolicyThresholdTooltip /> }\n            fieldId='policy-threshold'\n            helperTextInvalid='Threshold has to be a number between 0 and 100'\n            helperText='A value of 95% or higher is recommended'>\n            <TextInput\n                type='number'\n                style={ { width: 150 } }\n                name='compliance-threshold'\n                id='compliance-threshold'\n                defaultValue={ policy.complianceThreshold }\n                aria-describedby=\"policy-threshold\"\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) =>({\n                        ...policy,\n                        complianceThreshold: value,\n                        complianceThresholdValid: validateThreshold(value)\n                    }));\n                }} />\n        </FormGroup>\n    </div>;\n};\n\nEditPolicyDetailsTab.propTypes = {\n    policy: propTypes.shape({\n        description: propTypes.string,\n        businessObjective: propTypes.object,\n        complianceThreshold: propTypes.oneOfType([\n            propTypes.string,\n            propTypes.number\n        ])\n    }),\n    setUpdatedPolicy: propTypes.func\n};\n\nexport default EditPolicyDetailsTab;\n","import React, { useLayoutEffect } from 'react';\nimport {\n    EmptyState, EmptyStateBody, Text, TextContent, Title\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n    TabbedRules, profilesWithRulesToSelection, tabsDataToOsMinorMap, extendProfilesByOsMinor\n} from 'PresentationalComponents/TabbedRules';\nimport { sortingByProp } from 'Utilities/helpers';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\n\nconst PROFILES_QUERY = gql`\nquery Profiles($filter: String!){\n    profiles(search: $filter){\n        edges {\n            node {\n                id\n                name\n                refId\n                osMinorVersion\n                osMajorVersion\n                policy {\n                    id\n\n                }\n                policyType\n                benchmark {\n                    id\n                    refId\n                    latestSupportedOsMinorVersions\n                    osMajorVersion\n                }\n                ssgVersion\n                rules {\n                    id\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n    }\n}\n`;\n\nconst BENCHMARKS_QUERY = gql`\nquery Benchmarks($filter: String!){\n    benchmarks(search: $filter){\n        nodes {\n            id\n            latestSupportedOsMinorVersions\n            profiles {\n                id\n                refId\n                ssgVersion\n            }\n        }\n    }\n}\n`;\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) => (\n    benchmarks.find((benchmark) =>\n        benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n    )\n);\n\nconst getBenchmarkProfile = (benchmark, profileRefId) => (\n    benchmark.profiles.find((benchmarkProfile) => (benchmarkProfile.refId === profileRefId))\n);\n\nconst EditPolicyRulesTabEmptyState = () => <EmptyState>\n    <Title headingLevel=\"h5\" size=\"lg\">\n        No rules can be configured\n    </Title>\n    <EmptyStateBody>\n        This policy has no associated systems, and therefore no rules can be configured.\n    </EmptyStateBody>\n    <EmptyStateBody>\n        Add at least one system to configure rules for this policy.\n    </EmptyStateBody>\n</EmptyState>;\n\nexport const toTabsData = (policy, osMinorVersionCounts, benchmarks) => (\n    Object.values(osMinorVersionCounts).sort(\n        sortingByProp('osMinorVersion', 'desc')\n    ).map(({ osMinorVersion, count: systemCount }) => {\n        osMinorVersion = `${osMinorVersion}`;\n        let profile = policy.policy.profiles.find((profile) => (profile.osMinorVersion === osMinorVersion));\n        let osMajorVersion = policy.osMajorVersion;\n\n        if (!profile && benchmarks) {\n            const benchmark = getBenchmarkBySupportedOsMinor(benchmarks, osMinorVersion);\n            if (benchmark) {\n                const benchmarkProfile = getBenchmarkProfile(benchmark, policy.refId);\n                if (benchmarkProfile) {\n                    profile = policy.policy.profiles.find((profile) =>\n                        profile.parentProfileId === benchmarkProfile.id\n                        && profile.osMinorVersion === osMinorVersion\n                    );\n\n                    profile = {\n                        ...benchmarkProfile,\n                        benchmark,\n                        osMajorVersion,\n                        ...profile\n                    };\n                }\n            }\n        }\n\n        return {\n            profile,\n            systemCount,\n            newOsMinorVersion: osMinorVersion\n        };\n    }).filter(({ profile, newOsMinorVersion }) => !!profile && newOsMinorVersion)\n);\n\nexport const EditPolicyRulesTab = ({\n    policy,\n    selectedRuleRefIds,\n    setSelectedRuleRefIds,\n    osMinorVersionCounts,\n    setNewRuleTabs\n}) => {\n    const osMajorVersion = policy?.osMajorVersion;\n    const osMinorVersions = Object.keys(osMinorVersionCounts).sort();\n    const benchmarkSearch = `os_major_version = ${ osMajorVersion } ` +\n        `and latest_supported_os_minor_version ^ \"${ osMinorVersions.join(',') }\"`;\n\n    const {\n        data: benchmarksData,\n        error: benchmarksError,\n        loading: benchmarksLoading\n    } = useQuery(BENCHMARKS_QUERY, {\n        variables: {\n            filter: benchmarkSearch\n        },\n        skip: osMinorVersions.length === 0\n    });\n\n    const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n    const tabsData = toTabsData(policy, osMinorVersionCounts, benchmarks);\n    const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n    const filter = Object.keys(profileToOsMinorMap).map((i) => (`id = ${ i }`)).join(' OR ');\n    const {\n        data: profilesData, error: profilesError, loading: profilesLoading\n    } = useQuery(PROFILES_QUERY, {\n        variables: {\n            filter\n        },\n        skip: filter.length === 0\n    });\n    const loadingState = ((profilesLoading || benchmarksLoading) ? true : undefined);\n    const dataState = ((!loadingState && tabsData?.length > 0) ? profilesData : undefined);\n\n    if (!loadingState) {\n        setNewRuleTabs(!!tabsData.find(tab => (\n            policy.policy.profiles.find(profile => (\n                profile.osMinorVersion !== tab.newOsMinorVersion\n            ))\n        )));\n    }\n\n    useLayoutEffect(() => {\n        if (profilesData) {\n            const profiles = profilesData?.profiles.edges.map((p) => (p.node)) || [];\n            const profilesWithOs = extendProfilesByOsMinor(profiles, profileToOsMinorMap);\n            setSelectedRuleRefIds((prevSelection) =>\n                profilesWithRulesToSelection(profilesWithOs, prevSelection)\n            );\n        }\n    }, [profilesData]);\n    const error = benchmarksError || profilesError;\n\n    return <StateViewWithError stateValues={ {\n        error,\n        data: !error && dataState,\n        loading: loadingState,\n        empty: !loadingState && !dataState && !error\n    } }>\n        <StateViewPart stateKey=\"loading\">\n            <EmptyTable><Spinner/></EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n            <TextContent>\n                <Text>\n                    Different release versions of RHEL are associated with different versions of\n                    the SCAP Security Guide (SSG), therefore each release must be customized independently.\n                </Text>\n            </TextContent>\n            <TabbedRules\n                columns={ [Columns.Name, Columns.Severity, Columns.Ansible] }\n                tabsData={ tabsData }\n                selectedRuleRefIds={ selectedRuleRefIds }\n                setSelectedRuleRefIds={ setSelectedRuleRefIds }\n                remediationsEnabled={ false }\n                selectedFilter\n                level={ 1 } />\n        </StateViewPart>\n        <StateViewPart stateKey=\"empty\">\n            <EditPolicyRulesTabEmptyState />\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nEditPolicyRulesTab.propTypes = {\n    setNewRuleTabs: propTypes.func,\n    policy: propTypes.object,\n    osMinorVersionCounts: propTypes.shape({\n        osMinorVersion: propTypes.shape({\n            osMinorVersion: propTypes.number,\n            count: propTypes.number\n        })\n    }),\n    selectedRuleRefIds: propTypes.array,\n    setSelectedRuleRefIds: propTypes.func\n};\n\nexport default EditPolicyRulesTab;\n","import React from 'react';\nimport { Alert, AlertActionLink, Text, TextContent } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { InventoryTable } from 'SmartComponents';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\nimport { useHistory } from 'react-router-dom';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n    <React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                You do not have any <b>RHEL { osMajorVersion }</b> systems connected to Insights and enabled for Compliance.\n            </Text>\n        </TextContent>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Connect RHEL { osMajorVersion } systems to Insights.\n            </Text>\n        </TextContent>\n    </React.Fragment>\n);\n\nEmptyState.propTypes = {\n    osMajorVersion: propTypes.string\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n    <React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Select which of your <b>RHEL { osMajorVersion }</b> systems should be included\n                in this policy.\n            </Text>\n        </TextContent>\n    </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n    osMajorVersion: propTypes.string\n};\n\nconst EditPolicySystemsTab = ({ policy: { osMajorVersion }, newRuleTabs, onSystemSelect, selectedSystems }) => {\n    const { push, location } = useHistory();\n\n    return (\n        <React.Fragment>\n            <InventoryTable\n                columns={[\n                    Columns.Name,\n                    Columns.OperatingSystem\n                ]}\n                showOsMinorVersionFilter={ [osMajorVersion] }\n                prependComponent={ <PrependComponent osMajorVersion={ osMajorVersion } />  }\n                emptyStateComponent={ <EmptyState osMajorVersion={ osMajorVersion } />  }\n                compact\n                showActions={ false }\n                query={ GET_SYSTEMS_WITHOUT_FAILED_RULES }\n                defaultFilter={ osMajorVersion && `os_major_version = ${osMajorVersion}` }\n                enableExport={ false }\n                remediationsEnabled={ false }\n                preselectedSystems={ selectedSystems }\n                onSelect={ onSystemSelect }\n            />\n            {newRuleTabs && <Alert\n                variant=\"info\"\n                isInline\n                title=\"You selected a system that has a release version previously not included in this policy.\"\n                actionLinks={\n                    <AlertActionLink onClick={ () => push({ ...location, hash: '#rules' }) }>Open rule editing</AlertActionLink>\n                }>\n                <p>If you have edited any rules for this policy, you will need to do so for this release version as well.</p>\n            </Alert>}\n        </React.Fragment>\n    );\n};\n\nEditPolicySystemsTab.propTypes = {\n    policy: propTypes.object,\n    newRuleTabs: propTypes.bool,\n    onSystemSelect: propTypes.func,\n    selectedSystems: propTypes.array\n};\n\nexport default EditPolicySystemsTab;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { Form, Tab, TabTitleText } from '@patternfly/react-core';\nimport { RoutedTabs } from 'PresentationalComponents';\nimport EditPolicyDetailsTab from './EditPolicyDetailsTab';\nimport EditPolicyRulesTab from './EditPolicyRulesTab';\nimport EditPolicySystemsTab from './EditPolicySystemsTab';\nimport { mapCountOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport { profilesWithRulesToSelection } from 'PresentationalComponents/TabbedRules';\n\nconst profilesToOsMinorMap = (profiles, hosts) => (\n    (profiles || []).reduce((acc, profile) => {\n        if (profile.osMinorVersion !== '') {\n            acc[profile.osMinorVersion] ||= { osMinorVersion: profile.osMinorVersion, count: 0 };\n        }\n\n        return acc;\n    }, mapCountOsMinorVersions(hosts || []))\n);\n\nexport const EditPolicyForm = ({\n    policy,\n    setUpdatedPolicy,\n    selectedRuleRefIds,\n    setSelectedRuleRefIds,\n    selectedSystems,\n    setSelectedSystems\n}) => {\n    const policyProfiles = policy?.policy?.profiles || [];\n    const [osMinorVersionCounts, setOsMinorVersionCounts] = useState({});\n    const [newRuleTabs, setNewRuleTabs] = useState(false);\n\n    const handleSystemSelect = (selectedSystems) => {\n        setSelectedSystems(selectedSystems);\n\n        setOsMinorVersionCounts(\n            profilesToOsMinorMap(policyProfiles, selectedSystems)\n        );\n    };\n\n    const updateSelectedRuleRefIds = () => {\n        if (policy) {\n            // existing policy profiles and their rule sets\n            const profilesWithOsMinor = policyProfiles.filter(({ osMinorVersion }) =>\n                !!osMinorVersion\n            );\n            setSelectedRuleRefIds(profilesWithRulesToSelection(profilesWithOsMinor));\n        }\n    };\n\n    useEffect(() => {\n        if (policy) {\n            const complianceThresholdValid =\n                (policy.complianceThreshold < 101 && policy.complianceThreshold > 0);\n            setUpdatedPolicy({\n                ...policy,\n                complianceThresholdValid\n            });\n            updateSelectedRuleRefIds();\n            handleSystemSelect(policy.hosts);\n        }\n    }, [policy]);\n\n    return (\n        <Form>\n            <RoutedTabs defaultTab='details'>\n                <Tab eventKey='details' title={<TabTitleText>Details</TabTitleText>}>\n                    <EditPolicyDetailsTab\n                        policy={ policy }\n                        setUpdatedPolicy={ setUpdatedPolicy } />\n                </Tab>\n\n                <Tab eventKey='rules' title={ <TabTitleText>Rules</TabTitleText> }>\n                    <EditPolicyRulesTab\n                        policy={ policy }\n                        setNewRuleTabs={ setNewRuleTabs }\n                        setSelectedRuleRefIds={ setSelectedRuleRefIds }\n                        selectedRuleRefIds={ selectedRuleRefIds }\n                        osMinorVersionCounts={ osMinorVersionCounts }\n                    />\n                </Tab>\n\n                <Tab eventKey='systems' title={ <TabTitleText>Systems</TabTitleText> }>\n                    <EditPolicySystemsTab\n                        policy={ policy }\n                        newRuleTabs={ newRuleTabs }\n                        selectedSystems={ selectedSystems }\n                        onSystemSelect={ handleSystemSelect }\n                    />\n                </Tab>\n            </RoutedTabs>\n        </Form>\n    );\n};\n\nEditPolicyForm.propTypes = {\n    policy: propTypes.object,\n    setUpdatedPolicy: propTypes.func,\n    selectedRuleRefIds: propTypes.arrayOf(propTypes.object),\n    setSelectedRuleRefIds: propTypes.func,\n    setSelectedSystems: propTypes.func,\n    selectedSystems: propTypes.array\n};\n\nexport default EditPolicyForm;\n","import { useState } from 'react';\nimport { usePolicy } from 'Mutations';\nimport { useLinkToBackground, useAnchor } from 'Utilities/Router';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nexport const useLinkToPolicy = () => {\n    const anchor = useAnchor();\n    const linkToBackground = useLinkToBackground('/scappolicies');\n    return () => {\n        linkToBackground({ hash: anchor });\n    };\n};\n\nexport const useOnSave = (policy, updatedPolicyHostsAndRules) => {\n    const updatePolicy = usePolicy();\n    const linkToPolicy = useLinkToPolicy();\n    const [isSaving, setIsSaving] = useState(false);\n    const onSave = () => {\n        if (isSaving) { return Promise.resolve({}); }\n\n        setIsSaving(true);\n        updatePolicy(policy, updatedPolicyHostsAndRules).then(() => {\n            setIsSaving(false);\n            dispatchNotification({\n                variant: 'success',\n                title: 'Policy successfully updated',\n                autoDismiss: true\n            });\n            linkToPolicy();\n        }).catch((error) => {\n            setIsSaving(false);\n            dispatchNotification({\n                variant: 'danger',\n                title: 'Error updating policy',\n                description: error.message\n            });\n            linkToPolicy();\n        });\n    };\n\n    return [isSaving, onSave];\n};\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Button, Modal, Spinner } from '@patternfly/react-core';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport EditPolicyForm from './EditPolicyForm';\nimport { useOnSave, useLinkToPolicy } from './hooks';\n\nexport const MULTIVERSION_QUERY = gql`\nquery Profile($policyId: String!){\n    profile(id: $policyId) {\n        id\n        name\n        refId\n        external\n        description\n        totalHostCount\n        compliantHostCount\n        complianceThreshold\n        majorOsVersion\n        osMajorVersion\n        lastScanned\n        policyType\n        policy {\n            id\n            name\n            refId\n            profiles {\n                id\n                ssgVersion\n                parentProfileId\n                name\n                refId\n                osMinorVersion\n                osMajorVersion\n                benchmark {\n                    id\n                    title\n                    latestSupportedOsMinorVersions\n                    osMajorVersion\n                }\n                rules {\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n        businessObjective {\n            id\n            title\n        }\n        hosts {\n            id\n            osMinorVersion\n            osMajorVersion\n        }\n    }\n}\n`;\n\nexport const EditPolicy = ({ route }) => {\n    const { policy_id: policyId } = useParams();\n    const { data, loading, error } = useQuery(MULTIVERSION_QUERY, {\n        variables: { policyId }\n    });\n    const policy = data?.profile;\n    const linkToPolicy = useLinkToPolicy();\n    const [updatedPolicy, setUpdatedPolicy] = useState(null);\n    const [selectedRuleRefIds, setSelectedRuleRefIds] = useState([]);\n    const [selectedSystems, setSelectedSystems] = useState([]);\n    const saveEnabled = updatedPolicy && !updatedPolicy.complianceThresholdValid;\n    const updatedPolicyHostsAndRules = {\n        ...updatedPolicy,\n        selectedRuleRefIds,\n        hosts: selectedSystems\n    };\n    const [isSaving, onSave] = useOnSave(policy, updatedPolicyHostsAndRules);\n\n    const actions = [\n        <Button\n            isDisabled={ saveEnabled }\n            key='save'\n            ouiaId=\"EditPolicySaveButton\"\n            variant='primary'\n            spinnerAriaValueText='Saving'\n            isLoading={ isSaving }\n            onClick={ onSave }>\n            Save\n        </Button>,\n        <Button\n            key='cancel'\n            ouiaId=\"EditPolicyCancelButton\"\n            variant='link'\n            onClick={ () => linkToPolicy() }>\n            Cancel\n        </Button>\n    ];\n\n    useTitleEntity(route, policy?.name);\n\n    return <Modal\n        isOpen\n        position={ 'top' }\n        style={ { minHeight: '350px' } }\n        variant={ 'large' }\n        ouiaId=\"EditPolicyModal\"\n        title={ `Edit ${ policy ? policy.name : '' }` }\n        onClose={ () => linkToPolicy() }\n        actions={ actions }>\n\n        <StateViewWithError stateValues={ { policy, loading, error } }>\n            <StateViewPart stateKey=\"loading\">\n                <Spinner />\n            </StateViewPart>\n            <StateViewPart stateKey=\"policy\">\n                <EditPolicyForm\n                    { ...{\n                        policy,\n                        updatedPolicy,\n                        setUpdatedPolicy,\n                        selectedRuleRefIds,\n                        setSelectedRuleRefIds,\n                        selectedSystems,\n                        setSelectedSystems\n                    } } />\n            </StateViewPart>\n        </StateViewWithError>\n    </Modal>;\n};\n\nEditPolicy.propTypes = {\n    route: propTypes.object\n};\n\nexport default EditPolicy;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { UnsupportedSSGVersion, ComplianceScore as complianceScore } from 'PresentationalComponents';\nimport {\n    profilesRulesPassed, profilesRulesFailed, systemSupportedByProfiles\n} from 'Utilities/ruleHelpers';\n\nconst SystemLink = ({ id, children }) => (\n    <Link to={{ pathname: `/systems/${id}` }}>{ children }</Link>\n);\n\nSystemLink.propTypes = {\n    id: propTypes.string,\n    children: propTypes.node\n};\n\nexport const Name = ({ id, name, osMajorVersion, osMinorVersion, showOsInfo = false, showLink = false }) => {\n    const hasOsInfo = (osMajorVersion, osMinorVersion) => (\n        !!osMajorVersion && !!osMinorVersion && showOsInfo\n    );\n\n    return <TextContent>\n        { showLink ?\n            <SystemLink { ...{ id } }>{ name }</SystemLink> :\n            name\n        }\n\n        {\n            hasOsInfo(osMajorVersion, osMinorVersion) &&\n                <Text component={TextVariants.small}>\n                    RHEL {osMajorVersion}.{osMinorVersion}\n                </Text>\n        }\n\n    </TextContent>;\n};\n\nName.propTypes = {\n    id: propTypes.string,\n    name: propTypes.string,\n    osMajorVersion: propTypes.string,\n    osMinorVersion: propTypes.string,\n    showOsInfo: propTypes.bool,\n    showLink: propTypes.bool\n};\n\nexport const profilesSsgVersions = (profiles) => (\n    profiles.map((p) => (p.ssgVersion)).filter((version) => (!!version)).join(', ')\n);\n\nexport const SSGVersion = ({ ssgVersion = 'Not available', supported }) => (\n    supported ? ssgVersion :\n        <UnsupportedSSGVersion messageVariant='singular'>\n            { ssgVersion }\n        </UnsupportedSSGVersion>\n);\n\nSSGVersion.propTypes = {\n    supported: propTypes.bool,\n    ssgVersion: propTypes.string\n};\n\nexport const SSGVersions = ({ testResultProfiles = [] }) => (\n    testResultProfiles.length !== 0 ? testResultProfiles.map((profile) => (\n        <SSGVersion key={`ssgversion-${profile.id}`} { ...profile } />\n    )) : 'Not available'\n);\n\nSSGVersions.propTypes = {\n    testResultProfiles: propTypes.array\n};\n\nexport const DetailsLink = ({ id, testResultProfiles = [] }) => (\n    testResultProfiles.length > 0 ? <SystemLink { ...{ id } }>\n        View Report\n    </SystemLink> : ''\n);\n\nDetailsLink.propTypes = {\n    id: propTypes.string,\n    testResultProfiles: propTypes.array\n};\n\nexport const Policies = ({ policies }) => (\n    (policies || []).map((p) => (p.name)).join(', ')\n);\n\nexport const FailedRules = ({ id, testResultProfiles }) => {\n    const rulesFailed = profilesRulesFailed(testResultProfiles).length;\n    return <SystemLink { ...{ id } }>\n        { rulesFailed }\n    </SystemLink>;\n};\n\nFailedRules.propTypes = {\n    id: propTypes.string,\n    testResultProfiles: propTypes.array\n};\n\nconst NEVER = 'Never';\n\nexport const complianceScoreData = (profiles) => {\n    const scoreTotal = profiles.reduce((acc, profile) => acc + profile.score, 0);\n    const rulesPassed = profilesRulesPassed(profiles).length;\n    const rulesFailed = profilesRulesFailed(profiles).length;\n    const numScored = profiles.reduce((acc, profile) => {\n        if (profilesRulesPassed([profile]).length + profilesRulesFailed([profile]).length > 0) { return acc + 1; }\n\n        return acc;\n    }, 0);\n    const score = numScored ? scoreTotal / numScored : 0;\n    const compliant = profiles.every(profile => (\n        profile.lastScanned === NEVER || profile.compliant === true\n    ));\n\n    return {\n        score,\n        rulesPassed,\n        rulesFailed,\n        compliant,\n        supported: systemSupportedByProfiles(profiles)\n    };\n};\n\nexport const ComplianceScore = ({ testResultProfiles }) => (\n    complianceScore(complianceScoreData(testResultProfiles))\n);\n\nComplianceScore.propTypes = {\n    testResultProfiles: propTypes.array\n};\n\nexport const lastScanned = (profiles) => {\n    const dates = profiles.map((profile) => new Date(profile.lastScanned));\n    const last = new Date(Math.max.apply(null, dates.filter((date) => isFinite(date))));\n    const result = (last instanceof Date && isFinite(last)) ? last : NEVER;\n\n    return result;\n};\n\nexport const LastScanned = ({ testResultProfiles: profiles }) => {\n    const lastScannedDate = lastScanned(profiles || []);\n\n    return (lastScannedDate instanceof Date) ?\n        <DateFormat date={Date.parse(lastScannedDate)} type='relative' />\n        : lastScannedDate;\n};\n\nLastScanned.propTypes = {\n    testResultProfiles: propTypes.array\n};\n\nexport const operatingSystemString = ({ osMinorVersion, osMajorVersion }) => (\n    `RHEL ${osMajorVersion}.${osMinorVersion}`\n);\n\nexport const OperatingSystem = (system) => (\n    operatingSystemString(system)\n);\n","import { nowrap } from '@patternfly/react-table';\nimport { complianceScoreString } from 'PresentationalComponents';\nimport { profilesRulesFailed } from 'Utilities/ruleHelpers';\nimport { renderComponent } from 'Utilities/helpers';\n\nimport {\n    Name as NameCell, ComplianceScore as ComplianceScoreCell, DetailsLink as DetailsLinkCell,\n    FailedRules as FailedRulesCell, LastScanned as LastScannedCell, Policies as PoliciesCell,\n    SSGVersions as SsgVersionCell, complianceScoreData, lastScanned, operatingSystemString,\n    OperatingSystem as OperatingSystemCell\n} from './Cells';\n\nconst disableSorting = { isStatic: true };\n\nexport const compileColumnRenderFunc = ({ cell, ...column }) => ({\n    ...column,\n    renderFunc: renderComponent(cell, column.props)\n});\n\nexport const customColumn = (column, props) => compileColumnRenderFunc({\n    ...column,\n    props: {\n        ...column.props,\n        ...props\n    }\n});\n\nexport const Name = compileColumnRenderFunc({\n    key: 'name',\n    title: 'Name',\n    props: {\n        width: 40,\n        ...disableSorting\n    },\n    renderExport: (system) => (\n        `${ system.name } (${ operatingSystemString(system) })`\n    ),\n    cell: NameCell\n});\n\nexport const customName = (props) => ({\n    ...Name,\n    props: {\n        ...Name.props,\n        ...props\n    },\n    renderFunc: renderComponent(NameCell, props)\n});\n\nexport const SsgVersion = {\n    title: 'SSG version',\n    transforms: [nowrap],\n    exportKey: 'testResultProfiles',\n    props: disableSorting,\n    renderExport: (testResultProfiles) => (\n        testResultProfiles.map(({ supported, ssgVersion }) =>(\n            `${ !supported ? '!' : '' }${ ssgVersion }`\n        )).join(', ')\n    ),\n    renderFunc: renderComponent(SsgVersionCell)\n};\n\nexport const Policies = {\n    title: 'Policies',\n    transforms: [nowrap],\n    exportKey: 'policies',\n    renderExport: (policies) => (\n        policies.map(({ name }) => (name)).join(', ')\n    ),\n    props: {\n        width: 40,\n        ...disableSorting\n    },\n    renderFunc: renderComponent(PoliciesCell)\n};\n\nexport const DetailsLink = {\n    title: '',\n    export: false,\n    props: {\n        width: 20,\n        ...disableSorting\n    },\n    renderFunc: renderComponent(DetailsLinkCell)\n};\n\nexport const FailedRules = {\n    title: 'Failed rules',\n    exportKey: 'testResultProfiles',\n    transforms: [nowrap],\n    props: {\n        width: 5,\n        ...disableSorting\n    },\n    renderExport: (testResultProfiles) => (\n        profilesRulesFailed(testResultProfiles).length\n    ),\n    renderFunc: renderComponent(FailedRulesCell)\n};\n\nexport const ComplianceScore = {\n    title: 'Compliance score',\n    exportKey: 'testResultProfiles',\n    transforms: [nowrap],\n    props: {\n        width: 5,\n        ...disableSorting\n    },\n    renderExport: (testResultProfiles) => (\n        complianceScoreString(complianceScoreData(testResultProfiles)).trim()\n    ),\n    renderFunc: renderComponent(ComplianceScoreCell)\n};\n\nexport const LastScanned = {\n    title: 'Last scanned',\n    transforms: [nowrap],\n    exportKey: 'testResultProfiles',\n    props: {\n        width: 10,\n        ...disableSorting\n    },\n    renderExport: (testResultProfiles) => (\n        lastScanned(testResultProfiles)\n    ),\n    renderFunc: renderComponent(LastScannedCell)\n};\n\nexport const OperatingSystem  = compileColumnRenderFunc({\n    title: 'Operating system',\n    key: 'operatingSystem',\n    transforms: [nowrap],\n    props: disableSorting,\n    renderExport: (cell) => (\n        operatingSystemString(cell)\n    ),\n    cell: OperatingSystemCell\n});\n","import gql from 'graphql-tag';\nimport pickBy from 'lodash/pickBy';\nimport {\n    systemsPolicyFilterConfiguration, systemsOsFilterConfiguration, systemsOsMinorFilterConfiguration\n} from '@/constants';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { entitiesReducer } from 'Store/Reducers/SystemStore';\n\nexport const GET_SYSTEMS = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int, $sortBy: [String!]) {\n    systems(search: $filter, limit: $perPage, offset: $page, sortBy: $sortBy) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    refId\n                    lastScanned\n                    compliant\n                    external\n                    score\n                    supported\n                    ssgVersion\n                    majorOsVersion\n                    rules {\n                        refId\n                        title\n                        compliant\n                        remediationAvailable\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const GET_SYSTEMS_WITHOUT_FAILED_RULES = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int, $sortBy: [String!]) {\n    systems(search: $filter, limit: $perPage, offset: $page, sortBy: $sortBy) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    lastScanned\n                    external\n                    compliant\n                    score\n                    supported\n                    ssgVersion\n                    policy {\n                        id\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const policyFilter = (policies, osFilter) => ([\n    ...systemsPolicyFilterConfiguration(policies),\n    ...(osFilter ? systemsOsFilterConfiguration(policies) : [])\n]);\n\nexport const osMinorVersionFilter = (...args) => systemsOsMinorFilterConfiguration(...args);\n\nexport const initFilterState = (filterConfig) => (\n    pickBy(filterConfig.initialDefaultState(), (value) => (!!value))\n);\n\nexport const defaultOnLoad = (columns) => (({\n    INVENTORY_ACTION_TYPES,\n    mergeWithEntities\n}) => (\n    getRegistry().register({\n        ...mergeWithEntities(\n            entitiesReducer(\n                INVENTORY_ACTION_TYPES, columns\n            )\n        )\n    })\n));\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Skeleton, { SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { registryDecorator } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { InventoryDetail, DetailWrapper } from '@redhat-cloud-services/frontend-components/Inventory';\n\n@registryDecorator()\nclass InventoryDetails extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <DetailWrapper onLoad={({ mergeWithDetail }) => this.getRegistry().register({\n                ...mergeWithDetail()\n            })}>\n                <InventoryDetail fallback={<Skeleton size={ SkeletonSize.md } />} hideBack />\n            </DetailWrapper>\n        );\n    }\n}\n\nInventoryDetails.propTypes = {\n    entity: propTypes.object\n};\n\nconst ConnectedInventoryDetails = (props) => {\n    return <InventoryDetails {...props} />;\n};\n\nexport default ConnectedInventoryDetails;\n","class ApiClient {\n    DEFAULT_API_HEADERS = {\n        'Content-Type': 'application/vnd.api+json',\n        Accept: 'application/json'\n    }\n\n    constructor(options = {}) {\n        this.apiBase = options.apiBase || '/api';\n        this.path = options.path || '';\n        this.authenticate = options.authenticate || (() => Promise.resolve({}));\n        this.onUnauthorised = options.onUnauthorised || (() => Promise.resolve({}));\n        this.defaultHeaders = options.headers || this.DEFAULT_API_HEADERS;\n    }\n\n    async request(path, apiProps, method, options = {}) {\n        return await this.callAuthenticate()\n        .then(() => this.fetch(path, apiProps, method, options))\n        .then(this.checkForEmptyResponse)\n        .then((response) => this.checkForErrors(response, options))\n        .then((response) => response.json())\n        .catch(this.finalCatch);\n    }\n\n    finalCatch(promise) {\n        if (promise.errors === undefined) {\n            return Promise.reject({ title: 'Error parsing' });\n        } else {\n            return Promise.reject({ ...promise });\n        }\n    }\n\n    fetch(path, apiProps, method, options) {\n        let params = {\n            method: method || 'get',\n            headers: this.defaultHeaders,\n            credentials: 'include'\n        };\n        const fullPath = `${ this.apiBase }${ this.path ? this.path : '' }${ path ? path : '' }`;\n        let url = new URL(fullPath, window.location.origin);\n        if (options.params) {\n            const params = Object.keys(options.params).map((key) => (\n                encodeURIComponent(key) + '=' + encodeURIComponent(options.params[key])\n            )).join('&');\n            url.search = new URLSearchParams(params);\n        }\n\n        if (apiProps) {\n            params.body = JSON.stringify(apiProps);\n        }\n\n        return fetch(\n            url, params\n        );\n    }\n\n    checkForEmptyResponse(response) {\n        return response.status === 204 ? { json: () => ({}) } : response;\n    }\n\n    checkForErrors(response, options = {}) {\n        if (response.status === 404 && options.ignore404) {\n            return { json: () => ({}) };\n        }\n\n        if (response.status === 401) {\n            return this.onUnauthorised();\n        }\n\n        const responseCloneJson = response.clone ? response.clone().json() : response;\n\n        if (response.status === 422) {\n            return responseCloneJson.then((json) =>\n                Promise.reject({ ...json, title: 'Validation error' })\n            );\n        }\n\n        if (response.status >= 400 && response.status <= 600) {\n            return responseCloneJson.then((json) =>\n                Promise.reject(json.errors[0])\n            );\n        }\n\n        return response;\n    }\n\n    callAuthenticate() {\n        return Promise.resolve(this.authenticate() || true);\n    }\n\n    create(path, apiProps) {\n        return this.request(path, apiProps, 'post');\n    }\n\n    update(path, apiProps) {\n        return this.request(path, apiProps, 'put');\n    }\n\n    get(path, options = {}) {\n        return this.request(path, null, 'get', options);\n    }\n\n    destroy(path) {\n        return this.request(path, null, 'delete');\n    }\n}\n\nexport default ApiClient;\n","import ApiClient from './utils/ApiClient';\n\nconst useApi = (options) => {\n    const apiClient = new ApiClient({\n        ...options\n    });\n\n    return apiClient;\n};\n\nexport default useApi;\n","import { useEffect, useState } from 'react';\nimport { COMPLIANCE_API_ROOT } from '@/constants';\nimport normalize from 'json-api-normalizer';\nimport useApi from './useApi';\n\nconst includePropAndDelete = (entity, prop) => {\n    const attributes = entity[prop];\n    let newEntity = entity;\n    delete newEntity[prop];\n    return { ...newEntity, ...attributes };\n};\n\nconst includeAttributes = (entity) => (\n    entity && includePropAndDelete(entity, 'attributes')\n);\n\nconst includeRelationship = (entity, normalizedJson) => {\n    let relationships = {};\n    Object.entries(entity?.relationships || []).forEach((item) => {\n        const [relationship, relationshipData] = item;\n        relationships[relationship] = relationshipData?.data.map((entity) => (\n            includeAttributes(normalizedJson?.[entity.type]?.[entity.id])\n        )).filter((v) => (!!v));\n    });\n    delete entity.relationships;\n    return { ...entity, ...relationships };\n};\n\nconst normalizeData = (json, type) => {\n    const jsonNormalized = normalize(json);\n    return Object.values(jsonNormalized[type] || {})?.map((entity) => (\n        includeRelationship(includeAttributes(entity), jsonNormalized)\n    ));\n};\n\nconst fetchCollection = async (apiClient, collection, params = {}, options = {}) => {\n    const json = await apiClient.get(`/${ collection }`, { params });\n    const normalized = await normalizeData(json, options?.type || collection);\n\n    return {\n        collection: normalized,\n        meta: json.meta,\n        total: json.meta.total,\n        json\n    };\n};\n\nconst useCollection = (collection, options = {}, dependencies = []) => {\n    const [collectionState, setCollectionState] = useState({\n        data: undefined,\n        loading: false,\n        error: undefined\n    });\n    const apiClient = useApi({\n        apiBase: COMPLIANCE_API_ROOT\n    });\n    const params = {\n        ...(options?.params || {}),\n        include: (options?.include || [])\n    };\n\n    useEffect(() => {\n        if (!options?.skip) {\n            setCollectionState({\n                data: undefined,\n                loading: true,\n                error: undefined\n            });\n\n            fetchCollection(apiClient, collection, params, options).then((data) => {\n                setCollectionState({\n                    data,\n                    loading: false,\n                    error: undefined\n                });\n            });\n        }\n    }, [...dependencies, options?.skip]);\n\n    return collectionState;\n};\n\nexport default useCollection;\n","import { camelCase, getProperty } from 'Utilities/helpers';\n\nconst CSV_FILE_PREFIX = 'compliance-export';\nconst CSV_DELIMITER = ',';\nconst ENCODINGS = {\n    csv: 'text/csv',\n    json: 'application/json'\n};\n\nconst filename = (format) => (\n    CSV_FILE_PREFIX + '-' + (new Date()).toISOString() + '.' + format\n);\n\nconst encoding = (format) => (\n    `data:${ ENCODINGS[format] };charset=utf-8`\n);\n\nexport const linkAndDownload = (data, filename) => {\n    const link = document.createElement('a');\n    link.href = data;\n    link.download = filename;\n    link.click();\n};\n\nconst textForCell = (row, column) => {\n    const { exportKey, renderExport } = column;\n    let cell = exportKey ? getProperty(row, exportKey) : row;\n    if (renderExport) {\n        return renderExport(cell);\n    } else {\n        return cell;\n    }\n};\n\nexport const csvForItems = ({ items, columns }) => {\n    const header = columns.map((column) => (column.title)).join(CSV_DELIMITER);\n    const csvRows = [header, ...items.map((row) => (\n        columns.map((column) => (\n            `\"${ textForCell(row, column) }\"`\n        )).join(CSV_DELIMITER)\n    ))];\n\n    return encodeURI(`${ encoding('csv') },${ csvRows.join('\\n') }`);\n};\n\nexport const jsonForItems = ({ items, columns }) => {\n    const result = items.map((row) => (\n        columns.reduce((object, column) => {\n            const key = camelCase(column.title);\n            const value = textForCell(row, column);\n\n            object[key] = value;\n            return object;\n        }, {})\n    ));\n\n    return encodeURI(`${ encoding('json') },${ JSON.stringify(result) }`);\n};\n\nconst useExport = ({\n    exporter,\n    columns = [],\n    isDisabled = false\n}) => {\n    const exportableColumns = columns.filter((column) => (\n        column.export !== false && (column.exportKey || column.renderExport)\n    ));\n    const exportWithFormat = async (format) => {\n        const items = await exporter();\n        const formater = format === 'csv' ? csvForItems : jsonForItems;\n\n        if (items) {\n            return linkAndDownload(formater({\n                items,\n                columns: exportableColumns\n            }), filename(format));\n        } else {\n            console.info('No items returned for export');\n            return;\n        }\n    };\n\n    return {\n        toolbarProps: {\n            exportConfig: {\n                isDisabled,\n                onSelect: (_, format) => exportWithFormat(format)\n            }\n        }\n    };\n};\n\nexport default useExport;\n","import { useEffect, useLayoutEffect, useState } from 'react';\nimport { useApolloClient } from '@apollo/client';\nimport { useDispatch } from 'react-redux';\nimport debounce from '@redhat-cloud-services/frontend-components-utilities/debounce';\nimport useCollection from 'Utilities/hooks/api/useCollection';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport { osMinorVersionFilter } from './constants';\nimport useExport from 'Utilities/hooks/useTableTools/useExport';\n\nconst groupByMajorVersion = (versions = [], showFilter = []) => {\n    const showVersion = (version) => {\n        if (showFilter.length > 0) {\n            return showFilter.map(String).includes(String(version));\n        } else {\n            return true;\n        }\n    };\n\n    return versions.reduce((acc, currentValue) => {\n        if (showVersion(currentValue.osMajorVersion)) {\n            acc[String(currentValue.osMajorVersion)] = [...new Set(\n                [...acc[currentValue.osMajorVersion] || [], currentValue.osMinorVersion]\n            )];\n        }\n\n        return acc;\n    }, []);\n};\n\nexport const useOsMinorVersionFilter = (showFilter) => {\n    const { data: supportedSsgs } = useCollection('supported_ssgs', {\n        type: 'supportedSsg',\n        skip: !showFilter\n    });\n\n    return showFilter ? osMinorVersionFilter(groupByMajorVersion(supportedSsgs?.collection, showFilter)) : [];\n};\n\nexport const useSystemsFilter = (\n    filterString, showOnlySystemsWithTestResults, defaultFilter\n) => {\n    const combindedFilter = [\n        ...showOnlySystemsWithTestResults ? ['has_test_results = true'] : [],\n        ...filterString?.length > 0 ? [filterString] : []\n    ].join(' and ');\n    const filter = defaultFilter ?\n        `(${ defaultFilter })` +\n        (combindedFilter ? ` and (${ combindedFilter })` : '') : combindedFilter;\n\n    return filter;\n};\n\nexport const useFetchSystems = ({\n    query,\n    onComplete,\n    variables = {}\n}) => {\n    const client = useApolloClient();\n\n    return (perPage, page, requestVariables = {}) => (\n        client.query({\n            query,\n            fetchResults: true,\n            fetchPolicy: 'no-cache',\n            variables: {\n                perPage,\n                page,\n                ...variables,\n                ...requestVariables\n            }\n        }).then(({ data }) => {\n            const systems = data?.systems?.edges?.map((e) => e.node) || [];\n            const entities = systemsWithRuleObjectsFailed(systems);\n            const result = {\n                entities,\n                meta: {\n                    totalCount: data?.systems?.totalCount || 0\n                }\n            };\n\n            onComplete && onComplete(result);\n            return result;\n        })\n    );\n};\n\nexport const useGetEntities = (fetchEntities, { selected, columns } = {}) => {\n    const appendDirection = (attributes, direction) => (\n        attributes.map((attribute) => `${attribute}:${direction}`)\n    );\n\n    const findColumnByKey = (key) => (\n        (columns || []).find((column) => column.key === key)\n    );\n\n    return async (_ids, { page = 1, per_page: perPage, orderBy, orderDirection, filters }) => {\n        const sortableColumn = findColumnByKey(orderBy);\n        const sortBy = sortableColumn && sortableColumn.sortBy ?\n            appendDirection(sortableColumn.sortBy, orderDirection) : undefined;\n\n        const fetchedEntities = await fetchEntities(perPage, page, {\n            filters,\n            sortBy\n        });\n        const { entities, meta: { totalCount } } = fetchedEntities || {};\n\n        return {\n            results: entities.map((entity) => ({\n                ...entity,\n                selected: (selected || []).map((item) => (item.id)).includes(entity.id)\n            })),\n            orderBy,\n            orderDirection,\n            total: totalCount\n        };\n    };\n};\n\nexport const useOnSelect = (onSelectProp, items, preselectedSystems, total) => {\n    const [selectedSystems, setSelected] = useState(preselectedSystems);\n    const selectedSystemIds = selectedSystems.map((system) => (system.id));\n    const isPageSelected = items.filter((item) => (\n        selectedSystemIds.includes(item.id)\n    )).length === items.length;\n\n    const onSelectCallback = (selected) => (\n        onSelectProp && onSelectProp(selected)\n    );\n\n    const onSelect = (_event, select, _index, row) => {\n        const system = items.find(({ id }) => id === row.id);\n        if (!system) {\n            console.error(`System identifed as ${row.id} not found in items for selection!`);\n            return;\n        }\n\n        const selected = select\n            ? [...selectedSystems, system]\n            : selectedSystems.filter((selected) => (selected.id !== row.id));\n\n        setSelected(selected);\n        onSelectCallback(selected);\n    };\n\n    const onBulkSelect = () => {\n        const selectedSystemsWithoutItems = (selectedSystems || []).filter((system) => (\n            !(items.map((item) => (item.id))).includes(system.id)\n        ));\n        const notAllSelected = selectedSystems.length <= total;\n        const selected = notAllSelected ? (\n            !isPageSelected ? [...selectedSystemsWithoutItems, ...items] : selectedSystemsWithoutItems\n        ) : [];\n\n        setSelected(selected);\n        onSelectCallback(selected);\n    };\n\n    useEffect(() => {\n        setSelected(preselectedSystems);\n    }, [preselectedSystems]);\n\n    return {\n        onSelect,\n        onBulkSelect,\n        selectedSystems,\n        isPageSelected\n    };\n};\n\n// This hook is primarily meant to work around issues in the inventory\nexport const useInventoryUtilities = (inventory, selectedSystems, activeFilters) => {\n    const dispatch = useDispatch();\n\n    // Resets the Inventory to a loading state\n    // and prevents previously shown columns and rows to appear\n    useLayoutEffect(() => {\n        dispatch({\n            type: 'INVENTORY_INIT'\n        });\n    }, []);\n\n    // Ensures rows are marked as selected\n    useEffect(() => {\n        dispatch({\n            type: 'SELECT_ENTITIES',\n            payload: {\n                selected: selectedSystems\n            }\n        });\n    }, [selectedSystems]);\n\n    // Filters do not yet trigger the inventory to call getEntities\n    // and the page would not reset to page 1\n    const resetPage = () => {\n        Promise.resolve(dispatch({\n            type: 'RESET_PAGE'\n        })).then(() =>\n            inventory?.current?.onRefreshData()\n        );\n    };\n\n    // The debounce is to not have filter updates collide or get out of order.\n    const debounceResetPage = debounce(resetPage, 50);\n\n    useEffect(() => {\n        debounceResetPage();\n    }, [activeFilters]);\n};\n\nconst toIdFilter = (ids) => (\n    (ids?.length > 0) ? `id ^ (${ ids.join(',') })` : undefined\n);\n\nexport const useSystemsExport = ({\n    columns, filter, policyId, query, selected, total\n}) => {\n    const selectionFilter = selected ? toIdFilter(selected) : undefined;\n    const fetchSystems = useFetchSystems({\n        query,\n        variables: {\n            filter: selectionFilter ?\n                `${ filter } and (${ selectionFilter })` : filter,\n            ...policyId && { policyId }\n        }\n    });\n\n    const fetchBatched = (total, filter) => {\n        const BATCH_SIZE = 100;\n        const pages = Math.floor(total / BATCH_SIZE) + 1;\n        return Promise.all([...new Array(pages)].map((_, pageIdx) => (\n            fetchSystems(BATCH_SIZE, pageIdx + 1, filter)\n        )));\n    };\n\n    const selectedFilter = () => (\n        selected?.length > 0 ? toIdFilter(selected) : undefined\n    );\n\n    const exporter = async () => {\n        const fetchedItems = await fetchBatched(total, selectedFilter());\n        return fetchedItems.flatMap((result) => (\n            result.entities\n        ));\n    };\n\n    const { toolbarProps: { exportConfig } } = useExport({\n        exporter,\n        columns,\n        isDisabled: total === 0\n    });\n\n    return exportConfig;\n};\n","import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Spinner } from '@patternfly/react-core';\nimport { TableVariant } from '@patternfly/react-table';\n// eslint-disable-next-line max-len\nimport ComplianceRemediationButton from '@redhat-cloud-services/frontend-components-inventory-compliance/ComplianceRemediationButton';\nimport { DEFAULT_SYSTEMS_FILTER_CONFIGURATION, COMPLIANT_SYSTEMS_FILTER_CONFIGURATION } from '@/constants';\nimport { ErrorPage, StateView, StateViewPart } from 'PresentationalComponents';\nimport useFilterConfig from 'Utilities/hooks/useFilterConfig';\nimport { InventoryTable as FECInventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { policyFilter, defaultOnLoad } from './constants';\nimport {\n    useFetchSystems, useGetEntities, useOsMinorVersionFilter, useInventoryUtilities, useOnSelect,\n    useSystemsExport, useSystemsFilter\n} from './hooks';\n\nexport const InventoryTable = ({\n    columns,\n    showAllSystems,\n    policyId,\n    query,\n    showActions,\n    enableExport,\n    compliantFilter,\n    policies,\n    showOnlySystemsWithTestResults,\n    showOsFilter,\n    error,\n    showComplianceSystemsInfo,\n    compact,\n    remediationsEnabled,\n    systemProps,\n    defaultFilter,\n    emptyStateComponent,\n    prependComponent,\n    showOsMinorVersionFilter,\n    preselectedSystems,\n    onSelect: onSelectProp,\n    noSystemsTable\n}) => {\n    const inventory = useRef(null);\n    const [isEmpty, setIsEmpty] = useState(false);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([]);\n    const [total, setTotal] = useState(0);\n\n    const {\n        onSelect, onBulkSelect, selectedSystems, isPageSelected\n    } = useOnSelect(onSelectProp, items, preselectedSystems, total);\n    const selectedCount = selectedSystems.length;\n\n    const osMinorVersionFilter = useOsMinorVersionFilter(showOsMinorVersionFilter);\n    const { conditionalFilter, activeFilters, filterString, activeFilterValues } = useFilterConfig([\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(policies?.length > 0 ? policyFilter(policies, showOsFilter) : []),\n        ...osMinorVersionFilter\n    ]);\n\n    useInventoryUtilities(inventory, selectedSystems, activeFilterValues);\n\n    const onComplete = (result) => {\n        setTotal(result.meta.totalCount);\n        setItems(result.entities);\n        setIsLoaded(true);\n\n        if (emptyStateComponent &&\n            result.meta.totalCount === 0 &&\n            activeFilterValues.length === 0) {\n            setIsEmpty(true);\n        }\n    };\n\n    const systemsFilter = useSystemsFilter(filterString, showOnlySystemsWithTestResults, defaultFilter);\n    const fetchSystems = useFetchSystems({\n        query,\n        onComplete,\n        variables: {\n            filter: systemsFilter,\n            ...policyId && { policyId }\n        }\n    });\n    const getEntities = useGetEntities(fetchSystems, { selected: selectedSystems, columns });\n    const exportConfig = useSystemsExport({\n        columns,\n        filter: systemsFilter,\n        policyId,\n        query,\n        selected: selectedSystems.map((i) => (i.id)),\n        total\n    });\n\n    return <StateView stateValues={{ error, noError: error === undefined && !isEmpty, empty: isEmpty }}>\n        <StateViewPart stateKey='error'>\n            { !!prependComponent && prependComponent }\n            <ErrorPage error={error}/>\n        </StateViewPart>\n        <StateViewPart stateKey='empty'>\n            { emptyStateComponent }\n        </StateViewPart>\n        <StateViewPart stateKey='noError'>\n            { !!prependComponent && isLoaded && prependComponent }\n            { showComplianceSystemsInfo && <Alert\n                isInline\n                variant=\"info\"\n                ouiaId=\"SystemsListIsDifferentAlert\"\n                title={ 'The list of systems in this view is different than those that appear in the Inventory. ' +\n                    'Only systems currently associated with or reporting against compliance policies are displayed.' } /> }\n            <FECInventoryTable\n                { ...systemProps }\n                noSystemsTable={ noSystemsTable }\n                ref={ inventory }\n                activeFilters={ activeFilters }\n                getEntities={ getEntities }\n                onLoad={ defaultOnLoad(columns) }\n                hideFilters={{\n                    name: true,\n                    tags: true,\n                    registeredWith: true,\n                    stale: true\n                }}\n                tableProps={{\n                    canSelectAll: false,\n                    ...items.length > 0 && { onSelect }\n                }}\n                fallback={ <Spinner /> }\n                variant={ compact ? TableVariant.compact : '' }\n                bulkSelect={{\n                    checked: selectedCount > 0 ? (isPageSelected ? true : null) : false,\n                    onSelect: items.length > 0 && onBulkSelect,\n                    count: selectedCount,\n                    label: selectedCount > 0 ? `${ selectedCount } Selected` : undefined\n                }}\n                {...!showAllSystems && {\n                    ...conditionalFilter,\n                    ...remediationsEnabled && {\n                        dedicatedAction: <ComplianceRemediationButton\n                            allSystems={ selectedSystems }\n                            selectedRules={ [] } />\n                    }\n                }}\n                {...enableExport && { exportConfig }}\n                {...showActions && {\n                    actions: [{\n                        title: 'View in inventory',\n                        onClick: (_event, _index, { id }) => {\n                            const beta = window.location.pathname.split('/')[1] === 'beta';\n                            window.location.href = `${window.location.origin}${beta ? '/beta' : ''}/insights/inventory/${id}`;\n                        }\n                    }]\n                }}\n            />\n        </StateViewPart>\n    </StateView>;\n};\n\nInventoryTable.propTypes = {\n    columns: PropTypes.arrayOf(PropTypes.shape({})),\n    policies: PropTypes.arrayOf(PropTypes.shape({})),\n    showAllSystems: PropTypes.bool,\n    policyId: PropTypes.string,\n    query: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.object\n    ]),\n    showActions: PropTypes.bool,\n    enableExport: PropTypes.bool,\n    compliantFilter: PropTypes.bool,\n    showOnlySystemsWithTestResults: PropTypes.bool,\n    showOsFilter: PropTypes.bool,\n    showComplianceSystemsInfo: PropTypes.bool,\n    error: PropTypes.object,\n    compact: PropTypes.bool,\n    remediationsEnabled: PropTypes.bool,\n    defaultFilter: PropTypes.string,\n    systemProps: PropTypes.shape({\n        isFullView: PropTypes.bool\n    }),\n    emptyStateComponent: PropTypes.node,\n    prependComponent: PropTypes.node,\n    showOsMinorVersionFilter: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.arrayOf(PropTypes.string)\n    ]),\n    preselectedSystems: PropTypes.array,\n    onSelect: PropTypes.func,\n    noSystemsTable: PropTypes.node\n};\n\nInventoryTable.defaultProps = {\n    policyId: '',\n    showActions: true,\n    enableExport: true,\n    compliantFilter: false,\n    showOnlySystemsWithTestResults: false,\n    showComplianceSystemsInfo: false,\n    compact: false,\n    remediationsEnabled: true,\n    preselectedSystems: []\n};\n\nexport default InventoryTable;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { sortingByProp } from 'Utilities/helpers';\n\nconst selectRows = (rows, selected) => (\n    rows.map((row) => ({\n        ...row,\n        selected: selected.map((entity) => (entity.id)).includes(row.id)\n    }))\n);\n\nexport const entitiesReducer = (INVENTORY_ACTION, columns) => applyReducerHash({\n    ['INVENTORY_INIT']: () => ({\n        rows: [],\n        total: 0,\n        columns\n    }),\n    [INVENTORY_ACTION.LOAD_ENTITIES_PENDING]: (state) => ({\n        ...state,\n        columns\n    }),\n    [INVENTORY_ACTION.LOAD_ENTITIES_FULFILLED]: (state) => ({\n        ...state,\n        columns: state.total > 0 ? columns : [{ title: '' }]\n    }),\n    ['RESET_PAGE']: (state) => ({\n        ...state,\n        page: 1,\n        columns: []\n    }),\n    ['SELECT_ENTITIES']: (state, { payload: { selected } }) => ({\n        ...state,\n        rows: selectRows(state.rows, selected)\n    })\n});\n\nexport const mapCountOsMinorVersions = (systems) => {\n    if (!systems) { return {}; }\n\n    return systems.reduce((acc, { osMinorVersion }) => {\n        if (osMinorVersion !== undefined && osMinorVersion !== null) {\n            (acc[osMinorVersion] = acc[osMinorVersion] || { osMinorVersion, count: 0 }).count++;\n        }\n\n        return acc;\n    }, {});\n};\n\nexport const countOsMinorVersions = (systems) => (\n    Object.values(mapCountOsMinorVersions(systems)).sort(sortingByProp('osMinorVersion', 'desc'))\n);\n"],"sourceRoot":""}