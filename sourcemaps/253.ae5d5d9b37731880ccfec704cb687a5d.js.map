{"version":3,"file":"js/253.1673522569610.babdeb8b470d58870009.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/plus-circle-icon.js","webpack:///./src/PresentationalComponents/SystemPolicyCard/UnsupportedSSGVersion.js","webpack:///./src/PresentationalComponents/SystemPolicyCard/SystemPolicyCard.js","webpack:///./src/PresentationalComponents/SystemPolicyCards/SystemPolicyCards.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/NotConnected/NotConnected.js","webpack:///./src/SmartComponents/SystemDetails/NoPoliciesState.js","webpack:///./src/SmartComponents/SystemDetails/NoReportsState.js","webpack:///./src/SmartComponents/SystemDetails/EmptyState.js","webpack:///./src/SmartComponents/SystemDetails/ComplianceDetail.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const PlusCircleIconConfig = {\n  name: 'PlusCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PlusCircleIcon = createIcon(PlusCircleIconConfig);\n\nexport default PlusCircleIcon;","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Popover, Alert } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { supportedConfigsLink } from '@/constants';\n\nconst UnsupportedSSGVersion = ({ ssgVersion, style, ...props }) => {\n  const bodyContent =\n    'This system was using an incompatible version of the SSG at the time this report was generated.' +\n    ' Assessment of rules failed/passed on this system is a best-guess effort and may not be accurate.';\n  const footerContent = (\n    <a target=\"_blank\" rel=\"noopener noreferrer\" href={supportedConfigsLink}>\n      Supported SSG versions\n    </a>\n  );\n\n  return (\n    <Alert\n      variant=\"warning\"\n      isInline\n      style={style}\n      title={\n        <React.Fragment>\n          Unsupported SSG version ({ssgVersion})\n          <Popover position=\"right\" {...{ bodyContent, footerContent }}>\n            <OutlinedQuestionCircleIcon\n              style={{\n                marginLeft: '.5em',\n                cursor: 'pointer',\n                color: 'var(--pf-global--Color--200)',\n              }}\n            />\n          </Popover>\n        </React.Fragment>\n      }\n      {...props}\n    />\n  );\n};\n\nUnsupportedSSGVersion.propTypes = {\n  ssgVersion: propTypes.string,\n  style: propTypes.object,\n};\n\nexport default UnsupportedSSGVersion;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n} from '@patternfly/react-icons';\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  Text,\n  TextContent,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Truncate from '@redhat-cloud-services/frontend-components/Truncate';\nimport UnsupportedSSGVersion from './UnsupportedSSGVersion';\n\nclass SystemPolicyCard extends React.Component {\n  complianceIcon = (compliant) =>\n    compliant ? (\n      <div className=\"ins-c-policy-card ins-m-compliant\">\n        <CheckCircleIcon /> Compliant\n      </div>\n    ) : (\n      <div className=\"ins-c-policy-card ins-m-noncompliant\">\n        <ExclamationCircleIcon /> Not compliant\n      </div>\n    );\n\n  fixedPercentage = (value, fixed = 0, withPercent = true) =>\n    value.toFixed(fixed) + (withPercent ? '%' : '');\n\n  render() {\n    const { policy, style, onClick, isSelected } = this.props;\n    const {\n      rulesFailed,\n      compliant,\n      lastScanned,\n      score,\n      benchmark: { version: ssgVersion },\n      supported,\n      name,\n      policyType,\n    } = policy;\n    const passedPercentage = this.fixedPercentage(score);\n    const truncateDefaults = { expandOnMouseOver: true, hideExpandText: true };\n\n    return (\n      <Card\n        ouiaId=\"PolicyCard\"\n        onClick={(event) => {\n          event.stopPropagation();\n          onClick(policy);\n        }}\n        isSelectable\n        isSelected={isSelected}\n        style={style}\n      >\n        <CardBody>\n          <TextContent className=\"margin-bottom-md\">\n            <Text\n              ouiaId=\"PolicyCardName\"\n              className=\"margin-bottom-top-none\"\n              component={TextVariants.h4}\n            >\n              <Truncate text={name} length={110} {...truncateDefaults} />\n            </Text>\n            <Text\n              ouiaId=\"PolicyCardType\"\n              style={{ color: 'var(--pf-global--Color--200)' }}\n              component={TextVariants.small}\n            >\n              <Truncate text={policyType} length={110} {...truncateDefaults} />\n            </Text>\n          </TextContent>\n          <div className=\"margin-bottom-md\">\n            {supported && this.complianceIcon(compliant)}\n            <Text\n              ouiaId=\"PolicyCardFailedRulesScore\"\n              component={TextVariants.small}\n            >\n              {rulesFailed} rule{rulesFailed === 1 ? '' : 's'} failed{' '}\n              <Tooltip\n                position=\"bottom\"\n                maxWidth=\"22em\"\n                content={\n                  'The system compliance score is calculated by OpenSCAP and ' +\n                  'is a normalized weighted sum of rules selected for this policy.'\n                }\n              >\n                <span>\n                  (Score: {supported ? passedPercentage : 'Unsupported'})\n                </span>\n              </Tooltip>\n            </Text>\n          </div>\n          <Text className=\"margin-bottom-none\" component={TextVariants.small}>\n            <Text ouiaId=\"PolicyCardSSGVersion\">SSG version: {ssgVersion}</Text>\n            <Text ouiaId=\"PolicyCardLastScanned\">\n              Last scanned:{' '}\n              {lastScanned !== 'Never' ? (\n                <DateFormat date={Date.parse(lastScanned)} type=\"relative\" />\n              ) : (\n                lastScanned\n              )}\n            </Text>\n          </Text>\n        </CardBody>\n        {!supported && (\n          <CardFooter style={{ padding: '0' }}>\n            <UnsupportedSSGVersion\n              ouiaId=\"PolicyCardUnsupportedSSG\"\n              ssgVersion={ssgVersion}\n              style={{\n                paddingTop: 'var(--pf-c-alert--PaddingTop)',\n                paddingRight: 'var(--pf-c-card--child--PaddingRight)',\n                paddingLeft: 'var(--pf-c-card--child--PaddingLeft)',\n                paddingBottom: 'var(--pf-c-alert--PaddingBottom)',\n              }}\n            />\n          </CardFooter>\n        )}\n      </Card>\n    );\n  }\n}\n\nSystemPolicyCard.propTypes = {\n  policy: PropTypes.shape({\n    rulesPassed: PropTypes.number,\n    rulesFailed: PropTypes.number,\n    score: PropTypes.number,\n    lastScanned: PropTypes.string,\n    refId: PropTypes.string,\n    name: PropTypes.string,\n    policyType: PropTypes.string,\n    compliant: PropTypes.bool,\n    benchmark: PropTypes.string,\n    supported: PropTypes.bool,\n  }),\n  style: PropTypes.object,\n  onClick: PropTypes.func,\n  isSelected: PropTypes.bool,\n};\n\nexport default SystemPolicyCard;\n","import React from 'react';\nimport { Grid, GridItem, Card, CardBody } from '@patternfly/react-core';\nimport SystemPolicyCard from '../SystemPolicyCard';\nimport propTypes from 'prop-types';\nimport { Instagram } from 'react-content-loader';\n\nclass SystemPolicyCards extends React.Component {\n  systemPolicyCards() {\n    const { policies, selectedPolicies, onCardClick } = this.props;\n\n    return policies\n      .filter((policy) => policy.rulesFailed + policy.rulesPassed > 0)\n      .map((policy, i) => (\n        <GridItem sm={12} md={12} lg={6} xl={4} key={i}>\n          <SystemPolicyCard\n            policy={policy}\n            style={{ height: '100%' }}\n            onClick={(policy) => onCardClick(policy)}\n            isSelected={selectedPolicies?.find(\n              (policyId) => policyId === policy.id\n            )}\n          />\n        </GridItem>\n      ));\n  }\n\n  render() {\n    const { loading } = this.props;\n\n    return (\n      <React.Fragment>\n        <Grid hasGutter>\n          {this.systemPolicyCards()}\n          {loading &&\n            [...Array(3)].map((_item, i) => (\n              <GridItem span={4} key={i}>\n                <Card>\n                  <CardBody>\n                    <Instagram />\n                  </CardBody>\n                </Card>\n              </GridItem>\n            ))}\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nSystemPolicyCards.propTypes = {\n  policies: propTypes.array,\n  loading: propTypes.bool,\n  onCardClick: propTypes.func,\n  selectedPolicies: propTypes.string,\n};\n\nSystemPolicyCards.defaultProps = {\n  policies: [],\n};\n\nexport default SystemPolicyCards;\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Button, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { DisconnectedIcon } from '@patternfly/react-icons';\nvar NotConnected = function (_a) {\n    var _b = _a.titleText, titleText = _b === void 0 ? 'This system isn’t connected to Insights yet' : _b, _c = _a.bodyText, bodyText = _c === void 0 ? 'To get started, activate the Insights client for this system.' : _c, _d = _a.buttonText, buttonText = _d === void 0 ? 'Learn how to activate the Insights client' : _d;\n    return (_jsxs(EmptyState, { children: [_jsx(EmptyStateIcon, { icon: DisconnectedIcon }), _jsx(Title, __assign({ headingLevel: \"h5\", size: \"lg\" }, { children: titleText })), _jsx(EmptyStateBody, { children: bodyText }), _jsx(Button, __assign({ variant: \"primary\", component: \"a\", href: \"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\", target: \"_blank\", rel: \"noopener noreferrer\", className: \"pf-u-mt-lg\" }, { children: buttonText }))] }));\n};\nexport default NotConnected;\n//# sourceMappingURL=NotConnected.js.map","import React from 'react';\nimport { BackgroundLink, LinkButton } from 'PresentationalComponents';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport {\n  Title,\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStatePrimary,\n  EmptyStateSecondaryActions,\n  EmptyStateIcon,\n} from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\n\nconst NoPoliciesState = () => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        This system is not part of any SCAP policies defined within Compliance.\n      </Title>\n      <EmptyStateBody>\n        To assess and monitor compliance against a SCAP policy for this system,\n        add it to an existing policy or create a new policy.\n      </EmptyStateBody>\n      <EmptyStatePrimary>\n        <BackgroundLink\n          to=\"/scappolicies/new\"\n          variant=\"primary\"\n          ouiaId=\"CreateNewPolicyButton\"\n          component={LinkButton}\n        >\n          Create new policy\n        </BackgroundLink>\n      </EmptyStatePrimary>\n      <EmptyStateSecondaryActions>\n        <Link variant=\"plain\" to=\"/scappolicies\">\n          View compliance policies\n        </Link>\n      </EmptyStateSecondaryActions>\n    </EmptyState>\n  </Bullseye>\n);\n\nexport default NoPoliciesState;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { CloudSecurityIcon } from '@patternfly/react-icons';\nimport {\n  Title,\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n} from '@patternfly/react-core';\n\nconst NoReportsState = ({ system }) => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon\n        icon={CloudSecurityIcon}\n        title=\"Compliance\"\n        size=\"xl\"\n        style={{\n          fontWeight: '500',\n          color: 'var(--pf-global--primary-color--100)',\n        }}\n      />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        No results reported\n      </Title>\n      <EmptyStateBody>\n        This system is part of {system?.policies?.length}\n        {system?.policies?.length > 1 ? ' policies' : ' policy'}, but has not\n        returned any results.\n      </EmptyStateBody>\n      <EmptyStateBody>\n        Reports are returned when the system checks into Insights. By default,\n        systems check in every 24 hours.\n      </EmptyStateBody>\n    </EmptyState>\n  </Bullseye>\n);\n\nNoReportsState.propTypes = {\n  system: propTypes.shape({\n    policies: propTypes.array,\n  }),\n};\n\nexport default NoReportsState;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\nimport NoPoliciesState from './NoPoliciesState';\nimport NoReportsState from './NoReportsState';\n\nconst EmptyState = ({ system }) => {\n  if (!system?.insightsId) {\n    return <NotConnected />;\n  } else {\n    if (!system?.hasPolicy) {\n      return <NoPoliciesState system={system} />;\n    } else if (system?.hasPolicy && system?.testResultProfiles?.length === 0) {\n      return <NoReportsState system={system} />;\n    }\n  }\n};\n\nEmptyState.propTypes = {\n  system: propTypes.object,\n};\n\nexport default EmptyState;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport SystemPolicyCards from '../../PresentationalComponents/SystemPolicyCards';\nimport RulesTable from '@/PresentationalComponents/RulesTable/RulesTable';\nimport ComplianceEmptyState from 'PresentationalComponents/ComplianceEmptyState';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\n\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport './compliance.scss';\nimport { ErrorCard } from 'PresentationalComponents';\n\nimport EmptyState from './EmptyState';\n\nconst QUERY = gql`\n  query System($systemId: String!) {\n    system(id: $systemId) {\n      id\n      name\n      hasPolicy\n      insightsId\n      policies {\n        id\n      }\n      testResultProfiles {\n        id\n        name\n        policyType\n        refId\n        compliant\n        rulesFailed\n        rulesPassed\n        lastScanned\n        score\n        supported\n        osMajorVersion\n        benchmark {\n          version\n        }\n        policy {\n          id\n        }\n        rules {\n          title\n          severity\n          rationale\n          refId\n          description\n          compliant\n          remediationAvailable\n          references\n          identifier\n          precedence\n        }\n      }\n    }\n  }\n`;\n\nconst SystemQuery = ({ data: { system }, loading, hidePassed }) => {\n  const [selectedPolicies, setSelectedPolicies] = useState();\n  const policies = system?.testResultProfiles;\n  const setOrUnsetPolicy = (policy) => {\n    if (!policy) {\n      return;\n    }\n    const policyIncluded = selectedPolicies?.find(\n      (policyId) => policy?.id === policyId\n    );\n    if (policyIncluded) {\n      const newSelection = selectedPolicies?.filter(\n        (policyId) => policy.id !== policyId\n      );\n      setSelectedPolicies(newSelection.length > 0 ? newSelection : undefined);\n    } else {\n      setSelectedPolicies([...(selectedPolicies || []), policy?.id]);\n    }\n  };\n\n  const onDeleteFilter = (chips, clearAll) => {\n    const chipNames = chips\n      .find((chips) => chips.category === 'Policy')\n      ?.chips.map((chip) => chip.name);\n    const policyId = policies.find(({ name }) => chipNames?.includes(name))?.id;\n\n    if (policyId) {\n      !clearAll\n        ? setOrUnsetPolicy(\n            policyId\n              ? {\n                  id: policyId,\n                }\n              : {}\n          )\n        : setSelectedPolicies(undefined);\n    }\n  };\n\n  return (\n    <>\n      <SystemPolicyCards\n        policies={policies}\n        loading={loading}\n        selectedPolicies={selectedPolicies}\n        onCardClick={(policy) => {\n          setOrUnsetPolicy(policy);\n        }}\n      />\n      <br />\n      {system?.testResultProfiles?.length ? (\n        <RulesTable\n          ansibleSupportFilter\n          hidePassed={hidePassed}\n          system={{\n            ...system,\n            supported:\n              (system?.testResultProfiles || []).filter(\n                (profile) => profile.supported\n              ).length > 0,\n          }}\n          profileRules={system?.testResultProfiles.map((profile) => ({\n            system,\n            profile,\n            rules: profile.rules,\n          }))}\n          loading={loading}\n          options={{\n            sortBy: {\n              index: 4,\n              direction: 'asc',\n              property: 'severity',\n            },\n            onDeleteFilter,\n          }}\n          activeFilters={{\n            policy: selectedPolicies,\n          }}\n        />\n      ) : (\n        <EmptyState system={system} />\n      )}\n    </>\n  );\n};\n\nSystemQuery.propTypes = {\n  data: propTypes.shape({\n    system: propTypes.shape({\n      hasPolicy: propTypes.bool,\n      policies: propTypes.shape({\n        id: propTypes.string,\n      }),\n      profiles: propTypes.array,\n      testResultProfiles: propTypes.array,\n    }),\n  }),\n  loading: propTypes.bool,\n  hidePassed: propTypes.bool,\n};\n\nSystemQuery.defaultProps = {\n  loading: true,\n};\n\nexport const Details = ({ inventoryId, hidePassed, ...props }) => {\n  let { data, error, loading } = useQuery(QUERY, {\n    variables: { systemId: inventoryId },\n    fetchPolicy: 'no-cache',\n  });\n  const is404 = error?.networkError?.statusCode === 404;\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  if (error && !is404) {\n    const errorMsg = `Oops! Error loading System data: ${error}`;\n    return <ErrorCard message={errorMsg} />;\n  }\n\n  return (\n    <div className=\"ins-c-compliance__scope\">\n      {!data?.system || is404 ? (\n        <ComplianceEmptyState title=\"No policies are reporting for this system\" />\n      ) : (\n        <SystemQuery\n          {...props}\n          hidePassed={hidePassed}\n          data={data}\n          loading={loading}\n        />\n      )}\n    </div>\n  );\n};\n\nDetails.propTypes = {\n  inventoryId: propTypes.string,\n  hidePassed: propTypes.bool,\n};\n\nexport default Details;\n"],"names":["PlusCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","PlusCircleIcon","UnsupportedSSGVersion","ssgVersion","style","props","footerContent","target","rel","href","supportedConfigsLink","Alert","variant","isInline","title","Popover","position","bodyContent","marginLeft","cursor","color","propTypes","SystemPolicyCard","compliant","className","value","fixed","withPercent","toFixed","this","policy","onClick","isSelected","rulesFailed","lastScanned","score","benchmark","version","supported","policyType","passedPercentage","fixedPercentage","truncateDefaults","expandOnMouseOver","hideExpandText","Card","ouiaId","event","stopPropagation","isSelectable","CardBody","TextContent","Text","component","TextVariants","Truncate","text","length","complianceIcon","Tooltip","maxWidth","content","DateFormat","date","Date","parse","type","CardFooter","padding","paddingTop","paddingRight","paddingLeft","paddingBottom","React","PropTypes","rulesPassed","refId","SystemPolicyCards","policies","selectedPolicies","onCardClick","filter","map","i","GridItem","sm","md","lg","xl","key","find","policyId","id","loading","Grid","hasGutter","systemPolicyCards","Array","_item","span","defaultProps","__assign","Object","assign","t","s","n","arguments","p","prototype","hasOwnProperty","call","apply","_a","_b","titleText","_c","bodyText","_d","buttonText","EmptyState","children","EmptyStateIcon","icon","DisconnectedIcon","Title","headingLevel","size","EmptyStateBody","Button","Bullseye","EmptyStatePrimary","to","LinkButton","EmptyStateSecondaryActions","Link","NoReportsState","system","CloudSecurityIcon","fontWeight","insightsId","hasPolicy","testResultProfiles","QUERY","gql","SystemQuery","data","hidePassed","useState","setSelectedPolicies","setOrUnsetPolicy","newSelection","undefined","RulesTable","ansibleSupportFilter","profile","profileRules","rules","options","sortBy","index","direction","property","onDeleteFilter","chips","clearAll","chipNames","category","chip","includes","activeFilters","profiles","Details","inventoryId","useQuery","variables","systemId","fetchPolicy","error","is404","networkError","statusCode","Spinner","errorMsg","message","ComplianceEmptyState"],"sourceRoot":""}