{"version":3,"sources":["webpack:///./src/Utilities/hooks/useFeature.js","webpack:///./src/SmartComponents/Reports/Reports.js"],"names":["setFeatureFlag","featureValue","feature","value","console","log","localStorage","setItem","removeItem","useFeature","featureDefault","features","search","path","history","useLocation","pathName","useHistory","URLSearchParams","forEach","push","featureEnabled","getItem","getLocatStateFlag","QUERY","gql","LoadingView","showTableView","SkeletonTable","colSize","rowSize","propTypes","bool","ReportsHeader","PageHeader","title","Reports","profiles","showView","location","useQuery","data","error","loading","refetch","View","ReportsTable","ReportCardGrid","useEffect","undefined","edges","map","profile","node","filter","totalHostCount","profilesFromEdges","length","stateValues","stateKey","Main"],"mappings":"iRAIMA,EAAiB,SAACC,EAAcC,GAClC,IAAMC,EAAyB,WAAjBF,EAETE,GAIDC,QAAQC,IAAR,oCAAyCH,EAAzC,eAAuDC,IACvDG,aAAaC,QAAb,UAV2B,sBAU3B,YAAsDL,GAAWC,KAJjEC,QAAQC,IAAR,sCAA2CH,IAC3CI,aAAaE,WAAb,UAP2B,sBAO3B,YAAyDN,MA0ClDO,EAfI,SAACP,GAChB,IAAMQ,EAAiBC,IAAST,GAChC,GAAKA,EAAL,CArBoB,IAAM,EAClBU,EAAkBC,EACpBC,EAFoB,EACSC,cAA3BH,EADkB,EAClBA,OAAkBC,EADA,EACVG,SACVF,EAAUG,cACXL,IAIa,IAAIM,gBAAgBN,GAC5BO,QAAQnB,GAElBc,EAAQM,KAAKP,IAiBb,IACMQ,EAdgB,SAACnB,GAAD,OACtBI,aAAagB,QAAb,UA9B+B,sBA8B/B,YAAsDpB,IAY9BqB,CAAkBrB,IACAQ,EAG1C,OADAN,QAAQC,IAAR,kBAAuBH,EAAvB,sBAA4CmB,IACrCA,I,u1BCrCX,IAAMG,EAAQC,IAAH,KA4CLC,EAAc,SAAC,GAAD,SAAGC,cACH,kBAACC,EAAA,cAAD,CAAeC,QAAU,EAAIC,QAAU,KAAU,kBAAC,IAAD,OAGrEJ,EAAYK,UAAY,CACpBJ,cAAeI,IAAUC,MAG7B,IAAMC,EAAgB,kBAClB,kBAACC,EAAA,WAAD,KACI,kBAACA,EAAA,gBAAD,CAAiBC,MAAM,cAIlBC,EAAU,WACnB,IAAIC,EAAW,GACXC,GAAW,EACTC,EAAWxB,cAHQ,EAIeyB,mBAAShB,GAA3CiB,EAJmB,EAInBA,KAAMC,EAJa,EAIbA,MAAOC,EAJM,EAINA,QAASC,EAJH,EAIGA,QACtBjB,EAAgBlB,EAAW,oBAC3BoC,EAAOlB,EAAgBmB,IAAeC,IAa5C,OAXAC,qBAAU,WACNJ,MACD,CAACL,IAEAE,IAEAC,OAAQO,EACRN,OAAUM,EACVX,GAHAD,EAnCkB,SAACI,GAAD,cACrBA,SAAA,UAAAA,EAAMJ,gBAAN,eAAgBa,QAAS,IAAIC,KAAI,SAACC,GAAD,OAC9BA,EAAQC,QACTC,QAAO,SAACF,GAAD,OACNA,EAAQG,eAAiB,KA+BdC,CAAkBf,KAGNJ,EAASoB,OAAS,GAGtC,kBAAC,IAAD,CAAoBC,YAAc,CAAEhB,QAAOD,OAAME,YACpD,kBAAC,IAAD,CAAegB,SAAS,WACpB,kBAAC,EAAD,MACA,kBAACC,EAAA,KAAD,KACI,kBAAC,EAAiB,CAAEjC,oBAG5B,kBAAC,IAAD,CAAegC,SAAS,QACpB,kBAAC,EAAD,MACA,kBAACC,EAAA,KAAD,KACMtB,EAAW,kBAACO,EAAU,CAAER,aAAkB,kBAAC,IAAD,UAM7CD","file":"js/Reports-b21ec7d9a9caf782548f.js","sourcesContent":["import { features } from '@/constants';\nimport { useLocation, useHistory } from 'react-router-dom';\nconst LOCAL_STORE_FEATURE_PREFIX = 'insights:compliance';\n\nconst setFeatureFlag = (featureValue, feature) => {\n    const value = featureValue === 'enable';\n\n    if (!value) {\n        console.log(`Removing feature setting of ${feature}`);\n        localStorage.removeItem(`${LOCAL_STORE_FEATURE_PREFIX}:${feature}`);\n    } else {\n        console.log(`Setting feature value for ${feature} to ${value}`);\n        localStorage.setItem(`${LOCAL_STORE_FEATURE_PREFIX}:${feature}`, value);\n    }\n};\n\n// Allows setting feature flag values via ?feature|(enable/disable)\nconst setFlagsFromUrl = () => {\n    const { search, pathName: path } = useLocation();\n    const history = useHistory();\n    if (!search) {\n        return;\n    }\n\n    const urlParams = new URLSearchParams(search);\n    urlParams.forEach(setFeatureFlag);\n\n    history.push(path);\n};\n\n// Queries the local storage for feature flag values\nconst getLocatStateFlag = (feature) => (\n    localStorage.getItem(`${LOCAL_STORE_FEATURE_PREFIX}:${feature}`)\n);\n\n// A hook to query feature values\nconst useFeature = (feature) => {\n    const featureDefault = features[feature];\n    if (!feature) {\n        return;\n    }\n\n    setFlagsFromUrl();\n\n    const localStoreValue = getLocatStateFlag(feature);\n    const featureEnabled = localStoreValue || featureDefault;\n\n    console.log(`Feature ${feature} is set to ${featureEnabled}`);\n    return featureEnabled;\n};\n\nexport default useFeature;\n\n","import React, { useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { PageHeader, PageHeaderTitle, Main, SkeletonTable } from '@redhat-cloud-services/frontend-components';\nimport {\n    ReportCardGrid, ReportsTable, StateViewPart, StateViewWithError, ReportsEmptyState, LoadingComplianceCards\n} from 'PresentationalComponents';\nimport useFeature from 'Utilities/hooks/useFeature';\n\nconst QUERY = gql`\n{\n    profiles(search: \"has_test_results = true\", limit: 1000){\n        edges {\n            node {\n                id\n                name\n                refId\n                description\n                totalHostCount\n                compliantHostCount\n                majorOsVersion\n                complianceThreshold\n                businessObjective {\n                    id\n                    title\n                }\n                policy {\n                    id\n                    name\n                    benchmark {\n                        id\n                        version\n                    }\n                }\n                benchmark {\n                    id\n                    version\n                }\n            }\n        }\n\n    }\n}\n`;\n\nconst profilesFromEdges = (data) => (\n    (data?.profiles?.edges || []).map((profile) => (\n        profile.node\n    )).filter((profile) => (\n        profile.totalHostCount > 0\n    ))\n);\n\nconst LoadingView = ({ showTableView }) => (\n    showTableView ? <SkeletonTable colSize={ 3 } rowSize={ 10 } /> : <LoadingComplianceCards />\n);\n\nLoadingView.propTypes = {\n    showTableView: propTypes.bool\n};\n\nconst ReportsHeader = () => (\n    <PageHeader>\n        <PageHeaderTitle title=\"Reports\" />\n    </PageHeader>\n);\n\nexport const Reports = () => {\n    let profiles = [];\n    let showView = false;\n    const location = useLocation();\n    let { data, error, loading, refetch } = useQuery(QUERY);\n    const showTableView = useFeature('reportsTableView');\n    const View = showTableView ? ReportsTable : ReportCardGrid;\n\n    useEffect(() => {\n        refetch();\n    }, [location]);\n\n    if (data) {\n        profiles = profilesFromEdges(data);\n        error = undefined;\n        loading = undefined;\n        showView = profiles && profiles.length > 0;\n    }\n\n    return <StateViewWithError stateValues={ { error, data, loading } }>\n        <StateViewPart stateKey='loading'>\n            <ReportsHeader />\n            <Main>\n                <LoadingView { ...{ showTableView } } />\n            </Main>\n        </StateViewPart>\n        <StateViewPart stateKey='data'>\n            <ReportsHeader />\n            <Main>\n                { showView ? <View { ...{ profiles } } /> : <ReportsEmptyState /> }\n            </Main>\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nexport default Reports;\n"],"sourceRoot":""}