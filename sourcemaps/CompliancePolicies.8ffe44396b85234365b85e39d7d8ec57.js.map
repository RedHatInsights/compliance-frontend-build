{"version":3,"file":"js/CompliancePolicies.3350f776871d27678fad.js","mappings":"uTAmBMA,GAAQC,EAAAA,EAAAA,IAAH,2mBAmCEC,EAAqB,WAChC,IAYIC,EAZEC,GAAWC,EAAAA,EAAAA,eACXC,EACJ,kBAAC,KAAD,CAAgBC,GAAG,qBACjB,kBAAC,EAAAC,OAAD,CAAQC,QAAQ,UAAUC,OAAO,yBAAjC,sBAKJ,GAAwCC,EAAAA,EAAAA,GAASX,GAA3CY,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,MAAOC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,QAY5B,OAXAC,EAAAA,EAAAA,YAAU,WACRD,MACC,CAACX,EAAUW,IAGVH,IACFC,OAAQI,EACRH,OAAUG,EACVd,EAAWS,EAAKM,SAASC,MAAMC,KAAI,SAACC,GAAD,OAAaA,EAAQC,SAIxD,kBAAC,aAAD,KACE,kBAAC,IAAD,CAAYC,UAAU,eACpB,kBAAC,IAAD,CAAiBC,MAAM,mBAEzB,kBAAC,IAAD,KACE,kBAAC,KAAD,CAAWC,YAAa,CAAEZ,MAAAA,EAAOD,KAAAA,EAAME,QAAAA,IACrC,kBAAC,KAAD,CAAeY,SAAS,SACtB,kBAAC,KAAD,CAAWb,MAAOA,KAEpB,kBAAC,KAAD,CAAea,SAAS,WACtB,kBAAC,KAAD,OAEF,kBAAC,KAAD,CAAeA,SAAS,QACrBvB,GAAgC,IAApBA,EAASwB,OACpB,kBAAC,EAAAC,KAAD,CAAMC,WAAS,GACb,kBAAC,IAAD,CACEL,MAAM,cACNM,WAAYxB,KAIhB,kBAAC,KAAD,CAAeH,SAAUA,SASvC","sources":["webpack:///./src/SmartComponents/CompliancePolicies/CompliancePolicies.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { useLocation } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { Button, Grid } from '@patternfly/react-core';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport ComplianceEmptyState from 'PresentationalComponents/ComplianceEmptyState';\nimport {\n  BackgroundLink,\n  ErrorPage,\n  LoadingPoliciesTable,\n  PoliciesTable,\n  StateView,\n  StateViewPart,\n} from 'PresentationalComponents';\n\nconst QUERY = gql`\n  {\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          name\n          description\n          refId\n          complianceThreshold\n          totalHostCount\n          majorOsVersion\n          policyType\n          policy {\n            id\n            name\n          }\n          benchmark {\n            id\n            title\n            version\n          }\n          hosts {\n            id\n          }\n          businessObjective {\n            id\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const CompliancePolicies = () => {\n  const location = useLocation();\n  const createLink = (\n    <BackgroundLink to=\"/scappolicies/new\">\n      <Button variant=\"primary\" ouiaId=\"CreateNewPolicyButton\">\n        Create new policy\n      </Button>\n    </BackgroundLink>\n  );\n  let { data, error, loading, refetch } = useQuery(QUERY);\n  useEffect(() => {\n    refetch();\n  }, [location, refetch]);\n  let policies;\n\n  if (data) {\n    error = undefined;\n    loading = undefined;\n    policies = data.profiles.edges.map((profile) => profile.node);\n  }\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"page-header\">\n        <PageHeaderTitle title=\"SCAP policies\" />\n      </PageHeader>\n      <Main>\n        <StateView stateValues={{ error, data, loading }}>\n          <StateViewPart stateKey=\"error\">\n            <ErrorPage error={error} />\n          </StateViewPart>\n          <StateViewPart stateKey=\"loading\">\n            <LoadingPoliciesTable />\n          </StateViewPart>\n          <StateViewPart stateKey=\"data\">\n            {policies && policies.length === 0 ? (\n              <Grid hasGutter>\n                <ComplianceEmptyState\n                  title=\"No policies\"\n                  mainButton={createLink}\n                />\n              </Grid>\n            ) : (\n              <PoliciesTable policies={policies} />\n            )}\n          </StateViewPart>\n        </StateView>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default CompliancePolicies;\n"],"names":["QUERY","gql","CompliancePolicies","policies","location","useLocation","createLink","to","Button","variant","ouiaId","useQuery","data","error","loading","refetch","useEffect","undefined","profiles","edges","map","profile","node","className","title","stateValues","stateKey","length","Grid","hasGutter","mainButton"],"sourceRoot":""}