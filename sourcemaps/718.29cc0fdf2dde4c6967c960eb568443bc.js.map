{"version":3,"file":"js/718.1670252828921.01b0ff177478d5e75f4a.js","mappings":"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","sources":["webpack:///./src/SmartComponents/ComplianceSystems/ComplianceSystems.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeDetailsRow.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeTable.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeTooltip.js","webpack:///./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyProfilesRules.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack:///./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack:///./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack:///./src/SmartComponents/DeletePolicy/DeletePolicy.js","webpack:///./src/SmartComponents/DeleteReport/DeleteReport.js","webpack:///./src/SmartComponents/EditPolicy/constants.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyRulesTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicySystemsTab.js","webpack:///./src/SmartComponents/EditPolicy/components/NewRulesAlert.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyForm.js","webpack:///./src/SmartComponents/EditPolicy/hooks/index.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicy.js","webpack:///./src/SmartComponents/SystemsTable/Cells.js","webpack:///./src/SmartComponents/SystemsTable/Columns.js","webpack:///./src/SmartComponents/InventoryDetails/InventoryDetails.js","webpack:///./src/SmartComponents/SystemsTable/constants.js","webpack:///./src/SmartComponents/SystemsTable/hooks.js","webpack:///./src/SmartComponents/SystemsTable/SystemsTable.js","webpack:///./src/store/Reducers/SystemStore.js"],"sourcesContent":["/* eslint-disable react/display-name */\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { nowrap } from '@patternfly/react-table';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport { SystemsTable } from 'SmartComponents';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst QUERY = gql`\n  {\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n        }\n      }\n    }\n  }\n`;\n\nconst DEFAULT_FILTER = 'has_test_results = true or has_policy = true';\n\nexport const ComplianceSystems = () => {\n  const { data, error, loading } = useQuery(QUERY);\n  const policies = data?.profiles?.edges.map(({ node }) => node);\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"page-header\">\n        <PageHeaderTitle title=\"Compliance systems\" />\n      </PageHeader>\n      <Main>\n        <StateViewWithError stateValues={{ error, data, loading }}>\n          <StateViewPart stateKey=\"data\">\n            {policies && (\n              <SystemsTable\n                columns={[\n                  Columns.customName({\n                    showLink: true,\n                  }),\n                  Columns.inventoryColumn('tags'),\n                  Columns.OS,\n                  Columns.Policies,\n                  Columns.inventoryColumn('updated', {\n                    props: { isStatic: true },\n                    transforms: [nowrap],\n                  }),\n                ]}\n                defaultFilter={DEFAULT_FILTER}\n                systemProps={{\n                  isFullView: true,\n                }}\n                showOsMinorVersionFilter={policies.map(\n                  (policy) => policy.osMajorVersion\n                )}\n                showComplianceSystemsInfo\n                enableEditPolicy={false}\n                remediationsEnabled={false}\n                policies={policies}\n              />\n            )}\n          </StateViewPart>\n        </StateViewWithError>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default ComplianceSystems;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Text } from '@patternfly/react-core';\n\nconst PolicyTypeDetailsRow = ({ item: { description }, key }) => {\n  return (\n    <Text key={key} style={{ margin: 'var(--pf-global--spacer--lg) 0' }}>\n      {description}\n    </Text>\n  );\n};\n\nPolicyTypeDetailsRow.propTypes = {\n  item: propTypes.object,\n  key: propTypes.string,\n};\n\nexport default PolicyTypeDetailsRow;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { fitContent } from '@patternfly/react-table';\nimport { InUseProfileLabel } from 'PresentationalComponents';\nimport { TableToolsTable } from 'Utilities/hooks/useTableTools';\nimport { renderComponent } from 'Utilities/helpers';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport PolicyTypeDetailsRow from './PolicyTypeDetailsRow';\n\nconst NameCell = ({ name, disabled }) => {\n  return (\n    <>\n      {name} {disabled && <InUseProfileLabel compact />}\n    </>\n  );\n};\n\nNameCell.propTypes = {\n  name: propTypes.string,\n  disabled: propTypes.boolean,\n};\n\nconst PolicyTypeTable = ({ profiles, onChange, selectedProfile }) => (\n  <TableToolsTable\n    items={profiles.map((profile) => ({\n      ...profile,\n      rowProps: {\n        selected: profile.id === selectedProfile?.id,\n        disableSelection: profile.disabled,\n      },\n    }))}\n    filters={{\n      filterConfig: [\n        {\n          type: conditionalFilterType.text,\n          label: 'Policy Name',\n          filter: (policyTypes, value) =>\n            policyTypes.filter((policyType) =>\n              policyType?.name.toLowerCase().includes(value.toLowerCase())\n            ),\n        },\n      ],\n    }}\n    columns={[\n      {\n        title: 'Policy name',\n        key: 'name',\n        sortByProp: 'name',\n        renderFunc: renderComponent(NameCell),\n      },\n      {\n        title: 'Supported OS versions',\n        transforms: [fitContent],\n        sortByProp: 'supportedOsVersions',\n        renderFunc: (_data, _id, profile) =>\n          profile.supportedOsVersions.join(', '),\n      },\n    ]}\n    options={{\n      detailsComponent: PolicyTypeDetailsRow,\n      onRadioSelect: (_event, _value, _rowIdx, { itemId }) =>\n        onChange && onChange(profiles.find(({ id }) => id === itemId)),\n      sortBy: {\n        index: 2,\n        direction: 'asc',\n        property: 'name',\n      },\n    }}\n    variant=\"compact\"\n  />\n);\n\nPolicyTypeTable.propTypes = {\n  profiles: propTypes.array,\n  onChange: propTypes.func,\n  selectedProfile: propTypes.string,\n};\n\nexport default PolicyTypeTable;\n","import React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\n\nconst PolicyTypeTooltip = () => (\n  <Tooltip\n    position=\"right\"\n    content=\"Policy types are OpenSCAP policies that are supported by RHEL.\n        For each major version of RHEL, users can create one policy of each type.\"\n  >\n    <OutlinedQuestionCircleIcon className=\"grey-icon\" />\n  </Tooltip>\n);\n\nexport default PolicyTypeTooltip;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  Tile,\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport PolicyTypesTable from './Components/PolicyTypeTable';\nimport PolicyTypeTooltip from './Components/PolicyTypeTooltip';\n\nconst SUPPORTED_PROFILES = gql`\n  query supportedProfilesByOSMajor {\n    osMajorVersions {\n      edges {\n        node {\n          osMajorVersion\n          profiles {\n            id\n            name\n            refId\n            description\n            supportedOsVersions\n            benchmark {\n              id\n              refId\n            }\n          }\n        }\n      }\n    }\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          refId\n          benchmark {\n            refId\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const CreateSCAPPolicy = ({\n  change,\n  selectedProfile,\n  selectedOsMajorVersion,\n}) => {\n  const { data, error, loading } = useQuery(SUPPORTED_PROFILES, {\n    fetchPolicy: 'no-cache',\n  });\n  const isInUse = (profileRefId, benchmarkRedId) =>\n    !!data?.profiles?.edges\n      .map(({ node }) => node)\n      .find(\n        (profile) =>\n          profile.refId === profileRefId &&\n          benchmarkRedId === profile.benchmark.refId\n      );\n  const osMajorVersions = data?.osMajorVersions?.edges.map(({ node }) => node);\n  const selectedOsMajorVersionObject = osMajorVersions?.find(\n    ({ osMajorVersion }) => osMajorVersion === selectedOsMajorVersion\n  );\n  const profilesToSelect = selectedOsMajorVersionObject?.profiles.map(\n    (profile) => ({\n      ...profile,\n      disabled: isInUse(profile.refId, profile.benchmark.refId),\n    })\n  );\n\n  return (\n    <StateViewWithError stateValues={{ error, data, loading }}>\n      <StateViewPart stateKey=\"loading\">\n        <Spinner />\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <TextContent>\n          <Text component={TextVariants.h1} className=\"pf-u-mb-md\">\n            Create SCAP policy\n          </Text>\n          <Text className=\"pf-u-mb-md\">\n            Select the operating system and policy type for this policy.\n          </Text>\n        </TextContent>\n        <Form>\n          <FormGroup label=\"Operating system\" isRequired fieldId=\"benchmark\">\n            {osMajorVersions &&\n              osMajorVersions.map(({ osMajorVersion }) => (\n                <Tile\n                  key={`rhel${osMajorVersion}-select`}\n                  className=\"pf-u-mr-md\"\n                  title={`RHEL ${osMajorVersion}`}\n                  onClick={() => {\n                    change('osMajorVersion', osMajorVersion);\n                  }}\n                  isSelected={selectedOsMajorVersion === osMajorVersion}\n                  isStacked\n                />\n              ))}\n          </FormGroup>\n\n          {selectedOsMajorVersion && (\n            <FormGroup\n              isRequired\n              labelIcon={<PolicyTypeTooltip />}\n              label=\"Policy type\"\n              fieldId=\"policy-type\"\n            >\n              <PolicyTypesTable\n                aria-label=\"PolicyTypeTable\"\n                profiles={profilesToSelect}\n                onChange={(policy) => {\n                  change('profile', policy);\n                  change('benchmark', policy.benchmark.id);\n                  change('selectedRuleRefIds', undefined);\n                  change('systems', []);\n                }}\n                selectedProfile={selectedProfile}\n              />\n            </FormGroup>\n          )}\n        </Form>\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nCreateSCAPPolicy.propTypes = {\n  change: reduxFormPropTypes.change,\n  selectedProfile: propTypes.object,\n  selectedOsMajorVersion: propTypes.string,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    selectedProfile: selector(state, 'profile'),\n    selectedOsMajorVersion: selector(state, 'osMajorVersion'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(CreateSCAPPolicy);\n","import React, { useLayoutEffect } from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  Title,\n  Text,\n  TextContent,\n  TextVariants,\n  EmptyState,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\n\nconst PROFILES_QUERY = gql`\n  query Profiles($filter: String!) {\n    profiles(search: $filter) {\n      edges {\n        node {\n          id\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          benchmark {\n            id\n            latestSupportedOsMinorVersions\n          }\n          rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst BENCHMARKS_QUERY = gql`\n  query Benchmarks($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        profiles {\n          id\n          refId\n          osMajorVersion\n        }\n        version\n      }\n    }\n  }\n`;\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nexport const EditPolicyProfilesRules = ({\n  policy,\n  selectedRuleRefIds,\n  change,\n  osMajorVersion,\n  osMinorVersionCounts,\n}) => {\n  const columns = [Columns.Name, Columns.Severity, Columns.Remediation];\n  const osMinorVersions = osMinorVersionCounts\n    .map((i) => i.osMinorVersion)\n    .sort();\n  const benchmarkSearch =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const {\n    data: benchmarksData,\n    error: benchmarksError,\n    loading: benchmarksLoading,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter: benchmarkSearch,\n    },\n    skip: osMinorVersions.length === 0,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  let tabsData = osMinorVersionCounts.map(\n    ({ osMinorVersion, count: systemCount }) => {\n      osMinorVersion = `${osMinorVersion}`;\n      let profile;\n      if (benchmarks) {\n        const benchmark = getBenchmarkBySupportedOsMinor(\n          benchmarks,\n          osMinorVersion\n        );\n        if (benchmark) {\n          profile = getBenchmarkProfile(benchmark, policy.refId);\n          if (profile) {\n            profile = {\n              ...profile,\n              benchmark,\n            };\n          }\n        }\n      }\n\n      return {\n        profile,\n        systemCount,\n        newOsMinorVersion: osMinorVersion,\n      };\n    }\n  );\n  tabsData = tabsData.filter(({ profile }) => !!profile);\n\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n  const profileIds = Object.keys(profileToOsMinorMap);\n  const filter = profileIds.map((i) => `id = ${i}`).join(' OR ');\n  const skipProfilesQuery = benchmarksLoading || filter.length === 0;\n  const {\n    data: profilesData,\n    error: profilesError,\n    loading: profilesLoading,\n  } = useQuery(PROFILES_QUERY, {\n    variables: {\n      filter,\n    },\n    skip: skipProfilesQuery,\n  });\n  const error = benchmarksError || profilesError;\n  const dataState = profileIds?.length > 0 ? profilesData : undefined;\n  const loadingState = profilesLoading || benchmarksLoading ? true : undefined;\n  const noRuleSets = !error && !loadingState && profileIds?.length === 0;\n  const profiles = skipProfilesQuery\n    ? []\n    : profilesData?.profiles.edges.map((p) => p.node);\n\n  const setSelectedRuleRefIds = (newSelection) => {\n    change('selectedRuleRefIds', newSelection);\n  };\n\n  useLayoutEffect(() => {\n    if (!loadingState) {\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      const newSelection = profilesWithRulesToSelection(\n        profilesWithOs,\n        selectedRuleRefIds,\n        { only: true }\n      );\n      setSelectedRuleRefIds(newSelection);\n    }\n  }, [JSON.stringify(profiles), loadingState]);\n\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-pb-md\">\n        <Text component={TextVariants.h1}>Rules</Text>\n        <Text>\n          Customize your <b>{policy.name}</b> SCAP policy by including and\n          excluding rules.\n        </Text>\n        <Text>\n          Each release of RHEL is supported with a unique and specific version\n          of the SCAP Security Guide (SSG). You must customize each version of\n          SSG for each release of RHEL.\n        </Text>\n      </TextContent>\n\n      <StateViewWithError\n        stateValues={{\n          error,\n          data: dataState,\n          loading: loadingState,\n          noRuleSets,\n        }}\n      >\n        <StateViewPart stateKey=\"noRuleSets\">\n          <EmptyState>\n            <Title headingLevel=\"h1\" size=\"xl\">\n              No rules can be configured\n            </Title>\n            <EmptyStateBody>\n              The policy type selected does not exist for the systems and OS\n              versions selected in the previous steps.\n            </EmptyStateBody>\n          </EmptyState>\n        </StateViewPart>\n        <StateViewPart stateKey=\"loading\">\n          <EmptyTable>\n            <Spinner />\n          </EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n          <TabbedRules\n            tabsData={tabsData}\n            selectedRuleRefIds={selectedRuleRefIds}\n            columns={columns}\n            remediationsEnabled={false}\n            selectedFilter\n            level={1}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            ouiaId=\"RHELVersions\"\n            resetLink={true}\n            rulesPageLink={true}\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </React.Fragment>\n  );\n};\n\nEditPolicyProfilesRules.propTypes = {\n  policy: propTypes.object,\n  change: reduxFormPropTypes.change,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  selectedRuleRefIds: propTypes.array,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    policy: selector(state, 'profile'),\n    osMajorVersion: selector(state, 'osMajorVersion'),\n    osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n    selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyProfilesRules);\n","import React from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  reduxForm,\n  formValueSelector,\n} from 'redux-form';\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  WizardContextConsumer,\n} from '@patternfly/react-core';\nimport { SystemsTable } from 'SmartComponents';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { countOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n        <br />\n        Policies must be created with at least one system.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Choose a different operating system, or connect{' '}\n        <b>RHEL {osMajorVersion}</b> systems to Insights.\n      </Text>\n    </TextContent>\n    <WizardContextConsumer>\n      {({ goToStepById }) => (\n        <Button onClick={() => goToStepById(1)}>\n          Choose a different operating system\n        </Button>\n      )}\n    </WizardContextConsumer>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n        <br />\n        Systems can be added or removed at any time.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nexport const EditPolicySystems = ({\n  policy,\n  change,\n  osMajorVersion,\n  selectedSystems,\n}) => {\n  const onSystemSelect = (newSelectedSystems) => {\n    change('systems', newSelectedSystems);\n    change('osMinorVersionCounts', countOsMinorVersions(newSelectedSystems));\n  };\n  const osMinorVersions = policy.supportedOsVersions.map(\n    (version) => version.split('.')[1]\n  );\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-mb-md\">\n        <Text component={TextVariants.h1}>Systems</Text>\n      </TextContent>\n      <Form>\n        <FormGroup>\n          <SystemsTable\n            showOsMinorVersionFilter={[osMajorVersion]}\n            prependComponent={\n              <PrependComponent osMajorVersion={osMajorVersion} />\n            }\n            emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n            columns={[\n              {\n                ...Columns.Name,\n                props: {\n                  width: 40,\n                },\n                sortBy: ['name'],\n              },\n              Columns.inventoryColumn('tags'),\n              Columns.OperatingSystem,\n            ]}\n            remediationsEnabled={false}\n            compact\n            showActions={false}\n            defaultFilter={\n              osMajorVersion &&\n              `os_major_version = ${osMajorVersion} AND os_minor_version ^ (${osMinorVersions.join(\n                ','\n              )})`\n            }\n            enableExport={false}\n            preselectedSystems={selectedSystems}\n            onSelect={onSystemSelect}\n          />\n        </FormGroup>\n      </Form>\n    </React.Fragment>\n  );\n};\n\nEditPolicySystems.propTypes = {\n  osMajorVersion: propTypes.string,\n  policy: propTypes.object,\n  selectedSystems: propTypes.array,\n  change: reduxFormPropTypes.change,\n};\n\nEditPolicySystems.defaultProps = {\n  selectedSystems: [],\n};\n\nconst selector = formValueSelector('policyForm');\nconst mapStateToProps = (state) => ({\n  policy: selector(state, 'profile'),\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  selectedSystems: selector(state, 'systems'),\n});\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicySystems);\n","import React, { useEffect } from 'react';\nimport { compose } from 'redux';\nimport {\n  Field,\n  reduxForm,\n  formValueSelector,\n  propTypes as reduxFormPropTypes,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  ReduxFormTextInput,\n  ReduxFormTextArea,\n} from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport {\n  ProfileThresholdField,\n  PolicyBusinessObjectiveTooltip,\n} from 'PresentationalComponents';\n\nexport const EditPolicyDetails = ({ change, policy, refId }) => {\n  useEffect(() => {\n    if (policy && policy.refId !== refId) {\n      change('name', `${policy.name}`);\n      change('refId', `${policy.refId}`);\n      change('description', `${policy.description}`);\n    }\n  }, [policy]);\n\n  return (\n    <React.Fragment>\n      <TextContent>\n        <Text component={TextVariants.h1}>Details</Text>\n      </TextContent>\n      <br />\n      <Form id=\"editpolicydetails\">\n        <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n          <Field\n            component={ReduxFormTextInput}\n            type=\"text\"\n            isRequired={true}\n            id=\"name\"\n            name=\"name\"\n            aria-describedby=\"name\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            isDisabled\n            id=\"refId\"\n            name=\"refId\"\n            aria-describedby=\"refId\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Description\" fieldId=\"description\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextArea}\n            id=\"description\"\n            name=\"description\"\n            aria-describedby=\"description\"\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Business objective\"\n          labelIcon={<PolicyBusinessObjectiveTooltip />}\n          fieldId=\"businessObjective\"\n        >\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            id=\"businessObjective\"\n            name=\"businessObjective\"\n            aria-describedby=\"businessObjective\"\n            defaultValue={policy.businessObjective}\n          />\n        </FormGroup>\n        <ProfileThresholdField previousThreshold={100} />\n      </Form>\n    </React.Fragment>\n  );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n  policy: propTypes.object,\n  refId: propTypes.string,\n  change: reduxFormPropTypes.change,\n};\n\nconst mapStateToProps = (state) => {\n  const policy = selector(state, 'profile');\n  return {\n    policy,\n    refId: selector(state, 'refId'),\n    initialValues: {\n      name: `${policy.name}`,\n      refId: `${policy.refId}`,\n      description: `${policy.description}`,\n      benchmark: selector(state, 'benchmark'),\n      osMajorVersion: selector(state, 'osMajorVersion'),\n      profile: selector(state, 'profile'),\n    },\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyDetails);\n","import React from 'react';\nimport {\n  Text,\n  TextVariants,\n  TextContent,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\n\nconst ReviewCreatedPolicy = ({\n  name,\n  businessObjective,\n  complianceThreshold,\n  parentProfileName,\n  osMinorVersionCounts,\n  osMajorVersion,\n}) => (\n  <TextContent>\n    <Text component={TextVariants.h1}>Review</Text>\n    <Text>Review your SCAP policy before finishing.</Text>\n    <Text component={TextVariants.h3} style={{ marginTop: 0 }}>\n      {name}\n    </Text>\n    <TextList component={TextListVariants.dl}>\n      <TextListItem component={TextListItemVariants.dt}>\n        Policy type\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        {parentProfileName}\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dt}>\n        Compliance threshold\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        {complianceThreshold}%\n      </TextListItem>\n      {businessObjective && (\n        <React.Fragment>\n          <TextListItem component={TextListItemVariants.dt}>\n            Business objective\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {businessObjective}\n          </TextListItem>\n        </React.Fragment>\n      )}\n      <TextListItem component={TextListItemVariants.dt}>Systems</TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        <TextList component={TextListVariants.dl}>\n          {osMinorVersionCounts.map(({ osMinorVersion, count }) => (\n            <React.Fragment key={osMinorVersion}>\n              <TextListItem\n                component={TextListItemVariants.dt}\n                style={{ fontWeight: 'normal' }}\n              >\n                RHEL {osMajorVersion}.{osMinorVersion}\n              </TextListItem>\n              <TextListItem component={TextListItemVariants.dd}>\n                {count} {count > 1 ? 'systems' : 'system'}\n              </TextListItem>\n            </React.Fragment>\n          ))}\n        </TextList>\n      </TextListItem>\n    </TextList>\n  </TextContent>\n);\n\nReviewCreatedPolicy.propTypes = {\n  benchmarkId: propTypes.string,\n  refId: propTypes.string,\n  name: propTypes.string,\n  businessObjective: propTypes.string,\n  complianceThreshold: propTypes.number,\n  parentProfileName: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  osMajorVersion: propTypes.string.isRequired,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect((state) => ({\n  benchmarkId: selector(state, 'benchmark'),\n  refId: selector(state, 'refId'),\n  name: selector(state, 'name'),\n  businessObjective: selector(state, 'businessObjective'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  complianceThreshold:\n    parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n  parentProfileName: selector(state, 'profile').name,\n  rulesCount: selector(state, 'selectedRuleRefIds').length,\n}))(ReviewCreatedPolicy);\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Title,\n  Button,\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  List,\n  ListItem,\n} from '@patternfly/react-core';\nimport {\n  ProgressBar,\n  LinkWithPermission as Link,\n} from 'PresentationalComponents';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from '@apollo/client/react/hoc';\nimport { usePolicy } from 'Mutations';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nconst EmtpyStateWithErrors = ({ errors }) =>\n  errors && Array.isArray(errors) && errors.length > 0 ? (\n    <EmptyStateBody className=\"wizard-failed-errors\">\n      <List>\n        {errors.map((error) => (\n          <ListItem key={error}>{error}</ListItem>\n        ))}\n      </List>\n    </EmptyStateBody>\n  ) : null;\n\nEmtpyStateWithErrors.propTypes = {\n  errors: propTypes.array,\n};\n\nexport const FinishedCreatePolicy = ({\n  onWizardFinish,\n  cloneFromProfileId,\n  description,\n  name,\n  complianceThreshold,\n  businessObjective,\n  refId,\n  benchmarkId,\n  systems,\n  selectedRuleRefIds,\n}) => {\n  const [percent, setPercent] = useState(0);\n  const [message, setMessage] = useState('This usually takes a minute or two.');\n  const [errors, setErrors] = useState(null);\n  const [failed, setFailed] = useState(false);\n  const updatePolicy = usePolicy();\n\n  const onProgress = (progress) => {\n    setPercent(progress * 100);\n  };\n\n  useEffect(() => {\n    const newPolicy = {\n      cloneFromProfileId,\n      description,\n      name,\n      complianceThreshold,\n      businessObjective: { title: businessObjective },\n      refId,\n      benchmarkId,\n      hosts: systems,\n      selectedRuleRefIds,\n    };\n\n    updatePolicy(null, newPolicy, onProgress)\n      .then(({ id }) => {\n        setPercent(100);\n        setMessage();\n        dispatchNotification({\n          variant: 'success',\n          title: `Created policy \"${name}\"`,\n          autoDismiss: true,\n          description: (\n            <span>\n              From the <strong>SCAP Policies</strong> list, open{' '}\n              <Link to={`/scappolicies/${id}`}>{name}</Link>.\n            </span>\n          ),\n        });\n      })\n      .catch((error) => {\n        setMessage(error.networkError?.message);\n        setErrors(error.networkError?.result?.errors);\n        setFailed(true);\n        dispatchNotification({\n          variant: 'danger',\n          title: 'Error creating policy',\n          description: error.message,\n        });\n      });\n  }, []);\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={WrenchIcon} />\n        <br />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          Creating policy\n        </Title>\n        <EmptyStateBody>\n          <ProgressBar percent={percent} failed={failed} />\n        </EmptyStateBody>\n        <EmptyStateBody className={failed && 'wizard-failed-message'}>\n          {message}\n        </EmptyStateBody>\n        <EmtpyStateWithErrors error={errors} />\n        <EmptyStateSecondaryActions>\n          {(percent === 100 || failed) && (\n            <Button\n              variant={'primary'}\n              ouiaId=\"ReturnToAppButton\"\n              onClick={() => {\n                onWizardFinish();\n              }}\n            >\n              {failed ? 'Back' : 'Return to application'}\n            </Button>\n          )}\n        </EmptyStateSecondaryActions>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nFinishedCreatePolicy.propTypes = {\n  benchmarkId: propTypes.string.isRequired,\n  businessObjective: propTypes.object,\n  cloneFromProfileId: propTypes.string.isRequired,\n  refId: propTypes.string.isRequired,\n  name: propTypes.string.isRequired,\n  description: propTypes.string,\n  systems: propTypes.array,\n  complianceThreshold: propTypes.number,\n  onWizardFinish: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string).isRequired,\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    benchmarkId: selector(state, 'benchmark'),\n    businessObjective: selector(state, 'businessObjective'),\n    cloneFromProfileId: selector(state, 'profile').id,\n    refId: selector(state, 'refId'),\n    name: selector(state, 'name'),\n    description: selector(state, 'description'),\n    complianceThreshold:\n      parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n    systems: selector(state, 'systems'),\n    selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: true,\n    forceUnregisterOnUnmount: true,\n  }),\n  withApollo\n)(FinishedCreatePolicy);\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { formValueSelector, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport { default as EditPolicyRules } from './EditPolicyProfilesRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport {\n  validateBenchmarkPage,\n  validateDetailsPage,\n  validateRulesPage,\n  validateSystemsPage,\n} from './validate';\n\nexport const CreatePolicyForm = ({\n  benchmark,\n  osMajorVersion,\n  complianceThreshold,\n  name,\n  profile,\n  refId,\n  selectedRuleRefIds,\n  systemIds,\n  reset,\n}) => {\n  const history = useHistory();\n  const [stepIdReached, setStepIdReached] = useState(1);\n  const resetAnchor = () => {\n    const { location } = history;\n    if (location.hash) {\n      history.push({ ...location, hash: '' });\n    }\n  };\n\n  const onNext = ({ id }) => {\n    setStepIdReached(stepIdReached < id ? id : stepIdReached);\n    resetAnchor();\n  };\n\n  const onClose = () => {\n    reset();\n    history.push('/scappolicies');\n  };\n\n  const steps = [\n    {\n      id: 1,\n      name: 'Create SCAP policy',\n      component: <CreateSCAPPolicy />,\n      enableNext: validateBenchmarkPage(benchmark, osMajorVersion, profile),\n    },\n    {\n      id: 2,\n      name: 'Details',\n      component: <EditPolicyDetails />,\n      canJumpTo: stepIdReached >= 2,\n      enableNext: validateDetailsPage(name, refId, complianceThreshold),\n    },\n    {\n      id: 3,\n      name: 'Systems',\n      component: <EditPolicySystems />,\n      canJumpTo: stepIdReached >= 3,\n      enableNext: validateSystemsPage(systemIds),\n    },\n    {\n      id: 4,\n      name: 'Rules',\n      component: <EditPolicyRules />,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 4,\n      enableNext: validateRulesPage(selectedRuleRefIds),\n    },\n    {\n      id: 5,\n      name: 'Review',\n      component: <ReviewCreatedPolicy osMajorVersion={osMajorVersion} />,\n      nextButtonText: 'Finish',\n      canJumpTo:\n        validateRulesPage(selectedRuleRefIds) &&\n        systemIds?.length > 0 &&\n        stepIdReached >= 5,\n    },\n    {\n      id: 6,\n      name: 'Finished',\n      component: <FinishedCreatePolicy onWizardFinish={onClose} />,\n      isFinishedStep: true,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 6,\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <Wizard\n        className=\"compliance\"\n        isOpen\n        onNext={onNext}\n        onGoToStep={resetAnchor}\n        onBack={resetAnchor}\n        onClose={onClose}\n        title=\"Create SCAP policy\"\n        description=\"Create a new policy for managing SCAP compliance\"\n        steps={steps}\n      />\n    </React.Fragment>\n  );\n};\n\nCreatePolicyForm.propTypes = {\n  benchmark: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  complianceThreshold: propTypes.string,\n  businessObjective: propTypes.object,\n  dispatch: propTypes.func,\n  isOpen: propTypes.bool,\n  name: propTypes.string,\n  onWizardFinish: propTypes.func,\n  profile: propTypes.string,\n  refId: propTypes.string,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string),\n  systemIds: propTypes.arrayOf(propTypes.string),\n  reset: propTypes.func,\n};\n\nCreatePolicyForm.defaultProps = {\n  isOpen: false,\n};\n\nconst CreatePolicy = reduxForm({\n  form: 'policyForm',\n})(CreatePolicyForm);\n\nconst selector = formValueSelector('policyForm');\nexport default connect((state) => ({\n  benchmark: selector(state, 'benchmark'),\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  businessObjective: selector(state, 'businessObjective'),\n  complianceThreshold: selector(state, 'complianceThreshold') || 100,\n  name: selector(state, 'name'),\n  profile: selector(state, 'profile'),\n  refId: selector(state, 'refId'),\n  selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  systemIds: selector(state, 'systems'),\n}))(CreatePolicy);\n","import { Button, Checkbox, ModalVariant, Text } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { DELETE_PROFILE } from 'Mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ComplianceModal } from 'PresentationalComponents';\nimport { dispatchAction } from 'Utilities/Dispatcher';\n\nconst DeletePolicy = () => {\n  const [deleteEnabled, setDeleteEnabled] = useState(false);\n  const location = useLocation();\n  const history = useHistory();\n  const { name, id } = location.state.policy;\n  const onClose = () => {\n    history.push('/scappolicies');\n  };\n\n  const [deletePolicy] = useMutation(DELETE_PROFILE, {\n    onCompleted: () => {\n      dispatchAction(\n        addNotification({\n          variant: 'success',\n          title: `Deleted \"${name}\" and its associated reports`,\n        })\n      );\n      onClose();\n    },\n    onError: (error) => {\n      dispatchAction(\n        addNotification({\n          variant: 'danger',\n          title: 'Error removing policy',\n          description: error.message,\n        })\n      );\n      onClose();\n    },\n  });\n\n  return (\n    <ComplianceModal\n      variant={ModalVariant.small}\n      title={\n        <React.Fragment>\n          <ExclamationTriangleIcon className=\"ins-u-warning\" />\n          <Text component=\"span\" className=\"policy-delete-header-text\">\n            Delete policy?\n          </Text>\n        </React.Fragment>\n      }\n      ouiaId=\"DeletePolicyModal\"\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"destroy\"\n          ouiaId=\"DeletePolicyButton\"\n          aria-label=\"delete\"\n          isDisabled={!deleteEnabled}\n          variant=\"danger\"\n          onClick={() => deletePolicy({ variables: { input: { id } } })}\n        >\n          Delete policy and associated reports\n        </Button>,\n        <Button\n          key=\"cancel\"\n          ouiaId=\"DeletePolicyCancelButton\"\n          variant=\"secondary\"\n          onClick={onClose}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <Text className=\"policy-delete-body-text\">\n        Deleting the policy <b>{name}</b> will also delete its associated\n        reports.\n      </Text>\n      <Checkbox\n        label=\"I understand this will delete the policy and all associated reports\"\n        id={`deleting-policy-check-${id}`}\n        isChecked={deleteEnabled}\n        onChange={setDeleteEnabled}\n      />\n    </ComplianceModal>\n  );\n};\n\nDeletePolicy.propTypes = {\n  policy: propTypes.object,\n};\n\nexport default DeletePolicy;\n","import { Button, ModalVariant, TextContent } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { DELETE_REPORT } from 'Mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ComplianceModal } from 'PresentationalComponents';\nimport { dispatchAction } from 'Utilities/Dispatcher';\n\nconst DeleteReport = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const { id } = location.state?.profile;\n  const onClose = () => {\n    history.push(location.state.background);\n  };\n\n  const onDelete = () => {\n    history.push('/reports');\n  };\n\n  const [deleteReport] = useMutation(DELETE_REPORT, {\n    onCompleted: () => {\n      dispatchAction(\n        addNotification({\n          variant: 'success',\n          title: 'Report deleted',\n          description:\n            'Systems associated with this policy will upload reports on the next check-in.',\n        })\n      );\n      onDelete();\n    },\n    onError: (error) => {\n      dispatchAction(\n        addNotification({\n          variant: 'danger',\n          title: 'Error removing report',\n          description: error.message,\n        })\n      );\n      onClose();\n    },\n  });\n  return (\n    <ComplianceModal\n      isOpen\n      variant={ModalVariant.small}\n      title=\"Delete report\"\n      ouiaId=\"DeleteReportModal\"\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"destroy\"\n          ouiaId=\"DeleteReportButton\"\n          aria-label=\"delete\"\n          variant=\"danger\"\n          onClick={() =>\n            deleteReport({\n              variables: {\n                input: {\n                  profileId: id,\n                },\n              },\n            })\n          }\n        >\n          Delete report\n        </Button>,\n        <Button\n          key=\"cancel\"\n          ouiaId=\"DeleteReportCancelButton\"\n          variant=\"secondary\"\n          onClick={() => onClose()}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        Deleting a report is permanent and cannot be undone.\n      </TextContent>\n    </ComplianceModal>\n  );\n};\n\nDeleteReport.propTypes = {\n  onClose: propTypes.func,\n  isModalOpen: propTypes.bool,\n  onDelete: propTypes.func,\n  policyId: propTypes.string,\n};\n\nDeleteReport.defaultProps = {\n  onDelete: () => {},\n  onClose: () => {},\n};\n\nexport default DeleteReport;\n","import gql from 'graphql-tag';\n\nexport const PROFILES_QUERY = gql`\n  query Profiles($filter: String!) {\n    profiles(search: $filter) {\n      edges {\n        node {\n          id\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          policy {\n            id\n          }\n          policyType\n          benchmark {\n            id\n            refId\n            latestSupportedOsMinorVersions\n            osMajorVersion\n            version\n          }\n          rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const BENCHMARKS_QUERY = gql`\n  query Benchmarks($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        profiles {\n          id\n          refId\n          ssgVersion\n        }\n      }\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  Text,\n  TextContent,\n  Title,\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport { sortingByProp } from 'Utilities/helpers';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\nimport { BENCHMARKS_QUERY } from './constants';\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst EditPolicyRulesTabEmptyState = () => (\n  <EmptyState>\n    <Title headingLevel=\"h5\" size=\"lg\">\n      No rules can be configured\n    </Title>\n    <EmptyStateBody>\n      This policy has no associated systems, and therefore no rules can be\n      configured.\n    </EmptyStateBody>\n    <EmptyStateBody>\n      Add at least one system to configure rules for this policy.\n    </EmptyStateBody>\n  </EmptyState>\n);\n\nexport const toTabsData = (policy, osMinorVersionCounts, benchmarks) =>\n  Object.values(osMinorVersionCounts)\n    .sort(sortingByProp('osMinorVersion', 'desc'))\n    .map(({ osMinorVersion, count: systemCount }) => {\n      osMinorVersion = `${osMinorVersion}`;\n      let profile = policy.policy.profiles.find(\n        (profile) => profile.osMinorVersion === osMinorVersion\n      );\n      let osMajorVersion = policy.osMajorVersion;\n\n      if (!profile && benchmarks) {\n        const benchmark = getBenchmarkBySupportedOsMinor(\n          benchmarks,\n          osMinorVersion\n        );\n        if (benchmark) {\n          const benchmarkProfile = getBenchmarkProfile(benchmark, policy.refId);\n          if (benchmarkProfile) {\n            profile = policy.policy.profiles.find(\n              (profile) =>\n                profile.parentProfileId === benchmarkProfile.id &&\n                profile.osMinorVersion === osMinorVersion\n            );\n\n            profile = {\n              ...benchmarkProfile,\n              benchmark,\n              osMajorVersion,\n              ...profile,\n            };\n          }\n        }\n      }\n\n      return {\n        profile,\n        systemCount,\n        newOsMinorVersion: osMinorVersion,\n      };\n    })\n    .filter(({ profile, newOsMinorVersion }) => !!profile && newOsMinorVersion);\n\nexport const EditPolicyRulesTab = ({\n  policy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  osMinorVersionCounts,\n}) => {\n  const osMajorVersion = policy?.osMajorVersion;\n  const osMinorVersions = Object.keys(osMinorVersionCounts).sort();\n  const benchmarkSearch =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const {\n    data: benchmarksData,\n    error,\n    loading,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter: benchmarkSearch,\n    },\n    skip: osMinorVersions.length === 0,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  const tabsData = toTabsData(policy, osMinorVersionCounts, benchmarks);\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n\n  const dataState = !loading && tabsData?.length > 0 ? tabsData : undefined;\n\n  useEffect(() => {\n    if (policy.policy.profiles) {\n      const profiles = policy.policy.profiles;\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      setSelectedRuleRefIds((prevSelection) => {\n        const newSelection = profilesWithRulesToSelection(\n          profilesWithOs,\n          prevSelection\n        );\n        return newSelection;\n      });\n    }\n  }, [policy.policy.profiles]);\n\n  return (\n    <StateViewWithError\n      stateValues={{\n        error,\n        data: !error && dataState,\n        loading,\n        empty: !loading && !dataState && !error,\n      }}\n    >\n      <StateViewPart stateKey=\"loading\">\n        <EmptyTable>\n          <Spinner />\n        </EmptyTable>\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <TextContent>\n          <Text>\n            Different release versions of RHEL are associated with different\n            versions of the SCAP Security Guide (SSG), therefore each release\n            must be customized independently.\n          </Text>\n        </TextContent>\n        <TabbedRules\n          columns={[Columns.Name, Columns.Severity, Columns.Remediation]}\n          tabsData={tabsData}\n          selectedRuleRefIds={selectedRuleRefIds}\n          setSelectedRuleRefIds={setSelectedRuleRefIds}\n          remediationsEnabled={false}\n          selectedFilter\n          level={1}\n          ouiaId=\"RHELVersions\"\n        />\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">\n        <EditPolicyRulesTabEmptyState />\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nEditPolicyRulesTab.propTypes = {\n  setNewRuleTabs: propTypes.func,\n  policy: propTypes.object,\n  osMinorVersionCounts: propTypes.shape({\n    osMinorVersion: propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    }),\n  }),\n  selectedRuleRefIds: propTypes.array,\n  setSelectedRuleRefIds: propTypes.func,\n};\n\nexport default EditPolicyRulesTab;\n","import React from 'react';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { SystemsTable } from 'SmartComponents';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>Connect RHEL {osMajorVersion} systems to Insights.</Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst EditPolicySystemsTab = ({ policy, onSystemSelect, selectedSystems }) => {\n  const { id: policyId, osMajorVersion, supportedOsVersions } = policy;\n  const osMinorVersions = supportedOsVersions.map(\n    (version) => version.split('.')[1]\n  );\n  const osFilter =\n    osMajorVersion &&\n    `os_major_version = ${osMajorVersion} AND os_minor_version ^ (${osMinorVersions.join(\n      ','\n    )})`;\n  const defaultFilter = osFilter\n    ? `${osFilter} or policy_id = ${policyId}`\n    : `policy_id = ${policyId}`;\n\n  return (\n    <React.Fragment>\n      <SystemsTable\n        columns={[\n          Columns.Name,\n          Columns.inventoryColumn('tags'),\n          Columns.OperatingSystem,\n        ]}\n        showOsMinorVersionFilter={[osMajorVersion]}\n        prependComponent={<PrependComponent osMajorVersion={osMajorVersion} />}\n        emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n        compact\n        showActions={false}\n        defaultFilter={defaultFilter}\n        enableExport={false}\n        remediationsEnabled={false}\n        preselectedSystems={selectedSystems}\n        onSelect={onSystemSelect}\n      />\n    </React.Fragment>\n  );\n};\n\nEditPolicySystemsTab.propTypes = {\n  policy: propTypes.object,\n  newRuleTabs: propTypes.bool,\n  onSystemSelect: propTypes.func,\n  selectedSystems: propTypes.array,\n};\n\nexport default EditPolicySystemsTab;\n","import React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { Alert, AlertActionLink } from '@patternfly/react-core';\n\nconst NewRulesAlert = () => {\n  const history = useHistory();\n  const location = useLocation();\n\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title=\"You selected a system that has a release version previously not included in this policy.\"\n      actionLinks={\n        <AlertActionLink\n          onClick={() => history.push({ ...location, hash: '#rules' })}\n        >\n          Open rule editing\n        </AlertActionLink>\n      }\n    >\n      <p>\n        If you have edited any rules for this policy, you will need to do so for\n        this release version as well.\n      </p>\n    </Alert>\n  );\n};\n\nexport default NewRulesAlert;\n","import React, { useCallback, useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { Form, Tab, TabTitleText } from '@patternfly/react-core';\nimport { RoutedTabs } from 'PresentationalComponents';\nimport EditPolicyRulesTab from './EditPolicyRulesTab';\nimport EditPolicySystemsTab from './EditPolicySystemsTab';\nimport NewRulesAlert from './components/NewRulesAlert';\nimport { mapCountOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport { profilesWithRulesToSelection } from 'PresentationalComponents/TabbedRules';\nimport { thresholdValid } from '../CreatePolicy/validate';\nimport { useNewRulesAlertState } from './hooks/index';\n\nconst profilesToOsMinorMap = (profiles, hosts) =>\n  (profiles || []).reduce((acc, profile) => {\n    if (profile.osMinorVersion !== '') {\n      acc[profile.osMinorVersion] ||= {\n        osMinorVersion: profile.osMinorVersion,\n        count: 0,\n      };\n    }\n\n    return acc;\n  }, mapCountOsMinorVersions(hosts || []));\n\nconst EditPolicyForm = ({\n  policy,\n  setUpdatedPolicy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  selectedSystems,\n  setSelectedSystems,\n}) => {\n  const policyProfiles = policy?.policy?.profiles || [];\n  const [osMinorVersionCounts, setOsMinorVersionCounts] = useState({});\n  const [newRulesAlert, setNewRulesAlert] = useNewRulesAlertState(false);\n\n  const handleSystemSelect = useCallback(\n    (newSelectedSystems) => {\n      const policyMinorVersions = policy.hosts.map(\n        ({ osMinorVersion }) => osMinorVersion\n      );\n      const hasNewOsMinorVersions =\n        newSelectedSystems.filter(\n          ({ osMinorVersion }) => !policyMinorVersions.includes(osMinorVersion)\n        ).length > 0;\n\n      setSelectedSystems(newSelectedSystems);\n      setNewRulesAlert(hasNewOsMinorVersions);\n      setOsMinorVersionCounts(\n        profilesToOsMinorMap(policyProfiles, newSelectedSystems)\n      );\n    },\n    [policyProfiles, selectedRuleRefIds]\n  );\n\n  useEffect(() => {\n    if (policy) {\n      const complianceThresholdValid = thresholdValid(\n        policy.complianceThreshold\n      );\n      const profilesWithOsMinor = policyProfiles.filter(\n        ({ osMinorVersion }) => !!osMinorVersion\n      );\n      setUpdatedPolicy({\n        ...policy,\n        complianceThresholdValid,\n      });\n\n      setSelectedRuleRefIds(profilesWithRulesToSelection(profilesWithOsMinor));\n      handleSystemSelect(policy.hosts);\n    }\n  }, [policy]);\n\n  return (\n    <Form>\n      <RoutedTabs ouiaId=\"EditSystems\" defaultTab=\"systems\" id=\"policy-tabs\">\n        <Tab\n          eventKey=\"rules\"\n          ouiaId=\"Rules\"\n          title={<TabTitleText>Rules</TabTitleText>}\n        >\n          <EditPolicyRulesTab\n            policy={policy}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            selectedRuleRefIds={selectedRuleRefIds}\n            osMinorVersionCounts={osMinorVersionCounts}\n          />\n        </Tab>\n        <Tab\n          eventKey=\"systems\"\n          ouiaId=\"Systems\"\n          title={<TabTitleText>Systems</TabTitleText>}\n        >\n          <EditPolicySystemsTab\n            policy={policy}\n            selectedSystems={selectedSystems}\n            onSystemSelect={handleSystemSelect}\n          />\n          {newRulesAlert && <NewRulesAlert />}\n        </Tab>\n      </RoutedTabs>\n    </Form>\n  );\n};\n\nEditPolicyForm.propTypes = {\n  policy: propTypes.object,\n  updatedPolicy: propTypes.object,\n  setUpdatedPolicy: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.object),\n  setSelectedRuleRefIds: propTypes.func,\n  setSelectedSystems: propTypes.func,\n  selectedSystems: propTypes.array,\n};\n\nexport default EditPolicyForm;\n","import { useState } from 'react';\n\nexport const useNewRulesAlertState = (...args) => useState(...args);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Button, Spinner } from '@patternfly/react-core';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport {\n  ComplianceModal,\n  StateViewWithError,\n  StateViewPart,\n} from 'PresentationalComponents';\nimport EditPolicyForm from './EditPolicyForm';\nimport { useOnSave, useLinkToPolicy } from './hooks';\n\nexport const MULTIVERSION_QUERY = gql`\n  query Profile($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      external\n      description\n      totalHostCount\n      compliantHostCount\n      complianceThreshold\n      osMajorVersion\n      supportedOsVersions\n      lastScanned\n      policyType\n      policy {\n        id\n        name\n        refId\n        profiles {\n          id\n          parentProfileId\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          benchmark {\n            id\n            title\n            latestSupportedOsMinorVersions\n            osMajorVersion\n            version\n          }\n          rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n        }\n      }\n      businessObjective {\n        id\n        title\n      }\n      hosts {\n        id\n        osMinorVersion\n        osMajorVersion\n      }\n    }\n  }\n`;\n\nexport const EditPolicy = ({ route }) => {\n  const { policy_id: policyId } = useParams();\n  const { data, loading, error } = useQuery(MULTIVERSION_QUERY, {\n    variables: { policyId },\n  });\n  const policy = data?.profile;\n  const linkToPolicy = useLinkToPolicy();\n  const [updatedPolicy, setUpdatedPolicy] = useState(null);\n  const [selectedRuleRefIds, setSelectedRuleRefIds] = useState([]);\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const saveEnabled = updatedPolicy && !updatedPolicy.complianceThresholdValid;\n  const updatedPolicyHostsAndRules = {\n    ...updatedPolicy,\n    selectedRuleRefIds,\n    hosts: selectedSystems,\n  };\n  const [isSaving, onSave] = useOnSave(policy, updatedPolicyHostsAndRules);\n\n  const actions = [\n    <Button\n      isDisabled={saveEnabled}\n      key=\"save\"\n      ouiaId=\"EditPolicySaveButton\"\n      variant=\"primary\"\n      spinnerAriaValueText=\"Saving\"\n      isLoading={isSaving}\n      onClick={onSave}\n    >\n      Save\n    </Button>,\n    <Button\n      key=\"cancel\"\n      ouiaId=\"EditPolicyCancelButton\"\n      variant=\"link\"\n      onClick={() => linkToPolicy()}\n    >\n      Cancel\n    </Button>,\n  ];\n\n  useTitleEntity(route, policy?.name);\n\n  return (\n    <ComplianceModal\n      isOpen\n      position={'top'}\n      style={{ minHeight: '350px' }}\n      variant={'large'}\n      ouiaId=\"EditPolicyModal\"\n      title={`Edit ${policy ? policy.name : ''}`}\n      onClose={() => linkToPolicy()}\n      actions={actions}\n    >\n      <StateViewWithError stateValues={{ policy, loading, error }}>\n        <StateViewPart stateKey=\"loading\">\n          <Spinner />\n        </StateViewPart>\n        <StateViewPart stateKey=\"policy\">\n          <EditPolicyForm\n            {...{\n              policy,\n              updatedPolicy,\n              setUpdatedPolicy,\n              selectedRuleRefIds,\n              setSelectedRuleRefIds,\n              selectedSystems,\n              setSelectedSystems,\n            }}\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </ComplianceModal>\n  );\n};\n\nEditPolicy.propTypes = {\n  route: propTypes.object,\n};\n\nexport default EditPolicy;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\n\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Truncate from '@redhat-cloud-services/frontend-components/Truncate';\nimport {\n  UnsupportedSSGVersion,\n  ComplianceScore as complianceScore,\n  LinkWithPermission as Link,\n} from 'PresentationalComponents';\nimport {\n  profilesRulesFailed,\n  complianceScoreData,\n  NEVER,\n} from 'Utilities/ruleHelpers';\n\nconst SystemLink = ({ id, children }) => (\n  <Link to={{ pathname: `/systems/${id}` }}>{children}</Link>\n);\n\nSystemLink.propTypes = {\n  id: propTypes.string,\n  children: propTypes.node,\n};\n\nexport const Name = ({\n  id,\n  name,\n  osMajorVersion,\n  osMinorVersion,\n  showOsInfo = false,\n  showLink = false,\n}) => {\n  const hasOsInfo = (osMajorVersion, osMinorVersion) =>\n    !!osMajorVersion && !!osMinorVersion && showOsInfo;\n\n  return (\n    <TextContent>\n      {showLink ? <SystemLink {...{ id }}>{name}</SystemLink> : name}\n\n      {hasOsInfo(osMajorVersion, osMinorVersion) && (\n        <Text component={TextVariants.small}>\n          RHEL {osMajorVersion}.{osMinorVersion}\n        </Text>\n      )}\n    </TextContent>\n  );\n};\n\nName.propTypes = {\n  id: propTypes.string,\n  name: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersion: propTypes.string,\n  showOsInfo: propTypes.bool,\n  showLink: propTypes.bool,\n};\n\nexport const profilesSsgVersions = (profiles) =>\n  profiles\n    .map((p) => p.ssgVersion)\n    .filter((version) => !!version)\n    .join(', ');\n\nexport const SSGVersion = ({ ssgVersion = 'Not available', supported }) =>\n  supported ? (\n    ssgVersion\n  ) : (\n    <UnsupportedSSGVersion messageVariant=\"singular\">\n      {ssgVersion}\n    </UnsupportedSSGVersion>\n  );\n\nSSGVersion.propTypes = {\n  supported: propTypes.bool,\n  ssgVersion: propTypes.string,\n};\n\nexport const SSGVersions = ({ testResultProfiles = [] }) =>\n  testResultProfiles.length !== 0\n    ? testResultProfiles.map((profile) => (\n        <SSGVersion\n          key={`ssgversion-${profile.id}`}\n          ssgVersion={profile?.benchmark?.version}\n          supported={profile?.supported}\n        />\n      ))\n    : 'Unknown';\n\nSSGVersions.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const Policies = ({ policies }) =>\n  (policies || []).length > 0 && (\n    <Truncate\n      inline\n      text={policies.map((p) => p.name).join(', ')}\n      length={215}\n    />\n  );\n\nPolicies.propTypes = {\n  policies: propTypes.array,\n};\n\nexport const FailedRules = ({ id, testResultProfiles }) => {\n  const rulesFailed = profilesRulesFailed(testResultProfiles).length;\n  return (\n    <SystemLink {...{ id }}>\n      {testResultProfiles.length > 0 ? rulesFailed : 'N/A'}\n    </SystemLink>\n  );\n};\n\nFailedRules.propTypes = {\n  id: propTypes.string,\n  testResultProfiles: propTypes.array,\n};\n\nexport { complianceScoreData };\nexport const ComplianceScore = ({ testResultProfiles }) =>\n  testResultProfiles.length > 0\n    ? complianceScore(complianceScoreData(testResultProfiles))\n    : 'N/A';\n\nComplianceScore.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nconst NeverScanned = () => (\n  <Tooltip\n    position=\"right\"\n    content={\n      <Fragment>\n        This system has never returned a report for this policy. This may be\n        because it is disconnected, or the insights-client on this system is not\n        configured to use Compliance.\n      </Fragment>\n    }\n  >\n    <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n    {' ' + NEVER}\n  </Tooltip>\n);\n\nexport const lastScanned = (profiles) => {\n  const dates = profiles.map((profile) => new Date(profile.lastScanned));\n  const last = new Date(\n    Math.max.apply(\n      null,\n      dates.filter((date) => isFinite(date))\n    )\n  );\n  const result =\n    last instanceof Date && isFinite(last) ? last : <NeverScanned />;\n\n  return result;\n};\n\nexport const LastScanned = ({ testResultProfiles: profiles }) => {\n  const lastScannedDate = lastScanned(profiles || []);\n\n  return lastScannedDate instanceof Date ? (\n    <DateFormat date={Date.parse(lastScannedDate)} type=\"relative\" />\n  ) : (\n    lastScannedDate\n  );\n};\n\nLastScanned.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const operatingSystemString = ({ osMinorVersion, osMajorVersion }) =>\n  `RHEL ${osMajorVersion}.${osMinorVersion}`;\n\nexport const OperatingSystem = (system) => operatingSystemString(system);\n","import React from 'react';\nimport { nowrap } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport { complianceScoreString } from 'PresentationalComponents';\nimport { profilesRulesFailed } from 'Utilities/ruleHelpers';\nimport { renderComponent } from 'Utilities/helpers';\n\nimport {\n  Name as NameCell,\n  ComplianceScore as ComplianceScoreCell,\n  FailedRules as FailedRulesCell,\n  LastScanned as LastScannedCell,\n  Policies as PoliciesCell,\n  SSGVersions as SsgVersionCell,\n  complianceScoreData,\n  lastScanned,\n  operatingSystemString,\n  OperatingSystem as OperatingSystemCell,\n} from './Cells';\n\nconst disableSorting = { isStatic: true };\n\nexport const compileColumnRenderFunc = ({ cell, ...column }) => ({\n  ...column,\n  renderFunc: renderComponent(cell, column.props),\n});\n\nexport const customColumn = (column, props) =>\n  compileColumnRenderFunc({\n    ...column,\n    props: {\n      ...column.props,\n      ...props,\n    },\n  });\n\nexport const Name = compileColumnRenderFunc({\n  key: 'name',\n  title: 'Name',\n  sortBy: ['name'],\n  props: {\n    width: 40,\n  },\n  renderExport: (system) => `${system.name} (${operatingSystemString(system)})`,\n  cell: NameCell,\n});\n\nexport const customName = (props) => ({\n  ...Name,\n  props: {\n    ...Name.props,\n    ...props,\n  },\n  renderFunc: renderComponent(NameCell, props),\n});\n\nexport const SsgVersion = {\n  title: 'SSG version',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  sortBy: ['ssg_version'],\n  key: 'ssg_version',\n  renderExport: (testResultProfiles) =>\n    testResultProfiles\n      .map(\n        ({ supported, benchmark: { version } }) =>\n          `${!supported ? '!' : ''}${version}`\n      )\n      .join(', '),\n  renderFunc: renderComponent(SsgVersionCell),\n};\n\nexport const Policies = {\n  title: 'Policies',\n  transforms: [nowrap],\n  key: 'policies',\n  exportKey: 'policies',\n  renderExport: (policies) => policies.map(({ name }) => name).join(', '),\n  props: {\n    width: 40,\n    ...disableSorting,\n  },\n  renderFunc: renderComponent(PoliciesCell),\n};\n\nexport const FailedRules = {\n  title: 'Failed rules',\n  key: 'failedRules',\n  exportKey: 'testResultProfiles',\n  transforms: [nowrap],\n  props: {\n    width: 5,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) =>\n    profilesRulesFailed(testResultProfiles).length,\n  renderFunc: renderComponent(FailedRulesCell),\n};\n\nexport const ComplianceScore = {\n  title: 'Compliance score',\n  key: 'complianceScore',\n  exportKey: 'testResultProfiles',\n  transforms: [nowrap],\n  props: {\n    width: 5,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) =>\n    complianceScoreString(complianceScoreData(testResultProfiles)).trim(),\n  renderFunc: renderComponent(ComplianceScoreCell),\n};\n\nexport const LastScanned = {\n  title: 'Last scanned',\n  key: 'lastScanned',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  props: {\n    width: 10,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) => lastScanned(testResultProfiles),\n  renderFunc: renderComponent(LastScannedCell),\n};\n\nexport const OperatingSystem = compileColumnRenderFunc({\n  title: 'Operating system',\n  key: 'operatingSystem',\n  sortBy: ['osMajorVersion', 'osMinorVersion'],\n  transforms: [nowrap],\n  renderExport: (cell) => operatingSystemString(cell),\n  cell: OperatingSystemCell,\n});\n\nexport const OS = compileColumnRenderFunc({\n  title: (\n    <Tooltip content={<span>Operating System</span>}>\n      <span>OS</span>\n    </Tooltip>\n  ),\n  original: 'Operating System',\n  key: 'operatingSystem',\n  dataLabel: 'OS',\n  transforms: [nowrap],\n  sortBy: ['osMajorVersion', 'osMinorVersion'],\n  props: {\n    width: 10,\n  },\n  renderExport: (cell) => operatingSystemString(cell),\n  cell: OperatingSystemCell,\n});\n\nexport const inventoryColumn = (column, props) => ({\n  key: column,\n  ...props,\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Skeleton, {\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { registryDecorator } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport {\n  InventoryDetail,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\n\n@registryDecorator()\nclass InventoryDetails extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <DetailWrapper\n        onLoad={({ mergeWithDetail }) =>\n          this.getRegistry().register({\n            ...mergeWithDetail(),\n          })\n        }\n      >\n        <InventoryDetail\n          fallback={<Skeleton size={SkeletonSize.md} />}\n          hideBack\n        />\n      </DetailWrapper>\n    );\n  }\n}\n\nInventoryDetails.propTypes = {\n  entity: propTypes.object,\n};\n\nconst ConnectedInventoryDetails = (props) => {\n  return <InventoryDetails {...props} />;\n};\n\nexport default ConnectedInventoryDetails;\n","import gql from 'graphql-tag';\nimport pickBy from 'lodash/pickBy';\nimport {\n  systemsPolicyFilterConfiguration,\n  systemsOsFilterConfiguration,\n  systemsOsMinorFilterConfiguration,\n} from '@/constants';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { entitiesReducer } from 'Store/Reducers/SystemStore';\n\nexport const GET_MINIMAL_SYSTEMS = gql`\n  query getSystems(\n    $filter: String!\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n          osMinorVersion\n          culledTimestamp\n          staleWarningTimestamp\n          staleTimestamp\n          insightsId\n          lastScanned\n          updated\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_SYSTEMS_OSES = gql`\n  query getSystems($filter: String!) {\n    systems(search: $filter) {\n      osVersions\n    }\n  }\n`;\n\nexport const policyFilter = (policies, osFilter) => [\n  ...systemsPolicyFilterConfiguration(policies),\n  ...(osFilter ? systemsOsFilterConfiguration(policies) : []),\n];\n\nexport const osMinorVersionFilter = (...args) =>\n  systemsOsMinorFilterConfiguration(...args);\n\nexport const initFilterState = (filterConfig) =>\n  pickBy(filterConfig.initialDefaultState(), (value) => !!value);\n\nexport const defaultOnLoad =\n  (columns) =>\n  ({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n    getRegistry().register({\n      ...mergeWithEntities(entitiesReducer(INVENTORY_ACTION_TYPES, columns)),\n    });\n\nexport const ssgVersionFilter = (ssgVersions) => [\n  {\n    type: conditionalFilterType.checkbox,\n    label: 'SSG Version',\n    filterString: (value) => `ssg_version = ${value}`,\n    items: ssgVersions.map((ssgVersion) => ({\n      label: ssgVersion,\n      value: ssgVersion,\n    })),\n  },\n];\n","import { useEffect, useLayoutEffect, useState } from 'react';\nimport { useApolloClient, useQuery } from '@apollo/client';\nimport { useDispatch } from 'react-redux';\nimport debounce from '@redhat-cloud-services/frontend-components-utilities/debounce';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport { osMinorVersionFilter, GET_SYSTEMS_OSES } from './constants';\nimport useExport from 'Utilities/hooks/useTableTools/useExport';\nimport { useBulkSelect } from 'Utilities/hooks/useTableTools/useBulkSelect';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nconst groupByMajorVersion = (versions = [], showFilter = []) => {\n  const showVersion = (version) => {\n    if (showFilter.length > 0) {\n      return showFilter.map(String).includes(String(version));\n    } else {\n      return true;\n    }\n  };\n\n  return versions.reduce((acc, currentValue) => {\n    if (showVersion(currentValue.major)) {\n      acc[String(currentValue.major)] = [\n        ...new Set([...(acc[currentValue.major] || []), currentValue.minor]),\n      ];\n    }\n\n    return acc;\n  }, []);\n};\n\nexport const useOsMinorVersionFilter = (showFilter, fetchArguments = {}) => {\n  let { data } = useQuery(GET_SYSTEMS_OSES, {\n    skip: !showFilter,\n    ...fetchArguments,\n  });\n  const { osVersions } = data?.systems || {};\n\n  return showFilter\n    ? osMinorVersionFilter(groupByMajorVersion(osVersions, showFilter))\n    : [];\n};\n\nexport const useSystemsFilter = (\n  filterString,\n  showOnlySystemsWithTestResults,\n  defaultFilter\n) => {\n  const combindedFilter = [\n    ...(showOnlySystemsWithTestResults ? ['has_test_results = true'] : []),\n    ...(filterString?.length > 0 ? [filterString] : []),\n  ].join(' and ');\n  const filter = defaultFilter\n    ? `(${defaultFilter})` +\n      (combindedFilter ? ` and (${combindedFilter})` : '')\n    : combindedFilter;\n\n  return filter;\n};\n\nconst renameInventoryAttributes = ({\n  culledTimestamp,\n  staleWarningTimestamp,\n  staleTimestamp,\n  insightsId,\n  ...system\n}) => ({\n  ...system,\n  insights_id: insightsId,\n  culled_timestamp: culledTimestamp,\n  stale_warning_timestamp: staleWarningTimestamp,\n  stale_timestamp: staleTimestamp,\n});\n\nexport const useFetchSystems = ({\n  query,\n  onComplete,\n  variables = {},\n  onError,\n}) => {\n  const client = useApolloClient();\n\n  return (perPage, page, requestVariables = {}) =>\n    client\n      .query({\n        query,\n        fetchResults: true,\n        fetchPolicy: 'no-cache',\n        variables: {\n          perPage,\n          page,\n          ...variables,\n          ...requestVariables,\n        },\n      })\n      .then(({ data }) => {\n        const systems = data?.systems?.edges?.map((e) => e.node) || [];\n        const entities = systemsWithRuleObjectsFailed(systems).map(\n          renameInventoryAttributes\n        );\n        const result = {\n          entities,\n          meta: {\n            ...(requestVariables.tags && { tags: requestVariables.tags }),\n            totalCount: data?.systems?.totalCount || 0,\n          },\n        };\n\n        onComplete && onComplete(result);\n        return result;\n      })\n      .catch((error) => {\n        if (onError) {\n          onError(error);\n          return { entities: [], meta: { totalCount: 0 } };\n        } else {\n          throw error;\n        }\n      });\n};\n\nconst fetchBatched = (fetchFunction, total, filter, batchSize = 50) => {\n  const pages = Math.ceil(total / batchSize) || 1;\n  return Promise.all(\n    [...new Array(pages)].map((_, pageIdx) =>\n      fetchFunction(batchSize, pageIdx + 1, filter)\n    )\n  );\n};\n\nconst buildApiFilters = (filters = {}) => {\n  const { tagFilters, ...otherFilters } = filters;\n  const tagsApiFilter = tagFilters\n    ? {\n        tags: tagFilters.flatMap((tagFilter) =>\n          tagFilter.values.map(\n            (tag) =>\n              `${encodeURIComponent(tagFilter.key)}/${encodeURIComponent(\n                tag.tagKey\n              )}=${encodeURIComponent(tag.value)}`\n          )\n        ),\n      }\n    : {};\n\n  return {\n    ...otherFilters,\n    ...tagsApiFilter,\n  };\n};\n\nexport const useGetEntities = (fetchEntities, { selected, columns } = {}) => {\n  const appendDirection = (attributes, direction) =>\n    attributes.map((attribute) => `${attribute}:${direction}`);\n\n  const findColumnByKey = (key) =>\n    (columns || []).find((column) => column.key === key);\n\n  return async (\n    _ids,\n    { page = 1, per_page: perPage, orderBy, orderDirection, filters }\n  ) => {\n    const sortableColumn = findColumnByKey(orderBy);\n    const sortBy =\n      sortableColumn && sortableColumn.sortBy\n        ? appendDirection(sortableColumn.sortBy, orderDirection)\n        : undefined;\n    const filterForApi = buildApiFilters(filters);\n\n    const fetchedEntities = await fetchEntities(perPage, page, {\n      ...filterForApi,\n      sortBy,\n    });\n    const {\n      entities,\n      meta: { totalCount },\n    } = fetchedEntities || {};\n\n    return {\n      results: entities.map((entity) => ({\n        ...entity,\n        selected: (selected || []).map((id) => id).includes(entity.id),\n      })),\n      orderBy,\n      orderDirection,\n      total: totalCount,\n    };\n  };\n};\n\n// This hook is primarily meant to work around issues in the inventory\nexport const useInventoryUtilities = (\n  inventory,\n  selectedSystems,\n  activeFilters\n) => {\n  const dispatch = useDispatch();\n\n  // Resets the Inventory to a loading state\n  // and prevents previously shown columns and rows to appear\n  useLayoutEffect(() => {\n    dispatch({\n      type: 'INVENTORY_INIT',\n    });\n  }, []);\n\n  // Ensures rows are marked as selected\n  useEffect(() => {\n    dispatch({\n      type: 'SELECT_ENTITIES',\n      payload: {\n        selected: selectedSystems,\n      },\n    });\n  }, [selectedSystems]);\n\n  // Filters do not yet trigger the inventory to call getEntities\n  // and the page would not reset to page 1\n  const resetPage = () => {\n    Promise.resolve(\n      dispatch({\n        type: 'RESET_PAGE',\n      })\n    ).then(() => inventory?.current?.onRefreshData());\n  };\n\n  // The debounce is to not have filter updates collide or get out of order.\n  const debounceResetPage = debounce(resetPage, 50);\n\n  useEffect(() => {\n    debounceResetPage();\n  }, [activeFilters]);\n};\n\nconst toIdFilter = (ids) =>\n  ids?.length > 0 ? `id ^ (${ids.join(',')})` : undefined;\n\nexport const useSystemsExport = ({\n  columns,\n  selected,\n  total,\n  fetchArguments,\n}) => {\n  const selectionFilter = selected ? toIdFilter(selected) : undefined;\n  const fetchSystems = useFetchSystems({\n    query: fetchArguments.query,\n    variables: {\n      ...fetchArguments.variables,\n      ...(fetchArguments.tags && { tags: fetchArguments.tags }),\n      filter: selectionFilter\n        ? `${fetchArguments.variables.filter} and (${selectionFilter})`\n        : fetchArguments.variables.filter,\n    },\n    onError: () => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Couldn’t download export',\n        description: 'Reinitiate this export to try again.',\n      });\n    },\n  });\n\n  const selectedFilter = () =>\n    selected?.length > 0 ? toIdFilter(selected) : undefined;\n\n  const exporter = async () => {\n    const fetchedItems = await fetchBatched(\n      fetchSystems,\n      total,\n      selectedFilter()\n    );\n\n    return fetchedItems.flatMap((result) => result.entities);\n  };\n\n  const {\n    toolbarProps: { exportConfig },\n  } = useExport({\n    exporter,\n    columns,\n    isDisabled: total === 0,\n    onStart: () => {\n      dispatchNotification({\n        variant: 'info',\n        title: 'Preparing export',\n        description: 'Once complete, your download will start automatically.',\n      });\n    },\n    onComplete: () => {\n      dispatchNotification({\n        variant: 'success',\n        title: 'Downloading export',\n      });\n    },\n  });\n\n  return exportConfig;\n};\n\nexport const useSystemBulkSelect = ({\n  total,\n  onSelect,\n  preselected,\n  fetchArguments,\n  currentPageIds,\n  systemsCache = [],\n}) => {\n  // This is meant as a compatibility layer and to be removed\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const fetchSystems = useFetchSystems({\n    ...fetchArguments,\n    onError: (error) => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error selecting systems',\n        description: error.message,\n      });\n    },\n  });\n\n  const fetchFunc = async (fetchIds) => {\n    if (fetchIds.length === 0) {\n      return [];\n    }\n\n    const idFilter = toIdFilter(fetchIds);\n    const results = await fetchBatched(fetchSystems, fetchIds.length, {\n      ...(idFilter && { filter: idFilter }),\n    });\n\n    return results.flatMap((result) => result.entities);\n  };\n\n  const cachedOrFetch = async (selectedIds) => {\n    const cachedSystems = systemsCache.filter(({ id }) =>\n      selectedIds.includes(id)\n    );\n    const cachedIds = cachedSystems.map(({ id }) => id);\n    const fetchIds = selectedIds.filter((id) => !cachedIds.includes(id));\n    const fetchedSystems = await fetchFunc(fetchIds);\n\n    return [...cachedSystems, ...fetchedSystems];\n  };\n\n  const onSelectCallback = async (selectedIds) => {\n    const systems = await cachedOrFetch(selectedIds);\n    setSelectedSystems(systems);\n    onSelect && onSelect(systems);\n  };\n\n  const itemIdsInTable = async () => {\n    const results = await fetchBatched(fetchSystems, total);\n    return results.flatMap((result) => result.entities.map(({ id }) => id));\n  };\n\n  const bulkSelect = useBulkSelect({\n    total,\n    onSelect: onSelectCallback,\n    preselected,\n    itemIdsInTable,\n    itemIdsOnPage: () => currentPageIds,\n  });\n  return {\n    selectedSystems,\n    ...bulkSelect,\n  };\n};\n","import React, { useMemo, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Spinner } from '@patternfly/react-core';\nimport { TableVariant } from '@patternfly/react-table';\n// eslint-disable-next-line max-len\nimport ComplianceRemediationButton from '@/PresentationalComponents/ComplianceRemediationButton';\nimport {\n  DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n  COMPLIANT_SYSTEMS_FILTER_CONFIGURATION,\n} from '@/constants';\nimport { ErrorPage, StateView, StateViewPart } from 'PresentationalComponents';\nimport useFilterConfig from 'Utilities/hooks/useTableTools/useFilterConfig';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { policyFilter, defaultOnLoad, ssgVersionFilter } from './constants';\nimport {\n  useFetchSystems,\n  useGetEntities,\n  useOsMinorVersionFilter,\n  useInventoryUtilities,\n  useSystemsExport,\n  useSystemsFilter,\n  useSystemBulkSelect,\n} from './hooks';\nimport { constructQuery } from '../../Utilities/helpers';\n\nexport const SystemsTable = ({\n  columns,\n  showAllSystems,\n  policyId,\n  showActions,\n  enableExport,\n  compliantFilter,\n  policies,\n  showOnlySystemsWithTestResults,\n  showOsFilter,\n  error,\n  showComplianceSystemsInfo,\n  compact,\n  remediationsEnabled,\n  systemProps,\n  defaultFilter,\n  emptyStateComponent,\n  prependComponent,\n  showOsMinorVersionFilter,\n  preselectedSystems,\n  onSelect: onSelectProp,\n  noSystemsTable,\n  tableProps,\n  ssgVersions,\n  dedicatedAction,\n}) => {\n  const inventory = useRef(null);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [currentTags, setCurrentTags] = useState([]);\n\n  const osMinorVersionFilter = useOsMinorVersionFilter(\n    showOsMinorVersionFilter,\n    {\n      variables: {\n        filter: defaultFilter,\n        ...(policyId && { policyId }),\n      },\n    }\n  );\n\n  const {\n    toolbarProps: conditionalFilter,\n    filterString,\n    activeFilterValues,\n  } = useFilterConfig({\n    filters: {\n      filterConfig: [\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(policies?.length > 0 ? policyFilter(policies, showOsFilter) : []),\n        ...(ssgVersions ? ssgVersionFilter(ssgVersions) : []),\n        ...osMinorVersionFilter,\n      ],\n    },\n  });\n  const systemsFilter = useSystemsFilter(\n    filterString(),\n    showOnlySystemsWithTestResults,\n    defaultFilter\n  );\n\n  const constructedQuery = constructQuery(columns);\n\n  const systemFetchArguments = {\n    query: constructedQuery.query,\n    variables: {\n      ...constructedQuery.fragments,\n      tags: currentTags,\n      filter: systemsFilter,\n      ...(policyId && { policyId }),\n    },\n  };\n\n  const preselection = useMemo(\n    () => preselectedSystems.map(({ id }) => id),\n    [preselectedSystems]\n  );\n\n  const {\n    selectedIds,\n    selectedSystems,\n    tableProps: bulkSelectTableProps,\n    toolbarProps: bulkSelectToolBarProps,\n  } = useSystemBulkSelect({\n    total,\n    onSelect: onSelectProp,\n    preselected: preselection,\n    fetchArguments: systemFetchArguments,\n    currentPageIds: items.map(({ id }) => id),\n    systemsCache: items,\n  });\n\n  useInventoryUtilities(inventory, selectedIds, activeFilterValues);\n\n  const onComplete = (result) => {\n    setTotal(result.meta.totalCount);\n    setItems(result.entities);\n    setIsLoaded(true);\n    setCurrentTags && setCurrentTags(result.meta.tags);\n    if (\n      emptyStateComponent &&\n      result.meta.totalCount === 0 &&\n      activeFilterValues.length === 0 &&\n      result?.meta?.tags?.length === 0\n    ) {\n      setIsEmpty(true);\n    }\n  };\n\n  const fetchSystems = useFetchSystems({\n    ...systemFetchArguments,\n    onComplete,\n  });\n  const getEntities = useGetEntities(fetchSystems, {\n    selected: selectedIds,\n    columns,\n  });\n  const exportConfig = useSystemsExport({\n    columns,\n    filter: systemsFilter,\n    selected: selectedIds,\n    total,\n    fetchArguments: {\n      ...systemFetchArguments,\n    },\n  });\n\n  const mergedColumns = (defaultColumns) =>\n    columns.map((column) => {\n      const isStringCol = typeof column === 'string';\n      const key = isStringCol ? column : column.key;\n      const defaultColumn = defaultColumns.find(\n        (defaultCol) => defaultCol.key === key\n      );\n      return {\n        ...defaultColumn,\n        ...(isStringCol ? { key: column } : column),\n        props: {\n          ...defaultColumn?.props,\n          ...column?.props,\n        },\n      };\n    });\n\n  return (\n    <StateView\n      stateValues={{\n        error,\n        noError: error === undefined && !isEmpty,\n        empty: isEmpty,\n      }}\n    >\n      <StateViewPart stateKey=\"error\">\n        {!!prependComponent && prependComponent}\n        <ErrorPage error={error} />\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">{emptyStateComponent}</StateViewPart>\n      <StateViewPart stateKey=\"noError\">\n        {!!prependComponent && isLoaded && prependComponent}\n        {showComplianceSystemsInfo && (\n          <Alert\n            isInline\n            variant=\"info\"\n            ouiaId=\"SystemsListIsDifferentAlert\"\n            title={\n              'The list of systems in this view is different than those that appear in the Inventory. ' +\n              'Only systems currently associated with or reporting against compliance policies are displayed.'\n            }\n          />\n        )}\n        <InventoryTable\n          {...systemProps}\n          disableDefaultColumns\n          columns={mergedColumns}\n          noSystemsTable={noSystemsTable}\n          ref={inventory}\n          getEntities={getEntities}\n          hideFilters={{ all: true, tags: false }}\n          showTags\n          onLoad={defaultOnLoad(columns)}\n          tableProps={{\n            ...bulkSelectTableProps,\n            isStickyHeader: true,\n            ...tableProps,\n          }}\n          fallback={<Spinner />}\n          variant={compact ? TableVariant.compact : ''}\n          {...bulkSelectToolBarProps}\n          {...(!showAllSystems && {\n            ...conditionalFilter,\n            ...(remediationsEnabled && {\n              dedicatedAction: (\n                <ComplianceRemediationButton allSystems={selectedSystems} />\n              ),\n            }),\n          })}\n          {...(dedicatedAction ? { dedicatedAction: dedicatedAction } : {})}\n          {...(enableExport && { exportConfig })}\n          {...(showActions && {\n            actions: [\n              {\n                title: 'View in inventory',\n                onClick: (_event, _index, { id }) => {\n                  const beta =\n                    window.location.pathname.split('/')[1] === 'beta';\n                  window.location.href = `${window.location.origin}${\n                    beta ? '/beta' : ''\n                  }/insights/inventory/${id}`;\n                },\n              },\n            ],\n          })}\n        />\n      </StateViewPart>\n    </StateView>\n  );\n};\n\nSystemsTable.propTypes = {\n  columns: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.shape({}), PropTypes.string])\n  ),\n  policies: PropTypes.arrayOf(PropTypes.shape({})),\n  showAllSystems: PropTypes.bool,\n  policyId: PropTypes.string,\n  query: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  showActions: PropTypes.bool,\n  enableExport: PropTypes.bool,\n  compliantFilter: PropTypes.bool,\n  showOnlySystemsWithTestResults: PropTypes.bool,\n  showOsFilter: PropTypes.bool,\n  showComplianceSystemsInfo: PropTypes.bool,\n  error: PropTypes.object,\n  compact: PropTypes.bool,\n  remediationsEnabled: PropTypes.bool,\n  defaultFilter: PropTypes.string,\n  systemProps: PropTypes.shape({\n    isFullView: PropTypes.bool,\n  }),\n  emptyStateComponent: PropTypes.node,\n  prependComponent: PropTypes.node,\n  showOsMinorVersionFilter: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  preselectedSystems: PropTypes.array,\n  onSelect: PropTypes.func,\n  noSystemsTable: PropTypes.node,\n  tableProps: PropTypes.object,\n  ssgVersions: PropTypes.array,\n  dedicatedAction: PropTypes.object,\n};\n\nSystemsTable.defaultProps = {\n  policyId: '',\n  showActions: true,\n  enableExport: true,\n  compliantFilter: false,\n  showOnlySystemsWithTestResults: false,\n  showComplianceSystemsInfo: false,\n  compact: false,\n  remediationsEnabled: true,\n  preselectedSystems: [],\n};\n\nexport default SystemsTable;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { sortingByProp } from 'Utilities/helpers';\n\nconst selectRows = (rows, selected) =>\n  rows.map((row) => ({\n    ...row,\n    selected: selected.includes(row.id),\n  }));\n\nexport const entitiesReducer = () =>\n  applyReducerHash({\n    ['INVENTORY_INIT']: () => ({\n      rows: [],\n      total: 0,\n    }),\n    ['RESET_PAGE']: (state) => ({\n      ...state,\n      page: 1,\n    }),\n    ['SELECT_ENTITIES']: (state, { payload: { selected } }) => ({\n      ...state,\n      rows: selectRows(state.rows, selected),\n    }),\n  });\n\nexport const mapCountOsMinorVersions = (systems) => {\n  if (!systems) {\n    return {};\n  }\n\n  return systems.reduce((acc, { osMinorVersion }) => {\n    if (osMinorVersion !== undefined && osMinorVersion !== null) {\n      (acc[osMinorVersion] = acc[osMinorVersion] || {\n        osMinorVersion,\n        count: 0,\n      }).count++;\n    }\n\n    return acc;\n  }, {});\n};\n\nexport const countOsMinorVersions = (systems) =>\n  Object.values(mapCountOsMinorVersions(systems)).sort(\n    sortingByProp('osMinorVersion', 'desc')\n  );\n"],"names":["QUERY","gql","ComplianceSystems","useQuery","data","error","loading","policies","profiles","edges","map","node","className","title","stateValues","stateKey","columns","Columns","showLink","props","isStatic","transforms","nowrap","defaultFilter","systemProps","isFullView","showOsMinorVersionFilter","policy","osMajorVersion","showComplianceSystemsInfo","enableEditPolicy","remediationsEnabled","PolicyTypeDetailsRow","description","item","key","Text","style","margin","propTypes","NameCell","name","disabled","compact","PolicyTypeTable","onChange","selectedProfile","items","profile","rowProps","selected","id","disableSelection","filters","filterConfig","type","conditionalFilterType","label","filter","policyTypes","value","policyType","toLowerCase","includes","sortByProp","renderFunc","renderComponent","fitContent","_data","_id","supportedOsVersions","join","options","detailsComponent","onRadioSelect","_event","_value","_rowIdx","itemId","find","sortBy","index","direction","property","variant","Tooltip","position","content","SUPPORTED_PROFILES","CreateSCAPPolicy","change","selectedOsMajorVersion","fetchPolicy","osMajorVersions","selectedOsMajorVersionObject","profilesToSelect","profileRefId","refId","benchmarkRedId","benchmark","Spinner","TextContent","component","TextVariants","Form","FormGroup","isRequired","fieldId","Tile","onClick","isSelected","isStacked","labelIcon","undefined","reduxFormPropTypes","selector","formValueSelector","compose","connect","state","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","PROFILES_QUERY","BENCHMARKS_QUERY","EditPolicyProfilesRules","selectedRuleRefIds","osMinorVersionCounts","osMinorVersions","i","osMinorVersion","sort","benchmarkSearch","variables","skip","length","benchmarksData","benchmarksError","benchmarksLoading","benchmarks","nodes","tabsData","systemCount","count","latestSupportedOsMinorVersions","getBenchmarkBySupportedOsMinor","benchmarkProfile","getBenchmarkProfile","newOsMinorVersion","profileToOsMinorMap","tabsDataToOsMinorMap","profileIds","Object","keys","skipProfilesQuery","profilesData","profilesError","profilesLoading","dataState","loadingState","noRuleSets","p","setSelectedRuleRefIds","newSelection","useLayoutEffect","profilesWithOs","extendProfilesByOsMinor","profilesWithRulesToSelection","only","JSON","stringify","EmptyState","Title","headingLevel","size","EmptyStateBody","EmptyTable","TabbedRules","selectedFilter","level","ouiaId","resetLink","rulesPageLink","WizardContextConsumer","goToStepById","Button","PrependComponent","EditPolicySystems","selectedSystems","version","split","prependComponent","emptyStateComponent","width","showActions","enableExport","preselectedSystems","onSelect","newSelectedSystems","countOsMinorVersions","defaultProps","EditPolicyDetails","useEffect","Field","ReduxFormTextInput","isDisabled","ReduxFormTextArea","defaultValue","businessObjective","previousThreshold","initialValues","ReviewCreatedPolicy","complianceThreshold","parentProfileName","marginTop","TextList","TextListVariants","TextListItem","TextListItemVariants","fontWeight","benchmarkId","parseFloat","rulesCount","EmtpyStateWithErrors","errors","Array","isArray","List","ListItem","FinishedCreatePolicy","onWizardFinish","cloneFromProfileId","systems","useState","percent","setPercent","message","setMessage","setErrors","failed","setFailed","updatePolicy","usePolicy","onProgress","progress","hosts","then","dispatchNotification","autoDismiss","to","catch","networkError","result","Bullseye","EmptyStateVariant","EmptyStateIcon","icon","WrenchIcon","EmptyStateSecondaryActions","withApollo","CreatePolicyForm","systemIds","reset","history","useHistory","stepIdReached","setStepIdReached","resetAnchor","location","hash","push","onClose","steps","enableNext","validateBenchmarkPage","canJumpTo","validateDetailsPage","validateSystemsPage","validateRulesPage","nextButtonText","isFinishedStep","Wizard","isOpen","onNext","onGoToStep","onBack","dispatch","CreatePolicy","DeletePolicy","deleteEnabled","setDeleteEnabled","useLocation","useMutation","DELETE_PROFILE","onCompleted","dispatchAction","addNotification","onError","deletePolicy","C","ModalVariant","actions","input","Checkbox","isChecked","DeleteReport","background","DELETE_REPORT","deleteReport","profileId","isModalOpen","onDelete","policyId","EditPolicyRulesTabEmptyState","EditPolicyRulesTab","values","sortingByProp","parentProfileId","toTabsData","prevSelection","empty","setNewRuleTabs","EditPolicySystemsTab","onSystemSelect","osFilter","newRuleTabs","Alert","isInline","actionLinks","AlertActionLink","EditPolicyForm","setUpdatedPolicy","setSelectedSystems","policyProfiles","setOsMinorVersionCounts","useNewRulesAlertState","newRulesAlert","setNewRulesAlert","handleSystemSelect","useCallback","policyMinorVersions","hasNewOsMinorVersions","reduce","acc","mapCountOsMinorVersions","complianceThresholdValid","thresholdValid","profilesWithOsMinor","defaultTab","Tab","eventKey","TabTitleText","updatedPolicy","MULTIVERSION_QUERY","EditPolicy","route","useParams","policy_id","linkToPolicy","useLinkToPolicy","saveEnabled","updatedPolicyHostsAndRules","useOnSave","isSaving","onSave","spinnerAriaValueText","isLoading","useTitleEntity","minHeight","SystemLink","children","pathname","Name","showOsInfo","hasOsInfo","SSGVersion","ssgVersion","supported","messageVariant","SSGVersions","testResultProfiles","Policies","Truncate","inline","text","FailedRules","rulesFailed","profilesRulesFailed","ComplianceScore","complianceScore","complianceScoreData","NeverScanned","Fragment","color","NEVER","lastScanned","dates","Date","last","Math","max","apply","date","isFinite","LastScanned","lastScannedDate","DateFormat","parse","operatingSystemString","OperatingSystem","system","disableSorting","compileColumnRenderFunc","cell","column","renderExport","customName","SsgVersion","exportKey","SsgVersionCell","PoliciesCell","FailedRulesCell","complianceScoreString","trim","ComplianceScoreCell","LastScannedCell","OperatingSystemCell","OS","original","dataLabel","inventoryColumn","InventoryDetails","registryDecorator","DetailWrapper","onLoad","mergeWithDetail","getRegistry","register","InventoryDetail","fallback","Skeleton","SkeletonSize","hideBack","React","entity","GET_SYSTEMS_OSES","policyFilter","systemsPolicyFilterConfiguration","systemsOsFilterConfiguration","osMinorVersionFilter","systemsOsMinorFilterConfiguration","defaultOnLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","entitiesReducer","ssgVersionFilter","ssgVersions","filterString","groupByMajorVersion","versions","showFilter","showVersion","String","currentValue","major","Set","minor","useOsMinorVersionFilter","fetchArguments","osVersions","renameInventoryAttributes","culledTimestamp","staleWarningTimestamp","staleTimestamp","insightsId","insights_id","culled_timestamp","stale_warning_timestamp","stale_timestamp","useFetchSystems","query","onComplete","client","useApolloClient","perPage","page","requestVariables","fetchResults","e","entities","systemsWithRuleObjectsFailed","meta","tags","totalCount","fetchBatched","fetchFunction","total","batchSize","pages","ceil","Promise","all","_","pageIdx","buildApiFilters","tagFilters","otherFilters","tagsApiFilter","flatMap","tagFilter","tag","encodeURIComponent","tagKey","toIdFilter","ids","SystemsTable","showAllSystems","compliantFilter","showOnlySystemsWithTestResults","showOsFilter","onSelectProp","noSystemsTable","tableProps","dedicatedAction","inventory","useRef","isEmpty","setIsEmpty","isLoaded","setIsLoaded","setItems","setTotal","currentTags","setCurrentTags","useFilterConfig","DEFAULT_SYSTEMS_FILTER_CONFIGURATION","COMPLIANT_SYSTEMS_FILTER_CONFIGURATION","conditionalFilter","toolbarProps","activeFilterValues","systemsFilter","combindedFilter","useSystemsFilter","constructedQuery","constructQuery","systemFetchArguments","fragments","preselected","currentPageIds","systemsCache","fetchSystems","fetchFunc","fetchIds","idFilter","results","cachedOrFetch","selectedIds","cachedSystems","cachedIds","fetchedSystems","onSelectCallback","itemIdsInTable","useBulkSelect","itemIdsOnPage","useSystemBulkSelect","useMemo","bulkSelectTableProps","bulkSelectToolBarProps","activeFilters","useDispatch","payload","debounceResetPage","debounce","resolve","current","onRefreshData","useInventoryUtilities","getEntities","fetchEntities","appendDirection","attributes","attribute","findColumnByKey","_ids","per_page","orderBy","orderDirection","sortableColumn","filterForApi","fetchedEntities","useGetEntities","exportConfig","selectionFilter","exporter","fetchedItems","useExport","onStart","useSystemsExport","noError","InventoryTable","disableDefaultColumns","defaultColumns","isStringCol","defaultColumn","defaultCol","ref","hideFilters","showTags","isStickyHeader","TableVariant","ComplianceRemediationButton","allSystems","_index","beta","window","href","origin","PropTypes","selectRows","rows","row","applyReducerHash"],"sourceRoot":""}