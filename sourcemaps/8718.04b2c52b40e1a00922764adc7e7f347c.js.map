{"version":3,"file":"js/8718.1664785834355.12344fdbd5f7b7ea7fd8.js","mappings":"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","sources":["webpack:///./src/SmartComponents/ComplianceSystems/ComplianceSystems.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeDetailsRow.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeTable.js","webpack:///./src/SmartComponents/CreatePolicy/Components/PolicyTypeTooltip.js","webpack:///./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyProfilesRules.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack:///./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack:///./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack:///./src/SmartComponents/DeletePolicy/DeletePolicy.js","webpack:///./src/SmartComponents/DeleteReport/DeleteReport.js","webpack:///./src/SmartComponents/EditPolicy/constants.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyRulesTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicySystemsTab.js","webpack:///./src/SmartComponents/EditPolicy/components/NewRulesAlert.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyForm.js","webpack:///./src/SmartComponents/EditPolicy/hooks/index.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicy.js","webpack:///./src/SmartComponents/SystemsTable/Cells.js","webpack:///./src/SmartComponents/SystemsTable/Columns.js","webpack:///./src/SmartComponents/InventoryDetails/InventoryDetails.js","webpack:///./src/SmartComponents/SystemsTable/constants.js","webpack:///./src/SmartComponents/SystemsTable/hooks.js","webpack:///./src/SmartComponents/SystemsTable/SystemsTable.js","webpack:///./src/store/Reducers/SystemStore.js"],"sourcesContent":["/* eslint-disable react/display-name */\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { nowrap } from '@patternfly/react-table';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport { SystemsTable } from 'SmartComponents';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst QUERY = gql`\n  {\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n        }\n      }\n    }\n  }\n`;\n\nconst DEFAULT_FILTER = 'has_test_results = true or has_policy = true';\n\nexport const ComplianceSystems = () => {\n  const { data, error, loading } = useQuery(QUERY);\n  const policies = data?.profiles?.edges.map(({ node }) => node);\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"page-header\">\n        <PageHeaderTitle title=\"Compliance systems\" />\n      </PageHeader>\n      <Main>\n        <StateViewWithError stateValues={{ error, data, loading }}>\n          <StateViewPart stateKey=\"data\">\n            {policies && (\n              <SystemsTable\n                columns={[\n                  Columns.customName({\n                    showLink: true,\n                  }),\n                  Columns.inventoryColumn('tags'),\n                  Columns.OS,\n                  Columns.Policies,\n                  Columns.inventoryColumn('updated', {\n                    props: { isStatic: true },\n                    transforms: [nowrap],\n                  }),\n                ]}\n                defaultFilter={DEFAULT_FILTER}\n                systemProps={{\n                  isFullView: true,\n                }}\n                showOsMinorVersionFilter={policies.map(\n                  (policy) => policy.osMajorVersion\n                )}\n                showComplianceSystemsInfo\n                enableEditPolicy={false}\n                remediationsEnabled={false}\n                policies={policies}\n              />\n            )}\n          </StateViewPart>\n        </StateViewWithError>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default ComplianceSystems;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Text } from '@patternfly/react-core';\n\nconst PolicyTypeDetailsRow = ({ item: { description }, key }) => {\n  return (\n    <Text key={key} style={{ margin: 'var(--pf-global--spacer--lg) 0' }}>\n      {description}\n    </Text>\n  );\n};\n\nPolicyTypeDetailsRow.propTypes = {\n  item: propTypes.object,\n  key: propTypes.string,\n};\n\nexport default PolicyTypeDetailsRow;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { fitContent } from '@patternfly/react-table';\nimport { InUseProfileLabel } from 'PresentationalComponents';\nimport { TableToolsTable } from 'Utilities/hooks/useTableTools';\nimport { renderComponent } from 'Utilities/helpers';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport PolicyTypeDetailsRow from './PolicyTypeDetailsRow';\n\nconst NameCell = ({ name, disabled }) => {\n  return (\n    <>\n      {name} {disabled && <InUseProfileLabel compact />}\n    </>\n  );\n};\n\nNameCell.propTypes = {\n  name: propTypes.string,\n  disabled: propTypes.boolean,\n};\n\nconst PolicyTypeTable = ({ profiles, onChange, selectedProfile }) => (\n  <TableToolsTable\n    items={profiles.map((profile) => ({\n      ...profile,\n      rowProps: {\n        selected: profile.id === selectedProfile?.id,\n        disableSelection: profile.disabled,\n      },\n    }))}\n    filters={{\n      filterConfig: [\n        {\n          type: conditionalFilterType.text,\n          label: 'Policy Name',\n          filter: (policyTypes, value) =>\n            policyTypes.filter((policyType) =>\n              policyType?.name.toLowerCase().includes(value.toLowerCase())\n            ),\n        },\n      ],\n    }}\n    columns={[\n      {\n        title: 'Policy name',\n        key: 'name',\n        sortByProp: 'name',\n        renderFunc: renderComponent(NameCell),\n      },\n      {\n        title: 'Supported OS versions',\n        transforms: [fitContent],\n        sortByProp: 'supportedOsVersions',\n        renderFunc: (_data, _id, profile) =>\n          profile.supportedOsVersions.join(', '),\n      },\n    ]}\n    options={{\n      detailsComponent: PolicyTypeDetailsRow,\n      onRadioSelect: (_event, _value, _rowIdx, { itemId }) =>\n        onChange && onChange(profiles.find(({ id }) => id === itemId)),\n      sortBy: {\n        index: 2,\n        direction: 'asc',\n        property: 'name',\n      },\n    }}\n    variant=\"compact\"\n  />\n);\n\nPolicyTypeTable.propTypes = {\n  profiles: propTypes.array,\n  onChange: propTypes.func,\n  selectedProfile: propTypes.string,\n};\n\nexport default PolicyTypeTable;\n","import React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\n\nconst PolicyTypeTooltip = () => (\n  <Tooltip\n    position=\"right\"\n    content=\"Policy types are OpenSCAP policies that are supported by RHEL.\n        For each major version of RHEL, users can create one policy of each type.\"\n  >\n    <OutlinedQuestionCircleIcon className=\"grey-icon\" />\n  </Tooltip>\n);\n\nexport default PolicyTypeTooltip;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  Tile,\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport PolicyTypesTable from './Components/PolicyTypeTable';\nimport PolicyTypeTooltip from './Components/PolicyTypeTooltip';\n\nconst SUPPORTED_PROFILES = gql`\n  query supportedProfilesByOSMajor {\n    osMajorVersions {\n      edges {\n        node {\n          osMajorVersion\n          profiles {\n            id\n            name\n            refId\n            description\n            supportedOsVersions\n            benchmark {\n              id\n              refId\n            }\n          }\n        }\n      }\n    }\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          refId\n          benchmark {\n            refId\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const CreateSCAPPolicy = ({\n  change,\n  selectedProfile,\n  selectedOsMajorVersion,\n}) => {\n  const { data, error, loading } = useQuery(SUPPORTED_PROFILES, {\n    fetchPolicy: 'no-cache',\n  });\n  const isInUse = (profileRefId, benchmarkRedId) =>\n    !!data?.profiles?.edges\n      .map(({ node }) => node)\n      .find(\n        (profile) =>\n          profile.refId === profileRefId &&\n          benchmarkRedId === profile.benchmark.refId\n      );\n  const osMajorVersions = data?.osMajorVersions?.edges.map(({ node }) => node);\n  const selectedOsMajorVersionObject = osMajorVersions?.find(\n    ({ osMajorVersion }) => osMajorVersion === selectedOsMajorVersion\n  );\n  const profilesToSelect = selectedOsMajorVersionObject?.profiles.map(\n    (profile) => ({\n      ...profile,\n      disabled: isInUse(profile.refId, profile.benchmark.refId),\n    })\n  );\n\n  return (\n    <StateViewWithError stateValues={{ error, data, loading }}>\n      <StateViewPart stateKey=\"loading\">\n        <Spinner />\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <TextContent>\n          <Text component={TextVariants.h1} className=\"pf-u-mb-md\">\n            Create SCAP policy\n          </Text>\n          <Text className=\"pf-u-mb-md\">\n            Select the operating system and policy type for this policy.\n          </Text>\n        </TextContent>\n        <Form>\n          <FormGroup label=\"Operating system\" isRequired fieldId=\"benchmark\">\n            {osMajorVersions &&\n              osMajorVersions.map(({ osMajorVersion }) => (\n                <Tile\n                  key={`rhel${osMajorVersion}-select`}\n                  className=\"pf-u-mr-md\"\n                  title={`RHEL ${osMajorVersion}`}\n                  onClick={() => {\n                    change('osMajorVersion', osMajorVersion);\n                  }}\n                  isSelected={selectedOsMajorVersion === osMajorVersion}\n                  isStacked\n                />\n              ))}\n          </FormGroup>\n\n          {selectedOsMajorVersion && (\n            <FormGroup\n              isRequired\n              labelIcon={<PolicyTypeTooltip />}\n              label=\"Policy type\"\n              fieldId=\"policy-type\"\n            >\n              <PolicyTypesTable\n                aria-label=\"PolicyTypeTable\"\n                profiles={profilesToSelect}\n                onChange={(policy) => {\n                  change('profile', policy);\n                  change('benchmark', policy.benchmark.id);\n                  change('selectedRuleRefIds', undefined);\n                  change('systems', []);\n                }}\n                selectedProfile={selectedProfile}\n              />\n            </FormGroup>\n          )}\n        </Form>\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nCreateSCAPPolicy.propTypes = {\n  change: reduxFormPropTypes.change,\n  selectedProfile: propTypes.object,\n  selectedOsMajorVersion: propTypes.string,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    selectedProfile: selector(state, 'profile'),\n    selectedOsMajorVersion: selector(state, 'osMajorVersion'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(CreateSCAPPolicy);\n","import React, { useLayoutEffect } from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  Title,\n  Text,\n  TextContent,\n  TextVariants,\n  EmptyState,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\n\nconst PROFILES_QUERY = gql`\n  query Profiles($filter: String!) {\n    profiles(search: $filter) {\n      edges {\n        node {\n          id\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          benchmark {\n            id\n            latestSupportedOsMinorVersions\n          }\n          rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst BENCHMARKS_QUERY = gql`\n  query Benchmarks($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        profiles {\n          id\n          refId\n          osMajorVersion\n        }\n        version\n      }\n    }\n  }\n`;\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nexport const EditPolicyProfilesRules = ({\n  policy,\n  selectedRuleRefIds,\n  change,\n  osMajorVersion,\n  osMinorVersionCounts,\n}) => {\n  const columns = [Columns.Name, Columns.Severity, Columns.Remediation];\n  const osMinorVersions = osMinorVersionCounts\n    .map((i) => i.osMinorVersion)\n    .sort();\n  const benchmarkSearch =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const {\n    data: benchmarksData,\n    error: benchmarksError,\n    loading: benchmarksLoading,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter: benchmarkSearch,\n    },\n    skip: osMinorVersions.length === 0,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  let tabsData = osMinorVersionCounts.map(\n    ({ osMinorVersion, count: systemCount }) => {\n      osMinorVersion = `${osMinorVersion}`;\n      let profile;\n      if (benchmarks) {\n        const benchmark = getBenchmarkBySupportedOsMinor(\n          benchmarks,\n          osMinorVersion\n        );\n        if (benchmark) {\n          profile = getBenchmarkProfile(benchmark, policy.refId);\n          if (profile) {\n            profile = {\n              ...profile,\n              benchmark,\n            };\n          }\n        }\n      }\n\n      return {\n        profile,\n        systemCount,\n        newOsMinorVersion: osMinorVersion,\n      };\n    }\n  );\n  tabsData = tabsData.filter(({ profile }) => !!profile);\n\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n  const profileIds = Object.keys(profileToOsMinorMap);\n  const filter = profileIds.map((i) => `id = ${i}`).join(' OR ');\n  const skipProfilesQuery = benchmarksLoading || filter.length === 0;\n  const {\n    data: profilesData,\n    error: profilesError,\n    loading: profilesLoading,\n  } = useQuery(PROFILES_QUERY, {\n    variables: {\n      filter,\n    },\n    skip: skipProfilesQuery,\n  });\n  const error = benchmarksError || profilesError;\n  const dataState = profileIds?.length > 0 ? profilesData : undefined;\n  const loadingState = profilesLoading || benchmarksLoading ? true : undefined;\n  const noRuleSets = !error && !loadingState && profileIds?.length === 0;\n  const profiles = skipProfilesQuery\n    ? []\n    : profilesData?.profiles.edges.map((p) => p.node);\n\n  const setSelectedRuleRefIds = (newSelection) => {\n    change('selectedRuleRefIds', newSelection);\n  };\n\n  useLayoutEffect(() => {\n    if (!loadingState) {\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      const newSelection = profilesWithRulesToSelection(\n        profilesWithOs,\n        selectedRuleRefIds,\n        { only: true }\n      );\n      setSelectedRuleRefIds(newSelection);\n    }\n  }, [JSON.stringify(profiles), loadingState]);\n\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-pb-md\">\n        <Text component={TextVariants.h1}>Rules</Text>\n        <Text>\n          Customize your <b>{policy.name}</b> SCAP policy by including and\n          excluding rules.\n        </Text>\n        <Text>\n          Each release of RHEL is supported with a unique and specific version\n          of the SCAP Security Guide (SSG). You must customize each version of\n          SSG for each release of RHEL.\n        </Text>\n      </TextContent>\n\n      <StateViewWithError\n        stateValues={{\n          error,\n          data: dataState,\n          loading: loadingState,\n          noRuleSets,\n        }}\n      >\n        <StateViewPart stateKey=\"noRuleSets\">\n          <EmptyState>\n            <Title headingLevel=\"h1\" size=\"xl\">\n              No rules can be configured\n            </Title>\n            <EmptyStateBody>\n              The policy type selected does not exist for the systems and OS\n              versions selected in the previous steps.\n            </EmptyStateBody>\n          </EmptyState>\n        </StateViewPart>\n        <StateViewPart stateKey=\"loading\">\n          <EmptyTable>\n            <Spinner />\n          </EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n          <TabbedRules\n            tabsData={tabsData}\n            selectedRuleRefIds={selectedRuleRefIds}\n            columns={columns}\n            remediationsEnabled={false}\n            selectedFilter\n            level={1}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            ouiaId=\"RHELVersions\"\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </React.Fragment>\n  );\n};\n\nEditPolicyProfilesRules.propTypes = {\n  policy: propTypes.object,\n  change: reduxFormPropTypes.change,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  selectedRuleRefIds: propTypes.array,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    policy: selector(state, 'profile'),\n    osMajorVersion: selector(state, 'osMajorVersion'),\n    osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n    selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyProfilesRules);\n","import React from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  reduxForm,\n  formValueSelector,\n} from 'redux-form';\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  WizardContextConsumer,\n} from '@patternfly/react-core';\nimport { SystemsTable } from 'SmartComponents';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { countOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n        <br />\n        Policies must be created with at least one system.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Choose a different operating system, or connect{' '}\n        <b>RHEL {osMajorVersion}</b> systems to Insights.\n      </Text>\n    </TextContent>\n    <WizardContextConsumer>\n      {({ goToStepById }) => (\n        <Button onClick={() => goToStepById(1)}>\n          Choose a different operating system\n        </Button>\n      )}\n    </WizardContextConsumer>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n        <br />\n        Systems can be added or removed at any time.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nexport const EditPolicySystems = ({\n  policy,\n  change,\n  osMajorVersion,\n  selectedSystems,\n}) => {\n  const onSystemSelect = (newSelectedSystems) => {\n    change('systems', newSelectedSystems);\n    change('osMinorVersionCounts', countOsMinorVersions(newSelectedSystems));\n  };\n  const osMinorVersions = policy.supportedOsVersions.map(\n    (version) => version.split('.')[1]\n  );\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-mb-md\">\n        <Text component={TextVariants.h1}>Systems</Text>\n      </TextContent>\n      <Form>\n        <FormGroup>\n          <SystemsTable\n            showOsMinorVersionFilter={[osMajorVersion]}\n            prependComponent={\n              <PrependComponent osMajorVersion={osMajorVersion} />\n            }\n            emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n            columns={[\n              {\n                ...Columns.Name,\n                props: {\n                  width: 40,\n                },\n                sortBy: ['name'],\n              },\n              Columns.inventoryColumn('tags'),\n              Columns.OperatingSystem,\n            ]}\n            remediationsEnabled={false}\n            compact\n            showActions={false}\n            defaultFilter={\n              osMajorVersion &&\n              `os_major_version = ${osMajorVersion} AND os_minor_version ^ (${osMinorVersions.join(\n                ','\n              )})`\n            }\n            enableExport={false}\n            preselectedSystems={selectedSystems}\n            onSelect={onSystemSelect}\n          />\n        </FormGroup>\n      </Form>\n    </React.Fragment>\n  );\n};\n\nEditPolicySystems.propTypes = {\n  osMajorVersion: propTypes.string,\n  policy: propTypes.object,\n  selectedSystems: propTypes.array,\n  change: reduxFormPropTypes.change,\n};\n\nEditPolicySystems.defaultProps = {\n  selectedSystems: [],\n};\n\nconst selector = formValueSelector('policyForm');\nconst mapStateToProps = (state) => ({\n  policy: selector(state, 'profile'),\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  selectedSystems: selector(state, 'systems'),\n});\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicySystems);\n","import React, { useEffect } from 'react';\nimport { compose } from 'redux';\nimport {\n  Field,\n  reduxForm,\n  formValueSelector,\n  propTypes as reduxFormPropTypes,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  ReduxFormTextInput,\n  ReduxFormTextArea,\n} from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport {\n  ProfileThresholdField,\n  PolicyBusinessObjectiveTooltip,\n} from 'PresentationalComponents';\n\nexport const EditPolicyDetails = ({ change, policy, refId }) => {\n  useEffect(() => {\n    if (policy && policy.refId !== refId) {\n      change('name', `${policy.name}`);\n      change('refId', `${policy.refId}`);\n      change('description', `${policy.description}`);\n    }\n  }, [policy]);\n\n  return (\n    <React.Fragment>\n      <TextContent>\n        <Text component={TextVariants.h1}>Details</Text>\n      </TextContent>\n      <br />\n      <Form id=\"editpolicydetails\">\n        <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n          <Field\n            component={ReduxFormTextInput}\n            type=\"text\"\n            isRequired={true}\n            id=\"name\"\n            name=\"name\"\n            aria-describedby=\"name\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            isDisabled\n            id=\"refId\"\n            name=\"refId\"\n            aria-describedby=\"refId\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Description\" fieldId=\"description\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextArea}\n            id=\"description\"\n            name=\"description\"\n            aria-describedby=\"description\"\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Business objective\"\n          labelIcon={<PolicyBusinessObjectiveTooltip />}\n          fieldId=\"businessObjective\"\n        >\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            id=\"businessObjective\"\n            name=\"businessObjective\"\n            aria-describedby=\"businessObjective\"\n            defaultValue={policy.businessObjective}\n          />\n        </FormGroup>\n        <ProfileThresholdField previousThreshold={100} />\n      </Form>\n    </React.Fragment>\n  );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n  policy: propTypes.object,\n  refId: propTypes.string,\n  change: reduxFormPropTypes.change,\n};\n\nconst mapStateToProps = (state) => {\n  const policy = selector(state, 'profile');\n  return {\n    policy,\n    refId: selector(state, 'refId'),\n    initialValues: {\n      name: `${policy.name}`,\n      refId: `${policy.refId}`,\n      description: `${policy.description}`,\n      benchmark: selector(state, 'benchmark'),\n      osMajorVersion: selector(state, 'osMajorVersion'),\n      profile: selector(state, 'profile'),\n    },\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyDetails);\n","import React from 'react';\nimport {\n  Text,\n  TextVariants,\n  TextContent,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\n\nconst ReviewCreatedPolicy = ({\n  name,\n  businessObjective,\n  complianceThreshold,\n  parentProfileName,\n  osMinorVersionCounts,\n  osMajorVersion,\n}) => (\n  <TextContent>\n    <Text component={TextVariants.h1}>Review</Text>\n    <Text>Review your SCAP policy before finishing.</Text>\n    <Text component={TextVariants.h3} style={{ marginTop: 0 }}>\n      {name}\n    </Text>\n    <TextList component={TextListVariants.dl}>\n      <TextListItem component={TextListItemVariants.dt}>\n        Policy type\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        {parentProfileName}\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dt}>\n        Compliance threshold\n      </TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        {complianceThreshold}%\n      </TextListItem>\n      {businessObjective && (\n        <React.Fragment>\n          <TextListItem component={TextListItemVariants.dt}>\n            Business objective\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {businessObjective}\n          </TextListItem>\n        </React.Fragment>\n      )}\n      <TextListItem component={TextListItemVariants.dt}>Systems</TextListItem>\n      <TextListItem component={TextListItemVariants.dd}>\n        <TextList component={TextListVariants.dl}>\n          {osMinorVersionCounts.map(({ osMinorVersion, count }) => (\n            <React.Fragment key={osMinorVersion}>\n              <TextListItem\n                component={TextListItemVariants.dt}\n                style={{ fontWeight: 'normal' }}\n              >\n                RHEL {osMajorVersion}.{osMinorVersion}\n              </TextListItem>\n              <TextListItem component={TextListItemVariants.dd}>\n                {count} {count > 1 ? 'systems' : 'system'}\n              </TextListItem>\n            </React.Fragment>\n          ))}\n        </TextList>\n      </TextListItem>\n    </TextList>\n  </TextContent>\n);\n\nReviewCreatedPolicy.propTypes = {\n  benchmarkId: propTypes.string,\n  refId: propTypes.string,\n  name: propTypes.string,\n  businessObjective: propTypes.string,\n  complianceThreshold: propTypes.number,\n  parentProfileName: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  osMajorVersion: propTypes.string.isRequired,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect((state) => ({\n  benchmarkId: selector(state, 'benchmark'),\n  refId: selector(state, 'refId'),\n  name: selector(state, 'name'),\n  businessObjective: selector(state, 'businessObjective'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  complianceThreshold:\n    parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n  parentProfileName: selector(state, 'profile').name,\n  rulesCount: selector(state, 'selectedRuleRefIds').length,\n}))(ReviewCreatedPolicy);\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Title,\n  Button,\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  List,\n  ListItem,\n} from '@patternfly/react-core';\nimport {\n  ProgressBar,\n  LinkWithPermission as Link,\n} from 'PresentationalComponents';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from '@apollo/client/react/hoc';\nimport { usePolicy } from 'Mutations';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nconst EmtpyStateWithErrors = ({ errors }) =>\n  errors && Array.isArray(errors) && errors.length > 0 ? (\n    <EmptyStateBody className=\"wizard-failed-errors\">\n      <List>\n        {errors.map((error) => (\n          <ListItem key={error}>{error}</ListItem>\n        ))}\n      </List>\n    </EmptyStateBody>\n  ) : null;\n\nEmtpyStateWithErrors.propTypes = {\n  errors: propTypes.array,\n};\n\nexport const FinishedCreatePolicy = ({\n  onWizardFinish,\n  cloneFromProfileId,\n  description,\n  name,\n  complianceThreshold,\n  businessObjective,\n  refId,\n  benchmarkId,\n  systems,\n  selectedRuleRefIds,\n}) => {\n  const [percent, setPercent] = useState(0);\n  const [message, setMessage] = useState('This usually takes a minute or two.');\n  const [errors, setErrors] = useState(null);\n  const [failed, setFailed] = useState(false);\n  const updatePolicy = usePolicy();\n\n  const onProgress = (progress) => {\n    setPercent(progress * 100);\n  };\n\n  useEffect(() => {\n    const newPolicy = {\n      cloneFromProfileId,\n      description,\n      name,\n      complianceThreshold,\n      businessObjective: { title: businessObjective },\n      refId,\n      benchmarkId,\n      hosts: systems,\n      selectedRuleRefIds,\n    };\n\n    updatePolicy(null, newPolicy, onProgress)\n      .then(({ id }) => {\n        setPercent(100);\n        setMessage();\n        dispatchNotification({\n          variant: 'success',\n          title: `Created policy \"${name}\"`,\n          autoDismiss: true,\n          description: (\n            <span>\n              From the <strong>SCAP Policies</strong> list, open{' '}\n              <Link to={`/scappolicies/${id}`}>{name}</Link>.\n            </span>\n          ),\n        });\n      })\n      .catch((error) => {\n        setMessage(error.networkError?.message);\n        setErrors(error.networkError?.result?.errors);\n        setFailed(true);\n        dispatchNotification({\n          variant: 'danger',\n          title: 'Error creating policy',\n          description: error.message,\n        });\n      });\n  }, []);\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={WrenchIcon} />\n        <br />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          Creating policy\n        </Title>\n        <EmptyStateBody>\n          <ProgressBar percent={percent} failed={failed} />\n        </EmptyStateBody>\n        <EmptyStateBody className={failed && 'wizard-failed-message'}>\n          {message}\n        </EmptyStateBody>\n        <EmtpyStateWithErrors error={errors} />\n        <EmptyStateSecondaryActions>\n          {(percent === 100 || failed) && (\n            <Button\n              variant={'primary'}\n              ouiaId=\"ReturnToAppButton\"\n              onClick={() => {\n                onWizardFinish();\n              }}\n            >\n              {failed ? 'Back' : 'Return to application'}\n            </Button>\n          )}\n        </EmptyStateSecondaryActions>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nFinishedCreatePolicy.propTypes = {\n  benchmarkId: propTypes.string.isRequired,\n  businessObjective: propTypes.object,\n  cloneFromProfileId: propTypes.string.isRequired,\n  refId: propTypes.string.isRequired,\n  name: propTypes.string.isRequired,\n  description: propTypes.string,\n  systems: propTypes.array,\n  complianceThreshold: propTypes.number,\n  onWizardFinish: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string).isRequired,\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    benchmarkId: selector(state, 'benchmark'),\n    businessObjective: selector(state, 'businessObjective'),\n    cloneFromProfileId: selector(state, 'profile').id,\n    refId: selector(state, 'refId'),\n    name: selector(state, 'name'),\n    description: selector(state, 'description'),\n    complianceThreshold:\n      parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n    systems: selector(state, 'systems'),\n    selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: true,\n    forceUnregisterOnUnmount: true,\n  }),\n  withApollo\n)(FinishedCreatePolicy);\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { formValueSelector, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport { default as EditPolicyRules } from './EditPolicyProfilesRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport {\n  validateBenchmarkPage,\n  validateDetailsPage,\n  validateRulesPage,\n  validateSystemsPage,\n} from './validate';\n\nexport const CreatePolicyForm = ({\n  benchmark,\n  osMajorVersion,\n  complianceThreshold,\n  name,\n  profile,\n  refId,\n  selectedRuleRefIds,\n  systemIds,\n  reset,\n}) => {\n  const history = useHistory();\n  const [stepIdReached, setStepIdReached] = useState(1);\n  const resetAnchor = () => {\n    const { location } = history;\n    if (location.hash) {\n      history.push({ ...location, hash: '' });\n    }\n  };\n\n  const onNext = ({ id }) => {\n    setStepIdReached(stepIdReached < id ? id : stepIdReached);\n    resetAnchor();\n  };\n\n  const onClose = () => {\n    reset();\n    history.push('/scappolicies');\n  };\n\n  const steps = [\n    {\n      id: 1,\n      name: 'Create SCAP policy',\n      component: <CreateSCAPPolicy />,\n      enableNext: validateBenchmarkPage(benchmark, osMajorVersion, profile),\n    },\n    {\n      id: 2,\n      name: 'Details',\n      component: <EditPolicyDetails />,\n      canJumpTo: stepIdReached >= 2,\n      enableNext: validateDetailsPage(name, refId, complianceThreshold),\n    },\n    {\n      id: 3,\n      name: 'Systems',\n      component: <EditPolicySystems />,\n      canJumpTo: stepIdReached >= 3,\n      enableNext: validateSystemsPage(systemIds),\n    },\n    {\n      id: 4,\n      name: 'Rules',\n      component: <EditPolicyRules />,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 4,\n      enableNext: validateRulesPage(selectedRuleRefIds),\n    },\n    {\n      id: 5,\n      name: 'Review',\n      component: <ReviewCreatedPolicy osMajorVersion={osMajorVersion} />,\n      nextButtonText: 'Finish',\n      canJumpTo:\n        validateRulesPage(selectedRuleRefIds) &&\n        systemIds?.length > 0 &&\n        stepIdReached >= 5,\n    },\n    {\n      id: 6,\n      name: 'Finished',\n      component: <FinishedCreatePolicy onWizardFinish={onClose} />,\n      isFinishedStep: true,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 6,\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <Wizard\n        className=\"compliance\"\n        isOpen\n        onNext={onNext}\n        onGoToStep={resetAnchor}\n        onBack={resetAnchor}\n        onClose={onClose}\n        title=\"Create SCAP policy\"\n        description=\"Create a new policy for managing SCAP compliance\"\n        steps={steps}\n      />\n    </React.Fragment>\n  );\n};\n\nCreatePolicyForm.propTypes = {\n  benchmark: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  complianceThreshold: propTypes.string,\n  businessObjective: propTypes.object,\n  dispatch: propTypes.func,\n  isOpen: propTypes.bool,\n  name: propTypes.string,\n  onWizardFinish: propTypes.func,\n  profile: propTypes.string,\n  refId: propTypes.string,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string),\n  systemIds: propTypes.arrayOf(propTypes.string),\n  reset: propTypes.func,\n};\n\nCreatePolicyForm.defaultProps = {\n  isOpen: false,\n};\n\nconst CreatePolicy = reduxForm({\n  form: 'policyForm',\n})(CreatePolicyForm);\n\nconst selector = formValueSelector('policyForm');\nexport default connect((state) => ({\n  benchmark: selector(state, 'benchmark'),\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  businessObjective: selector(state, 'businessObjective'),\n  complianceThreshold: selector(state, 'complianceThreshold') || 100,\n  name: selector(state, 'name'),\n  profile: selector(state, 'profile'),\n  refId: selector(state, 'refId'),\n  selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  systemIds: selector(state, 'systems'),\n}))(CreatePolicy);\n","import { Button, Checkbox, ModalVariant, Text } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { DELETE_PROFILE } from 'Mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ComplianceModal } from 'PresentationalComponents';\nimport { dispatchAction } from 'Utilities/Dispatcher';\n\nconst DeletePolicy = () => {\n  const [deleteEnabled, setDeleteEnabled] = useState(false);\n  const location = useLocation();\n  const history = useHistory();\n  const { name, id } = location.state.policy;\n  const onClose = () => {\n    history.push('/scappolicies');\n  };\n\n  const [deletePolicy] = useMutation(DELETE_PROFILE, {\n    onCompleted: () => {\n      dispatchAction(\n        addNotification({\n          variant: 'success',\n          title: `Deleted \"${name}\" and its associated reports`,\n        })\n      );\n      onClose();\n    },\n    onError: (error) => {\n      dispatchAction(\n        addNotification({\n          variant: 'danger',\n          title: 'Error removing policy',\n          description: error.message,\n        })\n      );\n      onClose();\n    },\n  });\n\n  return (\n    <ComplianceModal\n      variant={ModalVariant.small}\n      title={\n        <React.Fragment>\n          <ExclamationTriangleIcon className=\"ins-u-warning\" />\n          <Text component=\"span\" className=\"policy-delete-header-text\">\n            Delete policy?\n          </Text>\n        </React.Fragment>\n      }\n      ouiaId=\"DeletePolicyModal\"\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"destroy\"\n          ouiaId=\"DeletePolicyButton\"\n          aria-label=\"delete\"\n          isDisabled={!deleteEnabled}\n          variant=\"danger\"\n          onClick={() => deletePolicy({ variables: { input: { id } } })}\n        >\n          Delete policy and associated reports\n        </Button>,\n        <Button\n          key=\"cancel\"\n          ouiaId=\"DeletePolicyCancelButton\"\n          variant=\"secondary\"\n          onClick={onClose}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <Text className=\"policy-delete-body-text\">\n        Deleting the policy <b>{name}</b> will also delete its associated\n        reports.\n      </Text>\n      <Checkbox\n        label=\"I understand this will delete the policy and all associated reports\"\n        id={`deleting-policy-check-${id}`}\n        isChecked={deleteEnabled}\n        onChange={setDeleteEnabled}\n      />\n    </ComplianceModal>\n  );\n};\n\nDeletePolicy.propTypes = {\n  policy: propTypes.object,\n};\n\nexport default DeletePolicy;\n","import { Button, ModalVariant, TextContent } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { DELETE_REPORT } from 'Mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ComplianceModal } from 'PresentationalComponents';\nimport { dispatchAction } from 'Utilities/Dispatcher';\n\nconst DeleteReport = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const { id } = location.state?.profile;\n  const onClose = () => {\n    history.push(location.state.background);\n  };\n\n  const onDelete = () => {\n    history.push('/reports');\n  };\n\n  const [deleteReport] = useMutation(DELETE_REPORT, {\n    onCompleted: () => {\n      dispatchAction(\n        addNotification({\n          variant: 'success',\n          title: 'Report deleted',\n          description:\n            'Systems associated with this policy will upload reports on the next check-in.',\n        })\n      );\n      onDelete();\n    },\n    onError: (error) => {\n      dispatchAction(\n        addNotification({\n          variant: 'danger',\n          title: 'Error removing report',\n          description: error.message,\n        })\n      );\n      onClose();\n    },\n  });\n  return (\n    <ComplianceModal\n      isOpen\n      variant={ModalVariant.small}\n      title=\"Delete report\"\n      ouiaId=\"DeleteReportModal\"\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"destroy\"\n          ouiaId=\"DeleteReportButton\"\n          aria-label=\"delete\"\n          variant=\"danger\"\n          onClick={() =>\n            deleteReport({\n              variables: {\n                input: {\n                  profileId: id,\n                },\n              },\n            })\n          }\n        >\n          Delete report\n        </Button>,\n        <Button\n          key=\"cancel\"\n          ouiaId=\"DeleteReportCancelButton\"\n          variant=\"secondary\"\n          onClick={() => onClose()}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        Deleting a report is permanent and cannot be undone.\n      </TextContent>\n    </ComplianceModal>\n  );\n};\n\nDeleteReport.propTypes = {\n  onClose: propTypes.func,\n  isModalOpen: propTypes.bool,\n  onDelete: propTypes.func,\n  policyId: propTypes.string,\n};\n\nDeleteReport.defaultProps = {\n  onDelete: () => {},\n  onClose: () => {},\n};\n\nexport default DeleteReport;\n","import gql from 'graphql-tag';\n\nexport const PROFILES_QUERY = gql`\n  query Profiles($filter: String!) {\n    profiles(search: $filter) {\n      edges {\n        node {\n          id\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          policy {\n            id\n          }\n          policyType\n          benchmark {\n            id\n            refId\n            latestSupportedOsMinorVersions\n            osMajorVersion\n            version\n          }\n          rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const BENCHMARKS_QUERY = gql`\n  query Benchmarks($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        profiles {\n          id\n          refId\n          ssgVersion\n        }\n      }\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  Text,\n  TextContent,\n  Title,\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport { sortingByProp } from 'Utilities/helpers';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\nimport { BENCHMARKS_QUERY } from './constants';\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst EditPolicyRulesTabEmptyState = () => (\n  <EmptyState>\n    <Title headingLevel=\"h5\" size=\"lg\">\n      No rules can be configured\n    </Title>\n    <EmptyStateBody>\n      This policy has no associated systems, and therefore no rules can be\n      configured.\n    </EmptyStateBody>\n    <EmptyStateBody>\n      Add at least one system to configure rules for this policy.\n    </EmptyStateBody>\n  </EmptyState>\n);\n\nexport const toTabsData = (policy, osMinorVersionCounts, benchmarks) =>\n  Object.values(osMinorVersionCounts)\n    .sort(sortingByProp('osMinorVersion', 'desc'))\n    .map(({ osMinorVersion, count: systemCount }) => {\n      osMinorVersion = `${osMinorVersion}`;\n      let profile = policy.policy.profiles.find(\n        (profile) => profile.osMinorVersion === osMinorVersion\n      );\n      let osMajorVersion = policy.osMajorVersion;\n\n      if (!profile && benchmarks) {\n        const benchmark = getBenchmarkBySupportedOsMinor(\n          benchmarks,\n          osMinorVersion\n        );\n        if (benchmark) {\n          const benchmarkProfile = getBenchmarkProfile(benchmark, policy.refId);\n          if (benchmarkProfile) {\n            profile = policy.policy.profiles.find(\n              (profile) =>\n                profile.parentProfileId === benchmarkProfile.id &&\n                profile.osMinorVersion === osMinorVersion\n            );\n\n            profile = {\n              ...benchmarkProfile,\n              benchmark,\n              osMajorVersion,\n              ...profile,\n            };\n          }\n        }\n      }\n\n      return {\n        profile,\n        systemCount,\n        newOsMinorVersion: osMinorVersion,\n      };\n    })\n    .filter(({ profile, newOsMinorVersion }) => !!profile && newOsMinorVersion);\n\nexport const EditPolicyRulesTab = ({\n  policy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  osMinorVersionCounts,\n}) => {\n  const osMajorVersion = policy?.osMajorVersion;\n  const osMinorVersions = Object.keys(osMinorVersionCounts).sort();\n  const benchmarkSearch =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const {\n    data: benchmarksData,\n    error,\n    loading,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter: benchmarkSearch,\n    },\n    skip: osMinorVersions.length === 0,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  const tabsData = toTabsData(policy, osMinorVersionCounts, benchmarks);\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n\n  const dataState = !loading && tabsData?.length > 0 ? tabsData : undefined;\n\n  useEffect(() => {\n    if (policy.policy.profiles) {\n      const profiles = policy.policy.profiles;\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      setSelectedRuleRefIds((prevSelection) => {\n        const newSelection = profilesWithRulesToSelection(\n          profilesWithOs,\n          prevSelection\n        );\n        return newSelection;\n      });\n    }\n  }, [policy.policy.profiles]);\n\n  return (\n    <StateViewWithError\n      stateValues={{\n        error,\n        data: !error && dataState,\n        loading,\n        empty: !loading && !dataState && !error,\n      }}\n    >\n      <StateViewPart stateKey=\"loading\">\n        <EmptyTable>\n          <Spinner />\n        </EmptyTable>\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <TextContent>\n          <Text>\n            Different release versions of RHEL are associated with different\n            versions of the SCAP Security Guide (SSG), therefore each release\n            must be customized independently.\n          </Text>\n        </TextContent>\n        <TabbedRules\n          columns={[Columns.Name, Columns.Severity, Columns.Remediation]}\n          tabsData={tabsData}\n          selectedRuleRefIds={selectedRuleRefIds}\n          setSelectedRuleRefIds={setSelectedRuleRefIds}\n          remediationsEnabled={false}\n          selectedFilter\n          level={1}\n          ouiaId=\"RHELVersions\"\n        />\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">\n        <EditPolicyRulesTabEmptyState />\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nEditPolicyRulesTab.propTypes = {\n  setNewRuleTabs: propTypes.func,\n  policy: propTypes.object,\n  osMinorVersionCounts: propTypes.shape({\n    osMinorVersion: propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    }),\n  }),\n  selectedRuleRefIds: propTypes.array,\n  setSelectedRuleRefIds: propTypes.func,\n};\n\nexport default EditPolicyRulesTab;\n","import React from 'react';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { SystemsTable } from 'SmartComponents';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>Connect RHEL {osMajorVersion} systems to Insights.</Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst EditPolicySystemsTab = ({ policy, onSystemSelect, selectedSystems }) => {\n  const { id: policyId, osMajorVersion, supportedOsVersions } = policy;\n  const osMinorVersions = supportedOsVersions.map(\n    (version) => version.split('.')[1]\n  );\n  const osFilter =\n    osMajorVersion &&\n    `os_major_version = ${osMajorVersion} AND os_minor_version ^ (${osMinorVersions.join(\n      ','\n    )})`;\n  const defaultFilter = osFilter\n    ? `${osFilter} or policy_id = ${policyId}`\n    : `policy_id = ${policyId}`;\n\n  return (\n    <React.Fragment>\n      <SystemsTable\n        columns={[\n          Columns.Name,\n          Columns.inventoryColumn('tags'),\n          Columns.OperatingSystem,\n        ]}\n        showOsMinorVersionFilter={[osMajorVersion]}\n        prependComponent={<PrependComponent osMajorVersion={osMajorVersion} />}\n        emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n        compact\n        showActions={false}\n        defaultFilter={defaultFilter}\n        enableExport={false}\n        remediationsEnabled={false}\n        preselectedSystems={selectedSystems}\n        onSelect={onSystemSelect}\n      />\n    </React.Fragment>\n  );\n};\n\nEditPolicySystemsTab.propTypes = {\n  policy: propTypes.object,\n  newRuleTabs: propTypes.bool,\n  onSystemSelect: propTypes.func,\n  selectedSystems: propTypes.array,\n};\n\nexport default EditPolicySystemsTab;\n","import React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { Alert, AlertActionLink } from '@patternfly/react-core';\n\nconst NewRulesAlert = () => {\n  const history = useHistory();\n  const location = useLocation();\n\n  return (\n    <Alert\n      variant=\"info\"\n      isInline\n      title=\"You selected a system that has a release version previously not included in this policy.\"\n      actionLinks={\n        <AlertActionLink\n          onClick={() => history.push({ ...location, hash: '#rules' })}\n        >\n          Open rule editing\n        </AlertActionLink>\n      }\n    >\n      <p>\n        If you have edited any rules for this policy, you will need to do so for\n        this release version as well.\n      </p>\n    </Alert>\n  );\n};\n\nexport default NewRulesAlert;\n","import React, { useCallback, useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { Form, Tab, TabTitleText } from '@patternfly/react-core';\nimport { RoutedTabs } from 'PresentationalComponents';\nimport EditPolicyRulesTab from './EditPolicyRulesTab';\nimport EditPolicySystemsTab from './EditPolicySystemsTab';\nimport NewRulesAlert from './components/NewRulesAlert';\nimport { mapCountOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport { profilesWithRulesToSelection } from 'PresentationalComponents/TabbedRules';\nimport { thresholdValid } from '../CreatePolicy/validate';\nimport { useNewRulesAlertState } from './hooks/index';\n\nconst profilesToOsMinorMap = (profiles, hosts) =>\n  (profiles || []).reduce((acc, profile) => {\n    if (profile.osMinorVersion !== '') {\n      acc[profile.osMinorVersion] ||= {\n        osMinorVersion: profile.osMinorVersion,\n        count: 0,\n      };\n    }\n\n    return acc;\n  }, mapCountOsMinorVersions(hosts || []));\n\nconst EditPolicyForm = ({\n  policy,\n  setUpdatedPolicy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  selectedSystems,\n  setSelectedSystems,\n}) => {\n  const policyProfiles = policy?.policy?.profiles || [];\n  const [osMinorVersionCounts, setOsMinorVersionCounts] = useState({});\n  const [newRulesAlert, setNewRulesAlert] = useNewRulesAlertState(false);\n\n  const handleSystemSelect = useCallback(\n    (newSelectedSystems) => {\n      const policyMinorVersions = policy.hosts.map(\n        ({ osMinorVersion }) => osMinorVersion\n      );\n      const hasNewOsMinorVersions =\n        newSelectedSystems.filter(\n          ({ osMinorVersion }) => !policyMinorVersions.includes(osMinorVersion)\n        ).length > 0;\n\n      setSelectedSystems(newSelectedSystems);\n      setNewRulesAlert(hasNewOsMinorVersions);\n      setOsMinorVersionCounts(\n        profilesToOsMinorMap(policyProfiles, newSelectedSystems)\n      );\n    },\n    [policyProfiles, selectedRuleRefIds]\n  );\n\n  useEffect(() => {\n    if (policy) {\n      const complianceThresholdValid = thresholdValid(\n        policy.complianceThreshold\n      );\n      const profilesWithOsMinor = policyProfiles.filter(\n        ({ osMinorVersion }) => !!osMinorVersion\n      );\n      setUpdatedPolicy({\n        ...policy,\n        complianceThresholdValid,\n      });\n\n      setSelectedRuleRefIds(profilesWithRulesToSelection(profilesWithOsMinor));\n      handleSystemSelect(policy.hosts);\n    }\n  }, [policy]);\n\n  return (\n    <Form>\n      <RoutedTabs ouiaId=\"EditSystems\" defaultTab=\"systems\" id=\"policy-tabs\">\n        <Tab\n          eventKey=\"rules\"\n          ouiaId=\"Rules\"\n          title={<TabTitleText>Rules</TabTitleText>}\n        >\n          <EditPolicyRulesTab\n            policy={policy}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            selectedRuleRefIds={selectedRuleRefIds}\n            osMinorVersionCounts={osMinorVersionCounts}\n          />\n        </Tab>\n        <Tab\n          eventKey=\"systems\"\n          ouiaId=\"Systems\"\n          title={<TabTitleText>Systems</TabTitleText>}\n        >\n          <EditPolicySystemsTab\n            policy={policy}\n            selectedSystems={selectedSystems}\n            onSystemSelect={handleSystemSelect}\n          />\n          {newRulesAlert && <NewRulesAlert />}\n        </Tab>\n      </RoutedTabs>\n    </Form>\n  );\n};\n\nEditPolicyForm.propTypes = {\n  policy: propTypes.object,\n  updatedPolicy: propTypes.object,\n  setUpdatedPolicy: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.object),\n  setSelectedRuleRefIds: propTypes.func,\n  setSelectedSystems: propTypes.func,\n  selectedSystems: propTypes.array,\n};\n\nexport default EditPolicyForm;\n","import { useState } from 'react';\n\nexport const useNewRulesAlertState = (...args) => useState(...args);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Button, Spinner } from '@patternfly/react-core';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport {\n  ComplianceModal,\n  StateViewWithError,\n  StateViewPart,\n} from 'PresentationalComponents';\nimport EditPolicyForm from './EditPolicyForm';\nimport { useOnSave, useLinkToPolicy } from './hooks';\n\nexport const MULTIVERSION_QUERY = gql`\n  query Profile($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      external\n      description\n      totalHostCount\n      compliantHostCount\n      complianceThreshold\n      osMajorVersion\n      supportedOsVersions\n      lastScanned\n      policyType\n      policy {\n        id\n        name\n        refId\n        profiles {\n          id\n          parentProfileId\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          benchmark {\n            id\n            title\n            latestSupportedOsMinorVersions\n            osMajorVersion\n            version\n          }\n          rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n        }\n      }\n      businessObjective {\n        id\n        title\n      }\n      hosts {\n        id\n        osMinorVersion\n        osMajorVersion\n      }\n    }\n  }\n`;\n\nexport const EditPolicy = ({ route }) => {\n  const { policy_id: policyId } = useParams();\n  const { data, loading, error } = useQuery(MULTIVERSION_QUERY, {\n    variables: { policyId },\n  });\n  const policy = data?.profile;\n  const linkToPolicy = useLinkToPolicy();\n  const [updatedPolicy, setUpdatedPolicy] = useState(null);\n  const [selectedRuleRefIds, setSelectedRuleRefIds] = useState([]);\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const saveEnabled = updatedPolicy && !updatedPolicy.complianceThresholdValid;\n  const updatedPolicyHostsAndRules = {\n    ...updatedPolicy,\n    selectedRuleRefIds,\n    hosts: selectedSystems,\n  };\n  const [isSaving, onSave] = useOnSave(policy, updatedPolicyHostsAndRules);\n\n  const actions = [\n    <Button\n      isDisabled={saveEnabled}\n      key=\"save\"\n      ouiaId=\"EditPolicySaveButton\"\n      variant=\"primary\"\n      spinnerAriaValueText=\"Saving\"\n      isLoading={isSaving}\n      onClick={onSave}\n    >\n      Save\n    </Button>,\n    <Button\n      key=\"cancel\"\n      ouiaId=\"EditPolicyCancelButton\"\n      variant=\"link\"\n      onClick={() => linkToPolicy()}\n    >\n      Cancel\n    </Button>,\n  ];\n\n  useTitleEntity(route, policy?.name);\n\n  return (\n    <ComplianceModal\n      isOpen\n      position={'top'}\n      style={{ minHeight: '350px' }}\n      variant={'large'}\n      ouiaId=\"EditPolicyModal\"\n      title={`Edit ${policy ? policy.name : ''}`}\n      onClose={() => linkToPolicy()}\n      actions={actions}\n    >\n      <StateViewWithError stateValues={{ policy, loading, error }}>\n        <StateViewPart stateKey=\"loading\">\n          <Spinner />\n        </StateViewPart>\n        <StateViewPart stateKey=\"policy\">\n          <EditPolicyForm\n            {...{\n              policy,\n              updatedPolicy,\n              setUpdatedPolicy,\n              selectedRuleRefIds,\n              setSelectedRuleRefIds,\n              selectedSystems,\n              setSelectedSystems,\n            }}\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </ComplianceModal>\n  );\n};\n\nEditPolicy.propTypes = {\n  route: propTypes.object,\n};\n\nexport default EditPolicy;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Text,\n  TextContent,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\n\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Truncate from '@redhat-cloud-services/frontend-components/Truncate';\nimport {\n  UnsupportedSSGVersion,\n  ComplianceScore as complianceScore,\n  LinkWithPermission as Link,\n} from 'PresentationalComponents';\nimport {\n  profilesRulesFailed,\n  complianceScoreData,\n  NEVER,\n} from 'Utilities/ruleHelpers';\n\nconst SystemLink = ({ id, children }) => (\n  <Link to={{ pathname: `/systems/${id}` }}>{children}</Link>\n);\n\nSystemLink.propTypes = {\n  id: propTypes.string,\n  children: propTypes.node,\n};\n\nexport const Name = ({\n  id,\n  name,\n  osMajorVersion,\n  osMinorVersion,\n  showOsInfo = false,\n  showLink = false,\n}) => {\n  const hasOsInfo = (osMajorVersion, osMinorVersion) =>\n    !!osMajorVersion && !!osMinorVersion && showOsInfo;\n\n  return (\n    <TextContent>\n      {showLink ? <SystemLink {...{ id }}>{name}</SystemLink> : name}\n\n      {hasOsInfo(osMajorVersion, osMinorVersion) && (\n        <Text component={TextVariants.small}>\n          RHEL {osMajorVersion}.{osMinorVersion}\n        </Text>\n      )}\n    </TextContent>\n  );\n};\n\nName.propTypes = {\n  id: propTypes.string,\n  name: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersion: propTypes.string,\n  showOsInfo: propTypes.bool,\n  showLink: propTypes.bool,\n};\n\nexport const profilesSsgVersions = (profiles) =>\n  profiles\n    .map((p) => p.ssgVersion)\n    .filter((version) => !!version)\n    .join(', ');\n\nexport const SSGVersion = ({ ssgVersion = 'Not available', supported }) =>\n  supported ? (\n    ssgVersion\n  ) : (\n    <UnsupportedSSGVersion messageVariant=\"singular\">\n      {ssgVersion}\n    </UnsupportedSSGVersion>\n  );\n\nSSGVersion.propTypes = {\n  supported: propTypes.bool,\n  ssgVersion: propTypes.string,\n};\n\nexport const SSGVersions = ({ testResultProfiles = [] }) =>\n  testResultProfiles.length !== 0\n    ? testResultProfiles.map((profile) => (\n        <SSGVersion\n          key={`ssgversion-${profile.id}`}\n          ssgVersion={profile?.benchmark?.version}\n          supported={profile?.supported}\n        />\n      ))\n    : 'Unknown';\n\nSSGVersions.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const Policies = ({ policies }) =>\n  (policies || []).length > 0 && (\n    <Truncate\n      inline\n      text={policies.map((p) => p.name).join(', ')}\n      length={215}\n    />\n  );\n\nPolicies.propTypes = {\n  policies: propTypes.array,\n};\n\nexport const FailedRules = ({ id, testResultProfiles }) => {\n  const rulesFailed = profilesRulesFailed(testResultProfiles).length;\n  return (\n    <SystemLink {...{ id }}>\n      {testResultProfiles.length > 0 ? rulesFailed : 'N/A'}\n    </SystemLink>\n  );\n};\n\nFailedRules.propTypes = {\n  id: propTypes.string,\n  testResultProfiles: propTypes.array,\n};\n\nexport { complianceScoreData };\nexport const ComplianceScore = ({ testResultProfiles }) =>\n  testResultProfiles.length > 0\n    ? complianceScore(complianceScoreData(testResultProfiles))\n    : 'N/A';\n\nComplianceScore.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nconst NeverScanned = () => (\n  <Tooltip\n    position=\"right\"\n    content={\n      <Fragment>\n        This system has never returned a report for this policy. This may be\n        because it is disconnected, or the insights-client on this system is not\n        configured to use Compliance.\n      </Fragment>\n    }\n  >\n    <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n    {' ' + NEVER}\n  </Tooltip>\n);\n\nexport const lastScanned = (profiles) => {\n  const dates = profiles.map((profile) => new Date(profile.lastScanned));\n  const last = new Date(\n    Math.max.apply(\n      null,\n      dates.filter((date) => isFinite(date))\n    )\n  );\n  const result =\n    last instanceof Date && isFinite(last) ? last : <NeverScanned />;\n\n  return result;\n};\n\nexport const LastScanned = ({ testResultProfiles: profiles }) => {\n  const lastScannedDate = lastScanned(profiles || []);\n\n  return lastScannedDate instanceof Date ? (\n    <DateFormat date={Date.parse(lastScannedDate)} type=\"relative\" />\n  ) : (\n    lastScannedDate\n  );\n};\n\nLastScanned.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const operatingSystemString = ({ osMinorVersion, osMajorVersion }) =>\n  `RHEL ${osMajorVersion}.${osMinorVersion}`;\n\nexport const OperatingSystem = (system) => operatingSystemString(system);\n","import React from 'react';\nimport { nowrap } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport { complianceScoreString } from 'PresentationalComponents';\nimport { profilesRulesFailed } from 'Utilities/ruleHelpers';\nimport { renderComponent } from 'Utilities/helpers';\n\nimport {\n  Name as NameCell,\n  ComplianceScore as ComplianceScoreCell,\n  FailedRules as FailedRulesCell,\n  LastScanned as LastScannedCell,\n  Policies as PoliciesCell,\n  SSGVersions as SsgVersionCell,\n  complianceScoreData,\n  lastScanned,\n  operatingSystemString,\n  OperatingSystem as OperatingSystemCell,\n} from './Cells';\n\nconst disableSorting = { isStatic: true };\n\nexport const compileColumnRenderFunc = ({ cell, ...column }) => ({\n  ...column,\n  renderFunc: renderComponent(cell, column.props),\n});\n\nexport const customColumn = (column, props) =>\n  compileColumnRenderFunc({\n    ...column,\n    props: {\n      ...column.props,\n      ...props,\n    },\n  });\n\nexport const Name = compileColumnRenderFunc({\n  key: 'name',\n  title: 'Name',\n  sortBy: ['name'],\n  props: {\n    width: 40,\n  },\n  renderExport: (system) => `${system.name} (${operatingSystemString(system)})`,\n  cell: NameCell,\n});\n\nexport const customName = (props) => ({\n  ...Name,\n  props: {\n    ...Name.props,\n    ...props,\n  },\n  renderFunc: renderComponent(NameCell, props),\n});\n\nexport const SsgVersion = {\n  title: 'SSG version',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  sortBy: ['ssg_version'],\n  key: 'ssg_version',\n  renderExport: (testResultProfiles) =>\n    testResultProfiles\n      .map(\n        ({ supported, benchmark: { version } }) =>\n          `${!supported ? '!' : ''}${version}`\n      )\n      .join(', '),\n  renderFunc: renderComponent(SsgVersionCell),\n};\n\nexport const Policies = {\n  title: 'Policies',\n  transforms: [nowrap],\n  key: 'policies',\n  exportKey: 'policies',\n  renderExport: (policies) => policies.map(({ name }) => name).join(', '),\n  props: {\n    width: 40,\n    ...disableSorting,\n  },\n  renderFunc: renderComponent(PoliciesCell),\n};\n\nexport const FailedRules = {\n  title: 'Failed rules',\n  key: 'failedRules',\n  exportKey: 'testResultProfiles',\n  transforms: [nowrap],\n  props: {\n    width: 5,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) =>\n    profilesRulesFailed(testResultProfiles).length,\n  renderFunc: renderComponent(FailedRulesCell),\n};\n\nexport const ComplianceScore = {\n  title: 'Compliance score',\n  key: 'complianceScore',\n  exportKey: 'testResultProfiles',\n  transforms: [nowrap],\n  props: {\n    width: 5,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) =>\n    complianceScoreString(complianceScoreData(testResultProfiles)).trim(),\n  renderFunc: renderComponent(ComplianceScoreCell),\n};\n\nexport const LastScanned = {\n  title: 'Last scanned',\n  key: 'lastScanned',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  props: {\n    width: 10,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) => lastScanned(testResultProfiles),\n  renderFunc: renderComponent(LastScannedCell),\n};\n\nexport const OperatingSystem = compileColumnRenderFunc({\n  title: 'Operating system',\n  key: 'operatingSystem',\n  sortBy: ['osMajorVersion', 'osMinorVersion'],\n  transforms: [nowrap],\n  renderExport: (cell) => operatingSystemString(cell),\n  cell: OperatingSystemCell,\n});\n\nexport const OS = compileColumnRenderFunc({\n  title: (\n    <Tooltip content={<span>Operating System</span>}>\n      <span>OS</span>\n    </Tooltip>\n  ),\n  original: 'Operating System',\n  key: 'operatingSystem',\n  dataLabel: 'OS',\n  transforms: [nowrap],\n  sortBy: ['osMajorVersion', 'osMinorVersion'],\n  props: {\n    width: 10,\n  },\n  renderExport: (cell) => operatingSystemString(cell),\n  cell: OperatingSystemCell,\n});\n\nexport const inventoryColumn = (column, props) => ({\n  key: column,\n  ...props,\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Skeleton, {\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { registryDecorator } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport {\n  InventoryDetail,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\n\n@registryDecorator()\nclass InventoryDetails extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <DetailWrapper\n        onLoad={({ mergeWithDetail }) =>\n          this.getRegistry().register({\n            ...mergeWithDetail(),\n          })\n        }\n      >\n        <InventoryDetail\n          fallback={<Skeleton size={SkeletonSize.md} />}\n          hideBack\n        />\n      </DetailWrapper>\n    );\n  }\n}\n\nInventoryDetails.propTypes = {\n  entity: propTypes.object,\n};\n\nconst ConnectedInventoryDetails = (props) => {\n  return <InventoryDetails {...props} />;\n};\n\nexport default ConnectedInventoryDetails;\n","import gql from 'graphql-tag';\nimport pickBy from 'lodash/pickBy';\nimport {\n  systemsPolicyFilterConfiguration,\n  systemsOsFilterConfiguration,\n  systemsOsMinorFilterConfiguration,\n} from '@/constants';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { entitiesReducer } from 'Store/Reducers/SystemStore';\n\nexport const GET_MINIMAL_SYSTEMS = gql`\n  query getSystems(\n    $filter: String!\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n          osMinorVersion\n          culledTimestamp\n          staleWarningTimestamp\n          staleTimestamp\n          insightsId\n          lastScanned\n          updated\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_SYSTEMS_OSES = gql`\n  query getSystems($filter: String!) {\n    systems(search: $filter) {\n      osVersions\n    }\n  }\n`;\n\nexport const policyFilter = (policies, osFilter) => [\n  ...systemsPolicyFilterConfiguration(policies),\n  ...(osFilter ? systemsOsFilterConfiguration(policies) : []),\n];\n\nexport const osMinorVersionFilter = (...args) =>\n  systemsOsMinorFilterConfiguration(...args);\n\nexport const initFilterState = (filterConfig) =>\n  pickBy(filterConfig.initialDefaultState(), (value) => !!value);\n\nexport const defaultOnLoad =\n  (columns) =>\n  ({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n    getRegistry().register({\n      ...mergeWithEntities(entitiesReducer(INVENTORY_ACTION_TYPES, columns)),\n    });\n\nexport const ssgVersionFilter = (ssgVersions) => [\n  {\n    type: conditionalFilterType.checkbox,\n    label: 'SSG Version',\n    filterString: (value) => `ssg_version = ${value}`,\n    items: ssgVersions.map((ssgVersion) => ({\n      label: ssgVersion,\n      value: ssgVersion,\n    })),\n  },\n];\n","import { useEffect, useLayoutEffect, useState } from 'react';\nimport { useApolloClient, useQuery } from '@apollo/client';\nimport { useDispatch } from 'react-redux';\nimport debounce from '@redhat-cloud-services/frontend-components-utilities/debounce';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport { osMinorVersionFilter, GET_SYSTEMS_OSES } from './constants';\nimport useExport from 'Utilities/hooks/useTableTools/useExport';\nimport { useBulkSelect } from 'Utilities/hooks/useTableTools/useBulkSelect';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nconst groupByMajorVersion = (versions = [], showFilter = []) => {\n  const showVersion = (version) => {\n    if (showFilter.length > 0) {\n      return showFilter.map(String).includes(String(version));\n    } else {\n      return true;\n    }\n  };\n\n  return versions.reduce((acc, currentValue) => {\n    if (showVersion(currentValue.major)) {\n      acc[String(currentValue.major)] = [\n        ...new Set([...(acc[currentValue.major] || []), currentValue.minor]),\n      ];\n    }\n\n    return acc;\n  }, []);\n};\n\nexport const useOsMinorVersionFilter = (showFilter, fetchArguments = {}) => {\n  let { data } = useQuery(GET_SYSTEMS_OSES, {\n    skip: !showFilter,\n    ...fetchArguments,\n  });\n  const { osVersions } = data?.systems || {};\n\n  return showFilter\n    ? osMinorVersionFilter(groupByMajorVersion(osVersions, showFilter))\n    : [];\n};\n\nexport const useSystemsFilter = (\n  filterString,\n  showOnlySystemsWithTestResults,\n  defaultFilter\n) => {\n  const combindedFilter = [\n    ...(showOnlySystemsWithTestResults ? ['has_test_results = true'] : []),\n    ...(filterString?.length > 0 ? [filterString] : []),\n  ].join(' and ');\n  const filter = defaultFilter\n    ? `(${defaultFilter})` +\n      (combindedFilter ? ` and (${combindedFilter})` : '')\n    : combindedFilter;\n\n  return filter;\n};\n\nconst renameInventoryAttributes = ({\n  culledTimestamp,\n  staleWarningTimestamp,\n  staleTimestamp,\n  insightsId,\n  ...system\n}) => ({\n  ...system,\n  insights_id: insightsId,\n  culled_timestamp: culledTimestamp,\n  stale_warning_timestamp: staleWarningTimestamp,\n  stale_timestamp: staleTimestamp,\n});\n\nexport const useFetchSystems = ({\n  query,\n  onComplete,\n  variables = {},\n  onError,\n}) => {\n  const client = useApolloClient();\n\n  return (perPage, page, requestVariables = {}) =>\n    client\n      .query({\n        query,\n        fetchResults: true,\n        fetchPolicy: 'no-cache',\n        variables: {\n          perPage,\n          page,\n          ...variables,\n          ...requestVariables,\n        },\n      })\n      .then(({ data }) => {\n        const systems = data?.systems?.edges?.map((e) => e.node) || [];\n        const entities = systemsWithRuleObjectsFailed(systems).map(\n          renameInventoryAttributes\n        );\n        const result = {\n          entities,\n          meta: {\n            ...(requestVariables.tags && { tags: requestVariables.tags }),\n            totalCount: data?.systems?.totalCount || 0,\n          },\n        };\n\n        onComplete && onComplete(result);\n        return result;\n      })\n      .catch((error) => {\n        if (onError) {\n          onError(error);\n          return { entities: [], meta: { totalCount: 0 } };\n        } else {\n          throw error;\n        }\n      });\n};\n\nconst fetchBatched = (fetchFunction, total, filter, batchSize = 50) => {\n  const pages = Math.ceil(total / batchSize) || 1;\n  return Promise.all(\n    [...new Array(pages)].map((_, pageIdx) =>\n      fetchFunction(batchSize, pageIdx + 1, filter)\n    )\n  );\n};\n\nconst buildApiFilters = (filters = {}) => {\n  const { tagFilters, ...otherFilters } = filters;\n  const tagsApiFilter = tagFilters\n    ? {\n        tags: tagFilters.flatMap((tagFilter) =>\n          tagFilter.values.map(\n            (tag) =>\n              `${encodeURIComponent(tagFilter.key)}/${encodeURIComponent(\n                tag.tagKey\n              )}=${encodeURIComponent(tag.value)}`\n          )\n        ),\n      }\n    : {};\n\n  return {\n    ...otherFilters,\n    ...tagsApiFilter,\n  };\n};\n\nexport const useGetEntities = (fetchEntities, { selected, columns } = {}) => {\n  const appendDirection = (attributes, direction) =>\n    attributes.map((attribute) => `${attribute}:${direction}`);\n\n  const findColumnByKey = (key) =>\n    (columns || []).find((column) => column.key === key);\n\n  return async (\n    _ids,\n    { page = 1, per_page: perPage, orderBy, orderDirection, filters }\n  ) => {\n    const sortableColumn = findColumnByKey(orderBy);\n    const sortBy =\n      sortableColumn && sortableColumn.sortBy\n        ? appendDirection(sortableColumn.sortBy, orderDirection)\n        : undefined;\n    const filterForApi = buildApiFilters(filters);\n\n    const fetchedEntities = await fetchEntities(perPage, page, {\n      ...filterForApi,\n      sortBy,\n    });\n    const {\n      entities,\n      meta: { totalCount },\n    } = fetchedEntities || {};\n\n    return {\n      results: entities.map((entity) => ({\n        ...entity,\n        selected: (selected || []).map((id) => id).includes(entity.id),\n      })),\n      orderBy,\n      orderDirection,\n      total: totalCount,\n    };\n  };\n};\n\n// This hook is primarily meant to work around issues in the inventory\nexport const useInventoryUtilities = (\n  inventory,\n  selectedSystems,\n  activeFilters\n) => {\n  const dispatch = useDispatch();\n\n  // Resets the Inventory to a loading state\n  // and prevents previously shown columns and rows to appear\n  useLayoutEffect(() => {\n    dispatch({\n      type: 'INVENTORY_INIT',\n    });\n  }, []);\n\n  // Ensures rows are marked as selected\n  useEffect(() => {\n    dispatch({\n      type: 'SELECT_ENTITIES',\n      payload: {\n        selected: selectedSystems,\n      },\n    });\n  }, [selectedSystems]);\n\n  // Filters do not yet trigger the inventory to call getEntities\n  // and the page would not reset to page 1\n  const resetPage = () => {\n    Promise.resolve(\n      dispatch({\n        type: 'RESET_PAGE',\n      })\n    ).then(() => inventory?.current?.onRefreshData());\n  };\n\n  // The debounce is to not have filter updates collide or get out of order.\n  const debounceResetPage = debounce(resetPage, 50);\n\n  useEffect(() => {\n    debounceResetPage();\n  }, [activeFilters]);\n};\n\nconst toIdFilter = (ids) =>\n  ids?.length > 0 ? `id ^ (${ids.join(',')})` : undefined;\n\nexport const useSystemsExport = ({\n  columns,\n  selected,\n  total,\n  fetchArguments,\n}) => {\n  const selectionFilter = selected ? toIdFilter(selected) : undefined;\n  const fetchSystems = useFetchSystems({\n    query: fetchArguments.query,\n    variables: {\n      ...fetchArguments.variables,\n      ...(fetchArguments.tags && { tags: fetchArguments.tags }),\n      filter: selectionFilter\n        ? `${fetchArguments.variables.filter} and (${selectionFilter})`\n        : fetchArguments.variables.filter,\n    },\n    onError: () => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Couldn’t download export',\n        description: 'Reinitiate this export to try again.',\n      });\n    },\n  });\n\n  const selectedFilter = () =>\n    selected?.length > 0 ? toIdFilter(selected) : undefined;\n\n  const exporter = async () => {\n    const fetchedItems = await fetchBatched(\n      fetchSystems,\n      total,\n      selectedFilter()\n    );\n\n    return fetchedItems.flatMap((result) => result.entities);\n  };\n\n  const {\n    toolbarProps: { exportConfig },\n  } = useExport({\n    exporter,\n    columns,\n    isDisabled: total === 0,\n    onStart: () => {\n      dispatchNotification({\n        variant: 'info',\n        title: 'Preparing export',\n        description: 'Once complete, your download will start automatically.',\n      });\n    },\n    onComplete: () => {\n      dispatchNotification({\n        variant: 'success',\n        title: 'Downloading export',\n      });\n    },\n  });\n\n  return exportConfig;\n};\n\nexport const useSystemBulkSelect = ({\n  total,\n  onSelect,\n  preselected,\n  fetchArguments,\n  currentPageIds,\n  systemsCache = [],\n}) => {\n  // This is meant as a compatibility layer and to be removed\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const fetchSystems = useFetchSystems({\n    ...fetchArguments,\n    onError: (error) => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error selecting systems',\n        description: error.message,\n      });\n    },\n  });\n\n  const fetchFunc = async (fetchIds) => {\n    if (fetchIds.length === 0) {\n      return [];\n    }\n\n    const idFilter = toIdFilter(fetchIds);\n    const results = await fetchBatched(fetchSystems, fetchIds.length, {\n      ...(idFilter && { filter: idFilter }),\n    });\n\n    return results.flatMap((result) => result.entities);\n  };\n\n  const cachedOrFetch = async (selectedIds) => {\n    const cachedSystems = systemsCache.filter(({ id }) =>\n      selectedIds.includes(id)\n    );\n    const cachedIds = cachedSystems.map(({ id }) => id);\n    const fetchIds = selectedIds.filter((id) => !cachedIds.includes(id));\n    const fetchedSystems = await fetchFunc(fetchIds);\n\n    return [...cachedSystems, ...fetchedSystems];\n  };\n\n  const onSelectCallback = async (selectedIds) => {\n    const systems = await cachedOrFetch(selectedIds);\n    setSelectedSystems(systems);\n    onSelect && onSelect(systems);\n  };\n\n  const itemIdsInTable = async () => {\n    const results = await fetchBatched(fetchSystems, total);\n    return results.flatMap((result) => result.entities.map(({ id }) => id));\n  };\n\n  const bulkSelect = useBulkSelect({\n    total,\n    onSelect: onSelectCallback,\n    preselected,\n    itemIdsInTable,\n    itemIdsOnPage: () => currentPageIds,\n  });\n  return {\n    selectedSystems,\n    ...bulkSelect,\n  };\n};\n","import React, { useMemo, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Spinner } from '@patternfly/react-core';\nimport { TableVariant } from '@patternfly/react-table';\n// eslint-disable-next-line max-len\nimport ComplianceRemediationButton from '@/PresentationalComponents/ComplianceRemediationButton';\nimport {\n  DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n  COMPLIANT_SYSTEMS_FILTER_CONFIGURATION,\n} from '@/constants';\nimport { ErrorPage, StateView, StateViewPart } from 'PresentationalComponents';\nimport useFilterConfig from 'Utilities/hooks/useTableTools/useFilterConfig';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { policyFilter, defaultOnLoad, ssgVersionFilter } from './constants';\nimport {\n  useFetchSystems,\n  useGetEntities,\n  useOsMinorVersionFilter,\n  useInventoryUtilities,\n  useSystemsExport,\n  useSystemsFilter,\n  useSystemBulkSelect,\n} from './hooks';\nimport { constructQuery } from '../../Utilities/helpers';\n\nexport const SystemsTable = ({\n  columns,\n  showAllSystems,\n  policyId,\n  showActions,\n  enableExport,\n  compliantFilter,\n  policies,\n  showOnlySystemsWithTestResults,\n  showOsFilter,\n  error,\n  showComplianceSystemsInfo,\n  compact,\n  remediationsEnabled,\n  systemProps,\n  defaultFilter,\n  emptyStateComponent,\n  prependComponent,\n  showOsMinorVersionFilter,\n  preselectedSystems,\n  onSelect: onSelectProp,\n  noSystemsTable,\n  tableProps,\n  ssgVersions,\n  dedicatedAction,\n}) => {\n  const inventory = useRef(null);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [currentTags, setCurrentTags] = useState([]);\n\n  const osMinorVersionFilter = useOsMinorVersionFilter(\n    showOsMinorVersionFilter,\n    {\n      variables: {\n        filter: defaultFilter,\n        ...(policyId && { policyId }),\n      },\n    }\n  );\n\n  const {\n    toolbarProps: conditionalFilter,\n    filterString,\n    activeFilterValues,\n  } = useFilterConfig({\n    filters: {\n      filterConfig: [\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(policies?.length > 0 ? policyFilter(policies, showOsFilter) : []),\n        ...(ssgVersions ? ssgVersionFilter(ssgVersions) : []),\n        ...osMinorVersionFilter,\n      ],\n    },\n  });\n  const systemsFilter = useSystemsFilter(\n    filterString(),\n    showOnlySystemsWithTestResults,\n    defaultFilter\n  );\n\n  const constructedQuery = constructQuery(columns);\n\n  const systemFetchArguments = {\n    query: constructedQuery.query,\n    variables: {\n      ...constructedQuery.fragments,\n      tags: currentTags,\n      filter: systemsFilter,\n      ...(policyId && { policyId }),\n    },\n  };\n\n  const preselection = useMemo(\n    () => preselectedSystems.map(({ id }) => id),\n    [preselectedSystems]\n  );\n\n  const {\n    selectedIds,\n    selectedSystems,\n    tableProps: bulkSelectTableProps,\n    toolbarProps: bulkSelectToolBarProps,\n  } = useSystemBulkSelect({\n    total,\n    onSelect: onSelectProp,\n    preselected: preselection,\n    fetchArguments: systemFetchArguments,\n    currentPageIds: items.map(({ id }) => id),\n    systemsCache: items,\n  });\n\n  useInventoryUtilities(inventory, selectedIds, activeFilterValues);\n\n  const onComplete = (result) => {\n    setTotal(result.meta.totalCount);\n    setItems(result.entities);\n    setIsLoaded(true);\n    setCurrentTags && setCurrentTags(result.meta.tags);\n    if (\n      emptyStateComponent &&\n      result.meta.totalCount === 0 &&\n      activeFilterValues.length === 0 &&\n      result?.meta?.tags?.length === 0\n    ) {\n      setIsEmpty(true);\n    }\n  };\n\n  const fetchSystems = useFetchSystems({\n    ...systemFetchArguments,\n    onComplete,\n  });\n  const getEntities = useGetEntities(fetchSystems, {\n    selected: selectedIds,\n    columns,\n  });\n  const exportConfig = useSystemsExport({\n    columns,\n    filter: systemsFilter,\n    selected: selectedIds,\n    total,\n    fetchArguments: {\n      ...systemFetchArguments,\n    },\n  });\n\n  const mergedColumns = (defaultColumns) =>\n    columns.map((column) => {\n      const isStringCol = typeof column === 'string';\n      const key = isStringCol ? column : column.key;\n      const defaultColumn = defaultColumns.find(\n        (defaultCol) => defaultCol.key === key\n      );\n      return {\n        ...defaultColumn,\n        ...(isStringCol ? { key: column } : column),\n        props: {\n          ...defaultColumn?.props,\n          ...column?.props,\n        },\n      };\n    });\n\n  return (\n    <StateView\n      stateValues={{\n        error,\n        noError: error === undefined && !isEmpty,\n        empty: isEmpty,\n      }}\n    >\n      <StateViewPart stateKey=\"error\">\n        {!!prependComponent && prependComponent}\n        <ErrorPage error={error} />\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">{emptyStateComponent}</StateViewPart>\n      <StateViewPart stateKey=\"noError\">\n        {!!prependComponent && isLoaded && prependComponent}\n        {showComplianceSystemsInfo && (\n          <Alert\n            isInline\n            variant=\"info\"\n            ouiaId=\"SystemsListIsDifferentAlert\"\n            title={\n              'The list of systems in this view is different than those that appear in the Inventory. ' +\n              'Only systems currently associated with or reporting against compliance policies are displayed.'\n            }\n          />\n        )}\n        <InventoryTable\n          {...systemProps}\n          disableDefaultColumns\n          columns={mergedColumns}\n          noSystemsTable={noSystemsTable}\n          ref={inventory}\n          getEntities={getEntities}\n          hideFilters={{ all: true, tags: false }}\n          showTags\n          onLoad={defaultOnLoad(columns)}\n          tableProps={{\n            ...bulkSelectTableProps,\n            isStickyHeader: true,\n            ...tableProps,\n          }}\n          fallback={<Spinner />}\n          variant={compact ? TableVariant.compact : ''}\n          {...bulkSelectToolBarProps}\n          {...(!showAllSystems && {\n            ...conditionalFilter,\n            ...(remediationsEnabled && {\n              dedicatedAction: (\n                <ComplianceRemediationButton\n                  allSystems={selectedSystems}\n                  selectedRules={[]}\n                />\n              ),\n            }),\n          })}\n          {...(dedicatedAction ? { dedicatedAction: dedicatedAction } : {})}\n          {...(enableExport && { exportConfig })}\n          {...(showActions && {\n            actions: [\n              {\n                title: 'View in inventory',\n                onClick: (_event, _index, { id }) => {\n                  const beta =\n                    window.location.pathname.split('/')[1] === 'beta';\n                  window.location.href = `${window.location.origin}${\n                    beta ? '/beta' : ''\n                  }/insights/inventory/${id}`;\n                },\n              },\n            ],\n          })}\n        />\n      </StateViewPart>\n    </StateView>\n  );\n};\n\nSystemsTable.propTypes = {\n  columns: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.shape({}), PropTypes.string])\n  ),\n  policies: PropTypes.arrayOf(PropTypes.shape({})),\n  showAllSystems: PropTypes.bool,\n  policyId: PropTypes.string,\n  query: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  showActions: PropTypes.bool,\n  enableExport: PropTypes.bool,\n  compliantFilter: PropTypes.bool,\n  showOnlySystemsWithTestResults: PropTypes.bool,\n  showOsFilter: PropTypes.bool,\n  showComplianceSystemsInfo: PropTypes.bool,\n  error: PropTypes.object,\n  compact: PropTypes.bool,\n  remediationsEnabled: PropTypes.bool,\n  defaultFilter: PropTypes.string,\n  systemProps: PropTypes.shape({\n    isFullView: PropTypes.bool,\n  }),\n  emptyStateComponent: PropTypes.node,\n  prependComponent: PropTypes.node,\n  showOsMinorVersionFilter: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  preselectedSystems: PropTypes.array,\n  onSelect: PropTypes.func,\n  noSystemsTable: PropTypes.node,\n  tableProps: PropTypes.object,\n  ssgVersions: PropTypes.array,\n  dedicatedAction: PropTypes.object,\n};\n\nSystemsTable.defaultProps = {\n  policyId: '',\n  showActions: true,\n  enableExport: true,\n  compliantFilter: false,\n  showOnlySystemsWithTestResults: false,\n  showComplianceSystemsInfo: false,\n  compact: false,\n  remediationsEnabled: true,\n  preselectedSystems: [],\n};\n\nexport default SystemsTable;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { sortingByProp } from 'Utilities/helpers';\n\nconst selectRows = (rows, selected) =>\n  rows.map((row) => ({\n    ...row,\n    selected: selected.includes(row.id),\n  }));\n\nexport const entitiesReducer = () =>\n  applyReducerHash({\n    ['INVENTORY_INIT']: () => ({\n      rows: [],\n      total: 0,\n    }),\n    ['RESET_PAGE']: (state) => ({\n      ...state,\n      page: 1,\n    }),\n    ['SELECT_ENTITIES']: (state, { payload: { selected } }) => ({\n      ...state,\n      rows: selectRows(state.rows, selected),\n    }),\n  });\n\nexport const mapCountOsMinorVersions = (systems) => {\n  if (!systems) {\n    return {};\n  }\n\n  return systems.reduce((acc, { osMinorVersion }) => {\n    if (osMinorVersion !== undefined && osMinorVersion !== null) {\n      (acc[osMinorVersion] = acc[osMinorVersion] || {\n        osMinorVersion,\n        count: 0,\n      }).count++;\n    }\n\n    return acc;\n  }, {});\n};\n\nexport const countOsMinorVersions = (systems) =>\n  Object.values(mapCountOsMinorVersions(systems)).sort(\n    sortingByProp('osMinorVersion', 'desc')\n  );\n"],"names":["QUERY","gql","ComplianceSystems","useQuery","data","error","loading","policies","profiles","edges","map","node","className","title","stateValues","stateKey","columns","Columns","showLink","props","isStatic","transforms","nowrap","defaultFilter","systemProps","isFullView","showOsMinorVersionFilter","policy","osMajorVersion","showComplianceSystemsInfo","enableEditPolicy","remediationsEnabled","PolicyTypeDetailsRow","description","item","key","Text","style","margin","propTypes","NameCell","name","disabled","compact","PolicyTypeTable","onChange","selectedProfile","items","profile","rowProps","selected","id","disableSelection","filters","filterConfig","type","conditionalFilterType","label","filter","policyTypes","value","policyType","toLowerCase","includes","sortByProp","renderFunc","renderComponent","fitContent","_data","_id","supportedOsVersions","join","options","detailsComponent","onRadioSelect","_event","_value","_rowIdx","itemId","find","sortBy","index","direction","property","variant","Tooltip","position","content","SUPPORTED_PROFILES","CreateSCAPPolicy","change","selectedOsMajorVersion","fetchPolicy","osMajorVersions","selectedOsMajorVersionObject","profilesToSelect","profileRefId","refId","benchmarkRedId","benchmark","Spinner","TextContent","component","TextVariants","Form","FormGroup","isRequired","fieldId","Tile","onClick","isSelected","isStacked","labelIcon","undefined","reduxFormPropTypes","selector","formValueSelector","compose","connect","state","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","PROFILES_QUERY","BENCHMARKS_QUERY","EditPolicyProfilesRules","selectedRuleRefIds","osMinorVersionCounts","osMinorVersions","i","osMinorVersion","sort","benchmarkSearch","variables","skip","length","benchmarksData","benchmarksError","benchmarksLoading","benchmarks","nodes","tabsData","systemCount","count","latestSupportedOsMinorVersions","getBenchmarkBySupportedOsMinor","benchmarkProfile","getBenchmarkProfile","newOsMinorVersion","profileToOsMinorMap","tabsDataToOsMinorMap","profileIds","Object","keys","skipProfilesQuery","profilesData","profilesError","profilesLoading","dataState","loadingState","noRuleSets","p","setSelectedRuleRefIds","newSelection","useLayoutEffect","profilesWithOs","extendProfilesByOsMinor","profilesWithRulesToSelection","only","JSON","stringify","EmptyState","Title","headingLevel","size","EmptyStateBody","EmptyTable","TabbedRules","selectedFilter","level","ouiaId","WizardContextConsumer","goToStepById","Button","PrependComponent","EditPolicySystems","selectedSystems","version","split","prependComponent","emptyStateComponent","width","showActions","enableExport","preselectedSystems","onSelect","newSelectedSystems","countOsMinorVersions","defaultProps","EditPolicyDetails","useEffect","Field","ReduxFormTextInput","isDisabled","ReduxFormTextArea","defaultValue","businessObjective","previousThreshold","initialValues","ReviewCreatedPolicy","complianceThreshold","parentProfileName","marginTop","TextList","TextListVariants","TextListItem","TextListItemVariants","fontWeight","benchmarkId","parseFloat","rulesCount","EmtpyStateWithErrors","errors","Array","isArray","List","ListItem","FinishedCreatePolicy","onWizardFinish","cloneFromProfileId","systems","useState","percent","setPercent","message","setMessage","setErrors","failed","setFailed","updatePolicy","usePolicy","onProgress","progress","hosts","then","dispatchNotification","autoDismiss","to","catch","networkError","result","Bullseye","EmptyStateVariant","EmptyStateIcon","icon","WrenchIcon","EmptyStateSecondaryActions","withApollo","CreatePolicyForm","systemIds","reset","history","useHistory","stepIdReached","setStepIdReached","resetAnchor","location","hash","push","onClose","steps","enableNext","validateBenchmarkPage","canJumpTo","validateDetailsPage","validateSystemsPage","validateRulesPage","nextButtonText","isFinishedStep","Wizard","isOpen","onNext","onGoToStep","onBack","dispatch","CreatePolicy","DeletePolicy","deleteEnabled","setDeleteEnabled","useLocation","useMutation","DELETE_PROFILE","onCompleted","dispatchAction","addNotification","onError","deletePolicy","C","ModalVariant","actions","input","Checkbox","isChecked","DeleteReport","background","DELETE_REPORT","deleteReport","profileId","isModalOpen","onDelete","policyId","EditPolicyRulesTabEmptyState","EditPolicyRulesTab","values","sortingByProp","parentProfileId","toTabsData","prevSelection","empty","setNewRuleTabs","EditPolicySystemsTab","onSystemSelect","osFilter","newRuleTabs","Alert","isInline","actionLinks","AlertActionLink","EditPolicyForm","setUpdatedPolicy","setSelectedSystems","policyProfiles","setOsMinorVersionCounts","useNewRulesAlertState","newRulesAlert","setNewRulesAlert","handleSystemSelect","useCallback","policyMinorVersions","hasNewOsMinorVersions","reduce","acc","mapCountOsMinorVersions","complianceThresholdValid","thresholdValid","profilesWithOsMinor","defaultTab","Tab","eventKey","TabTitleText","updatedPolicy","MULTIVERSION_QUERY","EditPolicy","route","useParams","policy_id","linkToPolicy","useLinkToPolicy","saveEnabled","updatedPolicyHostsAndRules","useOnSave","isSaving","onSave","spinnerAriaValueText","isLoading","useTitleEntity","minHeight","SystemLink","children","pathname","Name","showOsInfo","hasOsInfo","SSGVersion","ssgVersion","supported","messageVariant","SSGVersions","testResultProfiles","Policies","Truncate","inline","text","FailedRules","rulesFailed","profilesRulesFailed","ComplianceScore","complianceScore","complianceScoreData","NeverScanned","Fragment","color","NEVER","lastScanned","dates","Date","last","Math","max","apply","date","isFinite","LastScanned","lastScannedDate","DateFormat","parse","operatingSystemString","OperatingSystem","system","disableSorting","compileColumnRenderFunc","cell","column","renderExport","customName","SsgVersion","exportKey","SsgVersionCell","PoliciesCell","FailedRulesCell","complianceScoreString","trim","ComplianceScoreCell","LastScannedCell","OperatingSystemCell","OS","original","dataLabel","inventoryColumn","InventoryDetails","registryDecorator","DetailWrapper","onLoad","mergeWithDetail","getRegistry","register","InventoryDetail","fallback","Skeleton","SkeletonSize","hideBack","React","entity","GET_SYSTEMS_OSES","policyFilter","systemsPolicyFilterConfiguration","systemsOsFilterConfiguration","osMinorVersionFilter","systemsOsMinorFilterConfiguration","defaultOnLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","entitiesReducer","ssgVersionFilter","ssgVersions","filterString","groupByMajorVersion","versions","showFilter","showVersion","String","currentValue","major","Set","minor","useOsMinorVersionFilter","fetchArguments","osVersions","renameInventoryAttributes","culledTimestamp","staleWarningTimestamp","staleTimestamp","insightsId","insights_id","culled_timestamp","stale_warning_timestamp","stale_timestamp","useFetchSystems","query","onComplete","client","useApolloClient","perPage","page","requestVariables","fetchResults","e","entities","systemsWithRuleObjectsFailed","meta","tags","totalCount","fetchBatched","fetchFunction","total","batchSize","pages","ceil","Promise","all","_","pageIdx","buildApiFilters","tagFilters","otherFilters","tagsApiFilter","flatMap","tagFilter","tag","encodeURIComponent","tagKey","toIdFilter","ids","SystemsTable","showAllSystems","compliantFilter","showOnlySystemsWithTestResults","showOsFilter","onSelectProp","noSystemsTable","tableProps","dedicatedAction","inventory","useRef","isEmpty","setIsEmpty","isLoaded","setIsLoaded","setItems","setTotal","currentTags","setCurrentTags","useFilterConfig","DEFAULT_SYSTEMS_FILTER_CONFIGURATION","COMPLIANT_SYSTEMS_FILTER_CONFIGURATION","conditionalFilter","toolbarProps","activeFilterValues","systemsFilter","combindedFilter","useSystemsFilter","constructedQuery","constructQuery","systemFetchArguments","fragments","preselected","currentPageIds","systemsCache","fetchSystems","fetchFunc","fetchIds","idFilter","results","cachedOrFetch","selectedIds","cachedSystems","cachedIds","fetchedSystems","onSelectCallback","itemIdsInTable","useBulkSelect","itemIdsOnPage","useSystemBulkSelect","useMemo","bulkSelectTableProps","bulkSelectToolBarProps","activeFilters","useDispatch","payload","debounceResetPage","debounce","resolve","current","onRefreshData","useInventoryUtilities","getEntities","fetchEntities","appendDirection","attributes","attribute","findColumnByKey","_ids","per_page","orderBy","orderDirection","sortableColumn","filterForApi","fetchedEntities","useGetEntities","exportConfig","selectionFilter","exporter","fetchedItems","useExport","onStart","useSystemsExport","noError","InventoryTable","disableDefaultColumns","defaultColumns","isStringCol","defaultColumn","defaultCol","ref","hideFilters","showTags","isStickyHeader","TableVariant","ComplianceRemediationButton","allSystems","selectedRules","_index","beta","window","href","origin","PropTypes","selectRows","rows","row","applyReducerHash"],"sourceRoot":""}