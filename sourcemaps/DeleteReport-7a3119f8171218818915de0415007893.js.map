{"version":3,"sources":["webpack:///./src/Utilities/graphql/mutations.js","webpack:///./src/Utilities/Dispatcher.js","webpack:///./src/SmartComponents/DeleteReport/DeleteReport.js"],"names":["CREATE_PROFILE","gql","ASSOCIATE_SYSTEMS_TO_PROFILES","UPDATE_PROFILE","CREATE_BUSINESS_OBJECTIVE","DELETE_PROFILE","DELETE_REPORT","dispatchAction","actionCreator","getStore","dispatch","DeleteReport","history","useHistory","location","useLocation","id","state","profile","onClose","push","background","useMutation","onCompleted","addNotification","variant","title","onError","error","description","message","deleteReport","isOpen","ModalVariant","small","actions","key","aria-label","onClick","variables","input","profileId","propTypes","func","isModalOpen","bool","onDelete","policyId","string","defaultProps"],"mappings":"sjEAEO,IAAMA,EAAiBC,IAAH,KAUdC,EAAgCD,IAAH,KAyB7BE,GAf+BF,IAAH,KAeXA,IAAH,MAcdG,EAA4BH,IAAH,KAWzBI,EAAiBJ,IAAH,KAUdK,EAAgBL,IAAH,M,iCCxE1B,+CAEO,SAASM,EAAeC,GAE3B,OADcC,cACDC,SAASF,K,sKCUpBG,EAAe,WAAM,MACjBC,EAAUC,cACVC,EAAWC,cACTC,GAHe,UAGRF,EAASG,aAHD,aAGR,EAAgBC,SAAvBF,GACFG,EAAU,WACZP,EAAQQ,KAAKN,EAASG,MAAMI,aALT,EAYAC,sBAAYhB,IAAe,CAC9CiB,YAAa,WACThB,YAAeiB,0BAAgB,CAC3BC,QAAS,UACTC,MAAO,oBAPfd,EAAQQ,KAAK,aAWbO,QAAS,SAACC,GACNrB,YAAeiB,0BAAgB,CAC3BC,QAAS,SACTC,MAAO,wBACPG,YAAaD,EAAME,WAEvBX,OAdDY,EAZgB,YA6BvB,OACI,kBAAC,QAAD,CACIC,QAAM,EACNP,QAAUQ,eAAaC,MACvBR,MAAM,gBACNP,QAAUA,EACVgB,QAAS,CACL,kBAAC,SAAD,CACIC,IAAI,UACJC,aAAW,SACXZ,QAAQ,SACRa,QAAS,kBAAMP,EAAa,CACxBQ,UAAW,CACPC,MAAO,CACHC,UAAWzB,QAP3B,iBAaA,kBAAC,SAAD,CAAQoB,IAAI,SAASX,QAAQ,YAAYa,QAAU,kBAAMnB,MAAzD,YAIJ,kBAAC,cAAD,+DAOZR,EAAa+B,UAAY,CACrBvB,QAASuB,IAAUC,KACnBC,YAAaF,IAAUG,KACvBC,SAAUJ,IAAUC,KACpBI,SAAUL,IAAUM,QAGxBrC,EAAasC,aAAe,CACxBH,SAAU,aACV3B,QAAS,cAGER","file":"js/DeleteReport-cf46036ac46d1522f1a8.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport const CREATE_PROFILE = gql`\nmutation CreateProfile($input: createProfileInput!) {\n    createProfile(input: $input) {\n        profile {\n            id\n        }\n    }\n}\n`;\n\nexport const ASSOCIATE_SYSTEMS_TO_PROFILES = gql`\nmutation associateSystems($input: associateSystemsInput!) {\n    associateSystems(input: $input) {\n        profile {\n            id\n        }\n    }\n}\n`;\n\nexport const ASSOCIATE_PROFILES_TO_SYSTEM = gql`\nmutation associateProfiles($input: associateProfilesInput!) {\n    associateProfiles(input: $input) {\n        system {\n            id\n            name\n            profiles {\n                id\n                name\n            }\n        }\n    }\n}\n`;\n\nexport const UPDATE_PROFILE = gql`\nmutation UpdateProfile($input: UpdateProfileInput!) {\n    updateProfile(input: $input) {\n        profile {\n            id,\n            name,\n            complianceThreshold,\n            businessObjectiveId,\n            description\n        }\n    }\n}\n`;\n\nexport const CREATE_BUSINESS_OBJECTIVE = gql`\nmutation createBusinessObjective($input: createBusinessObjectiveInput!) {\n    createBusinessObjective(input: $input) {\n        businessObjective {\n            id\n            title\n        }\n    }\n}\n`;\n\nexport const DELETE_PROFILE = gql`\nmutation DeleteProfile($input: deleteProfileInput!) {\n    deleteProfile(input: $input) {\n        profile {\n            id\n        }\n    }\n}\n`;\n\nexport const DELETE_REPORT = gql`\nmutation DeleteReport($input: deleteTestResultsInput!) {\n    deleteTestResults(input: $input) {\n        profile {\n            id\n        }\n    }\n}\n`;\n","import { getStore } from 'Store';\n\nexport function dispatchAction(actionCreator) {\n    const store = getStore();\n    return store.dispatch(actionCreator);\n}\n","import {\n    Button,\n    Modal,\n    ModalVariant,\n    TextContent\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useMutation } from '@apollo/react-hooks';\nimport { DELETE_REPORT } from 'Utilities/graphql/mutations';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { dispatchAction } from 'Utilities/Dispatcher';\n\nconst DeleteReport = () => {\n    const history = useHistory();\n    const location = useLocation();\n    const { id } = location.state?.profile;\n    const onClose = () => {\n        history.push(location.state.background);\n    };\n\n    const onDelete = () => {\n        history.push('/reports');\n    };\n\n    const [deleteReport] = useMutation(DELETE_REPORT, {\n        onCompleted: () => {\n            dispatchAction(addNotification({\n                variant: 'success',\n                title: `Removed report`\n            }));\n            onDelete();\n        },\n        onError: (error) => {\n            dispatchAction(addNotification({\n                variant: 'danger',\n                title: 'Error removing report',\n                description: error.message\n            }));\n            onClose();\n        }\n    });\n    return (\n        <Modal\n            isOpen\n            variant={ ModalVariant.small }\n            title='Delete report'\n            onClose={ onClose }\n            actions={[\n                <Button\n                    key='destroy'\n                    aria-label=\"delete\"\n                    variant='danger'\n                    onClick={() => deleteReport({\n                        variables: {\n                            input: {\n                                profileId: id\n                            }\n                        }\n                    })}>\n                    Delete report\n                </Button>,\n                <Button key='cancel' variant='secondary' onClick={ () => onClose() }>\n                    Cancel\n                </Button>\n            ]}>\n            <TextContent>\n                Deleting a report is permanent and cannot be undone.\n            </TextContent>\n        </Modal>\n    );\n};\n\nDeleteReport.propTypes = {\n    onClose: propTypes.func,\n    isModalOpen: propTypes.bool,\n    onDelete: propTypes.func,\n    policyId: propTypes.string\n};\n\nDeleteReport.defaultProps = {\n    onDelete: () => {},\n    onClose: () => {}\n};\n\nexport default DeleteReport;\n"],"sourceRoot":""}