{"version":3,"sources":["webpack:///./src/SmartComponents/ComplianceSystems/ComplianceSystems.js","webpack:///./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyProfilesRules.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack:///./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack:///./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyDetailsTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyRulesTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicySystemsTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyForm.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicy.js","webpack:///./src/SmartComponents/SystemsTable/Cells.js","webpack:///./src/SmartComponents/SystemsTable/Columns.js","webpack:///./src/SmartComponents/SystemsTable/constants.js","webpack:///./src/SmartComponents/InventoryDetails/InventoryDetails.js","webpack:///./src/Utilities/Export.js","webpack:///./src/Utilities/hooks/api/utils/ApiClient.js","webpack:///./src/Utilities/hooks/api/useApi.js","webpack:///./src/Utilities/hooks/api/useCollection.js","webpack:///./src/SmartComponents/SystemsTable/hooks.js","webpack:///./src/SmartComponents/SystemsTable/InventoryTable.js","webpack:///./src/store/Reducers/SystemStore.js"],"names":["QUERY","gql","ComplianceSystems","useQuery","data","error","loading","policies","profiles","edges","map","node","className","title","stateValues","stateKey","columns","Columns","showLink","showOsInfo","query","GET_SYSTEMS","defaultFilter","systemProps","isFullView","showOsFilter","showComplianceSystemsInfo","enableEditPolicy","remediationsEnabled","BENCHMARKS_AND_PROFILES","PolicyTooltip","Tooltip","position","content","style","opacity","CreateSCAPPolicy","change","selectedBenchmarkId","fetchPolicy","Spinner","selectedBenchmark","validProfiles","benchmark","benchmarks","latestBenchmarks","find","id","userProfileRefIds","filter","profile","refId","disabled","includes","TextContent","Text","component","TextVariants","Form","FormGroup","label","isRequired","fieldId","sort","a","b","localeCompare","osMajorVersion","Tile","key","onClick","setBenchmark","isSelected","isStacked","labelIcon","undefined","propTypes","reduxFormPropTypes","selector","formValueSelector","compose","connect","state","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","PROFILES_QUERY","BENCHMARKS_QUERY","EditPolicyProfilesRules","policy","selectedRuleRefIds","osMinorVersionCounts","osMinorVersions","i","osMinorVersion","benchmarkSearch","join","variables","skip","length","benchmarksData","benchmarksError","benchmarksLoading","nodes","tabsData","systemCount","count","latestSupportedOsMinorVersions","getBenchmarkBySupportedOsMinor","profileRefId","benchmarkProfile","getBenchmarkProfile","newOsMinorVersion","profileToOsMinorMap","tabsDataToOsMinorMap","profileIds","Object","keys","skipProfilesQuery","profilesData","profilesError","profilesLoading","dataState","loadingState","noRuleSets","p","setSelectedRuleRefIds","newSelection","useLayoutEffect","profilesWithOs","extendProfilesByOsMinor","profilesWithRulesToSelection","only","name","EmptyState","Title","headingLevel","size","EmptyStateBody","EmptyTable","TabbedRules","selectedFilter","level","JSON","parse","WizardContextConsumer","goToStepById","Button","PrependComponent","EditPolicySystems","selectedSystems","showOsMinorVersionFilter","prependComponent","emptyStateComponent","compact","showActions","GET_SYSTEMS_WITHOUT_FAILED_RULES","enableExport","preselectedSystems","onSelect","newSelectedSystems","countOsMinorVersions","defaultProps","EditPolicyDetails","useEffect","description","Field","ReduxFormTextInput","type","aria-describedby","isDisabled","ReduxFormTextArea","defaultValue","businessObjective","previousThreshold","complianceThreshold","initialValues","REVIEW","ReviewCreatedPolicy","benchmarkId","parentProfileName","marginTop","TextList","TextListVariants","TextListItem","TextListItemVariants","fontWeight","parseFloat","rulesCount","EmtpyStateWithErrors","errors","Array","isArray","List","ListItem","FinishedCreatePolicy","onWizardFinish","cloneFromProfileId","systems","useState","percent","setPercent","message","setMessage","setErrors","failed","setFailed","updatePolicy","usePolicy","onProgress","progress","hosts","then","catch","networkError","result","Bullseye","variant","EmptyStateVariant","EmptyStateIcon","icon","WrenchIcon","EmptyStateSecondaryActions","ouiaId","withApollo","CreatePolicy","systemIds","history","useHistory","stepIdReached","setStepIdReached","resetAnchor","location","hash","push","onClose","steps","enableNext","validateBenchmarkPage","canJumpTo","validateDetailsPage","validateSystemsPage","validateRulesPage","nextButtonText","isFinishedStep","Wizard","isOpen","onNext","onGoToStep","onBack","dispatch","EditPolicyDetailsTab","setUpdatedPolicy","validThreshold","setValidThreshold","threshold","valid","thresholdValid","useThresholdValidate","validateThreshold","TextArea","width","height","onChange","value","TextInput","validated","helperTextInvalid","helperText","complianceThresholdValid","EditPolicyRulesTabEmptyState","EditPolicyRulesTab","setNewRuleTabs","values","sortingByProp","parentProfileId","toTabsData","tab","prevSelection","empty","EditPolicySystemsTab","newRuleTabs","onSystemSelect","Alert","isInline","actionLinks","AlertActionLink","EditPolicyForm","setSelectedSystems","policyProfiles","setOsMinorVersionCounts","handleSystemSelect","reduce","acc","mapCountOsMinorVersions","profilesWithOsMinor","updateSelectedRuleRefIds","defaultTab","Tab","eventKey","TabTitleText","MULTIVERSION_QUERY","EditPolicy","route","policyId","useParams","policy_id","anchor","useAnchor","updatedPolicy","linkToBackground","useLinkToBackground","isSaving","setIsSaving","saveEnabled","linkToBackgroundWithHash","actions","spinnerAriaValueText","isLoading","updatedPolicyHostsAndRules","useTitleEntity","Modal","minHeight","SystemLink","children","Link","to","pathname","Name","hasOsInfo","SSGVersion","ssgVersion","supported","messageVariant","SSGVersions","testResultProfiles","DetailsLink","FailedRules","rulesFailed","profilesRulesFailed","NEVER","complianceScoreData","scoreTotal","score","rulesPassed","profilesRulesPassed","numScored","compliant","every","lastScanned","systemSupportedByProfiles","ComplianceScore","complianceScore","dates","Date","last","Math","max","apply","date","isFinite","LastScanned","lastScannedDate","DateFormat","disableSorting","isStatic","props","exportKey","renderExport","String","renderFunc","renderComponent","NameCell","customName","SsgVersion","SsgVersionCell","Policies","export","DetailsLinkCell","FailedRulesCell","complianceScoreString","ComplianceScoreCell","LastScannedCell","operatingSystemString","OperatingSystem","cell","_data","_id","system","policyFilter","osFilter","systemsPolicyFilterConfiguration","systemsOsFilterConfiguration","osMinorVersionFilter","systemsOsMinorFilterConfiguration","defaultOnLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","getRegistry","register","entitiesReducer","InventoryDetails","registryDecorator","DetailWrapper","onLoad","mergeWithDetail","InventoryDetail","fallback","Skeleton","SkeletonSize","hideBack","React","entity","textCsvCell","row","column","csvFromState","rows","csvRows","concat","encodeURI","jsonFromState","object","forEach","stringify","exportItems","items","format","filename","link","document","createElement","setAttribute","dispatchEvent","MouseEvent","bubbles","cancelable","view","window","linkAndDownload","CSV_FILE_PREFIX","toISOString","options","Accept","this","apiBase","path","authenticate","Promise","resolve","onUnauthorised","defaultHeaders","headers","DEFAULT_API_HEADERS","apiProps","method","callAuthenticate","fetch","checkForEmptyResponse","response","checkForErrors","json","finalCatch","promise","reject","params","credentials","fullPath","url","URL","origin","encodeURIComponent","search","URLSearchParams","body","status","ignore404","responseCloneJson","clone","request","ApiClient","includeAttributes","prop","attributes","newEntity","includePropAndDelete","normalizeData","jsonNormalized","normalize","normalizedJson","relationships","entries","item","relationship","relationshipData","v","includeRelationship","fetchCollection","apiClient","collection","get","normalized","meta","total","useOsMinorVersionFilter","showFilter","supportedSsgs","dependencies","collectionState","setCollectionState","useApi","COMPLIANCE_API_ROOT","include","useCollection","showVersion","version","currentValue","Set","groupByMajorVersion","InventoryTable","showAllSystems","compliantFilter","showOnlySystemsWithTestResults","onSelectProp","noSystemsTable","inventory","useRef","isEmpty","setIsEmpty","isLoaded","setIsLoaded","setItems","setTotal","setSelected","selectedSystemIds","isPageSelected","onSelectCallback","selected","_event","select","_index","console","onBulkSelect","selectedSystemsWithoutItems","useOnSelect","selectedCount","useFilterConfig","DEFAULT_SYSTEMS_FILTER_CONFIGURATION","COMPLIANT_SYSTEMS_FILTER_CONFIGURATION","conditionalFilter","activeFilters","buildFilterString","activeFilterValues","useDispatch","payload","debounceResetPage","debounce","current","onRefreshData","useInventoryUtilities","fetchEntities","fetchSystems","onComplete","client","useApolloClient","filterString","combindedFilter","perPage","page","fetchResults","e","entities","systemsWithRuleObjectsFailed","totalCount","useFetchSystems","getEntities","_ids","per_page","fetchedEntities","results","noError","ref","hideFilters","tags","registeredWith","stale","tableProps","canSelectAll","TableVariant","bulkSelect","checked","dedicatedAction","ComplianceRemediationButton","allSystems","selectedRules","exportConfig","_","beta","split","href","PropTypes","selectRows","INVENTORY_ACTION","applyReducerHash","LOAD_ENTITIES_PENDING","LOAD_ENTITIES_FULFILLED"],"mappings":"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","file":"js/EditPolicy.15baccf13a5e4c09923f.js","sourcesContent":["/* eslint-disable react/display-name */\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport { InventoryTable } from 'SmartComponents';\nimport { GET_SYSTEMS } from '../SystemsTable/constants';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst QUERY = gql`\n{\n    profiles(search: \"external = false and canonical = false\") {\n        edges {\n            node {\n                id\n                name\n                refId\n                majorOsVersion\n            }\n        }\n    }\n}\n`;\n\nconst DEFAULT_FILTER = 'has_test_results = true or has_policy = true';\n\nexport const ComplianceSystems = () => {\n    const { data, error, loading } = useQuery(QUERY);\n    const policies = data?.profiles?.edges.map(({ node }) => node);\n\n    return (\n        <React.Fragment>\n            <PageHeader className='page-header'>\n                <PageHeaderTitle title=\"Systems\" />\n            </PageHeader>\n            <Main>\n                <StateViewWithError stateValues={ { error, data, loading } }>\n                    <StateViewPart stateKey=\"data\">\n                        { policies && <InventoryTable\n                            columns={[\n                                Columns.customName({\n                                    showLink: true,\n                                    showOsInfo: true\n                                }),\n                                Columns.Policies,\n                                Columns.DetailsLink\n                            ]}\n                            query={GET_SYSTEMS}\n                            defaultFilter={ DEFAULT_FILTER }\n                            systemProps={{\n                                isFullView: true\n                            }}\n                            showOsFilter\n                            showComplianceSystemsInfo\n                            enableEditPolicy={ false }\n                            remediationsEnabled={ false }\n                            policies={ policies } /> }\n                    </StateViewPart>\n                </StateViewWithError>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default ComplianceSystems;\n","import React from 'react';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport {\n    Form,\n    FormGroup,\n    Text,\n    TextContent,\n    TextVariants,\n    Tile,\n    Tooltip\n} from '@patternfly/react-core';\nimport { ProfileTypeSelect } from 'PresentationalComponents';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { propTypes as reduxFormPropTypes, formValueSelector, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\n\nconst BENCHMARKS_AND_PROFILES = gql`\nquery benchmarksAndProfiles {\n    latestBenchmarks {\n        id\n        title\n        refId\n        version\n        osMajorVersion\n        profiles {\n            id\n            name\n            refId\n            description\n            complianceThreshold\n        }\n    }\n    profiles(search: \"external = false and canonical = false\") {\n        edges {\n            node {\n                id\n                refId\n                benchmark {\n                    refId\n                }\n            }\n        }\n    }\n}\n`;\n\nconst PolicyTooltip = () => (\n    <Tooltip\n        position=\"right\"\n        content=\"Policy types are OpenSCAP policies that are supported by RHEL.\n        For each major version of RHEL, users can create one policy of each type.\">\n        <OutlinedQuestionCircleIcon style={{ opacity: 0.5 }}/>\n    </Tooltip>\n);\n\nexport const CreateSCAPPolicy = ({ change, selectedBenchmarkId }) => {\n    const { data, error, loading } = useQuery(BENCHMARKS_AND_PROFILES, { fetchPolicy: 'no-cache' });\n\n    const inUseProfileRefIds = (profiles, benchmark) => (\n        profiles.filter(profile => benchmark.refId === profile.node.benchmark.refId).map(profile => profile.node.refId)\n    );\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const benchmarks = data.latestBenchmarks;\n    let selectedBenchmark;\n    let validProfiles;\n    if (selectedBenchmarkId) {\n        selectedBenchmark = benchmarks.find(benchmark => benchmark.id === selectedBenchmarkId);\n        const userProfileRefIds = inUseProfileRefIds(data.profiles.edges, selectedBenchmark);\n        validProfiles = selectedBenchmark.profiles.map((profile) => ({\n            ...profile,\n            disabled: userProfileRefIds.includes(profile.refId)\n        }));\n    }\n\n    const setBenchmark = ({ id, osMajorVersion }) => {\n        if (selectedBenchmark?.osMajorVersion !== osMajorVersion) {\n            change('systems', []);\n        }\n\n        change('benchmark', id);\n        change('osMajorVersion', osMajorVersion);\n    };\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1} className=\"pf-u-mb-md\">\n                    Create SCAP policy\n                </Text>\n                <Text className=\"pf-u-mb-md\">\n                    Select the operating system and policy type for this policy.\n                </Text>\n            </TextContent>\n            <Form>\n                <FormGroup\n                    label=\"Operating system\"\n                    isRequired\n                    fieldId=\"benchmark\">\n                    { benchmarks && benchmarks.sort((a, b) => a.refId.localeCompare(b.refId)).map((benchmark) => {\n                        const { id, osMajorVersion } = benchmark;\n                        return (\n                            <Tile\n                                key={id}\n                                className=\"pf-u-mr-md\"\n                                title={ `RHEL ${osMajorVersion}` }\n                                onClick={ () => setBenchmark(benchmark) }\n                                isSelected={ selectedBenchmarkId === id }\n                                isStacked />\n                        );\n                    })}\n                </FormGroup>\n                <FormGroup\n                    isRequired\n                    labelIcon={<PolicyTooltip/>}\n                    label=\"Policy type\"\n                    fieldId=\"policy-type\">\n                    <ProfileTypeSelect\n                        profiles={selectedBenchmark && validProfiles }\n                        onClick={ () => {\n                            change('selectedRuleRefIds', undefined);\n                        }}/>\n                </FormGroup>\n            </Form>\n        </React.Fragment>\n    );\n};\n\nCreateSCAPPolicy.propTypes = {\n    selectedBenchmarkId: propTypes.string,\n    change: reduxFormPropTypes.change\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            selectedBenchmarkId: selector(state, 'benchmark')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(CreateSCAPPolicy);\n","import React, { useLayoutEffect } from 'react';\nimport { propTypes as reduxFormPropTypes, formValueSelector, reduxForm } from 'redux-form';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n    Title, Text, TextContent, TextVariants,\n    EmptyState, EmptyStateBody\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n    TabbedRules, profilesWithRulesToSelection, tabsDataToOsMinorMap, extendProfilesByOsMinor\n} from 'PresentationalComponents/TabbedRules';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\n\nconst PROFILES_QUERY = gql`\nquery Profiles($filter: String!){\n    profiles(search: $filter){\n        edges {\n            node {\n                id\n                name\n                refId\n                osMinorVersion\n                osMajorVersion\n                policy {\n                    id\n\n                }\n                policyType\n                benchmark {\n                    id\n                    refId\n                    latestSupportedOsMinorVersions\n                    osMajorVersion\n                }\n                ssgVersion\n                rules {\n                    id\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n    }\n}\n`;\n\nconst BENCHMARKS_QUERY = gql`\nquery Benchmarks($filter: String!){\n    benchmarks(search: $filter){\n        nodes {\n            id\n            latestSupportedOsMinorVersions\n            profiles {\n                id\n                refId\n                osMajorVersion\n                ssgVersion\n            }\n        }\n    }\n}\n`;\n\nconst getBenchmarkProfile = (benchmark, profileRefId) => (\n    benchmark.profiles.find((benchmarkProfile) => (benchmarkProfile.refId === profileRefId))\n);\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) => (\n    benchmarks.find((benchmark) =>\n        benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n    )\n);\n\nexport const EditPolicyProfilesRules = ({ policy, selectedRuleRefIds, change, osMajorVersion, osMinorVersionCounts }) => {\n    const columns = [Columns.Name, Columns.Severity, Columns.Ansible];\n    const osMinorVersions = osMinorVersionCounts.map((i) => (i.osMinorVersion)).sort();\n    const benchmarkSearch = `os_major_version = ${ osMajorVersion } ` +\n        `and latest_supported_os_minor_version ^ \"${ osMinorVersions.join(',') }\"`;\n\n    const {\n        data: benchmarksData,\n        error: benchmarksError,\n        loading: benchmarksLoading\n    } = useQuery(BENCHMARKS_QUERY, {\n        variables: {\n            filter: benchmarkSearch\n        },\n        skip: osMinorVersions.length === 0\n    });\n\n    const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n    let tabsData = osMinorVersionCounts.map(({ osMinorVersion, count: systemCount }) => {\n        osMinorVersion = `${osMinorVersion}`;\n        let profile;\n        if (benchmarks) {\n            const benchmark = getBenchmarkBySupportedOsMinor(benchmarks, osMinorVersion);\n            if (benchmark) {\n                profile = getBenchmarkProfile(benchmark, policy.refId);\n                if (profile) {\n                    profile = {\n                        ...profile,\n                        benchmark\n                    };\n                }\n            }\n        }\n\n        return {\n            profile,\n            systemCount,\n            newOsMinorVersion: osMinorVersion\n        };\n    });\n    tabsData = tabsData.filter(({ profile }) => !!profile);\n\n    const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n    const profileIds = Object.keys(profileToOsMinorMap);\n    const filter = profileIds.map((i) => `id = ${ i }`).join(' OR ');\n    const skipProfilesQuery = benchmarksLoading || filter.length === 0;\n    const { data: profilesData, error: profilesError, loading: profilesLoading } = useQuery(PROFILES_QUERY, {\n        variables: {\n            filter\n        },\n        skip: skipProfilesQuery\n    });\n    const error = benchmarksError || profilesError;\n    const dataState = ((profileIds?.length > 0) ? profilesData : undefined);\n    const loadingState = ((profilesLoading || benchmarksLoading) ? true : undefined);\n    const noRuleSets = !error && !loadingState && profileIds?.length === 0;\n    const profiles = skipProfilesQuery ? [] : profilesData?.profiles.edges.map((p) => (p.node));\n\n    const setSelectedRuleRefIds = (newSelection) => {\n        change('selectedRuleRefIds', newSelection);\n    };\n\n    useLayoutEffect(() => {\n        if (!loadingState) {\n            const profilesWithOs = extendProfilesByOsMinor(profiles, profileToOsMinorMap);\n            const newSelection = profilesWithRulesToSelection(\n                profilesWithOs, selectedRuleRefIds, { only: true }\n            );\n            setSelectedRuleRefIds(newSelection);\n        }\n    }, [profiles, loadingState]);\n\n    return <React.Fragment>\n        <TextContent className='pf-u-pb-md'>\n            <Text component={TextVariants.h1}>\n                Rules\n            </Text>\n            <Text>\n                Customize your <b>{ policy.name }</b> SCAP policy by including and excluding rules.\n            </Text>\n            <Text>\n                Each release of RHEL is supported with a unique and specific version of the SCAP Security\n                Guide (SSG). You must customize each version of SSG for each release of RHEL.\n            </Text>\n        </TextContent>\n\n        <StateViewWithError stateValues={ { error, data: dataState, loading: loadingState, noRuleSets } }>\n            <StateViewPart stateKey=\"noRuleSets\">\n                <EmptyState>\n                    <Title headingLevel=\"h1\" size=\"xl\">\n                        No rules can be configured\n                    </Title>\n                    <EmptyStateBody>\n                        The policy type selected does not exist for the systems and\n                        OS versions selected in the previous steps.\n                    </EmptyStateBody>\n                </EmptyState>\n            </StateViewPart>\n            <StateViewPart stateKey=\"loading\">\n                <EmptyTable><Spinner/></EmptyTable>\n            </StateViewPart>\n            <StateViewPart stateKey=\"data\">\n                <TabbedRules\n                    tabsData={ tabsData }\n                    selectedRuleRefIds={ selectedRuleRefIds }\n                    columns={ columns }\n                    remediationsEnabled={ false }\n                    selectedFilter\n                    level={ 1 }\n                    setSelectedRuleRefIds={ setSelectedRuleRefIds } />\n            </StateViewPart>\n        </StateViewWithError>\n    </React.Fragment>;\n};\n\nEditPolicyProfilesRules.propTypes = {\n    policy: propTypes.object,\n    change: reduxFormPropTypes.change,\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    selectedRuleRefIds: propTypes.array\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            policy: JSON.parse(selector(state, 'profile')),\n            osMajorVersion: selector(state, 'osMajorVersion'),\n            osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n            selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyProfilesRules);\n","import React from 'react';\nimport { propTypes as reduxFormPropTypes, reduxForm, formValueSelector } from 'redux-form';\nimport { Button, Form, FormGroup, Text, TextContent, TextVariants, WizardContextConsumer } from '@patternfly/react-core';\nimport { InventoryTable } from 'SmartComponents';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { countOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n    <React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                You do not have any <b>RHEL { osMajorVersion }</b> systems connected to Insights and enabled for Compliance.<br/>\n                Policies must be created with at least one system.\n            </Text>\n        </TextContent>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Choose a different operating system, or connect <b>RHEL { osMajorVersion }</b> systems to Insights.\n            </Text>\n        </TextContent>\n        <WizardContextConsumer>\n            { ({ goToStepById }) => <Button onClick={() => goToStepById(1)}>Choose a different operating system</Button> }\n        </WizardContextConsumer>\n    </React.Fragment>\n);\n\nEmptyState.propTypes = {\n    osMajorVersion: propTypes.string\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n    <React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Select which of your <b>RHEL { osMajorVersion }</b> systems should be included\n                in this policy.<br />\n                Systems can be added or removed at any time.\n            </Text>\n        </TextContent>\n    </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n    osMajorVersion: propTypes.string\n};\n\nexport const EditPolicySystems = ({ change, osMajorVersion, selectedSystems }) => {\n    const onSystemSelect = (newSelectedSystems) => {\n        change('systems', newSelectedSystems);\n        change('osMinorVersionCounts', countOsMinorVersions(newSelectedSystems));\n    };\n\n    return (\n        <React.Fragment>\n            <TextContent className=\"pf-u-mb-md\">\n                <Text component={TextVariants.h1}>\n                    Systems\n                </Text>\n            </TextContent>\n            <Form>\n                <FormGroup>\n                    <InventoryTable\n                        showOsMinorVersionFilter={ [osMajorVersion] }\n                        prependComponent={ <PrependComponent osMajorVersion={ osMajorVersion } /> }\n                        emptyStateComponent={ <EmptyState osMajorVersion={ osMajorVersion } /> }\n                        columns={[\n                            Columns.Name,\n                            Columns.OperatingSystem\n                        ]}\n                        remediationsEnabled={false}\n                        compact\n                        showActions={ false }\n                        query={ GET_SYSTEMS_WITHOUT_FAILED_RULES }\n                        defaultFilter={ osMajorVersion && `os_major_version = ${osMajorVersion}` }\n                        enableExport={ false }\n                        preselectedSystems={ selectedSystems }\n                        onSelect={ onSystemSelect } />\n                </FormGroup>\n            </Form>\n        </React.Fragment>\n    );\n};\n\nEditPolicySystems.propTypes = {\n    osMajorVersion: propTypes.string,\n    selectedSystems: propTypes.array,\n    change: reduxFormPropTypes.change\n};\n\nEditPolicySystems.defaultProps = {\n    selectedSystems: []\n};\n\nconst selector = formValueSelector('policyForm');\nconst mapStateToProps = (state) => ({\n    osMajorVersion: selector(state, 'osMajorVersion'),\n    selectedSystems: selector(state, 'systems')\n});\n\nexport default compose(\n    connect(mapStateToProps),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicySystems);\n","import React, { useEffect } from 'react';\nimport { compose } from 'redux';\nimport { Field, reduxForm, formValueSelector, propTypes as reduxFormPropTypes } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Form, FormGroup, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { ReduxFormTextInput, ReduxFormTextArea } from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport {\n    ProfileThresholdField,\n    PolicyBusinessObjectiveTooltip\n} from 'PresentationalComponents';\n\nexport const EditPolicyDetails = ({ change, policy, refId }) => {\n\n    useEffect(() => {\n        if (policy && policy.refId !== refId) {\n            change('name', `${policy.name}`);\n            change('refId', `${policy.refId}`);\n            change('description', `${policy.description}`);\n        }\n    }, [policy]);\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Details\n                </Text>\n            </TextContent>\n            <br/>\n            <Form id='editpolicydetails'>\n                <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n                    <Field\n                        component={ReduxFormTextInput}\n                        type='text'\n                        isRequired={true}\n                        id=\"name\"\n                        name=\"name\"\n                        aria-describedby=\"name\" />\n                </FormGroup>\n                <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextInput}\n                        isDisabled\n                        id=\"refId\"\n                        name=\"refId\"\n                        aria-describedby=\"refId\" />\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"description\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextArea}\n                        id=\"description\"\n                        name=\"description\"\n                        aria-describedby=\"description\" />\n                </FormGroup>\n                <FormGroup\n                    label=\"Business objective\"\n                    labelIcon={ <PolicyBusinessObjectiveTooltip /> }\n                    fieldId=\"businessObjective\">\n                    <Field\n                        type=\"text\"\n                        component={ ReduxFormTextInput }\n                        id=\"businessObjective\"\n                        name=\"businessObjective\"\n                        aria-describedby=\"businessObjective\"\n                        defaultValue={ policy.businessObjective } />\n                </FormGroup>\n                <ProfileThresholdField\n                    previousThreshold={ policy.complianceThreshold } />\n            </Form>\n        </React.Fragment>\n    );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n    policy: propTypes.object,\n    refId: propTypes.string,\n    change: reduxFormPropTypes.change\n};\n\nconst mapStateToProps = (state) => {\n    const policy = JSON.parse(selector(state, 'profile'));\n    return {\n        policy,\n        refId: selector(state, 'refId'),\n        initialValues: {\n            name: `${policy.name}`,\n            refId: `${policy.refId}`,\n            description: `${policy.description}`,\n            benchmark: selector(state, 'benchmark'),\n            osMajorVersion: selector(state, 'osMajorVersion'),\n            profile: selector(state, 'profile')\n        }\n    };\n};\n\nexport default compose(\n    connect(mapStateToProps),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyDetails);\n","import React from 'react';\nimport {\n    Text,\n    TextVariants,\n    TextContent,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useQuery } from '@apollo/client';\n\nconst REVIEW = gql`\nquery review($benchmarkId: String!) {\n    benchmark(id: $benchmarkId) {\n        id\n        osMajorVersion\n    }\n}\n`;\n\nconst ReviewCreatedPolicy = ({\n    benchmarkId, name, businessObjective, complianceThreshold, parentProfileName, osMinorVersionCounts\n}) => {\n    const { data, error, loading } = useQuery(REVIEW, { variables: { benchmarkId } });\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const { benchmark: { osMajorVersion } } = data;\n\n    return (\n        <TextContent>\n            <Text component={TextVariants.h1}>\n                Review\n            </Text>\n            <Text>\n                Review your SCAP policy before finishing.\n            </Text>\n            <Text component={TextVariants.h3} style={ { marginTop: 0 } }>{ name }</Text>\n            <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>Policy type</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ parentProfileName }</TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Compliance threshold</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ complianceThreshold }%</TextListItem>\n                { businessObjective &&\n                    <React.Fragment>\n                        <TextListItem component={TextListItemVariants.dt}>Business objective</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{ businessObjective }</TextListItem>\n                    </React.Fragment>\n                }\n                <TextListItem component={TextListItemVariants.dt}>Systems</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                    <TextList component={TextListVariants.dl}>\n                        { osMinorVersionCounts.map(({ osMinorVersion, count }) => (\n                            <React.Fragment key={osMinorVersion}>\n                                <TextListItem component={TextListItemVariants.dt} style={{ fontWeight: 'normal' }}>\n                                    RHEL {osMajorVersion}.{osMinorVersion}\n                                </TextListItem>\n                                <TextListItem component={TextListItemVariants.dd}>\n                                    { count } { count > 1 ? 'systems' : 'system' }\n                                </TextListItem>\n                            </React.Fragment>\n                        )) }\n                    </TextList>\n                </TextListItem>\n            </TextList>\n        </TextContent>\n    );\n};\n\nReviewCreatedPolicy.propTypes = {\n    benchmarkId: propTypes.string,\n    refId: propTypes.string,\n    name: propTypes.string,\n    businessObjective: propTypes.string,\n    complianceThreshold: propTypes.number,\n    parentProfileName: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    }))\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect(\n    state => ({\n        benchmarkId: selector(state, 'benchmark'),\n        refId: selector(state, 'refId'),\n        name: selector(state, 'name'),\n        businessObjective: selector(state, 'businessObjective'),\n        osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n        complianceThreshold: parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n        parentProfileName: JSON.parse(selector(state, 'profile')).name,\n        rulesCount: selector(state, 'selectedRuleRefIds').length\n    })\n)(ReviewCreatedPolicy);\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Title, Button, Bullseye, EmptyState, EmptyStateBody, EmptyStateSecondaryActions,\n    EmptyStateVariant, EmptyStateIcon, List, ListItem\n} from '@patternfly/react-core';\nimport { ProgressBar } from 'PresentationalComponents';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from '@apollo/client/react/hoc';\nimport { usePolicy } from 'Mutations';\n\nconst EmtpyStateWithErrors = ({ errors }) => (\n    (errors && Array.isArray(errors) && errors.length > 0) ? (\n        <EmptyStateBody className='wizard-failed-errors'>\n            <List>\n                {\n                    errors.map((error) => (\n                        <ListItem key={ error }>{ error }</ListItem>\n                    ))\n                }\n            </List>\n        </EmptyStateBody>\n    ) : null\n);\n\nEmtpyStateWithErrors.propTypes = {\n    errors: propTypes.array\n};\n\nexport const FinishedCreatePolicy = ({\n    onWizardFinish,\n    cloneFromProfileId,\n    description,\n    name,\n    complianceThreshold,\n    businessObjective,\n    refId,\n    benchmarkId,\n    systems,\n    selectedRuleRefIds\n}) => {\n    const [percent, setPercent] = useState(0);\n    const [message, setMessage] = useState('This usually takes a minute or two.');\n    const [errors, setErrors] = useState(null);\n    const [failed, setFailed] = useState(false);\n    const updatePolicy = usePolicy();\n\n    const onProgress = (progress) => {\n        setPercent(progress * 100);\n    };\n\n    useEffect(() => {\n        const newPolicy = {\n            cloneFromProfileId,\n            description,\n            name,\n            complianceThreshold,\n            businessObjective: { title: businessObjective },\n            refId,\n            benchmarkId,\n            hosts: systems,\n            selectedRuleRefIds\n        };\n\n        updatePolicy(null, newPolicy, onProgress).then(() => {\n            setPercent(100);\n            setMessage();\n        }).catch((error) => {\n            setMessage(error.networkError?.message);\n            setErrors(error.networkError?.result?.errors);\n            setFailed(true);\n        });\n    }, []);\n\n    return (\n        <Bullseye>\n            <EmptyState variant={EmptyStateVariant.full}>\n                <EmptyStateIcon icon={WrenchIcon} />\n                <br/>\n                <Title headingLevel=\"h1\" size='lg'>\n                    Creating policy\n                </Title>\n                <EmptyStateBody>\n                    <ProgressBar percent={percent} failed={failed} />\n                </EmptyStateBody>\n                <EmptyStateBody className={failed && 'wizard-failed-message'}>\n                    { message }\n                </EmptyStateBody>\n                <EmtpyStateWithErrors error={ errors } />\n                <EmptyStateSecondaryActions>\n                    {\n                        (percent === 100 || failed) &&\n                            <Button\n                                variant={'primary'}\n                                ouiaId=\"ReturnToAppButton\"\n                                onClick={() => { onWizardFinish(); }}>\n                                { failed ? 'Back' : 'Return to application' }\n                            </Button>\n                    }\n                </EmptyStateSecondaryActions>\n            </EmptyState>\n        </Bullseye>\n    );\n};\n\nFinishedCreatePolicy.propTypes = {\n    benchmarkId: propTypes.string.isRequired,\n    businessObjective: propTypes.object,\n    cloneFromProfileId: propTypes.string.isRequired,\n    refId: propTypes.string.isRequired,\n    name: propTypes.string.isRequired,\n    description: propTypes.string,\n    systems: propTypes.array,\n    complianceThreshold: propTypes.number,\n    onWizardFinish: propTypes.func,\n    selectedRuleRefIds: propTypes.arrayOf(propTypes.string).isRequired\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            benchmarkId: selector(state, 'benchmark'),\n            businessObjective: selector(state, 'businessObjective'),\n            cloneFromProfileId: JSON.parse(selector(state, 'profile')).id,\n            refId: selector(state, 'refId'),\n            name: selector(state, 'name'),\n            description: selector(state, 'description'),\n            complianceThreshold: parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n            systems: selector(state, 'systems'),\n            selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: true,\n        forceUnregisterOnUnmount: true\n    }),\n    withApollo\n)(FinishedCreatePolicy);\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport { default as EditPolicyRules } from './EditPolicyProfilesRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport { validateBenchmarkPage, validateDetailsPage, validateRulesPage, validateSystemsPage } from './validate';\n\nexport const CreatePolicy = ({\n    benchmark, osMajorVersion, complianceThreshold, name, profile, refId, selectedRuleRefIds, systemIds\n}) => {\n    const history = useHistory();\n    const [stepIdReached, setStepIdReached] = useState(1);\n\n    const resetAnchor = () => {\n        const { location } = history;\n        if (location.hash) {\n            history.push({ ...location, hash: '' });\n        }\n    };\n\n    const onNext = ({ id }) => {\n        setStepIdReached(stepIdReached < id ? id : stepIdReached);\n        resetAnchor();\n    };\n\n    const onClose = () => {\n        history.push('/scappolicies');\n    };\n\n    const steps = [\n        {\n            id: 1,\n            name: 'Create SCAP policy',\n            component: <CreateSCAPPolicy/>,\n            enableNext: validateBenchmarkPage(benchmark, osMajorVersion, profile)\n        },\n        {\n            id: 2,\n            name: 'Details',\n            component: <EditPolicyDetails/>,\n            canJumpTo: stepIdReached >= 2,\n            enableNext: validateDetailsPage(name, refId, complianceThreshold)\n        },\n        {\n            id: 3,\n            name: 'Systems',\n            component: <EditPolicySystems/>,\n            canJumpTo: stepIdReached >= 3,\n            enableNext: validateSystemsPage(systemIds)\n        },\n        {\n            id: 4,\n            name: 'Rules',\n            component: <EditPolicyRules/>,\n            canJumpTo: systemIds?.length > 0 && stepIdReached >= 4,\n            enableNext: validateRulesPage(selectedRuleRefIds)\n        },\n        {\n            id: 5,\n            name: 'Review',\n            component: <ReviewCreatedPolicy/>,\n            nextButtonText: 'Finish',\n            canJumpTo: (\n                validateRulesPage(selectedRuleRefIds) &&\n                systemIds?.length > 0 &&\n                stepIdReached >= 5\n            )\n        },\n        {\n            id: 6,\n            name: 'Finished',\n            component: <FinishedCreatePolicy onWizardFinish={ onClose } />,\n            isFinishedStep: true,\n            canJumpTo: systemIds?.length > 0 && stepIdReached >= 6\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <Wizard\n                isOpen\n                onNext={ onNext }\n                onGoToStep={ resetAnchor }\n                onBack={ resetAnchor }\n                onClose={ onClose }\n                title=\"Create SCAP policy\"\n                description=\"Create a new policy for managing SCAP compliance\"\n                steps={ steps } />\n        </React.Fragment>\n    );\n};\n\nCreatePolicy.propTypes = {\n    benchmark: propTypes.string,\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    complianceThreshold: propTypes.string,\n    businessObjective: propTypes.object,\n    dispatch: propTypes.func,\n    isOpen: propTypes.bool,\n    name: propTypes.string,\n    onWizardFinish: propTypes.func,\n    profile: propTypes.string,\n    refId: propTypes.string,\n    selectedRuleRefIds: propTypes.arrayOf(propTypes.string),\n    systemIds: propTypes.arrayOf(propTypes.string)\n};\n\nCreatePolicy.defaultProps = {\n    isOpen: false\n};\n\nconst selector = formValueSelector('policyForm');\nexport default connect(\n    state => ({\n        benchmark: selector(state, 'benchmark'),\n        osMajorVersion: selector(state, 'osMajorVersion'),\n        osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n        businessObjective: selector(state, 'businessObjective'),\n        complianceThreshold: selector(state, 'complianceThreshold') || '100.0',\n        name: selector(state, 'name'),\n        profile: selector(state, 'profile'),\n        refId: selector(state, 'refId'),\n        selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n        systemIds: selector(state, 'systems')\n    })\n)(CreatePolicy);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    FormGroup, TextArea, TextInput\n} from '@patternfly/react-core';\nimport {\n    PolicyThresholdTooltip,\n    PolicyBusinessObjectiveTooltip\n} from 'PresentationalComponents';\nimport { thresholdValid } from '../CreatePolicy/validate';\n\nexport const useThresholdValidate = () => {\n    const [validThreshold, setValidThreshold] = useState(true);\n    return [validThreshold, (threshold) => {\n        const valid = thresholdValid(threshold);\n        setValidThreshold(valid);\n        return valid;\n    }];\n};\n\nconst EditPolicyDetailsTab = ({ policy, setUpdatedPolicy }) => {\n    const [validThreshold, validateThreshold] = useThresholdValidate();\n\n    return <div className=\"pf-c-form\">\n        <FormGroup label=\"Policy description\" isRequired fieldId=\"description\">\n            <TextArea\n                style={ { width: 800, height: 110 } }\n                isRequired\n                type=\"text\"\n                id=\"description\"\n                name=\"description\"\n                aria-describedby=\"description\"\n                defaultValue={ policy.description }\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) => ({\n                        ...policy,\n                        description: value\n                    }));\n                }} />\n        </FormGroup>\n\n        <FormGroup\n            label=\"Business objective\"\n            labelIcon={ <PolicyBusinessObjectiveTooltip /> }\n            fieldId=\"business-objective\">\n            <TextInput\n                type=\"text\"\n                style={ { width: 300 } }\n                id=\"business-objective\"\n                name=\"business-objective\"\n                aria-describedby=\"business-objective\"\n                defaultValue={ policy?.businessObjective?.title }\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) =>({\n                        ...policy,\n                        businessObjective: {\n                            ...policy.businessObjective,\n                            title: value\n                        }\n                    }));\n                }} />\n        </FormGroup>\n\n        <FormGroup\n            validated={ validThreshold ? 'default' : 'error' }\n            label='Compliance threshold (%)'\n            labelIcon={ <PolicyThresholdTooltip /> }\n            fieldId='policy-threshold'\n            helperTextInvalid='Threshold has to be a number between 0 and 100'\n            helperText='A value of 95% or higher is recommended'>\n            <TextInput\n                type='number'\n                style={ { width: 150 } }\n                name='compliance-threshold'\n                id='compliance-threshold'\n                defaultValue={ policy.complianceThreshold }\n                aria-describedby=\"policy-threshold\"\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) =>({\n                        ...policy,\n                        complianceThreshold: value,\n                        complianceThresholdValid: validateThreshold(value)\n                    }));\n                }} />\n        </FormGroup>\n    </div>;\n};\n\nEditPolicyDetailsTab.propTypes = {\n    policy: propTypes.shape({\n        description: propTypes.string,\n        businessObjective: propTypes.object,\n        complianceThreshold: propTypes.oneOfType([\n            propTypes.string,\n            propTypes.number\n        ])\n    }),\n    setUpdatedPolicy: propTypes.func\n};\n\nexport default EditPolicyDetailsTab;\n","import React, { useLayoutEffect } from 'react';\nimport {\n    EmptyState, EmptyStateBody, Text, TextContent, Title\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n    TabbedRules, profilesWithRulesToSelection, tabsDataToOsMinorMap, extendProfilesByOsMinor\n} from 'PresentationalComponents/TabbedRules';\nimport { sortingByProp } from 'Utilities/helpers';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\n\nconst PROFILES_QUERY = gql`\nquery Profiles($filter: String!){\n    profiles(search: $filter){\n        edges {\n            node {\n                id\n                name\n                refId\n                osMinorVersion\n                osMajorVersion\n                policy {\n                    id\n\n                }\n                policyType\n                benchmark {\n                    id\n                    refId\n                    latestSupportedOsMinorVersions\n                    osMajorVersion\n                }\n                ssgVersion\n                rules {\n                    id\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n    }\n}\n`;\n\nconst BENCHMARKS_QUERY = gql`\nquery Benchmarks($filter: String!){\n    benchmarks(search: $filter){\n        nodes {\n            id\n            latestSupportedOsMinorVersions\n            profiles {\n                id\n                refId\n                ssgVersion\n            }\n        }\n    }\n}\n`;\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) => (\n    benchmarks.find((benchmark) =>\n        benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n    )\n);\n\nconst getBenchmarkProfile = (benchmark, profileRefId) => (\n    benchmark.profiles.find((benchmarkProfile) => (benchmarkProfile.refId === profileRefId))\n);\n\nconst EditPolicyRulesTabEmptyState = () => <EmptyState>\n    <Title headingLevel=\"h5\" size=\"lg\">\n        No rules can be configured\n    </Title>\n    <EmptyStateBody>\n        This policy has no associated systems, and therefore no rules can be configured.\n    </EmptyStateBody>\n    <EmptyStateBody>\n        Add at least one system to configure rules for this policy.\n    </EmptyStateBody>\n</EmptyState>;\n\nexport const toTabsData = (policy, osMinorVersionCounts, benchmarks) => (\n    Object.values(osMinorVersionCounts).sort(\n        sortingByProp('osMinorVersion', 'desc')\n    ).map(({ osMinorVersion, count: systemCount }) => {\n        osMinorVersion = `${osMinorVersion}`;\n        let profile = policy.policy.profiles.find((profile) => (profile.osMinorVersion === osMinorVersion));\n        let osMajorVersion = policy.osMajorVersion;\n\n        if (!profile && benchmarks) {\n            const benchmark = getBenchmarkBySupportedOsMinor(benchmarks, osMinorVersion);\n            if (benchmark) {\n                const benchmarkProfile = getBenchmarkProfile(benchmark, policy.refId);\n                if (benchmarkProfile) {\n                    profile = policy.policy.profiles.find((profile) =>\n                        profile.parentProfileId === benchmarkProfile.id\n                        && profile.osMinorVersion === osMinorVersion\n                    );\n\n                    profile = {\n                        ...benchmarkProfile,\n                        benchmark,\n                        osMajorVersion,\n                        ...profile\n                    };\n                }\n            }\n        }\n\n        return {\n            profile,\n            systemCount,\n            newOsMinorVersion: osMinorVersion\n        };\n    }).filter(({ profile, newOsMinorVersion }) => !!profile && newOsMinorVersion)\n);\n\nexport const EditPolicyRulesTab = ({\n    policy,\n    selectedRuleRefIds,\n    setSelectedRuleRefIds,\n    osMinorVersionCounts,\n    setNewRuleTabs\n}) => {\n    const osMajorVersion = policy?.osMajorVersion;\n    const osMinorVersions = Object.keys(osMinorVersionCounts).sort();\n    const benchmarkSearch = `os_major_version = ${ osMajorVersion } ` +\n        `and latest_supported_os_minor_version ^ \"${ osMinorVersions.join(',') }\"`;\n\n    const {\n        data: benchmarksData,\n        error: benchmarksError,\n        loading: benchmarksLoading\n    } = useQuery(BENCHMARKS_QUERY, {\n        variables: {\n            filter: benchmarkSearch\n        },\n        skip: osMinorVersions.length === 0\n    });\n\n    const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n    const tabsData = toTabsData(policy, osMinorVersionCounts, benchmarks);\n    const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n    const filter = Object.keys(profileToOsMinorMap).map((i) => (`id = ${ i }`)).join(' OR ');\n    const {\n        data: profilesData, error: profilesError, loading: profilesLoading\n    } = useQuery(PROFILES_QUERY, {\n        variables: {\n            filter\n        },\n        skip: filter.length === 0\n    });\n    const loadingState = ((profilesLoading || benchmarksLoading) ? true : undefined);\n    const dataState = ((!loadingState && tabsData?.length > 0) ? profilesData : undefined);\n\n    if (!loadingState) {\n        setNewRuleTabs(!!tabsData.find(tab => (\n            policy.policy.profiles.find(profile => (\n                profile.osMinorVersion !== tab.newOsMinorVersion\n            ))\n        )));\n    }\n\n    useLayoutEffect(() => {\n        if (profilesData) {\n            const profiles = profilesData?.profiles.edges.map((p) => (p.node)) || [];\n            const profilesWithOs = extendProfilesByOsMinor(profiles, profileToOsMinorMap);\n            setSelectedRuleRefIds((prevSelection) =>\n                profilesWithRulesToSelection(profilesWithOs, prevSelection)\n            );\n        }\n    }, [profilesData]);\n    const error = benchmarksError || profilesError;\n\n    return <StateViewWithError stateValues={ {\n        error,\n        data: !error && dataState,\n        loading: loadingState,\n        empty: !loadingState && !dataState && !error\n    } }>\n        <StateViewPart stateKey=\"loading\">\n            <EmptyTable><Spinner/></EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n            <TextContent>\n                <Text>\n                    Different release versions of RHEL are associated with different versions of\n                    the SCAP Security Guide (SSG), therefore each release must be customized independently.\n                </Text>\n            </TextContent>\n            <TabbedRules\n                columns={ [Columns.Name, Columns.Severity, Columns.Ansible] }\n                tabsData={ tabsData }\n                selectedRuleRefIds={ selectedRuleRefIds }\n                setSelectedRuleRefIds={ setSelectedRuleRefIds }\n                remediationsEnabled={ false }\n                selectedFilter\n                level={ 1 } />\n        </StateViewPart>\n        <StateViewPart stateKey=\"empty\">\n            <EditPolicyRulesTabEmptyState />\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nEditPolicyRulesTab.propTypes = {\n    setNewRuleTabs: propTypes.func,\n    policy: propTypes.object,\n    osMinorVersionCounts: propTypes.shape({\n        osMinorVersion: propTypes.shape({\n            osMinorVersion: propTypes.number,\n            count: propTypes.number\n        })\n    }),\n    selectedRuleRefIds: propTypes.array,\n    setSelectedRuleRefIds: propTypes.func\n};\n\nexport default EditPolicyRulesTab;\n","import React from 'react';\nimport { Alert, AlertActionLink, Text, TextContent } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { InventoryTable } from 'SmartComponents';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\nimport { useHistory } from 'react-router-dom';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n    <React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                You do not have any <b>RHEL { osMajorVersion }</b> systems connected to Insights and enabled for Compliance.\n            </Text>\n        </TextContent>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Connect RHEL { osMajorVersion } systems to Insights.\n            </Text>\n        </TextContent>\n    </React.Fragment>\n);\n\nEmptyState.propTypes = {\n    osMajorVersion: propTypes.string\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n    <React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Select which of your <b>RHEL { osMajorVersion }</b> systems should be included\n                in this policy.\n            </Text>\n        </TextContent>\n    </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n    osMajorVersion: propTypes.string\n};\n\nconst EditPolicySystemsTab = ({ policy: { osMajorVersion }, newRuleTabs, onSystemSelect, selectedSystems }) => {\n    const { push, location } = useHistory();\n\n    return (\n        <React.Fragment>\n            <InventoryTable\n                columns={[\n                    Columns.Name,\n                    Columns.OperatingSystem\n                ]}\n                showOsMinorVersionFilter={ [osMajorVersion] }\n                prependComponent={ <PrependComponent osMajorVersion={ osMajorVersion } />  }\n                emptyStateComponent={ <EmptyState osMajorVersion={ osMajorVersion } />  }\n                compact\n                showActions={ false }\n                query={ GET_SYSTEMS_WITHOUT_FAILED_RULES }\n                defaultFilter={ osMajorVersion && `os_major_version = ${osMajorVersion}` }\n                enableExport={ false }\n                remediationsEnabled={ false }\n                preselectedSystems={ selectedSystems }\n                onSelect={ onSystemSelect }\n            />\n            {newRuleTabs && <Alert\n                variant=\"info\"\n                isInline\n                title=\"You selected a system that has a release version previously not included in this policy.\"\n                actionLinks={\n                    <AlertActionLink onClick={ () => push({ ...location, hash: '#rules' }) }>Open rule editing</AlertActionLink>\n                }>\n                <p>If you have edited any rules for this policy, you will need to do so for this release version as well.</p>\n            </Alert>}\n        </React.Fragment>\n    );\n};\n\nEditPolicySystemsTab.propTypes = {\n    policy: propTypes.object,\n    newRuleTabs: propTypes.bool,\n    onSystemSelect: propTypes.func,\n    selectedSystems: propTypes.array\n};\n\nexport default EditPolicySystemsTab;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { Form, Tab, TabTitleText } from '@patternfly/react-core';\nimport { RoutedTabs } from 'PresentationalComponents';\nimport EditPolicyDetailsTab from './EditPolicyDetailsTab';\nimport EditPolicyRulesTab from './EditPolicyRulesTab';\nimport EditPolicySystemsTab from './EditPolicySystemsTab';\nimport { mapCountOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport { profilesWithRulesToSelection } from 'PresentationalComponents/TabbedRules';\n\nconst profilesToOsMinorMap = (profiles, hosts) => (\n    (profiles || []).reduce((acc, profile) => {\n        if (profile.osMinorVersion !== '') {\n            acc[profile.osMinorVersion] ||= { osMinorVersion: profile.osMinorVersion, count: 0 };\n        }\n\n        return acc;\n    }, mapCountOsMinorVersions(hosts || []))\n);\n\nexport const EditPolicyForm = ({\n    policy,\n    setUpdatedPolicy,\n    selectedRuleRefIds,\n    setSelectedRuleRefIds,\n    selectedSystems,\n    setSelectedSystems\n}) => {\n    const policyProfiles = policy?.policy?.profiles || [];\n    const [osMinorVersionCounts, setOsMinorVersionCounts] = useState({});\n    const [newRuleTabs, setNewRuleTabs] = useState(false);\n\n    const handleSystemSelect = (selectedSystems) => {\n        setSelectedSystems(selectedSystems);\n\n        setOsMinorVersionCounts(\n            profilesToOsMinorMap(policyProfiles, selectedSystems)\n        );\n    };\n\n    const updateSelectedRuleRefIds = () => {\n        if (policy) {\n            // existing policy profiles and their rule sets\n            const profilesWithOsMinor = policyProfiles.filter(({ osMinorVersion }) =>\n                !!osMinorVersion\n            );\n            setSelectedRuleRefIds(profilesWithRulesToSelection(profilesWithOsMinor));\n        }\n    };\n\n    useEffect(() => {\n        if (policy) {\n            const complianceThresholdValid =\n                (policy.complianceThreshold < 101 && policy.complianceThreshold > 0);\n            setUpdatedPolicy({\n                ...policy,\n                complianceThresholdValid\n            });\n            updateSelectedRuleRefIds();\n            handleSystemSelect(policy.hosts);\n        }\n    }, [policy]);\n\n    return (\n        <Form>\n            <RoutedTabs defaultTab='details'>\n                <Tab eventKey='details' title={<TabTitleText>Details</TabTitleText>}>\n                    <EditPolicyDetailsTab\n                        policy={ policy }\n                        setUpdatedPolicy={ setUpdatedPolicy } />\n                </Tab>\n\n                <Tab eventKey='rules' title={ <TabTitleText>Rules</TabTitleText> }>\n                    <EditPolicyRulesTab\n                        policy={ policy }\n                        setNewRuleTabs={ setNewRuleTabs }\n                        setSelectedRuleRefIds={ setSelectedRuleRefIds }\n                        selectedRuleRefIds={ selectedRuleRefIds }\n                        osMinorVersionCounts={ osMinorVersionCounts }\n                    />\n                </Tab>\n\n                <Tab eventKey='systems' title={ <TabTitleText>Systems</TabTitleText> }>\n                    <EditPolicySystemsTab\n                        policy={ policy }\n                        newRuleTabs={ newRuleTabs }\n                        selectedSystems={ selectedSystems }\n                        onSystemSelect={ handleSystemSelect }\n                    />\n                </Tab>\n            </RoutedTabs>\n        </Form>\n    );\n};\n\nEditPolicyForm.propTypes = {\n    policy: propTypes.object,\n    setUpdatedPolicy: propTypes.func,\n    selectedRuleRefIds: propTypes.arrayOf(propTypes.object),\n    setSelectedRuleRefIds: propTypes.func,\n    setSelectedSystems: propTypes.func,\n    selectedSystems: propTypes.array\n};\n\nexport default EditPolicyForm;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Button, Modal, Spinner } from '@patternfly/react-core';\nimport { useLinkToBackground, useAnchor } from 'Utilities/Router';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport EditPolicyForm from './EditPolicyForm';\nimport { usePolicy } from 'Mutations';\n\nexport const MULTIVERSION_QUERY = gql`\nquery Profile($policyId: String!){\n    profile(id: $policyId) {\n        id\n        name\n        refId\n        external\n        description\n        totalHostCount\n        compliantHostCount\n        complianceThreshold\n        majorOsVersion\n        osMajorVersion\n        lastScanned\n        policyType\n        policy {\n            id\n            name\n            refId\n            profiles {\n                id\n                ssgVersion\n                parentProfileId\n                name\n                refId\n                osMinorVersion\n                osMajorVersion\n                benchmark {\n                    id\n                    title\n                    latestSupportedOsMinorVersions\n                    osMajorVersion\n                }\n                rules {\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n        businessObjective {\n            id\n            title\n        }\n        hosts {\n            id\n            osMinorVersion\n            osMajorVersion\n        }\n    }\n}\n`;\n\nexport const EditPolicy = ({ route }) => {\n    const { policy_id: policyId } = useParams();\n    const { data, loading, error } = useQuery(MULTIVERSION_QUERY, {\n        variables: { policyId }\n    });\n    const policy = data?.profile;\n    const anchor = useAnchor();\n    const [updatedPolicy, setUpdatedPolicy] = useState(null);\n    const [selectedRuleRefIds, setSelectedRuleRefIds] = useState([]);\n    const [selectedSystems, setSelectedSystems] = useState([]);\n    const updatePolicy = usePolicy();\n    const linkToBackground = useLinkToBackground('/scappolicies');\n    const [isSaving, setIsSaving] = useState();\n    const saveEnabled = updatedPolicy && !updatedPolicy.complianceThresholdValid;\n\n    const linkToBackgroundWithHash = () => {\n        linkToBackground({ hash: anchor });\n    };\n\n    const onSave = () => {\n        if (isSaving) { return; }\n\n        setIsSaving(true);\n        const updatedPolicyHostsAndRules = {\n            ...updatedPolicy,\n            selectedRuleRefIds,\n            hosts: selectedSystems\n        };\n        updatePolicy(policy, updatedPolicyHostsAndRules).then(() => {\n            setIsSaving(false);\n            linkToBackgroundWithHash();\n        }).catch(() => {\n            // TODO report error\n            setIsSaving(false);\n            linkToBackgroundWithHash();\n        });\n    };\n\n    const actions = [\n        <Button\n            isDisabled={ saveEnabled }\n            key='save'\n            ouiaId=\"EditPolicySaveButton\"\n            variant='primary'\n            spinnerAriaValueText='Saving'\n            isLoading={ isSaving }\n            onClick={ onSave }>\n            Save\n        </Button>,\n        <Button\n            key='cancel'\n            ouiaId=\"EditPolicyCancelButton\"\n            variant='link'\n            onClick={ () => linkToBackgroundWithHash() }>\n            Cancel\n        </Button>\n    ];\n\n    useTitleEntity(route, policy?.name);\n\n    return <Modal\n        isOpen\n        position={ 'top' }\n        style={ { minHeight: '350px' } }\n        variant={ 'large' }\n        ouiaId=\"EditPolicyModal\"\n        title={ `Edit ${ policy ? policy.name : '' }` }\n        onClose={ () => linkToBackgroundWithHash() }\n        actions={ actions }>\n\n        <StateViewWithError stateValues={ { policy, loading, error } }>\n            <StateViewPart stateKey=\"loading\">\n                <Spinner />\n            </StateViewPart>\n            <StateViewPart stateKey=\"policy\">\n                <EditPolicyForm\n                    { ...{\n                        policy,\n                        updatedPolicy,\n                        setUpdatedPolicy,\n                        selectedRuleRefIds,\n                        setSelectedRuleRefIds,\n                        selectedSystems,\n                        setSelectedSystems\n                    } } />\n            </StateViewPart>\n        </StateViewWithError>\n    </Modal>;\n};\n\nEditPolicy.propTypes = {\n    route: propTypes.object\n};\n\nexport default EditPolicy;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { UnsupportedSSGVersion, ComplianceScore as complianceScore } from 'PresentationalComponents';\nimport {\n    profilesRulesPassed, profilesRulesFailed, systemSupportedByProfiles\n} from 'Utilities/ruleHelpers';\n\nconst SystemLink = ({ id, children }) => (\n    <Link to={{ pathname: `/systems/${id}` }}>{ children }</Link>\n);\n\nSystemLink.propTypes = {\n    id: propTypes.string,\n    children: propTypes.node\n};\n\nexport const Name = ({ id, name, osMajorVersion, osMinorVersion, showOsInfo = false, showLink = false }) => {\n    const hasOsInfo = (osMajorVersion, osMinorVersion) => (\n        !!osMajorVersion && !!osMinorVersion && showOsInfo\n    );\n\n    return <TextContent>\n        { showLink ?\n            <SystemLink { ...{ id } }>{ name }</SystemLink> :\n            name\n        }\n\n        {\n            hasOsInfo(osMajorVersion, osMinorVersion) &&\n                <Text component={TextVariants.small}>\n                    RHEL {osMajorVersion}.{osMinorVersion}\n                </Text>\n        }\n\n    </TextContent>;\n};\n\nName.propTypes = {\n    id: propTypes.string,\n    name: propTypes.string,\n    osMajorVersion: propTypes.string,\n    osMinorVersion: propTypes.string,\n    showOsInfo: propTypes.bool,\n    showLink: propTypes.bool\n};\n\nexport const profilesSsgVersions = (profiles) => (\n    profiles.map((p) => (p.ssgVersion)).filter((version) => (!!version)).join(', ')\n);\n\nexport const SSGVersion = ({ ssgVersion = 'Not available', supported }) => (\n    supported ? ssgVersion :\n        <UnsupportedSSGVersion messageVariant='singular'>\n            { ssgVersion }\n        </UnsupportedSSGVersion>\n);\n\nSSGVersion.propTypes = {\n    supported: propTypes.bool,\n    ssgVersion: propTypes.string\n};\n\nexport const SSGVersions = ({ testResultProfiles = [] }) => (\n    testResultProfiles.length !== 0 ? testResultProfiles.map((profile) => (\n        <SSGVersion key={`ssgversion-${profile.id}`} { ...profile } />\n    )) : 'Not available'\n);\n\nSSGVersions.propTypes = {\n    testResultProfiles: propTypes.array\n};\n\nexport const DetailsLink = ({ id, testResultProfiles = [] }) => (\n    testResultProfiles.length > 0 ? <SystemLink { ...{ id } }>\n        View Report\n    </SystemLink> : ''\n);\n\nDetailsLink.propTypes = {\n    id: propTypes.string,\n    testResultProfiles: propTypes.array\n};\n\nexport const Policies = ({ policies }) => (\n    (policies || []).map((p) => (p.name)).join(', ')\n);\n\nexport const FailedRules = ({ id, testResultProfiles }) => {\n    const rulesFailed = profilesRulesFailed(testResultProfiles).length;\n    return <SystemLink { ...{ id } }>\n        { rulesFailed }\n    </SystemLink>;\n};\n\nFailedRules.propTypes = {\n    id: propTypes.string,\n    testResultProfiles: propTypes.array\n};\n\nconst NEVER = 'Never';\n\nexport const complianceScoreData = (profiles) => {\n    const scoreTotal = profiles.reduce((acc, profile) => acc + profile.score, 0);\n    const rulesPassed = profilesRulesPassed(profiles).length;\n    const rulesFailed = profilesRulesFailed(profiles).length;\n    const numScored = profiles.reduce((acc, profile) => {\n        if (profilesRulesPassed([profile]).length + profilesRulesFailed([profile]).length > 0) { return acc + 1; }\n\n        return acc;\n    }, 0);\n    const score = numScored ? scoreTotal / numScored : 0;\n    const compliant = profiles.every(profile => (\n        profile.lastScanned === NEVER || profile.compliant === true\n    ));\n\n    return {\n        score,\n        rulesPassed,\n        rulesFailed,\n        compliant,\n        supported: systemSupportedByProfiles(profiles)\n    };\n};\n\nexport const ComplianceScore = ({ testResultProfiles }) => (\n    complianceScore(complianceScoreData(testResultProfiles))\n);\n\nComplianceScore.propTypes = {\n    testResultProfiles: propTypes.array\n};\n\nexport const lastScanned = (profiles) => {\n    const dates = profiles.map((profile) => new Date(profile.lastScanned));\n    const last = new Date(Math.max.apply(null, dates.filter((date) => isFinite(date))));\n    const result = (last instanceof Date && isFinite(last)) ? last : NEVER;\n\n    return result;\n};\n\nexport const LastScanned = ({ testResultProfiles: profiles }) => {\n    const lastScannedDate = lastScanned(profiles || []);\n\n    return (lastScannedDate instanceof Date) ?\n        <DateFormat date={Date.parse(lastScannedDate)} type='relative' />\n        : lastScannedDate;\n};\n\nLastScanned.propTypes = {\n    testResultProfiles: propTypes.array\n};\n","import { complianceScoreString } from 'PresentationalComponents';\nimport { profilesRulesFailed } from 'Utilities/ruleHelpers';\nimport { renderComponent } from 'Utilities/helpers';\n\nimport {\n    Name as NameCell, ComplianceScore as ComplianceScoreCell, DetailsLink as DetailsLinkCell,\n    FailedRules as FailedRulesCell, LastScanned as LastScannedCell, Policies as PoliciesCell,\n    SSGVersions as SsgVersionCell, complianceScoreData, lastScanned\n} from './Cells';\n\nconst disableSorting = { isStatic: true };\n\nexport const Name = {\n    title: 'Name',\n    props: {\n        width: 40,\n        ...disableSorting\n    },\n    exportKey: 'name',\n    renderExport: (name) => (String(name)),\n    renderFunc: renderComponent(NameCell)\n};\n\nexport const customName = (props) => ({\n    ...Name,\n    props: {\n        ...Name.props,\n        ...props\n    },\n    renderFunc: renderComponent(NameCell, props)\n});\n\nexport const SsgVersion = {\n    title: 'SSG version',\n    props: disableSorting,\n    exportKey: 'testResultProfiles',\n    renderExport: (testResultProfiles) => (\n        testResultProfiles.map(({ supported, ssgVersion }) =>(\n            `${ !supported ? '!' : '' }${ ssgVersion }`\n        )).join(', ')\n    ),\n    renderFunc: renderComponent(SsgVersionCell)\n};\n\nexport const Policies = {\n    title: 'Policies',\n    exportKey: 'policies',\n    renderExport: (policies) => (\n        policies.map(({ name }) => (name)).join(', ')\n    ),\n    props: {\n        width: 40,\n        ...disableSorting\n    },\n    renderFunc: renderComponent(PoliciesCell)\n};\n\nexport const DetailsLink = {\n    title: '',\n    export: false,\n    props: {\n        width: 20,\n        ...disableSorting\n    },\n    renderFunc: renderComponent(DetailsLinkCell)\n};\n\nexport const FailedRules = {\n    title: 'Failed rules',\n    exportKey: 'testResultProfiles',\n    props: {\n        width: 5,\n        ...disableSorting\n    },\n    renderExport: (testResultProfiles) => (\n        profilesRulesFailed(testResultProfiles).length\n    ),\n    renderFunc: renderComponent(FailedRulesCell)\n};\n\nexport const ComplianceScore = {\n    title: 'Compliance score',\n    exportKey: 'testResultProfiles',\n    props: {\n        width: 5,\n        ...disableSorting\n    },\n    renderExport: (testResultProfiles) => (\n        complianceScoreString(complianceScoreData(testResultProfiles))\n    ),\n    renderFunc: renderComponent(ComplianceScoreCell)\n};\n\nexport const LastScanned = {\n    title: 'Last scanned',\n    exportKey: 'testResultProfiles',\n    props: {\n        width: 10,\n        ...disableSorting\n    },\n    renderExport: (testResultProfiles) => (\n        lastScanned(testResultProfiles)\n    ),\n    renderFunc: renderComponent(LastScannedCell)\n};\n\nconst operatingSystemString = ({ osMinorVersion, osMajorVersion }) => (\n    `RHEL ${osMajorVersion}.${osMinorVersion}`\n);\n\nexport const OperatingSystem  = {\n    title: 'Operating system',\n    props: disableSorting,\n    renderExport: (cell) => (\n        operatingSystemString(cell)\n    ),\n    renderFunc: (_data, _id, system) => (\n        operatingSystemString(system)\n    )\n};\n","import gql from 'graphql-tag';\nimport pickBy from 'lodash/pickBy';\nimport {\n    systemsPolicyFilterConfiguration, systemsOsFilterConfiguration, systemsOsMinorFilterConfiguration\n} from '@/constants';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { entitiesReducer } from 'Store/Reducers/SystemStore';\n\nexport const GET_SYSTEMS = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    refId\n                    lastScanned\n                    compliant\n                    external\n                    score\n                    supported\n                    ssgVersion\n                    majorOsVersion\n                    rules {\n                        refId\n                        title\n                        compliant\n                        remediationAvailable\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const GET_SYSTEMS_WITHOUT_FAILED_RULES = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    lastScanned\n                    external\n                    compliant\n                    score\n                    supported\n                    ssgVersion\n                    policy {\n                        id\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const policyFilter = (policies, osFilter) => ([\n    ...systemsPolicyFilterConfiguration(policies),\n    ...(osFilter ? systemsOsFilterConfiguration(policies) : [])\n]);\n\nexport const osMinorVersionFilter = (...args) => systemsOsMinorFilterConfiguration(...args);\n\nexport const initFilterState = (filterConfig) => (\n    pickBy(filterConfig.initialDefaultState(), (value) => (!!value))\n);\n\nexport const defaultOnLoad = (columns) => (({\n    INVENTORY_ACTION_TYPES,\n    mergeWithEntities\n}) => (\n    getRegistry().register({\n        ...mergeWithEntities(\n            entitiesReducer(\n                INVENTORY_ACTION_TYPES, columns\n            )\n        )\n    })\n));\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Skeleton, { SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { registryDecorator } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { InventoryDetail, DetailWrapper } from '@redhat-cloud-services/frontend-components/Inventory';\n\n@registryDecorator()\nclass InventoryDetails extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <DetailWrapper onLoad={({ mergeWithDetail }) => this.getRegistry().register({\n                ...mergeWithDetail()\n            })}>\n                <InventoryDetail fallback={<Skeleton size={ SkeletonSize.md } />} hideBack />\n            </DetailWrapper>\n        );\n    }\n}\n\nInventoryDetails.propTypes = {\n    entity: propTypes.object\n};\n\nconst ConnectedInventoryDetails = (props) => {\n    return <InventoryDetails {...props} />;\n};\n\nexport default ConnectedInventoryDetails;\n","import _ from 'lodash';\n\nconst CSV_FILE_PREFIX = 'compliance-export';\nconst CSV_DELIMITER = ',';\n\nconst linkAndDownload = (data, filename) => {\n    if (!data) {\n        return;\n    }\n\n    let link = document.createElement('a');\n    link.setAttribute('href', data);\n    link.setAttribute('download', filename);\n    link.dispatchEvent(new MouseEvent(`click`, { bubbles: true, cancelable: true, view: window }));\n};\n\nconst textCsvCell = (row, column) => {\n    const { exportKey, renderExport } = column;\n    let cell = exportKey ? _.at(row, exportKey)[0] : row;\n    if (renderExport) {\n        cell = renderExport(cell);\n    }\n\n    if (typeof(cell) === 'string' && cell.includes(',')) {\n        cell = '\"' + cell + '\"';\n    }\n\n    return cell;\n};\n\nexport const csvFromState = (state) => {\n    const { rows, columns } = state;\n\n    if (rows) {\n        let csvRows = [columns.map((column) => column.title).join(CSV_DELIMITER)];\n        csvRows = csvRows.concat(rows.map((row) => (\n            columns.map((column) => (column.export !== false) ? textCsvCell(row, column) : '').join(CSV_DELIMITER)\n        )));\n\n        return encodeURI('data:text/csv;charset=utf-8,' + csvRows.join('\\n'));\n    }\n};\n\nexport const jsonFromState = (state) => {\n    const { rows, columns } = state;\n    let result;\n    if (rows) {\n        result = rows.map((row) => {\n            let object = {};\n            columns.forEach((column) => {\n                const key = _.snakecase(column.title);\n                if (column.export !== false) {\n                    object[key] = textCsvCell(row, column);\n                }\n            });\n\n            return object;\n        });\n\n        return encodeURI('data:application/json;charset=utf-8,' + JSON.stringify(result));\n    }\n};\n\nconst filename = (format) => (\n    CSV_FILE_PREFIX + '-' + (new Date()).toISOString() + '.' + format\n);\n\nexport const exportItems = (items, columns, format) => {\n    const formater = format === 'csv' ? csvFromState : jsonFromState;\n\n    return linkAndDownload(formater({\n        rows: items,\n        columns\n    }), filename(format));\n};\n","class ApiClient {\n    DEFAULT_API_HEADERS = {\n        'Content-Type': 'application/vnd.api+json',\n        Accept: 'application/json'\n    }\n\n    constructor(options = {}) {\n        this.apiBase = options.apiBase || '/api';\n        this.path = options.path || '';\n        this.authenticate = options.authenticate || (() => Promise.resolve({}));\n        this.onUnauthorised = options.onUnauthorised || (() => Promise.resolve({}));\n        this.defaultHeaders = options.headers || this.DEFAULT_API_HEADERS;\n    }\n\n    async request(path, apiProps, method, options = {}) {\n        return await this.callAuthenticate()\n        .then(() => this.fetch(path, apiProps, method, options))\n        .then(this.checkForEmptyResponse)\n        .then((response) => this.checkForErrors(response, options))\n        .then((response) => response.json())\n        .catch(this.finalCatch);\n    }\n\n    finalCatch(promise) {\n        if (promise.errors === undefined) {\n            return Promise.reject({ title: 'Error parsing' });\n        } else {\n            return Promise.reject({ ...promise });\n        }\n    }\n\n    fetch(path, apiProps, method, options) {\n        let params = {\n            method: method || 'get',\n            headers: this.defaultHeaders,\n            credentials: 'include'\n        };\n        const fullPath = `${ this.apiBase }${ this.path ? this.path : '' }${ path ? path : '' }`;\n        let url = new URL(fullPath, window.location.origin);\n        if (options.params) {\n            const params = Object.keys(options.params).map((key) => (\n                encodeURIComponent(key) + '=' + encodeURIComponent(options.params[key])\n            )).join('&');\n            url.search = new URLSearchParams(params);\n        }\n\n        if (apiProps) {\n            params.body = JSON.stringify(apiProps);\n        }\n\n        return fetch(\n            url, params\n        );\n    }\n\n    checkForEmptyResponse(response) {\n        return response.status === 204 ? { json: () => ({}) } : response;\n    }\n\n    checkForErrors(response, options = {}) {\n        if (response.status === 404 && options.ignore404) {\n            return { json: () => ({}) };\n        }\n\n        if (response.status === 401) {\n            return this.onUnauthorised();\n        }\n\n        const responseCloneJson = response.clone ? response.clone().json() : response;\n\n        if (response.status === 422) {\n            return responseCloneJson.then((json) =>\n                Promise.reject({ ...json, title: 'Validation error' })\n            );\n        }\n\n        if (response.status >= 400 && response.status <= 600) {\n            return responseCloneJson.then((json) =>\n                Promise.reject(json.errors[0])\n            );\n        }\n\n        return response;\n    }\n\n    callAuthenticate() {\n        return Promise.resolve(this.authenticate() || true);\n    }\n\n    create(path, apiProps) {\n        return this.request(path, apiProps, 'post');\n    }\n\n    update(path, apiProps) {\n        return this.request(path, apiProps, 'put');\n    }\n\n    get(path, options = {}) {\n        return this.request(path, null, 'get', options);\n    }\n\n    destroy(path) {\n        return this.request(path, null, 'delete');\n    }\n}\n\nexport default ApiClient;\n","import ApiClient from './utils/ApiClient';\n\nconst useApi = (options) => {\n    const apiClient = new ApiClient({\n        ...options\n    });\n\n    return apiClient;\n};\n\nexport default useApi;\n","import { useEffect, useState } from 'react';\nimport { COMPLIANCE_API_ROOT } from '@/constants';\nimport normalize from 'json-api-normalizer';\nimport useApi from './useApi';\n\nconst includePropAndDelete = (entity, prop) => {\n    const attributes = entity[prop];\n    let newEntity = entity;\n    delete newEntity[prop];\n    return { ...newEntity, ...attributes };\n};\n\nconst includeAttributes = (entity) => (\n    entity && includePropAndDelete(entity, 'attributes')\n);\n\nconst includeRelationship = (entity, normalizedJson) => {\n    let relationships = {};\n    Object.entries(entity?.relationships || []).forEach((item) => {\n        const [relationship, relationshipData] = item;\n        relationships[relationship] = relationshipData?.data.map((entity) => (\n            includeAttributes(normalizedJson?.[entity.type]?.[entity.id])\n        )).filter((v) => (!!v));\n    });\n    delete entity.relationships;\n    return { ...entity, ...relationships };\n};\n\nconst normalizeData = (json, type) => {\n    const jsonNormalized = normalize(json);\n    return Object.values(jsonNormalized[type] || {})?.map((entity) => (\n        includeRelationship(includeAttributes(entity), jsonNormalized)\n    ));\n};\n\nconst fetchCollection = async (apiClient, collection, params = {}, options = {}) => {\n    const json = await apiClient.get(`/${ collection }`, { params });\n    const normalized = await normalizeData(json, options?.type || collection);\n\n    return {\n        collection: normalized,\n        meta: json.meta,\n        total: json.meta.total,\n        json\n    };\n};\n\nconst useCollection = (collection, options = {}, dependencies = []) => {\n    const [collectionState, setCollectionState] = useState({\n        data: undefined,\n        loading: false,\n        error: undefined\n    });\n    const apiClient = useApi({\n        apiBase: COMPLIANCE_API_ROOT\n    });\n    const params = {\n        ...(options?.params || {}),\n        include: (options?.include || [])\n    };\n\n    useEffect(() => {\n        if (!options?.skip) {\n            setCollectionState({\n                data: undefined,\n                loading: true,\n                error: undefined\n            });\n\n            fetchCollection(apiClient, collection, params, options).then((data) => {\n                setCollectionState({\n                    data,\n                    loading: false,\n                    error: undefined\n                });\n            });\n        }\n    }, [...dependencies, options?.skip]);\n\n    return collectionState;\n};\n\nexport default useCollection;\n","import { useEffect, useLayoutEffect, useState } from 'react';\nimport { useApolloClient } from '@apollo/client';\nimport { useDispatch } from 'react-redux';\nimport debounce from '@redhat-cloud-services/frontend-components-utilities/debounce';\nimport useCollection from 'Utilities/hooks/api/useCollection';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport { osMinorVersionFilter } from './constants';\n\nconst groupByMajorVersion = (versions = [], showFilter) => {\n    const showVersion = (version) => {\n        if (showFilter.length > 0) {\n            return Array(showFilter).map(String).includes(String(version));\n        } else {\n            return true;\n        }\n    };\n\n    return versions.reduce((acc, currentValue) => {\n        if (showVersion(currentValue.osMajorVersion)) {\n            acc[String(currentValue.osMajorVersion)] = [...new Set(\n                [...acc[currentValue.osMajorVersion] || [], currentValue.osMinorVersion]\n            )];\n        }\n\n        return acc;\n    }, []);\n};\n\nexport const useOsMinorVersionFilter = (showFilter) => {\n    const { data: supportedSsgs } = useCollection('supported_ssgs', {\n        type: 'supportedSsg',\n        skip: !showFilter\n    });\n\n    return showFilter ? osMinorVersionFilter(groupByMajorVersion(supportedSsgs?.collection, showFilter)) : [];\n};\n\nexport const useFetchSystems = (\n    query, policyId, buildFilterString, showOnlySystemsWithTestResults, defaultFilter, onComplete\n) => {\n    const client = useApolloClient();\n    const filterString = buildFilterString();\n    const combindedFilter = [\n        ...showOnlySystemsWithTestResults ? ['has_test_results = true'] : [],\n        ...filterString?.length > 0 ? [filterString] : []\n    ].join(' and ');\n    const filter = defaultFilter ?\n        `(${ defaultFilter })` +\n        `${ combindedFilter ? `and (${ combindedFilter })` : '' })` : combindedFilter;\n\n    return (perPage, page) => (\n        client.query({\n            query,\n            fetchResults: true,\n            fetchPolicy: 'no-cache',\n            variables: {\n                filter,\n                perPage,\n                page,\n                ...policyId && { policyId }\n            }\n        }).then(({ data }) => {\n            const systems = data?.systems?.edges?.map((e) => e.node) || [];\n            const entities = systemsWithRuleObjectsFailed(systems);\n            const result = {\n                entities,\n                meta: {\n                    totalCount: data?.systems?.totalCount || 0\n                }\n            };\n\n            onComplete && onComplete(result);\n            return result;\n        })\n    );\n};\n\nexport const useGetEntities = (fetchEntities, { selected }) => (\n    async (_ids, { page = 1, per_page: perPage }) => {\n        const fetchedEntities = await fetchEntities(perPage, page);\n        const { entities, meta: { totalCount } } = fetchedEntities || {};\n\n        return {\n            results: entities.map((entity) => ({\n                ...entity,\n                selected: selected.map((item) => (item.id)).includes(entity.id)\n            })),\n            total: totalCount\n        };\n    }\n);\n\nexport const useOnSelect = (onSelectProp, items, preselectedSystems, total) => {\n    const [selectedSystems, setSelected] = useState(preselectedSystems);\n    const selectedSystemIds = selectedSystems.map((system) => (system.id));\n    const isPageSelected = items.filter((item) => (\n        selectedSystemIds.includes(item.id)\n    )).length === items.length;\n\n    const onSelectCallback = (selected) => (\n        onSelectProp && onSelectProp(selected)\n    );\n\n    const onSelect = (_event, select, _index, row) => {\n        const system = items.find(({ id }) => id === row.id);\n        if (!system) {\n            console.error(`System identifed as ${row.id} not found in items for selection!`);\n            return;\n        }\n\n        const selected = select\n            ? [...selectedSystems, system]\n            : selectedSystems.filter((selected) => (selected.id !== row.id));\n\n        setSelected(selected);\n        onSelectCallback(selected);\n    };\n\n    const onBulkSelect = () => {\n        const selectedSystemsWithoutItems = (selectedSystems || []).filter((system) => (\n            !(items.map((item) => (item.id))).includes(system.id)\n        ));\n        const notAllSelected = selectedSystems.length <= total;\n        const selected = notAllSelected ? (\n            !isPageSelected ? [...selectedSystemsWithoutItems, ...items] : selectedSystemsWithoutItems\n        ) : [];\n\n        setSelected(selected);\n        onSelectCallback(selected);\n    };\n\n    useEffect(() => {\n        setSelected(preselectedSystems);\n    }, [preselectedSystems]);\n\n    return {\n        onSelect,\n        onBulkSelect,\n        selectedSystems,\n        isPageSelected\n    };\n};\n\n// This hook is primarily meant to work around issues in the inventory\nexport const useInventoryUtilities = (inventory, selectedSystems, activeFilters) => {\n    const dispatch = useDispatch();\n\n    // Resets the Inventory to a loading state\n    // and prevents previously shown columns and rows to appear\n    useLayoutEffect(() => {\n        dispatch({\n            type: 'INVENTORY_INIT'\n        });\n    }, []);\n\n    // Ensures rows are marked as selected\n    useEffect(() => {\n        dispatch({\n            type: 'SELECT_ENTITIES',\n            payload: {\n                selected: selectedSystems\n            }\n        });\n    }, [selectedSystems]);\n\n    // Filters do not yet trigger the inventory to call getEntities\n    // and the page would not reset to page 1\n    const resetPage = () => {\n        Promise.resolve(dispatch({\n            type: 'RESET_PAGE'\n        })).then(() =>\n            inventory?.current?.onRefreshData()\n        );\n    };\n\n    // The debounce is to not have filter updates collide or get out of order.\n    const debounceResetPage = debounce(resetPage, 50);\n\n    useEffect(() => {\n        debounceResetPage();\n    }, [activeFilters]);\n};\n","import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Spinner } from '@patternfly/react-core';\nimport { TableVariant } from '@patternfly/react-table';\n// eslint-disable-next-line max-len\nimport ComplianceRemediationButton from '@redhat-cloud-services/frontend-components-inventory-compliance/ComplianceRemediationButton';\nimport { exportItems } from 'Utilities/Export';\nimport { DEFAULT_SYSTEMS_FILTER_CONFIGURATION, COMPLIANT_SYSTEMS_FILTER_CONFIGURATION } from '@/constants';\nimport { ErrorPage, StateView, StateViewPart } from 'PresentationalComponents';\nimport useFilterConfig from 'Utilities/hooks/useFilterConfig';\nimport { InventoryTable as FECInventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { policyFilter, defaultOnLoad } from './constants';\nimport {\n    useFetchSystems, useGetEntities, useOsMinorVersionFilter, useInventoryUtilities, useOnSelect\n} from './hooks';\n\nexport const InventoryTable = ({\n    columns,\n    showAllSystems,\n    policyId,\n    query,\n    showActions,\n    enableExport,\n    compliantFilter,\n    policies,\n    showOnlySystemsWithTestResults,\n    showOsFilter,\n    error,\n    showComplianceSystemsInfo,\n    compact,\n    remediationsEnabled,\n    systemProps,\n    defaultFilter,\n    emptyStateComponent,\n    prependComponent,\n    showOsMinorVersionFilter,\n    preselectedSystems,\n    onSelect: onSelectProp,\n    noSystemsTable\n}) => {\n    const inventory = useRef(null);\n    const [isEmpty, setIsEmpty] = useState(false);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([]);\n    const [total, setTotal] = useState(0);\n\n    const {\n        onSelect, onBulkSelect, selectedSystems, isPageSelected\n    } = useOnSelect(onSelectProp, items, preselectedSystems, total);\n    const selectedCount = selectedSystems.length;\n\n    const osMinorVersionFilter = useOsMinorVersionFilter(showOsMinorVersionFilter);\n    const { conditionalFilter, activeFilters, buildFilterString, activeFilterValues } = useFilterConfig([\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(policies?.length > 0 ? policyFilter(policies, showOsFilter) : []),\n        ...osMinorVersionFilter\n    ]);\n\n    useInventoryUtilities(inventory, selectedSystems, activeFilterValues);\n\n    const onComplete = (result) => {\n        setTotal(result.meta.totalCount);\n        setItems(result.entities);\n        setIsLoaded(true);\n\n        if (emptyStateComponent &&\n            result.meta.totalCount === 0 &&\n            activeFilterValues.length === 0) {\n            setIsEmpty(true);\n        }\n    };\n\n    const fetchSystems = useFetchSystems(\n        query, policyId, buildFilterString, showOnlySystemsWithTestResults, defaultFilter, onComplete\n    );\n    const getEntities = useGetEntities(fetchSystems, { selected: selectedSystems });\n\n    return <StateView stateValues={{ error, noError: error === undefined && !isEmpty, empty: isEmpty }}>\n        <StateViewPart stateKey='error'>\n            { !!prependComponent && prependComponent }\n            <ErrorPage error={error}/>\n        </StateViewPart>\n        <StateViewPart stateKey='empty'>\n            { emptyStateComponent }\n        </StateViewPart>\n        <StateViewPart stateKey='noError'>\n            { !!prependComponent && isLoaded && prependComponent }\n            { showComplianceSystemsInfo && <Alert\n                isInline\n                variant=\"info\"\n                ouiaId=\"SystemsListIsDifferentAlert\"\n                title={ 'The list of systems in this view is different than those that appear in the Inventory. ' +\n                    'Only systems currently associated with or reporting against compliance policies are displayed.' } /> }\n            <FECInventoryTable\n                { ...systemProps }\n                noSystemsTable={ noSystemsTable }\n                ref={ inventory }\n                activeFilters={ activeFilters }\n                getEntities={ getEntities }\n                onLoad={ defaultOnLoad(columns) }\n                hideFilters={{\n                    name: true,\n                    tags: true,\n                    registeredWith: true,\n                    stale: true\n                }}\n                tableProps={{\n                    canSelectAll: false,\n                    ...items.length > 0 && { onSelect }\n                }}\n                fallback={ <Spinner /> }\n                variant={ compact ? TableVariant.compact : '' }\n                bulkSelect={{\n                    checked: selectedCount > 0 ? (isPageSelected ? true : null) : false,\n                    onSelect: items.length > 0 && onBulkSelect,\n                    count: selectedCount,\n                    label: selectedCount > 0 ? `${ selectedCount } Selected` : undefined\n                }}\n                {...!showAllSystems && {\n                    ...conditionalFilter,\n                    ...remediationsEnabled && {\n                        dedicatedAction: <ComplianceRemediationButton\n                            allSystems={ selectedSystems }\n                            selectedRules={ [] } />\n                    }\n                }}\n                {...enableExport && {\n                    exportConfig: {\n                        isDisabled: total === 0 && selectedCount === 0,\n                        onSelect: (_, format) => exportItems((selectedCount === 0 ? items : selectedSystems), columns, format)\n                    }\n                }}\n                {...showActions && {\n                    actions: [{\n                        title: 'View in inventory',\n                        onClick: (_event, _index, { id }) => {\n                            const beta = window.location.pathname.split('/')[1] === 'beta';\n                            window.location.href = `${window.location.origin}${beta ? '/beta' : ''}/insights/inventory/${id}`;\n                        }\n                    }]\n                }}\n            />\n        </StateViewPart>\n    </StateView>;\n};\n\nInventoryTable.propTypes = {\n    columns: PropTypes.arrayOf(PropTypes.shape({})),\n    policies: PropTypes.arrayOf(PropTypes.shape({})),\n    showAllSystems: PropTypes.bool,\n    policyId: PropTypes.string,\n    query: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.object\n    ]),\n    showActions: PropTypes.bool,\n    enableExport: PropTypes.bool,\n    compliantFilter: PropTypes.bool,\n    showOnlySystemsWithTestResults: PropTypes.bool,\n    showOsFilter: PropTypes.bool,\n    showComplianceSystemsInfo: PropTypes.bool,\n    error: PropTypes.object,\n    compact: PropTypes.bool,\n    remediationsEnabled: PropTypes.bool,\n    defaultFilter: PropTypes.string,\n    systemProps: PropTypes.shape({\n        isFullView: PropTypes.bool\n    }),\n    emptyStateComponent: PropTypes.node,\n    prependComponent: PropTypes.node,\n    showOsMinorVersionFilter: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.arrayOf(PropTypes.string)\n    ]),\n    preselectedSystems: PropTypes.array,\n    onSelect: PropTypes.func,\n    noSystemsTable: PropTypes.node\n};\n\nInventoryTable.defaultProps = {\n    policyId: '',\n    showActions: true,\n    enableExport: true,\n    compliantFilter: false,\n    showOnlySystemsWithTestResults: false,\n    showComplianceSystemsInfo: false,\n    compact: false,\n    remediationsEnabled: true,\n    preselectedSystems: []\n};\n\nexport default InventoryTable;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { sortingByProp } from 'Utilities/helpers';\n\nconst selectRows = (rows, selected) => (\n    rows.map((row) => ({\n        ...row,\n        selected: selected.map((entity) => (entity.id)).includes(row.id)\n    }))\n);\n\nexport const entitiesReducer = (INVENTORY_ACTION, columns) => applyReducerHash({\n    ['INVENTORY_INIT']: () => ({\n        rows: [],\n        total: 0,\n        columns\n    }),\n    [INVENTORY_ACTION.LOAD_ENTITIES_PENDING]: (state) => ({\n        ...state,\n        columns\n    }),\n    [INVENTORY_ACTION.LOAD_ENTITIES_FULFILLED]: (state) => ({\n        ...state,\n        columns: state.total > 0 ? columns : [{ title: '' }]\n    }),\n    ['RESET_PAGE']: (state) => ({\n        ...state,\n        page: 1\n    }),\n    ['SELECT_ENTITIES']: (state, { payload: { selected } }) => ({\n        ...state,\n        rows: selectRows(state.rows, selected)\n    })\n});\n\nexport const mapCountOsMinorVersions = (systems) => {\n    if (!systems) { return {}; }\n\n    return systems.reduce((acc, { osMinorVersion }) => {\n        if (osMinorVersion !== undefined && osMinorVersion !== null) {\n            (acc[osMinorVersion] = acc[osMinorVersion] || { osMinorVersion, count: 0 }).count++;\n        }\n\n        return acc;\n    }, {});\n};\n\nexport const countOsMinorVersions = (systems) => (\n    Object.values(mapCountOsMinorVersions(systems)).sort(sortingByProp('osMinorVersion', 'desc'))\n);\n"],"sourceRoot":""}