{"version":3,"sources":["webpack:///./src/PresentationalComponents/SystemPolicyCard/SystemPolicyCard.js","webpack:///./src/PresentationalComponents/SystemPolicyCards/SystemPolicyCards.js","webpack:///./src/SmartComponents/SystemDetails/ComplianceDetail.js","webpack:///./src/SmartComponents/SystemDetails/SystemDetails.js"],"names":["SystemPolicyCard","props","state","policy","compliant","className","value","fixed","withPercent","toFixed","setState","cardTitle","name","Truncate","lines","cardSubTitle","policyType","this","rulesFailed","lastScanned","score","ssgVersion","supported","style","passedPercentage","fixedPercentage","Card","CardBody","TextContent","Text","component","TextVariants","onMouseEnter","onTitleMouseover","onMouseLeave","onTitleMouseout","color","onSubTitleMouseover","onSubTitleMouseout","complianceIcon","Tooltip","position","maxWidth","content","DateFormat","date","Date","parse","type","CardFooter","padding","UnsupportedSSGVersion","paddingTop","paddingRight","paddingLeft","paddingBottom","React","propTypes","PropTypes","rulesPassed","refId","SystemPolicyCards","policies","filter","map","i","GridItem","sm","md","lg","xl","key","height","loading","Grid","hasGutter","systemPolicyCards","Array","_item","span","defaultProps","QUERY","gql","SystemQuery","system","data","hidePassed","testResultProfiles","RulesTable","remediationAvailableFilter","handleSelect","profile","length","profileRules","rules","options","sortBy","index","direction","property","profiles","SystemDetails","inventoryId","client","useQuery","variables","systemId","fetchPolicy","error","is404","networkError","statusCode","Spinner","errorMsg","ErrorCard","message","ComplianceEmptyState","title","ApolloClient","link","HttpLink","uri","COMPLIANCE_API_ROOT","credentials","cache","InMemoryCache","WrappedSystemDetails","customItnl","intlProps","IntlWrapper","IntlProvider","route","useParams","systemName","useTitleEntity","stateValues","stateKey","PageHeader","Breadcrumb","ouiaId","to","BreadcrumbItem","isActive","Main","Skeleton","size","SkeletonSize"],"mappings":"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","file":"js/SystemDetails.4d13a539e65fb482cb26.js","sourcesContent":["import React from 'react';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n} from '@patternfly/react-icons';\nimport Truncate from 'react-truncate';\n\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  Text,\n  TextContent,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { UnsupportedSSGVersion } from '../UnsupportedSSGVersion/UnsupportedSSGVersion';\n\nclass SystemPolicyCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cardTitle: <Truncate lines={1}>{props.policy.name}</Truncate>,\n      cardSubTitle: <Truncate lines={1}>{props.policy.policyType}</Truncate>,\n      ...props,\n    };\n  }\n\n  complianceIcon = () => {\n    return this.state.policy.compliant ? (\n      <div className=\"ins-c-policy-card ins-m-compliant\">\n        <CheckCircleIcon /> Compliant\n      </div>\n    ) : (\n      <div className=\"ins-c-policy-card ins-m-noncompliant\">\n        <ExclamationCircleIcon /> Not compliant\n      </div>\n    );\n  };\n\n  fixedPercentage = (value, fixed = 0, withPercent = true) =>\n    value.toFixed(fixed) + (withPercent ? '%' : '');\n\n  onTitleMouseover = () => {\n    this.setState(({ policy = {} } = {}) => ({ cardTitle: policy.name }));\n  };\n\n  onTitleMouseout = () => {\n    this.setState(({ cardTitle } = {}) => ({\n      cardTitle: <Truncate lines={1}>{cardTitle}</Truncate>,\n    }));\n  };\n\n  onSubTitleMouseover = () => {\n    this.setState(({ policy = {} } = {}) => ({\n      cardSubTitle: policy.policyType,\n    }));\n  };\n\n  onSubTitleMouseout = () => {\n    this.setState(({ policy = {} } = {}) => ({\n      cardSubTitle: <Truncate lines={1}>{policy.policyType}</Truncate>,\n    }));\n  };\n\n  render() {\n    const {\n      rulesFailed,\n      compliant,\n      lastScanned,\n      score,\n      ssgVersion,\n      supported,\n    } = this.state.policy;\n    const { cardTitle, cardSubTitle, style } = this.state;\n    const passedPercentage = this.fixedPercentage(score);\n\n    return (\n      <Card style={style}>\n        <CardBody>\n          <TextContent className=\"margin-bottom-md\">\n            <Text\n              className=\"margin-bottom-top-none\"\n              component={TextVariants.h4}\n              onMouseEnter={this.onTitleMouseover}\n              onMouseLeave={this.onTitleMouseout}\n            >\n              {cardTitle}\n            </Text>\n            <Text\n              style={{ color: 'var(--pf-global--Color--200)' }}\n              component={TextVariants.small}\n              onMouseEnter={this.onSubTitleMouseover}\n              onMouseLeave={this.onSubTitleMouseout}\n            >\n              {cardSubTitle}\n            </Text>\n          </TextContent>\n          <div className=\"margin-bottom-md\">\n            {supported && this.complianceIcon(compliant)}\n            <Text component={TextVariants.small}>\n              {rulesFailed} rule{rulesFailed === 1 ? '' : 's'} failed{' '}\n              <Tooltip\n                position=\"bottom\"\n                maxWidth=\"22em\"\n                content={\n                  'The system compliance score is calculated by OpenSCAP and ' +\n                  'is a normalized weighted sum of rules selected for this policy.'\n                }\n              >\n                <span>(Score: {passedPercentage})</span>\n              </Tooltip>\n            </Text>\n          </div>\n          <Text className=\"margin-bottom-none\" component={TextVariants.small}>\n            <Text>SSG version: {ssgVersion}</Text>\n            <Text>\n              Last scanned:{' '}\n              {lastScanned !== 'Never' ? (\n                <DateFormat date={Date.parse(lastScanned)} type=\"relative\" />\n              ) : (\n                lastScanned\n              )}\n            </Text>\n          </Text>\n        </CardBody>\n        {!supported && (\n          <CardFooter style={{ padding: '0' }}>\n            <UnsupportedSSGVersion\n              ssgVersion={ssgVersion}\n              style={{\n                paddingTop: 'var(--pf-c-alert--PaddingTop)',\n                paddingRight: 'var(--pf-c-card--child--PaddingRight)',\n                paddingLeft: 'var(--pf-c-card--child--PaddingLeft)',\n                paddingBottom: 'var(--pf-c-alert--PaddingBottom)',\n              }}\n            />\n          </CardFooter>\n        )}\n      </Card>\n    );\n  }\n}\n\nSystemPolicyCard.propTypes = {\n  policy: PropTypes.shape({\n    rulesPassed: PropTypes.number,\n    rulesFailed: PropTypes.number,\n    score: PropTypes.number,\n    lastScanned: PropTypes.string,\n    refId: PropTypes.string,\n    name: PropTypes.string,\n    policyType: PropTypes.string,\n    compliant: PropTypes.bool,\n    ssgVersion: PropTypes.string,\n    supported: PropTypes.bool,\n    style: PropTypes.object,\n  }),\n};\n\nexport default SystemPolicyCard;\n","import React from 'react';\nimport { Grid, GridItem, Card, CardBody } from '@patternfly/react-core';\nimport SystemPolicyCard from '../SystemPolicyCard';\nimport propTypes from 'prop-types';\nimport { Instagram } from 'react-content-loader';\n\nclass SystemPolicyCards extends React.Component {\n  systemPolicyCards() {\n    const { policies } = this.props;\n    return policies\n      .filter((policy) => policy.rulesFailed + policy.rulesPassed > 0)\n      .map((policy, i) => (\n        <GridItem sm={12} md={12} lg={6} xl={4} key={i}>\n          <SystemPolicyCard policy={policy} style={{ height: '100%' }} />\n        </GridItem>\n      ));\n  }\n\n  render() {\n    const { loading } = this.props;\n\n    return (\n      <React.Fragment>\n        <Grid hasGutter>\n          {this.systemPolicyCards()}\n          {loading &&\n            [...Array(3)].map((_item, i) => (\n              <GridItem span={4} key={i}>\n                <Card>\n                  <CardBody>\n                    <Instagram />\n                  </CardBody>\n                </Card>\n              </GridItem>\n            ))}\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nSystemPolicyCards.propTypes = {\n  policies: propTypes.array,\n  loading: propTypes.bool,\n};\n\nSystemPolicyCards.defaultProps = {\n  policies: [],\n};\n\nexport default SystemPolicyCards;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport SystemPolicyCards from '../../PresentationalComponents/SystemPolicyCards';\nimport RulesTable from '@/PresentationalComponents/RulesTable/RulesTable';\nimport ComplianceEmptyState from 'PresentationalComponents/ComplianceEmptyState';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { ApolloClient, HttpLink, InMemoryCache } from 'apollo-boost';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport './compliance.scss';\nimport { ErrorCard } from 'PresentationalComponents/ErrorCard/ErrorCard';\nimport { IntlProvider } from 'react-intl';\n\nconst COMPLIANCE_API_ROOT = '/api/compliance';\n\nconst QUERY = gql`\n  query System($systemId: String!) {\n    system(id: $systemId) {\n      id\n      name\n      testResultProfiles {\n        id\n        name\n        policyType\n        refId\n        compliant\n        rulesFailed\n        rulesPassed\n        lastScanned\n        score\n        supported\n        ssgVersion\n        majorOsVersion\n        policy {\n          id\n        }\n        rules {\n          title\n          severity\n          rationale\n          refId\n          description\n          compliant\n          remediationAvailable\n          references\n          identifier\n        }\n      }\n    }\n  }\n`;\n\nconst SystemQuery = ({ data: { system }, loading, hidePassed }) => (\n  <React.Fragment>\n    <SystemPolicyCards\n      policies={system?.testResultProfiles}\n      loading={loading}\n    />\n    <br />\n    <RulesTable\n      remediationAvailableFilter\n      handleSelect={() => undefined}\n      hidePassed={hidePassed}\n      system={{\n        ...system,\n        supported:\n          (system?.testResultProfiles || []).filter(\n            (profile) => profile.supported\n          ).length > 0,\n      }}\n      profileRules={system?.testResultProfiles.map((profile) => ({\n        system,\n        profile,\n        rules: profile.rules,\n      }))}\n      loading={loading}\n      options={{\n        sortBy: {\n          index: 4,\n          direction: 'asc',\n          property: 'severity',\n        },\n      }}\n    />\n  </React.Fragment>\n);\n\nSystemQuery.propTypes = {\n  data: propTypes.shape({\n    system: propTypes.shape({\n      profiles: propTypes.array,\n      testResultProfiles: propTypes.array,\n    }),\n  }),\n  loading: propTypes.bool,\n  hidePassed: propTypes.bool,\n};\n\nSystemQuery.defaultProps = {\n  loading: true,\n};\n\nconst SystemDetails = ({ inventoryId, hidePassed, client }) => {\n  let { data, error, loading } = useQuery(QUERY, {\n    variables: { systemId: inventoryId },\n    client,\n    fetchPolicy: 'no-cache',\n  });\n  const is404 = error?.networkError?.statusCode === 404;\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  if (error && !is404) {\n    const errorMsg = `Oops! Error loading System data: ${error}`;\n    return <ErrorCard message={errorMsg} />;\n  }\n\n  return (\n    <div className=\"ins-c-compliance__scope\">\n      {!data?.system || is404 ? (\n        <ComplianceEmptyState title=\"No policies are reporting for this system\" />\n      ) : (\n        <SystemQuery hidePassed={hidePassed} data={data} loading={loading} />\n      )}\n    </div>\n  );\n};\n\nSystemDetails.propTypes = {\n  inventoryId: propTypes.string,\n  client: propTypes.object,\n  hidePassed: propTypes.bool,\n};\n\nSystemDetails.defaultProps = {\n  client: new ApolloClient({\n    link: new HttpLink({\n      uri: COMPLIANCE_API_ROOT + '/graphql',\n      credentials: 'include',\n    }),\n    cache: new InMemoryCache(),\n  }),\n};\n\nconst WrappedSystemDetails = ({ customItnl, intlProps, ...props }) => {\n  const IntlWrapper = customItnl ? IntlProvider : React.Fragment;\n\n  return (\n    <IntlWrapper {...(customItnl && intlProps)}>\n      <SystemDetails {...props} />\n    </IntlWrapper>\n  );\n};\n\nWrappedSystemDetails.propTypes = {\n  customItnl: propTypes.bool,\n  intlProps: propTypes.any,\n};\n\nexport default WrappedSystemDetails;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { useParams } from 'react-router-dom';\nimport PageHeader from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Skeleton, {\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport ComplianceSystemDetails from './ComplianceDetail';\nimport {\n  BreadcrumbLinkItem,\n  StateViewWithError,\n  StateViewPart,\n} from 'PresentationalComponents';\nimport { InventoryDetails } from 'SmartComponents';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\n\nconst QUERY = gql`\n  query System($inventoryId: String!) {\n    system(id: $inventoryId) {\n      id\n      name\n    }\n  }\n`;\n\nexport const SystemDetails = ({ route }) => {\n  const { inventoryId } = useParams();\n  const { data, error, loading } = useQuery(QUERY, {\n    variables: { inventoryId },\n  });\n  const systemName = data?.system?.name;\n\n  useTitleEntity(route, systemName);\n\n  return (\n    <StateViewWithError stateValues={{ error, data, loading }}>\n      <StateViewPart stateKey=\"data\">\n        <PageHeader>\n          <Breadcrumb ouiaId=\"SystemDetailsPathBreadcrumb\">\n            <BreadcrumbLinkItem to=\"/\">Compliance</BreadcrumbLinkItem>\n            <BreadcrumbLinkItem to=\"/systems\">Systems</BreadcrumbLinkItem>\n            <BreadcrumbItem isActive>{systemName}</BreadcrumbItem>\n          </Breadcrumb>\n          <InventoryDetails />\n          <br />\n        </PageHeader>\n        <Main>\n          <ComplianceSystemDetails hidePassed inventoryId={inventoryId} />\n        </Main>\n      </StateViewPart>\n      <StateViewPart stateKey=\"loading\">\n        <PageHeader>\n          <Skeleton size={SkeletonSize.md} />\n        </PageHeader>\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nSystemDetails.propTypes = {\n  route: propTypes.object,\n};\n\nexport default SystemDetails;\n"],"sourceRoot":""}