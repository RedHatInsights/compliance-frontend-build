{"version":3,"sources":["webpack:///./src/PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers.js","webpack:///./src/PresentationalComponents/LoadingPoliciesTable/LoadingPoliciesTable.js","webpack:///./src/PresentationalComponents/ErrorPage/ErrorPage.js","webpack:///./src/PresentationalComponents/GreySmallText/GreySmallText.js","webpack:///./src/PresentationalComponents/CheckboxGroup/CheckboxGroup.js","webpack:///./src/PresentationalComponents/ProfileTypeSelect/ProfileTypeSelect.js","webpack:///./src/PresentationalComponents/ComplianceScore/ComplianceScore.js","webpack:///./src/PresentationalComponents/PolicyDetailsContentLoader/PolicyDetailsContentLoader.js","webpack:///./src/PresentationalComponents/ReportDetailsContentLoader/ReportDetailsContentLoader.js","webpack:///./src/PresentationalComponents/PolicyDetailsDescription/PolicyDetailsDescription.js","webpack:///./src/PresentationalComponents/ReportDetailsDescription/ReportDetailsDescription.js","webpack:///./src/PresentationalComponents/ProgressBar/ProgressBar.js","webpack:///./src/PresentationalComponents/TabSwitcher/TabSwitcher.js","webpack:///./src/PresentationalComponents/StateView/StateView.js","webpack:///./src/PresentationalComponents/SystemsCountWarning/SystemsCountWarning.js","webpack:///./src/PresentationalComponents/WarningText/WarningText.js","webpack:///./src/PresentationalComponents/BackgroundLink/BackgroundLink.js","webpack:///./src/PresentationalComponents/BreadcrumbLinkItem/BreadcrumbLinkItem.js","webpack:///./src/Utilities/hooks/useTableSort.js","webpack:///./src/PresentationalComponents/ReportsTable/Cells.js","webpack:///./src/PresentationalComponents/ReportsTable/Filters.js","webpack:///./src/PresentationalComponents/ReportsTable/ReportsTable.js","webpack:///./src/PresentationalComponents/ReportsEmptyState/ReportsEmptyState.js","webpack:///./src/PresentationalComponents/PolicyPopover/PolicyPopover.js","webpack:///./src/PresentationalComponents/NoResultsTable/NoResultsTable.js","webpack:///./src/PresentationalComponents/PoliciesTable/PoliciesTable.js","webpack:///./src/PresentationalComponents/ProfileThresholdField/ProfileThresholdField.js","webpack:///./src/PresentationalComponents/SupportedSSGVersionsLink/SupportedSSGVersionsLink.js","webpack:///./src/PresentationalComponents/UnsupportedSSGVersion/UnsupportedSSGVersion.js","webpack:///./src/PresentationalComponents/SubPageTitle/SubPageTitle.js","webpack:///./src/PresentationalComponents/OperatingSystemBadge/OperatingSystemBadge.js","webpack:///./src/PresentationalComponents/TabbedRules/OsVersionText.js","webpack:///./src/PresentationalComponents/TabbedRules/ProfileTabContent.js","webpack:///./src/PresentationalComponents/TabbedRules/TabbedRules.js","webpack:///./src/SmartComponents/CreatePolicy/validate.js","webpack:///./src/Utilities/TextHelper.js","webpack:///./src/Utilities/helpers.js","webpack:///./src/Utilities/hooks/useFilterConfig.js"],"names":["ReduxFormTextInput","field","TextInput","value","input","defaultValue","onChange","ReduxFormTextArea","TextArea","Table","aria-label","cells","title","rows","Array","map","RowLoader","colSpan","TableHeader","TableBody","ErrorPage","error","props","networkError","statusCode","window","insights","chrome","auth","logout","NotAuthorized","serviceName","InvalidObject","className","size","style","color","Title","headingLevel","Text","message","Button","variant","onClick","history","goBack","propTypes","GreySmallText","children","component","TextVariants","CheckboxFieldArray","options","name","inputValue","index","label","defaultChecked","Checkbox","key","id","isChecked","includes","checked","arr","Set","push","splice","indexOf","handleChange","isRequired","InUseProfileLabel","Tooltip","position","content","Label","lineHeight","ProfileTypeSelect","profiles","length","TextContent","Grid","hasGutter","profile","description","disabled","GridItem","span","rowSpan","Field","type","JSON","stringify","Truncate","lines","defaultProps","CompliantIcon","system","rulesPassed","rulesFailed","compliant","complianceScoreString","supported","fixedPercentage","score","speed","width","height","viewBox","backgroundcolor","foregroundcolor","x","y","rx","ry","primaryColor","secondaryColor","cx","cy","r","PolicyDetailsDescription","policy","Card","CardHeader","fontSize","CardBody","complianceThreshold","businessObjective","text","linkifyHtml","inline","majorOsVersion","policyType","refId","PropTypes","Dt","TextListItem","TextListItemVariants","Dd","PolicyDescription","TextList","TextListVariants","Link","to","benchmark","version","ReportDetailsDescription","ProgressBar","percent","failed","ProgressVariant","Progress","ContentTab","useAnchorLevels","defaultAnchor","level","levels","useAnchor","split","currentAnchor","RoutedTabSwitcher","defaultTab","tab","eventKey","undefined","filter","c","RoutedTabs","useHistory","useLocation","pathname","state","Tabs","onSelect","e","preventDefault","tabToActivate","replace","tabAnchor","hash","slice","join","activeKey","StateViewPart","stateValues","StateView","flatMap","child","stateKey","StateViewWithError","WARNING_TEXT","WithOptionalToolTip","showTooltip","TooltipPosition","SystemsCountWarning","count","WarningText","BackgroundLink","desiredState","backgroundLocation","background","RouterLink","href","BreadcrumbLinkItem","BreadcrumbItem","getSortable","property","item","Name","marginRight","OperatingSystem","ssgVersion","unsupportedHostCount","CompliantSystems","testResultHostCount","compliantHostCount","measureLocation","tooltipText","marginLeft","policyNameFilter","conditionalFilterType","lowerCaseValue","toLowerCase","policyComplianceFilter","values","compliantHostsPercent","Math","round","min","max","i","items","ReportsTable","columns","transforms","sortable","sortByProperty","fitContent","sortByFunction","policyTypes","uniq","operatingSystems","useFilterConfig","policyTypeFilter","operatingSystem","operatingSystemFilter","conditionalFilter","array","objects","direction","useState","sortBy","setSortBy","column","tableSort","onSort","_","sorted","sort","a","b","String","localeCompare","useTableSort","filtered","sortedProfiles","emptyRows","PrimaryToolbar","ComplianceEmptyState","mainButton","PolicyPopover","Popover","headerContent","footerContent","bodyContent","isInline","NoResultsTable","EmptyTable","Bullseye","EmptyState","EmptyStateVariant","EmptyStateBody","PolicyNameCell","FILTER_CONFIGURATION","policies","PoliciesTable","FilterConfigBuilder","filterConfigBuilder","getChipBuilder","getFilterBuilder","page","itemsPerPage","activeFilters","_event","changePage","setState","applyFilterToObjectArray","chips","removeFilterWithChip","initialDefaultState","clearAll","clearAllFilter","deleteFilter","_index","policyId","find","location","this","filteredPolicies","filterChips","chipBuilder","chipsFor","totalHostCount","policiesToRows","paginatedPolicies","filterConfig","buildConfiguration","onFilterUpdate","hideLabel","pagination","itemCount","dropDirection","onSetPage","setPage","onPerPageSelect","setPerPage","perPage","activeFiltersConfig","filters","onDelete","onFilterDelete","ToolbarItem","actionResolver","TableToolbar","isFooter","Pagination","PaginationVariant","React","withRouter","ProfileThresholdField","validThreshold","thresholdValid","previousThreshold","threshold","showTitle","explanation","titleHeader","popover","PopoverPosition","FormGroup","fieldId","validated","helperTextInvalid","helperText","handleThresholdChange","display","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","target","rel","supportedConfigsLink","UNSUPPORTED_PLURAL_MESSAGE","marginBottom","WarningWithPopover","maxWidth","WarningWithTooltip","TooltipOrPopover","tooltipProps","tooltip","Component","componentProps","showHeader","showPopupHeader","messageVariant","UnsupportedSSGVersion","showWarningIcon","showHelpIcon","iconProps","defaultStyle","cursor","SubPageTitle","OperatingSystemBadge","colorMap","default","7","8","newOsMinorVersion","osMajorVersion","osMinorVersion","ProfileSystemCount","Badge","isRead","pluralize","SSGVersionText","SSGPopoverBody","BENCHMARK_QUERY","gql","ProfileTabContent","handleSelect","systemCount","selectedRuleRefIds","rulesTableProps","useQuery","variables","skip","data","loading","rules","Spinner","SystemRulesTable","remediationAvailableFilter","remediationsEnabled","profileRules","selectedRefIds","tabsData","profileId","TabbedRules","defaultProfileId","Tab","selectRulesTableColumns","validateBenchmarkPage","validateDetailsPage","validateRulesPage","validateSystemsPage","systemIds","fixed","withPercent","fixedValue","toFixed","singular","plural","collection","sortingByProp","propName","order","objA","objB","propA","propB","initialConfig","arrayToFilter","setActiveFilters","buildFilterString"],"mappings":"8MAIaA,EAAqB,SAAAC,GAAK,OACnC,kBAAC,EAAAC,WAAD,QACIC,MAAOF,EAAMG,MAAMD,OAASF,EAAMI,aAClCC,SAAUL,EAAMG,MAAME,UAClBL,KAGCM,EAAoB,SAAAN,GAAK,OAClC,kBAAC,EAAAO,UAAD,QACIL,MAAOF,EAAMG,MAAMD,OAASF,EAAMI,aAClCC,SAAUL,EAAMG,MAAME,UAClBL,M,0YCUZ,QArB6B,kBACzB,kBAAC,EAAAQ,MAAD,CACIC,aAAW,iBACXC,MAAQ,CACJ,CAAEC,MAAO,eACT,CAAEA,MAAO,oBACT,CAAEA,MAAO,WACT,CAAEA,MAAO,uBACT,CAAEA,MAAO,yBAEbC,MAAO,OAAIC,MAAM,IAAIC,KAAI,iBAAO,CAC5BJ,MAAO,CAAC,CACJC,MAAO,kBAACI,EAAA,EAAD,MACPC,QAAS,SAGjB,kBAAC,EAAAC,YAAD,MACA,kBAAC,EAAAC,UAAD,Q,0FCRFC,EAAY,SAAC,GAAwB,IAAtBC,EAAsB,EAAtBA,MAAUC,GAAY,oBACvC,OAAID,EAAME,cAAkD,MAAlCF,EAAME,aAAaC,YACzCC,OAAOC,SAASC,OAAOC,KAAKC,QAAO,IAC5B,GAGPR,EAAME,cAAkD,MAAlCF,EAAME,aAAaC,WAClC,kBAACM,EAAA,EAAD,CAAeC,YAAY,eAGlCV,EAAME,cAAkD,MAAlCF,EAAME,aAAaC,WAClC,kBAACQ,EAAA,EAAD,MAGJ,uCAAaV,EAAb,CAAoBW,UAAU,qFACjC,kBAAC,KAAD,CAAuBC,KAAK,KAAKC,MAAQ,CAAEC,MAAO,yCAClD,kBAAC,EAAAC,MAAD,CAAOC,aAAa,MAApB,sBACA,kBAAC,EAAAC,KAAD,mFAEI,kBAAC,EAAAA,KAAD,KACMlB,EAAMmB,UAGhB,kBAAC,EAAAC,OAAD,CACIC,QAAQ,OACRC,QAAUC,QAAQC,QAFtB,aAQRzB,EAAU0B,UAAY,CAClBzB,MAAOyB,YAGX,UC5CO,IAAMC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACzB,kBAAC,EAAAT,KAAD,CACIJ,MAAO,CAAEC,MAAO,gCAChBa,UAAYC,sBAAuBF,IAG3CD,EAAcD,UAAY,CACtBE,SAAUF,UAGd,U,cCTMK,EAAqB,SAAC,GAAuB,IAArB/C,EAAqB,EAArBA,MAAOgD,EAAc,EAAdA,QACzBC,EAAmBjD,EAAnBiD,KAAM/C,EAAaF,EAAbE,SACRgD,EAAalD,EAAMD,MAazB,OACI,kBAAC,aAAD,KAEQiD,EAAQrC,KAAI,WAAmCwC,GAAnC,IAAGC,EAAH,EAAGA,MAAOrD,EAAV,EAAUA,MAAOsD,EAAjB,EAAiBA,eAAjB,OACR,kBAAC,EAAAC,SAAD,CAAUC,IAAKxD,EAAOyD,GAAIzD,EAAOqD,MAAOA,EACpCH,KAAI,UAAKA,EAAL,YAAaE,EAAb,KAAuBpD,MAAOA,EAClC0D,UAA0B,KAAfP,EAAoBG,EAAiBH,EAAWQ,SAAS3D,GACpEG,SAAU,SAACyD,GAAD,OAlBT,SAACA,EAAS5D,GAC3B,IAAM6D,GAAM,OAAI,IAAIC,IAAIX,IAOxB,OANIS,EACAC,EAAIE,KAAK/D,GAET6D,EAAIG,OAAOH,EAAII,QAAQjE,GAAQ,GAG5BG,EAAS0D,GAUuBK,CAAaN,EAAS5D,WAQrEgD,EAAmBL,UAAY,CAC3B1C,MAAO0C,UAAgB,CACnBO,KAAMP,sBACNxC,SAAUwC,SACV3C,MAAO2C,aAEXM,QAASN,YAAkBA,UAAgB,CACvCU,MAAOV,sBACP3C,MAAO2C,sBACPW,eAAgBX,YAChBwB,YAQKxB,YAAkBA,UAAgB,CACvCU,MAAOV,sBACP3C,MAAO2C,sBACPW,eAAgBX,YAChBwB,W,eC3CFC,EAAoB,kBACtB,kBAAC,EAAAC,QAAD,CACIC,SAAS,QACTC,QAAQ,wHAGR,kBAAC,EAAAC,MAAD,CAAOxC,MAAQ,CAAEyC,WAAY,UAA7B,YAIFC,EAAqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUnC,EAAb,EAAaA,QAAb,OACvB,kBAAC,aAAD,KAC2B,KAArBmC,aAAA,EAAAA,EAAUC,SACR,kBAAC,EAAAC,YAAD,CAAa7C,MAAO,CAAEC,MAAO,2CACzB,kBAAC,EAAAG,KAAD,0DAMR,kBAAC,EAAA0C,KAAD,CAAMC,WAAS,GACTJ,EAAS/D,KAAI,SAACoE,GAAY,IAChBC,EAAoCD,EAApCC,YAAa/B,EAAuB8B,EAAvB9B,KAAMO,EAAiBuB,EAAjBvB,GAAIyB,EAAaF,EAAbE,SAC/B,OACI,kBAAC,aAAD,CAAgB1B,IAAG,yBAAoBC,IACnC,kBAAC,EAAA0B,SAAD,CAAUC,KAAM,EAAGC,QAAS,GACxB,kBAAC,EAAAR,YAAD,CACI7C,MAAQ,CACJyC,WAAY,MACZxC,MAAOiD,EAAW,yCAA2C,KAEjE,kBAAC,EAAA9C,KAAD,KACI,kBAACkD,EAAA,EAAD,CAAOxC,UAAU,QACbyC,KAAK,QACLrC,KAAK,UACLlD,MAAOwF,KAAKC,UAAUT,GACtBxC,QAAU,kBAAMA,EAAQgD,KAAKC,UAAUT,KACvCE,SAAWA,IANnB,WAQUhC,EARV,KASMgC,GAAY,kBAACd,EAAD,QAGtB,kBAAC,EAAAS,YAAD,CAAa7C,MAAQ,CAAEC,MAAO,2CAC1B,kBAAC,EAAAG,KAAD,CAAMU,UAAYC,kBACd,kBAAC2C,EAAA,EAAD,CACIlC,IAAG,8BAAyBC,GAC5BkC,MAAO,GACLV,aAW1CP,EAAkB/B,UAAY,CAC1BgC,SAAUhC,UACVH,QAASG,UAGb+B,EAAkBkB,aAAe,CAC7BjB,SAAU,GACVnC,QAAS,iBAAO,KAGpB,U,qCC1EMqD,EAAgB,SAACC,GACnB,OAAKA,EAAOC,YAAcD,EAAOE,cAAiB,EACvC,kBAAC,KAAD,CAAoBhE,MAAO,CAAEC,MAAO,2CAEpC6D,EAAOG,UACV,kBAAC,KAAD,CAAiBjE,MAAO,CAAEC,MAAO,0CACjC,kBAAC,KAAD,CAAuBD,MAAO,CAAEC,MAAO,0CAItCiE,EAAwB,SAACJ,GAClC,OAAyB,IAArBA,EAAOK,UACA,eACCL,EAAOC,YAAcD,EAAOE,cAAiB,EAC9C,OAGJ,KAAMI,QAAgBN,EAAOO,QAkBxC,QAfwB,SAACP,GAAD,OACpB,kBAAC,aAAD,KACMA,EAAOK,UACL,kBAAC,EAAA9B,QAAD,CAASE,QACL,6HAGA,kBAACsB,GAAD,QAAerC,IAAG,iCAA6BsC,EAAOrC,KAAYqC,IAChEI,EAAsBJ,IAG5BI,EAAsBJ,K,eCXlC,QA1BmC,kBAC/B,kBAAC,KAAD,CACIQ,MAAO,EACPC,MAAO,IACPC,OAAQ,IACRC,QAAQ,eACRC,gBAAgB,UAChBC,gBAAgB,WAEhB,0BAAMC,EAAE,KAAKC,EAAE,IAAIC,GAAG,IAAIC,GAAG,IAAIR,MAAM,MAAMC,OAAO,OACpD,0BAAMI,EAAE,MAAMC,EAAE,IAAIC,GAAG,IAAIC,GAAG,IAAIR,MAAM,KAAKC,OAAO,OACpD,0BAAMI,EAAE,MAAMC,EAAE,IAAIC,GAAG,IAAIC,GAAG,IAAIR,MAAM,KAAKC,OAAO,OACpD,0BAAMI,EAAE,IAAIC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIR,MAAM,KAAKC,OAAO,OACnD,0BAAMI,EAAE,KAAKC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIR,MAAM,KAAKC,OAAO,OACpD,0BAAMI,EAAE,MAAMC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIR,MAAM,KAAKC,OAAO,OACrD,0BAAMI,EAAE,IAAIC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAIR,MAAM,MAAMC,OAAO,OACrD,0BAAMI,EAAE,IAAIC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAIR,MAAM,KAAKC,OAAO,OACpD,0BAAMI,EAAE,IAAIC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAIR,MAAM,MAAMC,OAAO,OACrD,0BAAMI,EAAE,KAAKC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAIR,MAAM,MAAMC,OAAO,OACtD,0BAAMI,EAAE,KAAKC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAIR,MAAM,MAAMC,OAAO,OACtD,0BAAMI,EAAE,KAAKC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAIR,MAAM,KAAKC,OAAO,OACrD,0BAAMI,EAAE,KAAKC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAIR,MAAM,MAAMC,OAAO,OACtD,0BAAMI,EAAE,KAAKC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAIR,MAAM,MAAMC,OAAO,SCI9D,EA1BmC,kBAC/B,kBAAC,KAAD,CACIA,OAAQ,IACRD,MAAO,KACPD,MAAO,EACPU,aAAa,UACbC,eAAe,WACf,0BAAML,EAAE,KAAKC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIR,MAAM,MAAMC,OAAO,OACrD,0BAAMI,EAAE,KAAKC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIR,MAAM,MAAMC,OAAO,MACrD,4BAAQU,GAAG,MAAMC,GAAG,MAAMC,EAAE,OAC5B,0BAAMR,EAAE,OAAOC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIR,MAAM,KAAKC,OAAO,OACtD,0BAAMI,EAAE,KAAKC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIR,MAAM,IAAIC,OAAO,MACnD,0BAAMI,EAAE,KAAKC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIR,MAAM,KAAKC,OAAO,MACpD,0BAAMI,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAIR,MAAM,IAAIC,OAAO,MACrD,0BAAMI,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAIR,MAAM,MAAMC,OAAO,MACvD,0BAAMI,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAIR,MAAM,MAAMC,OAAO,MACvD,0BAAMI,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAIR,MAAM,MAAMC,OAAO,MACvD,0BAAMI,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAIR,MAAM,MAAMC,OAAO,MACvD,0BAAMI,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAIR,MAAM,MAAMC,OAAO,MACvD,0BAAMI,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAIR,MAAM,MAAMC,OAAO,MACvD,0BAAMI,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAIR,MAAM,MAAMC,OAAO,MACvD,0BAAMI,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAIR,MAAM,MAAMC,OAAO,MACvD,0BAAMI,EAAE,MAAMC,EAAE,MAAMC,GAAG,IAAIC,GAAG,IAAIR,MAAM,MAAMC,OAAO,Q,8CCTzDa,EAA2B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAC7B,kBAAC,EAAAC,KAAD,KACI,kBAAC,EAAAC,WAAD,KACI,kBAAC,EAAApF,KAAD,CAAMJ,MAAQ,CAAEyF,SAAU,KACtB,+CAGR,kBAAC,EAAAC,SAAD,KACI,kBAAC,EAAA7C,YAAD,KACI,kBAAC,EAAAzC,KAAD,CAAMU,UAAWC,mBAAjB,uBAEI,kBAAC,EAAAsB,QAAD,CACIC,SAAS,QACTC,QACI,kBAAC,aAAD,mIAMJ,kCACU,kBAAC,KAAD,CAA4BzC,UAAU,iBAIxD,kBAAC,EAAAM,KAAD,CAAMN,UAAU,oBAAoBgB,UAAWC,mBACzCqD,QAAgBkB,EAAOK,oBAAqB,IAElD,kBAAC,EAAAvF,KAAD,CAAMU,UAAWC,mBAAjB,qBAEI,kBAAC,EAAAsB,QAAD,CACIC,SAAS,QACTC,QACI,kBAAC,aAAD,wHAMJ,kCACU,kBAAC,KAAD,CAA4BzC,UAAU,iBAIxD,kBAAC,EAAAM,KAAD,CAAMU,UAAWC,kBACXuE,EAAOM,mBAAqBN,EAAOM,kBAAkBnH,OAAS,KAEpE,kBAAC,EAAA2B,KAAD,CAAMU,UAAWC,mBAAjB,sBACA,kBAAC,EAAAX,KAAD,CAAMU,UAAWC,kBACb,kBAAC,IAAD,CAAU8E,KAAMC,IAAYR,EAAOrC,aAAe,IAAKL,OAAQ,IAAKmD,QAAQ,KAEhF,kBAAC,EAAA3F,KAAD,CAAMU,UAAWC,mBAAjB,oBAGA,kBAAC,EAAAX,KAAD,CAAMU,UAAWC,kBAAjB,QACWuE,EAAOU,gBAElB,kBAAC,EAAA5F,KAAD,CAAMU,UAAWC,mBAAjB,gBACA,kBAAC,EAAAX,KAAD,CAAMU,UAAWC,kBAAkBuE,EAAOW,YAC1C,kBAAC,EAAA7F,KAAD,CAAMU,UAAWC,mBAAjB,gBACA,kBAAC,EAAAX,KAAD,CAAMU,UAAWC,kBAAkBuE,EAAOY,WAM1Db,EAAyB1E,UAAY,CACjC2E,OAAQ3E,YAGZ,U,aCvEMwF,EAAY,CACdtF,SAAUF,UAGRyF,EAAK,SAAC,GAAD,IAAGvF,EAAH,EAAGA,SAAa1B,GAAhB,8BACP,kBAAC,EAAAkH,cAAD,UAAmBlH,EAAnB,CAA2B2B,UAAYwF,4BACjCzF,IAGVuF,EAAGzF,UAAYwF,EAEf,IAAMI,EAAK,SAAC,GAAD,IAAG1F,EAAH,EAAGA,SAAa1B,GAAhB,8BACP,kBAAC,EAAAkH,cAAD,UAAmBlH,EAAnB,CAA2B2B,UAAYwF,4BACjCzF,IAGV0F,EAAG5F,UAAYwF,EAEf,IAAMK,EAAoB,SAAC,GAAD,IAAGxD,EAAH,EAAGA,QAAH,OACtB,kBAAC,aAAD,KACI,kBAAC,EAAAyD,SAAD,CAAU3F,UAAW4F,uBACjB,kBAACN,EAAD,KACI,kBAAC,EAAAhG,KAAD,CAAMN,UAAU,qBAAhB,mBAIJ,kBAACsG,EAAD,yBAGA,kBAACG,EAAD,aACWvD,EAAQgD,gBAEnB,kBAACI,EAAD,6BAGA,kBAACG,EAAD,MACMnC,QAAgBpB,EAAQ2C,oBAAqB,IAEnD,kBAACS,EAAD,2BAGA,kBAACG,EAAD,KACMvD,EAAQ4C,kBAAoB5C,EAAQ4C,kBAAkBnH,MAAQ,OAGxE,kBAAC,EAAAkI,KAAD,CAAMC,GAAI,iBAAmB5D,EAAQsC,OAAO7D,IAA5C,iBAMR+E,EAAkB7F,UAAY,CAC1BqC,QAASrC,UAAgB,CACrBc,GAAId,WACJgF,oBAAqBhF,WACrBiF,kBAAmBjF,WACnBqF,eAAgBrF,WAChB2E,OAAQ3E,UAAgB,CACpBc,GAAId,aAERkG,UAAWlG,UAAgB,CACvBmG,QAASnG,gBAKrB,IAAMoG,EAA2B,SAAC,GAAD,IAAG/D,EAAH,EAAGA,QAAH,OAC7B,kBAAC,EAAAH,YAAD,CAAa/C,UAAU,kBACnB,kBAAC0G,EAAD,CAA0BxD,cAIlC+D,EAAyBpG,UAAY,CACjCqC,QAASrC,YAGb,U,eCrFMqG,EAAc,SAAC,GAAwB,IACrCzG,EACA9B,EAFewI,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OAe5B,OAXgB,MAAZD,GACAxI,EAAQ,UACR8B,EAAU4G,2BACHD,GACPzI,EAAQ,QACR8B,EAAU4G,2BAEV1I,EAAQ,WACR8B,EAAU4G,wBAGP,kBAACC,WAAD,CACH3F,GAAI,yBACJzD,MAAOiJ,EACPxI,MAAOA,EACP8B,QAASA,EACTT,UAAU,yBAIlBkH,EAAYrG,UAAY,CACpBsG,QAAStG,WACTuG,OAAQvG,UAGZ,U,eC7Ba0G,EAAa,SAAC,GAAD,SAAGxG,UAEvByG,GAAkB,SAACC,EAAeC,GACpC,IACMC,GADSC,QAAUH,GACHI,MAAM,KAG5B,MAAO,CACHF,SACAG,cAJkBH,EAAOD,IAAUD,IAe5B5G,WACDA,SAGP,IAAMkH,GAAoB,SAAC,GAAoC,IAAlChH,EAAkC,EAAlCA,SAAUiH,EAAwB,EAAxBA,WAAYN,EAAY,EAAZA,MAC9CI,EAAkBN,GAAgBQ,EAAYN,GAA9CI,cAER,OAAO/G,EAASjC,KAAI,SAACmJ,GAAD,OAChBA,EAAI5I,MAAM6I,WAAaJ,EAAgBG,OAAME,KAC9CC,QAAO,SAACC,GAAD,QAAUA,MAGxBN,GAAkBlH,UAAY,CAC1BE,SAAUF,SACVmH,WAAYnH,WACZ6G,MAAO7G,YAGXkH,GAAkBjE,aAAe,CAC7B4D,MAAO,GAGJ,IAAMY,GAAa,SAAC,GAA8C,IAA5CvH,EAA4C,EAA5CA,SAAUiH,EAAkC,EAAlCA,WAAYN,EAAsB,EAAtBA,MAAUrI,GAAY,4CAC7D4C,GAASsG,kBAATtG,KAD6D,GAEzCuG,mBAApBC,EAF6D,EAE7DA,SAAUC,EAFmD,EAEnDA,MAFmD,EAGnClB,GAAgBQ,EAAYN,GAAtDI,EAH6D,EAG7DA,cAAeH,EAH8C,EAG9CA,OAcvB,OAAO,kBAAC,EAAAgB,MAAD,UACEtJ,EADF,CAEHuJ,SAfoB,SAACC,EAAGX,GACxBW,EAAEC,iBACF,IAAMC,EAAgBb,EAASc,QAAQ,IAAK,IACxCC,EAAYtB,EAChBsB,EAAUvB,GAASqB,EAEnB9G,EAAK,CACDyG,QACA5B,GAAI2B,EACJS,KAAMD,EAAUE,MAAM,EAAIzB,EAAQ,GAAI0B,KAAK,QAO/CC,UAAYvB,IACV/G,IAIVuH,GAAWxE,aAAe,CACtB4D,MAAO,GAGXY,GAAWzH,UAAY,CACnBE,SAAUF,SACVmH,WAAYnH,WACZ6G,MAAO7G,YC1EJ,IAAMyI,GAAgB,SAAC,GAAD,SAAGvI,UAE1B1B,GAAQ,CACVkK,YAAa1I,WACbE,SAAUF,UAGD2I,GAAY,SAAC,GAAD,IAAGD,EAAH,EAAGA,YAAH,SAAgBxI,SAC5B0I,SAAQ,SAACpB,GAAD,OAAQA,KAAID,QAAO,SAACsB,GAAD,OAChCH,EAAYG,EAAMrK,MAAMsK,cAIhCH,GAAU3I,UAAYxB,GAEf,IAAMuK,GAAqB,SAAC,GAAD,IAAGL,EAAH,EAAGA,YAAaxI,EAAhB,EAAgBA,SAAhB,OAC9B,kBAACyI,GAAD,CAAWD,YAAcA,GACrB,kBAACD,GAAD,CAAe5H,IAAI,cAAciI,SAAS,SACtC,kBAAC,EAAD,CAAWvK,MAAQmK,EAAYnK,SAEjC2B,IAIV6I,GAAmB/I,UAAYxB,GCpB/B,IAAMwK,GAAe,kDAEfC,GAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAahJ,EAAhB,EAAgBA,SAAhB,OACxBgJ,EAAc,kBAAC,EAAAxH,QAAD,CACVC,SAAWwH,yBACXvH,QAAUoH,IACR9I,GACOA,GAGjB+I,GAAoBjJ,UAAY,CAC5BkJ,YAAalJ,SACbE,SAAUF,UAGd,IAAMoJ,GAAsB,SAAC,GAAuB,IAC5ClE,EADuBmE,EAAqB,EAArBA,MAAOzJ,EAAc,EAAdA,QAGlC,OAAQA,GACJ,IAAK,QACDsF,EAAOmE,EACP,MACJ,IAAK,UACDnE,EAAO,aACP,MACJ,IAAK,OACDA,EAAO8D,GACP,MACJ,QACI9D,EAAOmE,EAGf,OAAO,kBAACJ,GAAD,CAAqBC,YAA0B,UAAZtJ,GAAmC,YAAZA,GAC7D,kBAAC,GAAD,KACMsF,KAKdkE,GAAoBnG,aAAe,CAC/BrD,QAAS,WAGbwJ,GAAoBpJ,UAAY,CAC5BqJ,MAAOrJ,sBACPJ,QAASI,YAIb,Y,gBClDMsJ,GAAc,SAAC,GAAD,IAAGpJ,EAAH,EAAGA,SAAH,OAChB,kBAAC,aAAD,KACI,kBAAC,MAAD,CAAyBf,UAAU,kBACnC,kBAAC,EAAAM,KAAD,CAAMU,UAAU,OAAOhB,UAAU,sBAAjC,IACYe,KAKpBoJ,GAAYtJ,UAAY,CACpBE,SAAUF,UAGd,Y,0lBClBA,IAAMuJ,GAAiB,SAAC,GAElB,IADFtD,EACE,EADFA,GAAIoC,EACF,EADEA,KAAMnI,EACR,EADQA,SAAiBsJ,EACzB,EADkB3B,MAAqB4B,EACvC,EADuCA,mBAAuBjL,GAC9D,gEAEIkL,EAAa,GAAH,OADQ/B,oBACoB8B,GACtC5B,EAAQ,GAAH,MAAQ2B,GAAR,IAAsBE,eAEjC,OAAO,kBAAC,EAAA1D,MAAD,QACHC,GAAI,CAAE2B,SAAU3B,EAAI4B,QAAOQ,SACtB7J,GACH0B,IAIVqJ,GAAevJ,UAAY,CACvByJ,mBAAoBzJ,WACpBE,SAAUF,SACVqI,KAAMrI,WACN6H,MAAO7H,WACPiG,GAAIjG,uBAGR,YCrBA,IAAM2J,GAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAASpL,GAAZ,0BACf,kBAAC,QAAD,UAAsBA,EAAtB,CAA8ByH,GAAK2D,MAGvCD,GAAW3J,UAAY,CACnB4J,KAAM5J,YAGV,IAAM6J,GAAqB,SAAC,GAAD,IAAG3J,EAAH,EAAGA,SAAa1B,GAAhB,8BACvB,kBAAC,EAAAsL,gBAAD,UAAqBtL,EAArB,CAA6B2B,UAAYwJ,KACnCzJ,IAIV2J,GAAmB7J,UAAY,CAC3BE,SAAUF,UAGd,Y,wCCrBM+J,GAAc,SAACC,EAAUC,GAC3B,MAAyB,mBAAdD,EACAA,EAASC,GAETA,EAAKD,ICAb,IAAME,GAAO,SAAC7H,GAAD,OAChB,kBAAC,EAAAH,YAAD,KACI,kBAAC,EAAA8D,KAAD,CAAMC,GAAI,YAAc5D,EAAQvB,GAAIzB,MAAQ,CAAE8K,YAAa,UACrD9H,EAAQsC,OAAOpE,MAErB,kBAAC,aAAD,KACI,kBAAC,GAAD,CAAsB8B,UAASV,SAAU,UACzC,kBAAC,EAAD,KAAiBU,EAAQiD,eAKrC4E,GAAKlK,UAAY,CACbqC,QAASrC,YAGN,IAAMoK,GAAkB,SAAC,GAAiE,IAA/D/E,EAA+D,EAA/DA,eAAgBgF,EAA+C,EAA/CA,WAAYC,EAAmC,EAAnCA,qBAAsB3F,EAAa,EAAbA,OAC1EnB,EAAqC,IAAzB8G,EAGlB,OAFAD,EAAa,QAAUA,EAEhB,kBAAC,aAAD,KACH,kBAAC,GAAD,CAA6BhF,mBAChB,OAAXV,GAAmB0F,GAAc,kBAAC,EAAA5K,KAAD,KAC/B,kBAAC,EAAD,KACM+D,EAAY6G,EAAa,kBAAC,GAAD,KAAyBA,OAMpED,GAAgBpK,UAAY,CACxBqF,eAAgBrF,WAChBqK,WAAYrK,WACZsK,qBAAsBtK,WACtB2E,OAAQ3E,YAGL,IAAMuK,GAAmB,SAAC,GAAkF,QAAhFC,2BAAgF,MAA1D,EAA0D,MAAvDC,0BAAuD,MAAlC,EAAkC,MAA/BH,4BAA+B,MAAR,EAAQ,EAG/G,OAAO,kBAAC,aAAD,KACH,kBAAC,EAAA7D,SAAD,CACIiE,gBAAkB,UAClBrN,MAAQmN,EAAuB,IAAMA,EAAuBC,EAAqB,IACrF,kBAAC,EAAD,eACUA,EADV,eACqCD,EADrC,aAGMF,EAAuB,GAAK,kBAAC,GAAD,CAA8BK,YAThD,sLASgEtL,MAAQ,CAAEuL,WAAY,SAC9F,4BAAQzL,UAAU,sBAAuBmL,EAAzC,oBAMhBC,GAAiBvK,UAAY,CACzBwK,oBAAqBxK,WACrByK,mBAAoBzK,WACpBsK,qBAAsBtK,Y,4BC7Db6K,GAAmB,CAAC,CAC7BjI,KAAMkI,WACNpK,MAAO,cACP6G,OAAQ,SAACvF,EAAU3E,GACf,IAAM0N,EAAiB1N,EAAM2N,cAC7B,OAAOhJ,EAASuF,QAAO,SAAClF,GAAD,MACnB,CACIA,EAAQ9B,KACR8B,EAAQsC,OAAOpE,MACjBgI,OAAOyC,cAAchK,SAAS+J,SA+B/BE,GAAyB,CAAC,CACnCrI,KAAMkI,eACNpK,MAAO,6BACP6G,OAAQ,SAACvF,EAAUkJ,GAAX,OACJlJ,EAASuF,QAAO,YAAiD,IAA9CiD,EAA8C,EAA9CA,oBAAqBC,EAAyB,EAAzBA,mBAC9BU,EAAwBC,KAAKC,MAAO,IAAMb,EAAuBC,GAKvE,OAJiBS,EAAOjN,KAAI,SAACZ,GAAU,MAChBA,EAAM2J,MAAM,KADI,gBAC5BsE,EAD4B,KACvBC,EADuB,KAEnC,OAAOJ,GAAyBG,GAAOH,GAAyBI,KACjEhE,QAAO,SAACiE,GAAD,QAAUA,KACJvJ,OAAS,MAGjCwJ,MAAO,CACH,CAAE/K,MAAO,YAAarD,MAAO,UAC7B,CAAEqD,MAAO,WAAYrD,MAAO,SAC5B,CAAEqD,MAAO,WAAYrD,MAAO,SAC5B,CAAEqD,MAAO,gBAAiBrD,MAAO,WC9CnCqO,GAAe,SAAC,GAAiB,IAAf1J,EAAe,EAAfA,SACd2J,EAAU,CACZ,CACI7N,MAAO,SACP8N,WAAY,CAACC,YACbC,eAAgB,OAChBtN,MAAO,CACHoF,MAAO,KAGf,CACI9F,MAAO,mBACP8N,WAAY,CAACC,WAAUE,cACvBD,eAAgB,iBAChBtN,MAAO,CACHoF,MAAO,KAGf,CACI9F,MAAO,6BACP8N,WAAY,CAACC,WAAUE,cACvBC,eAAgB,mBACX,IADW,EAAGxB,oBAAH,EAAwBC,oBAGxCjM,MAAO,CACHoF,MAAO,MAIbqI,GAAcC,QAAKlK,EAAS/D,KAAI,qBAAGqH,cAA+BiC,QAAO,SAACiE,GAAD,QAAUA,MACnFW,GAAmBD,QAAKlK,EAAS/D,KAAI,qBAAGoH,kBAAuCkC,QAAO,SAACiE,GAAD,QAAUA,MA9BnE,GA+BuBY,QAAgB,GAAD,eAClEvB,KADkE,OAElEoB,EAAYhK,OAAS,GD9BA,SAACgK,GAAD,MAAkB,CAAC,CAC/CrJ,KAAMkI,eACNpK,MAAO,cACP6G,OAAQ,SAACvF,EAAUkJ,GAAX,OACJlJ,EAASuF,QAAO,gBAAGjC,EAAH,EAAGA,WAAH,OAAoB4F,EAAOlK,SAASsE,OAExDmG,MAAOQ,EAAYhO,KAAI,SAACqH,GAAD,MAAiB,CACpC5E,MAAO4E,EACPjI,MAAOiI,QCsBsB+G,CAAiBJ,IAAgB,KAFO,OAGlEE,EAAiBlK,OAAS,GDnBA,SAACkK,GAAD,MAAuB,CAAC,CACzDvJ,KAAMkI,eACNpK,MAAO,mBACP6G,OAAQ,SAACvF,EAAUkJ,GAAX,OACJlJ,EAASuF,QAAO,gBAAGlC,EAAH,EAAGA,eAAH,OACZ6F,EAAOlK,SAASqE,OAGxBoG,MAAOU,EAAiBlO,KAAI,SAACqO,GAAD,MAAsB,CAC9C5L,MAAO,QAAF,OAAU4L,GACfjP,MAAOiP,QCS2BC,CAAsBJ,IAAqB,KAHR,OAIlElB,KACJjJ,GALKwK,EA/B2B,EA+B3BA,kBA/B2B,EHalB,SAACC,EAAOd,GAAY,IAhBR3B,EAAU0C,EAASC,EAgBX,GACTC,cAAS,CACjCnM,MAAO,EACPkM,UAAW,SAHsB,gBAC9BE,EAD8B,KACtBC,EADsB,KAK/BC,EAASpB,EAAQkB,EAAOpM,OAQ9B,MAAO,CACHuM,UAAW,CACPC,OATO,SAACC,EAAGzM,EAAOkM,GAAX,OACXG,EAAU,CACNrM,QACAkM,eAOAE,UAEJM,QAlCyBnD,GAmCpB+C,aAAA,EAAAA,EAAQjB,kBAAkBiB,aAA1B,EAA0BA,EAAQf,gBAnCJU,EAmCqBD,EAnCZE,EAmCmBE,EAAOF,UAlC1ED,EAAQU,MAAK,SAACC,EAAGC,GACb,MAAkB,QAAdX,EACOY,OAAOxD,GAAYC,EAAUqD,IAAIG,cAAcD,OAAOxD,GAAYC,EAAUsD,MAE3EC,OAAOxD,GAAYC,EAAUqD,IAAIG,cAAcD,OAAOxD,GAAYC,EAAUsD,UGmC9CG,CArCX,EA+BRC,SAMkD/B,GAArEqB,EArC2B,EAqC3BA,UAAmBW,EArCQ,EAqChBR,OACbpP,EAAO4P,EAAe1L,OAAS,EAAI0L,EAAe1P,KAAI,SAACoE,GAAD,MAAc,CACtExE,MAAO,CACH,CAAEC,MAAO,kBAACoM,GAAU7H,IACpB,CAAEvE,MAAO,kBAACsM,GAAqB/H,IAC/B,CAAEvE,MAAO,kBAACyM,GAAsBlI,SAElCuL,GAEN,OAAO,kBAAC,aAAD,KACH,kBAACC,GAAA,EAAoBrB,GACrB,kBAAC,EAAA7O,OAAD,QACIC,aAAW,UACXC,MAAQ8N,EACR5N,KAAOA,GACFiP,GACL,kBAAC,EAAA5O,YAAD,MACA,kBAAC,EAAAC,UAAD,SAKZqN,GAAa1L,UAAY,CACrBgC,SAAUhC,WAGd,Y,gBC9DA,SAT0B,kBACtB,kBAAC8N,GAAA,EAAD,CACIhQ,MAAQ,4BACRiQ,WAAa,kBAAC,GAAD,CAAgB9H,GAAG,qBAC5B,kBAAC,EAAAtG,OAAD,CAAQC,QAAQ,WAAhB,yBCUZ,IAAMoO,GAAgB,SAAC,GAAkC,IAAhC3L,EAAgC,EAAhCA,QAAgC,IAAvBV,gBAAuB,MAAZ,MAAY,EAC7CgD,EAA+EtC,EAA/EsC,OAAQW,EAAuEjD,EAAvEiD,WAAYN,EAA2D3C,EAA3D2C,oBAAqBK,EAAsChD,EAAtCgD,eAAgBJ,EAAsB5C,EAAtB4C,kBACjE,OACI,kBAAC,EAAAgJ,QAAD,CACWtM,WACPuM,cACI,kBAAC,EAAAhM,YAAD,KACMyC,EAAOpE,KACT,kBAAC,EAAAd,KAAD,CAAMU,UAAYC,sBAAuBkF,IAGjD6I,cACI,kBAAC,EAAAnI,KAAD,CAAMC,GAAI,iBAAmBtB,EAAO7D,IAApC,eAIJsN,YACI,kBAAC,EAAAlM,YAAD,CAAa/C,UAAU,kBACnB,kBAAC,EAAA2G,SAAD,CAAU3F,UAAW4F,uBACjB,kBAAC,EAAAL,aAAD,CAAcvF,UAAWwF,2BAAzB,oBAGA,kBAAC,EAAAD,aAAD,CAAcvF,UAAWwF,2BAAzB,QACWN,GAEX,kBAAC,EAAAK,aAAD,CAAcvF,UAAWwF,2BAAzB,wBAGA,kBAAC,EAAAD,aAAD,CAAcvF,UAAWwF,4BACnBlC,QAAgBuB,EAAqB,IAEzCC,GACF,kBAAC,aAAD,KACI,kBAAC,EAAAS,aAAD,CAAcvF,UAAWwF,2BAAzB,sBAGA,kBAAC,EAAAD,aAAD,CAAcvF,UAAWwF,2BACnBV,EAAkBnH,WAOxC,kBAAC,EAAA6B,OAAD,CAAQC,QAAQ,OAAOyO,UAAQ,GAC3B,kBAAC,KAAD,CAA4BlP,UAAU,iBAMtD6O,GAAchO,UAAY,CACtBqC,QAASrC,WACT2B,SAAU3B,YAGd,Y,gBCrEMsO,GAAiB,kBACnB,kBAACC,GAAA,EAAD,KACI,kBAAC,EAAAC,SAAD,KACI,kBAAC,EAAAC,WAAD,CAAY7O,QAAU8O,0BAClB,kBAAC,EAAAnP,MAAD,CAAOC,aAAa,KAAKJ,KAAK,MAA9B,8BAGA,kBAAC,EAAAuP,eAAD,kDAC8C,6BAD9C,2CAQHf,GAAY,CAAC,CACtB/P,MAAO,CACH,CACIC,MAAO,kBAAO,kBAACwQ,GAAD,OACd9P,MAAO,CACHL,QAAS,O,wqBCblB,IAAMyQ,GAAiB,SAAC,GAAD,IAAGvM,EAAH,EAAGA,QAAH,OAC1B,kBAAC,EAAAH,YAAD,KACI,kBAAC,EAAA8D,KAAD,CAAMC,GAAI,iBAAmB5D,EAAQvB,IAAMuB,EAAQsC,OAAOpE,MAC1D,kBAAC,EAAD,KAAiB8B,EAAQiD,cAIjCsJ,GAAe5O,UAAY,CACvBqC,QAASrC,YAGb,IAgBM6O,GAAuB,CACzB,CACIjM,KAAMkI,WACNpK,MAAO,OACP6G,OAAQ,SAACuH,EAAUzR,GAAX,OACJyR,EAASvH,QAAO,SAAC5C,GAAD,OAAYA,EAAOpE,KAAKS,SAAS3D,SAKhD0R,GAAb,8B,IAAA,G,EAAA,E,maAAA,iMAC0B,IAAIC,MAAoBH,MADlD,kCAEkB,EAAKI,oBAAoBC,mBAF3C,oCAGoB,EAAKD,oBAAoBE,qBAH7C,8BAIc,CACN,CAAErR,MAAO,QACT,CAAEA,MAAO,oBACT,CAAEA,MAAO,WACT,CAAEA,MAAO,qBAAsB8N,WAAY,CAACG,eAC5C,CAAEjO,MAAO,uBAAwB8N,WAAY,CAACG,kBATtD,4BAWY,CACJqD,KAAM,EACNC,aAAc,GACdC,cAAe,MAdvB,+BAiBc,SAACC,EAAQH,GAAT,OACN,EAAKI,WAAWJ,EAAM,EAAKvH,MAAMwH,kBAlBzC,kCAqBiB,SAACE,EAAQF,GAAT,OACT,EAAKG,WAAW,EAAGH,OAtB3B,kCAyBiB,SAACD,EAAMC,GAAP,OACT,EAAKI,SAAS,CACVL,OACAC,qBA5BZ,yCAgCwB,SAACP,GAAD,OAChBA,EAASxG,OACJ,EAAKT,MAAMuH,KAAO,GAAK,EAAKvH,MAAMwH,aACnC,EAAKxH,MAAMuH,KAAO,EAAKvH,MAAMwH,kBAnCzC,wCAuCuB,kBACf,EAAKJ,oBAAoBS,yBACrB,EAAKlR,MAAMsQ,SAAU,EAAKjH,MAAMyH,mBAzC5C,sCA6CqB,SAAC/H,EAAQlK,GACtB,EAAKoS,SAAS,CACVL,KAAM,EACNE,cAAe,SACR,EAAKzH,MAAMyH,eADL,eAER/H,EAASlK,UAlD1B,oCAuDmB,SAACsS,GACZ,IAAML,EAAiB,EAAKL,oBAAoBW,qBAC5CD,EAAO,EAAK9H,MAAMyH,eAEtB,EAAKG,SAAS,CACVH,sBA5DZ,sCAgEqB,kBACb,EAAKG,SAAS,CACVH,cAAe,EAAKL,oBAAoBY,4BAlEpD,sCAsEqB,SAACN,EAAQI,GAAT,IAAgBG,EAAhB,+DACbA,EAAW,EAAKC,iBAAmB,EAAKC,aAAaL,EAAM,QAvEnE,sCA0EqB,iBAAO,CACpB,CACI7R,MAAO,gBACP+B,QAAS,SAAC0P,EAAQU,EAAT,GAAkC,IAAfC,EAAe,EAAfA,SAClBvL,EAAS,EAAKnG,MAAMsQ,SAASqB,MAAK,SAACxL,GAAD,OACpCA,EAAO7D,KAAOoP,KAElB,EAAK1R,MAAMsB,QAAQsB,KAAnB,wBAA0C8O,EAA1C,WAA8D,CAC1DvL,SACA+E,WAAY,EAAKlL,MAAM4R,aAInC,CACItS,MAAO,cACP+B,QAAS,SAAC0P,EAAQU,EAAT,GAAkC,IAAfC,EAAe,EAAfA,SAClBvL,EAAS,EAAKnG,MAAMsQ,SAASqB,MAAK,SAACxL,GAAD,OACpCA,EAAO7D,KAAOoP,KAElB,EAAK1R,MAAMsB,QAAQsB,KAAnB,wBAA0C8O,EAA1C,SAA4D,CACxDvL,SACA+E,WAAY,EAAKlL,MAAM4R,SACvBvI,MAAO,CAAElD,kBAhG7B,wCAsGI,WAAS,MAC0B0L,KAAKxI,MAA5BuH,EADH,EACGA,KAAMC,EADT,EACSA,aACRP,EAAWuB,KAAKC,mBAChBC,EAAcF,KAAKG,YAAYC,SAASJ,KAAKxI,MAAMyH,eACnDvR,EApIS,SAAC+Q,GAAD,OACnBA,EAAS7Q,KAAI,SAAC0G,GAAD,MACT,CACIuL,SAAUvL,EAAO7D,GACjBjD,MAAO,CACH,CAAEC,MAAO,kBAAC8Q,GAAD,CAAgBvM,QAASsC,KAClC,CAAE7G,MAAO,kBAAC,GAAD,CAAsBuH,eAAiBV,EAAOU,kBACvD,CAAEvH,MAAO6G,EAAO+L,eAAiB,EAAI/L,EAAO+L,eACxC,kBAAC,GAAD,CAAqBrH,MAAQ1E,EAAO+L,eAAiB9Q,QAAQ,WACjE+E,EAAOM,mBAAqBN,EAAOM,kBAAkBnH,OAAS,KAL3D,UAMA6G,EAAOK,oBANP,UAgIE2L,CAAeN,KAAKO,kBAAkB9B,IAC7C+B,EAAeR,KAAKpB,oBAAoB6B,mBAC1CT,KAAKU,eACLV,KAAKxI,MAAMyH,cACX,CAAE0B,WAAW,IAEXC,EAAa,CACf7B,OACA8B,UAAWpC,EAAS7M,OACpBkP,cAAe,OACfC,UAAWf,KAAKgB,QAChBC,gBAAiBjB,KAAKkB,WACtBC,QAASnC,GAGb,OAAO,kBAAC,aAAD,KACH,kBAACxB,GAAA,EAAD,CACIgD,aAAeA,EACfY,oBAAqB,CACjBC,QAASnB,EACToB,SAAUtB,KAAKuB,gBAEnBX,WAAU,SACHA,GADG,IAENE,cAAe,UAEnB,kBAAC,EAAAU,YAAD,KACI,kBAAC,GAAD,CAAgB5L,GAAG,qBACf,kBAAC,EAAAtG,OAAD,CAAQC,QAAQ,WAAhB,uBAGR,kBAAC,EAAAiS,YAAD,KACM/C,EAAS7M,OADf,aAIJ,kBAAC,EAAAtE,MAAD,CACIC,aAAW,WACXuB,UAAU,4BACVtB,MAAQwS,KAAK1E,QACbmG,eAAiB/T,EAAKkE,OAAS,GAAKoO,KAAKyB,eACzC/T,KAAwB,IAAhBA,EAAKkE,OAAgB2L,GAAY7P,GACzC,kBAAC,EAAAK,YAAD,MACA,kBAAC,EAAAC,UAAD,OAEJ,kBAAC0T,GAAA,EAAD,CAAcC,UAAQ,EAAC7S,UAAU,mCAC7B,kBAAC,EAAA8S,YAAD,UACShB,EADT,CAEIE,cAAc,KACdvR,QAAUsS,oCA1J9B,GAAmCC,eAiKnCpD,GAAc/O,UAAY,CACtB8O,SAAU9O,qBACVF,QAASE,sBACToQ,SAAUpQ,uBAGd+O,GAAc9L,aAAe,CACzB6L,SAAU,IAKd,UAAesD,gBAAWrD,I,+DCtNnB,IAAMsD,GAAb,8B,IAAA,G,EAAA,E,maAAA,mLACY,CACJC,gBAAgBC,SAAe,EAAK/T,MAAMgU,mBAC1CC,UAAWpH,KAAM,EAAK7M,MAAMgU,mBAAqB,IAAK,MAH9D,6CAM4B,SAACC,GAAD,OACpB,EAAKhD,SAAS,CACV6C,gBAAgBC,SAAeE,GAC/BA,UAAWpH,KAAMoH,EAAW,QATxC,wCAaI,WAAS,MACiCpC,KAAKxI,MAAnC4K,EADH,EACGA,UAAWH,EADd,EACcA,eACXI,EAAcrC,KAAK7R,MAAnBkU,UACFC,EAAc,kBAAC,aAAD,kIAEdC,EAAc,kBAAC,EAAArT,MAAD,CAAOC,aAAa,KAAKJ,KAAK,MAA9B,wBACdtB,EAAQ,kBAAC,aAAD,KACR8U,EACAD,GAEAE,EAAU,kBAAC,EAAA5E,QAAD,CACZtM,SAAUmR,sBACV5E,cAAe0E,EACfxE,YAAauE,GAEb,kBAAC,KAAD,OAGJ,OACI,kBAAC,aAAD,KACMD,GAAa5U,EACf,kBAAC,EAAAiV,UAAD,CAAWC,QAAQ,mBACfC,UAAYX,EAAiB,UAAY,QACzCY,kBAAkB,iDAClBC,WAAW,0CACXzS,MAAO,kBAAC,aAAD,kCAA2CgS,GAAaG,IAC/D,kBAAClQ,EAAA,EAAD,CAAOpC,KAAK,sBAAsBO,GAAG,sBAAsBU,YAAY,EACnEhE,SAAU6S,KAAK+C,sBACfH,UAAYX,EAAiB,UAAY,QACzC/U,aAAckV,EACd7U,aAAW,uBACXuC,UAAWjD,MAAoB0F,KAAK,SACpCvD,MAAQ,CAAEuE,MAAO,MAAOyP,QAAS,iBA7CzD,GAA2ClB,eAoD3CE,GAAsBrS,UAAY,CAC9BwS,kBAAmBxS,WACnB0S,UAAW1S,UAGf,UAAesT,QAAU,CACrBC,KAAM,aACNC,kBAAkB,EAClBC,0BAA0B,GAH9B,CAIGpB,I,4BC5DH,SANiC,kBAC7B,uBAAGqB,OAAO,SAASC,IAAI,sBAAsB/J,KAAOgK,OAApD,0BAC2B,kBAAC,MAAD,Q,0kBCA/B,IAGMC,GAA6B,kBAAC,aAAD,KAC/B,kBAAC,EAAApU,KAAD,CAAMG,QAAQ,IAAIP,MAAQ,CAAEyU,aAAc,SAA1C,iOAIA,kBAAC,EAAArU,KAAD,CAAMG,QAAQ,KAAd,0DAKEmU,GAAqB,SAAC,GAAD,IAAG7T,EAAH,EAAGA,SAAH,IAAaN,eAAb,MAAuB,SAAvB,SACvB,kBAAC,EAAAqO,QAAD,CACInN,GAAG,sBACHkT,SAAS,QACT9F,cAAc,2BACdE,YAA0B,WAAZxO,EAAuBiU,GAjBzC,mMAkBI1F,cAAgB,kBAAC,GAAD,OACdjO,IAIV6T,GAAmB/T,UAAY,CAC3BE,SAAUF,SACVJ,QAASI,UAAgB,CAAC,WAAY,YAG1C,IAAMiU,GAAqB,SAAC,GAAD,IAAG/T,EAAH,EAAGA,SAAU0B,EAAb,EAAaA,QAAb,OACvB,kBAAC,EAAAF,QAAD,CAASE,QAAUA,EAAUD,SAAS,UAChCzB,IAIV+T,GAAmBjU,UAAY,CAC3B4B,QAAS5B,WACTE,SAAUF,UAGd,IAAMkU,GAAmB,SAAC,GAAwC,IAAtCtU,EAAsC,EAAtCA,QAASM,EAA6B,EAA7BA,SAAUiU,EAAmB,EAAnBA,aAAmB,EACxB,CAClCC,QAAS,CACLC,UAAWJ,GACXK,eAAgBH,GAEpBtB,QAAS,CACLwB,UAAWN,GACXO,eAAgB,CACZC,WAAYJ,EAAaK,gBACzB5U,QAASuU,EAAaM,kBAGhC7U,GAZMyU,EADsD,EACtDA,UAAWC,EAD2C,EAC3CA,eAcnB,OAAO,kBAACD,EAAeC,EACjBpU,IAIVgU,GAAiBlU,UAAY,CACzBE,SAAUF,SACVJ,QAASI,UAAgB,CAAC,UAAW,YACrCmU,aAAcnU,YAGlB,IAAM0U,GAAwB,SAAC,GAEzB,IADFxU,EACE,EADFA,SACE,IADQyU,uBACR,aADgCC,oBAChC,SADsDvV,EACtD,EADsDA,MAAOsL,EAC7D,EAD6DA,YAAa8J,EAC1E,EAD0EA,eAOtEI,EAAY,CACdjV,QAFY+K,EAAc,UAAY,UAGtCwJ,aAPiB,SACdxJ,GAAe,CAAE/I,QAAS,6BAAO+I,KADtB,IAEd8J,oBAOEK,EAAgBnK,EAAsC,GAAxB,CAAEoK,OAAQ,WAE9C,OAAO,0BAAM1V,MAAK,SAAQA,GAAR,IAAegU,QAAS,kBACpCsB,GAAmB,kBAACT,GAAsBW,EACxC,kBAAC,MAAD,CACI1V,UAAU,gBACVE,MAAK,SACEyV,GADF,IAED3K,YAAa,aAKvBjK,EAEA0U,GAAiB,kBAACV,GAAsBW,EACtC,kBAAC,KAAD,CACIxV,MAAK,SACEyV,GADF,IAEDlK,WAAY,eAOhC8J,GAAsB1U,UAAY,CAC9B2U,gBAAiB3U,SACjB4U,aAAc5U,SACdX,MAAOW,WACP2K,YAAa3K,WACbE,SAAUF,SACVJ,QAASI,WACTyU,eAAgBzU,WAChBwU,gBAAiBxU,UAGrB,YCrHA,IAAMgV,GAAe,SAAC,GAAD,IAAG9U,EAAH,EAAGA,SAAH,OACjB,kBAAC,EAAAT,KAAD,CACIU,UAAU,KACVd,MAAQ,CACJC,MAAO,+BACPwC,WAAY,SAEd5B,IAIV8U,GAAahV,UAAY,CACrBE,SAAUF,UAGd,YCfA,IAAMiV,GAAuB,SAAC,GAAuB,IAArB5P,EAAqB,EAArBA,eACtB6P,EAAW,CACbC,QAAS,wCACTC,EAAG,OACHC,EAAG,UAED/V,EAAQ4V,EAAS7P,IAAmB6P,EAASC,QAEnD,OAAO,kBAAC,EAAAtT,MAAD,CAAcvC,SAAd,QACI+F,IAIf4P,GAAqBjV,UAAY,CAC7BqF,eAAgBrF,YAGpB,Y,8DCjBA,SAJsB,SAAC,GAAD,IAAGqC,EAAH,EAAGA,QAASiT,EAAZ,EAAYA,kBAAZ,oBACX,IAAYjT,EAAQkT,eADT,YAC8BlT,EAAQmT,gBAAkBF,I,OCYxEG,GAAqB,SAAC,GAAD,QAAGpM,aAAH,MAAW,EAAX,SACvB,kBAAC,EAAAqM,MAAD,CAAOC,QAAM,GAAb,UACStM,EADT,aACmBuM,QAAUvM,EAAO,aAIxCoM,GAAmBzV,UAAY,CAC3BqC,QAASrC,WACTqJ,MAAOrJ,YAGX,IAAM6V,GAAiB,SAAC,GAAD,IAAGxT,EAAH,EAAGA,QAASiT,EAAZ,EAAYA,kBAAZ,OACnB,kBAAC,EAAA7V,KAAD,CAAMU,UAAYC,kBAAlB,gBACmBiC,EAAQgI,WACtB,IACD,kBAAC,EAAA4D,QAAD,CACItM,SAAS,QACTyM,YAAc,kBAAC0H,GAAD,CAAuBzT,UAASiT,sBAC9CnH,cAAgB,kBAAC,GAAD,OAChB,kBAAC,KAAD,CAA4B9O,MAAQ,CAAE0V,OAAQ,gBAK1Dc,GAAe7V,UAAY,CACvBqC,QAASrC,sBACTsV,kBAAmBtV,YAGvB,IAAM8V,GAAiB,SAAC,GAAD,IAAGzT,EAAH,EAAGA,QAASiT,EAAZ,EAAYA,kBAAZ,OACnB,kBAAC,EAAApT,YAAD,CAAa7C,MAAQ,CAAEyF,SAAU,kCAC7B,kBAAC,EAAArF,KAAD,iFAEK,IACD,kBAAC,GAAD,CAAsB4C,UAASiT,uBAEnC,kBAAC,EAAA7V,KAAD,KACI,kBAAC,GAAD,CAAsB4C,UAASiT,sBADnC,wEAORQ,GAAe9V,UAAY,CACvBqC,QAASrC,sBACTsV,kBAAmBtV,YAGvB,IAAM+V,GAAkBC,KAAH,2VAmBfC,GAAoB,SAAC,GAErB,QADF5T,EACE,EADFA,QAASsJ,EACP,EADOA,QAASuK,EAChB,EADgBA,aAAcC,EAC9B,EAD8BA,YAAaC,EAC3C,EAD2CA,mBAAoBC,EAC/D,EAD+DA,gBAAiBf,EAChF,EADgFA,kBAChF,GAC0CgB,eAASP,GAAiB,CAClEQ,UAAW,CACPzV,GAAIuB,EAAQ6D,UAAUpF,IAE1B0V,MAAON,KAAgB,UAAC7T,EAAQ6D,iBAAT,OAAC,EAAmBpF,MAJjCoF,EADZ,EACMuQ,KAAiBlY,EADvB,EACuBA,MAAOmY,EAD9B,EAC8BA,QAM1BC,EAAQT,EAAehQ,SAAH,UAAGA,EAAWA,iBAAd,aAAG,EAAsByQ,MAAQtU,aAAjC,EAAiCA,EAASsU,MAEpE,OAAO,kBAAC,aAAD,KACH,kBAAC,EAAAxU,KAAD,KACI,kBAAC,EAAAD,YAAD,CAAa/C,UAAU,cACnB,kBAAC,EAAAM,KAAD,CAAMU,UAAYC,mBACd,0BAAMjB,UAAU,cACZ,kBAAC,GAAD,CAAsBkD,UAASiT,uBAEnC,kBAACG,GAAD,CAAoBpM,MAAQ8M,KAEhC,kBAACN,GAAD,CAAuBxT,UAASiT,wBAGxC,kBAACvM,GAAD,CAAoBL,YAAc,CAAEnK,QAAOmY,UAASC,UAChD,kBAAClO,GAAD,CAAeK,SAAS,WACpB,kBAAC,EAAA8N,QAAD,OAEJ,kBAACnO,GAAD,CAAeK,SAAS,SAEpB,kBAAC+N,GAAA,IAAD,QACIC,4BAA0B,EAC1BC,qBAAqB,EACrBpL,QAAUA,EACVqL,aAAe,CAAC,CAAE3U,UAASsU,MAAQA,GAAS,KAC5CM,eAAiBb,EACjBF,aACIA,GACI,SAACE,GAAD,OAAwBF,EAAa7T,EAAS+T,KAEjDC,QAOzBJ,GAAkBjW,UAAY,CAC1BqC,QAASrC,WACTsV,kBAAmBtV,WACnB2L,QAAS3L,UACTkW,aAAclW,SACdmW,YAAanW,WACboW,mBAAoBpW,UACpBqW,gBAAiBrW,YAGrB,YC9HA,IAAMqH,GAAW,SAACvG,GAAD,sBACJA,IAGPqG,GAAa,SAAC+P,EAAUC,GAC1B,GAAID,GAAYA,EAASjV,OAAS,EAC9B,OAAOoF,GAAS8P,GAAaD,EAAS,GAAG7U,QAAQvB,KAInDsW,GAAc,SAAC,GAEf,IADFF,EACE,EADFA,SAAUG,EACR,EADQA,iBAAkB1L,EAC1B,EAD0BA,QAAS9E,EACnC,EADmCA,MAAOqP,EAC1C,EAD0CA,aAAiBG,GAC3D,2EACF,OAAO,kBAAC5O,GAAD,CAAYZ,MAAQA,EAAQM,WAAaA,GAAW+P,EAAUG,IAE7DH,aAFD,EAECA,EAAUjZ,KAAI,gBAAGoE,EAAH,EAAGA,QAAS+T,EAAZ,EAAYA,mBAAoBd,EAAhC,EAAgCA,kBAAmBa,EAAnD,EAAmDA,YAAnD,OACV,kBAAC,EAAAmB,IAAD,CACIzW,IAAMwG,GAAShF,EAAQvB,IACvBuG,SAAWA,GAAShF,EAAQvB,IAC5BhD,MACI,8BACI,0BAAMqB,UAAU,cACZ,kBAAC,GAAD,CAAekD,QAAUA,EAAUiT,kBAAmBA,KAE1D,kBAAC,EAAAI,MAAD,CAAOC,QAAM,GAAGQ,KAGxB,kBAAC,GAAD,CAEQ9T,UACAiT,oBACA3J,UACAuK,eACAG,kBACAF,cACAC,mBAAqBA,GAAsB,WAQvEgB,GAAYpX,UAAY,CACpBkX,SAAUlX,YACNA,UACI,CACIqC,QAASrC,sBACToW,mBAAoBpW,YAAkBA,YACtCsV,kBAAmBtV,WACnBmW,YAAanW,cAGvBwB,WACFmK,QAAS3L,YAAkBA,YAC3BqX,iBAAkBrX,WAClBkW,aAAclW,SACd6G,MAAO7G,YAGXoX,GAAYnU,aAAe,CACvB0I,SAAS4L,SAAwB,CAAC,OAAQ,WAAY,YACtD1Q,MAAO,GAGX,a,mFC3EO,IAAM2Q,EAAwB,SAACtR,EAAWqP,EAAgBlT,GAC7D,SAAI6D,GAAaqP,GAAkBlT,IAO1BkQ,EAAiB,SAACE,GAAD,OAC1BA,EAAY,KAAOA,GAAa,GAGvBgF,EAAsB,SAAClX,EAAMgF,EAAOP,GAAd,SAC9BzE,GAASgF,GAAWP,GAAwBuN,EAAevN,KAGnD0S,EAAoB,SAACtB,GAAD,OAC7BA,aAAA,EAAAA,EAAoBnU,QAAS,GAGpB0V,EAAsB,SAACC,GAChC,QAAIA,GACOA,EAAU3V,OAAS,I,wDCtB3B,IAEMwB,EAAkB,SAACpG,GAAyC,IAAlCwa,EAAkC,uDAA1B,EAAGC,IAAuB,yDAC/DC,EAAc1a,aAAJ,EAAIA,EAAQ2a,QAAQH,GACpC,OAAOE,EAAcA,GAAcD,EAAc,IAAM,IAAO,OAGrDlC,EAAY,SAACvY,EAAO4a,EAAUC,GAKvC,OAJKA,IACDA,EAASD,EAAW,KAGhB5a,EAAQ,GAAe,IAAVA,EAAc6a,EAASD,I,qECZnC/L,EAAO,SAACiM,GAAD,cAAoB,IAAIhX,IAAIgX,KAEnCC,EAAgB,SAACC,GAAD,IAAWC,EAAX,uDAAmB,MAAnB,OACzB,SAACC,EAAMC,GACH,IAAMC,EAASF,GAAQA,EAAKF,IAAc,GACpCK,EAASF,GAAQA,EAAKH,IAAc,GAC1C,OAAII,IAAUC,EACH,EACU,QAAVJ,EACAG,EAAQC,GAAS,EAAI,EAErBD,EAAQC,EAAQ,GAAK,K,mqBCoCxC,QA5CwB,SAACC,EAAeC,GACpC,IAAM3J,EAAsB,IAAID,KAAoB2J,GADE,GAEZ/L,cAASqC,EAAoBY,uBAFjB,eAE/CP,EAF+C,KAEhCuJ,EAFgC,KAShD9I,EAAiB,kBACnB8I,EAAiB5J,EAAoBY,wBAEnCG,EAAe,SAACL,GAAD,OACjBkJ,EAAiB5J,EAAoBW,qBACjCD,EAAOL,KAMTkB,EAAcvB,EAAoBC,iBAUxC,MAAO,CACH1C,kBAAmB,CACfqE,aAXa5B,EAAoB6B,oBAlBlB,SAACvJ,EAAQlK,GAAT,OACnBwb,EAAiB,EAAD,KACTvJ,GADS,cAEX/H,EAASlK,OAiBdiS,GAUImC,oBAAqB,CACjBC,QATQlB,EAAYC,SAASnB,GAU7BqC,SAlBW,SAACpC,EAAQI,GAAT,IAAgBG,EAAhB,+DACnBA,EAAWC,IAAmBC,EAAaL,EAAM,OAoBjDjC,SAZkBkL,EAAgB3J,EAAoBS,yBACtDkJ,EAAetJ,QACfhI,EAWAgI,gBACAwJ,kBAAmB,kBAAM7J,EAAoBE,mBAAmB2J,kBAAkBxJ,O","file":"js/617.babb4c742c3910f8bd2d.js","sourcesContent":["import React from 'react';\nimport { rawComponents } from '@data-driven-forms/pf4-component-mapper';\nimport { TextInput, TextArea } from '@patternfly/react-core';\n\nexport const ReduxFormTextInput = field => (\n    <TextInput\n        value={field.input.value || field.defaultValue}\n        onChange={field.input.onChange}\n        {...field} />\n);\n\nexport const ReduxFormTextArea = field => (\n    <TextArea\n        value={field.input.value || field.defaultValue}\n        onChange={field.input.onChange}\n        {...field} />\n);\n\nexport const ReduxFormCreatableSelectInput = field => (\n    <rawComponents.RawSelect selectVariant=\"createable\"\n        value={field.selected}\n        onChange={field.input.onChange}\n        {...field} />\n);\n","import React from 'react';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport RowLoader from '@redhat-cloud-services/frontend-components-utilities/RowLoader';\n\nconst LoadingPoliciesTable = () => (\n    <Table\n        aria-label='policies-table'\n        cells={ [\n            { title: 'Policy name' },\n            { title: 'Operating system' },\n            { title: 'Systems' },\n            { title: 'Business initiative' },\n            { title: 'Compliance threshold' }\n        ] }\n        rows={ [...Array(5)].map(() => ({\n            cells: [{\n                title: <RowLoader />,\n                colSpan: 5\n            }]\n        })) }>\n        <TableHeader />\n        <TableBody />\n    </Table>\n);\n\nexport default LoadingPoliciesTable;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Title,\n    Button,\n    Text\n} from '@patternfly/react-core';\nimport {\n    ExclamationCircleIcon\n} from '@patternfly/react-icons';\nimport InvalidObject from '@redhat-cloud-services/frontend-components/InvalidObject';\nimport NotAuthorized from '@redhat-cloud-services/frontend-components/NotAuthorized';\n\nconst ErrorPage = ({ error, ...props }) => {\n    if (error.networkError && error.networkError.statusCode === 401) {\n        window.insights.chrome.auth.logout(true);\n        return false;\n    }\n\n    if (error.networkError && error.networkError.statusCode === 403) {\n        return <NotAuthorized serviceName='Compliance' />;\n    }\n\n    if (error.networkError && error.networkError.statusCode === 404) {\n        return <InvalidObject />;\n    }\n\n    return <section {...props} className=\"pf-l-page__main-section pf-c-page__main-section ins-c-component_invalid-componet\">\n        <ExclamationCircleIcon size=\"xl\" style={ { color: 'var(--pf-global--danger-color--100)' } } />\n        <Title headingLevel='h1'>There was an error</Title>\n        <Text>\n            If you need to contact Red Hat Support about this, this is the exact error:\n            <Text>\n                { error.message }\n            </Text>\n        </Text>\n        <Button\n            variant=\"link\"\n            onClick={ history.goBack }>\n                Go back\n        </Button>\n    </section>;\n};\n\nErrorPage.propTypes = {\n    error: propTypes.object\n};\n\nexport default ErrorPage;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Text, TextVariants } from '@patternfly/react-core';\n\nexport const GreySmallText = ({ children }) => (\n    <Text\n        style={{ color: 'var(--pf-global--Color--200)' }}\n        component={ TextVariants.small }>{ children }</Text>\n);\n\nGreySmallText.propTypes = {\n    children: propTypes.node\n};\n\nexport default GreySmallText;\n","import React from 'react';\nimport { Field } from 'redux-form';\nimport propTypes from 'prop-types';\nimport { Checkbox } from '@patternfly/react-core';\n\nconst CheckboxFieldArray = ({ input, options }) => {\n    const { name, onChange } = input;\n    const inputValue = input.value;\n\n    const handleChange = (checked, value) => {\n        const arr = [...new Set(inputValue)];\n        if (checked) {\n            arr.push(value);\n        } else {\n            arr.splice(arr.indexOf(value), 1);\n        }\n\n        return onChange(arr);\n    };\n\n    return (\n        <React.Fragment>\n            {\n                options.map(({ label, value, defaultChecked }, index) => (\n                    <Checkbox key={value} id={value} label={label}\n                        name={`${name}[${index}]`} value={value}\n                        isChecked={inputValue === '' ? defaultChecked : inputValue.includes(value)}\n                        onChange={(checked) => handleChange(checked, value)}\n                    />\n                ))\n            }\n        </React.Fragment>\n    );\n};\n\nCheckboxFieldArray.propTypes = {\n    input: propTypes.shape({\n        name: propTypes.string.isRequired,\n        onChange: propTypes.func,\n        value: propTypes.string\n    }),\n    options: propTypes.arrayOf(propTypes.shape({\n        label: propTypes.string.isRequired,\n        value: propTypes.string.isRequired,\n        defaultChecked: propTypes.bool\n    })).isRequired\n};\n\nconst CheckboxGroup = (props) => (\n    <Field {...props} type=\"checkbox\" component={CheckboxFieldArray} />\n);\n\nCheckboxGroup.propTypes = {\n    options: propTypes.arrayOf(propTypes.shape({\n        label: propTypes.string.isRequired,\n        value: propTypes.string.isRequired,\n        defaultChecked: propTypes.bool\n    })).isRequired\n};\n\nexport { CheckboxFieldArray };\nexport default CheckboxGroup;\n","import React from 'react';\nimport { Field } from 'redux-form';\nimport propTypes from 'prop-types';\nimport Truncate from 'react-truncate';\nimport {\n    Grid,\n    GridItem,\n    Label,\n    TextContent,\n    TextVariants,\n    Text,\n    Tooltip\n} from '@patternfly/react-core';\n\nconst InUseProfileLabel = () => (\n    <Tooltip\n        position=\"right\"\n        content=\"A policy of this type is already in use.\n        Only one policy per policy type can be created for a major release of RHEL.\"\n    >\n        <Label style={ { lineHeight: '1.5em' } }>In use</Label>\n    </Tooltip>\n);\n\nconst ProfileTypeSelect  = ({ profiles, onClick }) => (\n    <React.Fragment>\n        { profiles?.length === 0 && (\n            <TextContent style={{ color: 'var(--pf-c-content--blockquote--Color)' }}>\n                <Text>\n                    Select an operating system to view policy types.\n                </Text>\n            </TextContent>\n        )}\n\n        <Grid hasGutter>\n            { profiles.map((profile) => {\n                const { description, name, id, disabled } = profile;\n                return (\n                    <React.Fragment key={`profile-select-${id}`}>\n                        <GridItem span={8} rowSpan={2}>\n                            <TextContent\n                                style={ {\n                                    lineHeight: '2em',\n                                    color: disabled ? 'var(--pf-c-content--blockquote--Color)' : ''\n                                } }>\n                                <Text >\n                                    <Field component='input'\n                                        type='radio'\n                                        name='profile'\n                                        value={JSON.stringify(profile)}\n                                        onClick={ () => onClick(JSON.stringify(profile)) }\n                                        disabled={ disabled }\n                                    />\n                                    { ` ${name} ` }\n                                    { disabled && <InUseProfileLabel /> }\n                                </Text>\n                            </TextContent>\n                            <TextContent style={ { color: 'var(--pf-c-content--blockquote--Color)' } }>\n                                <Text component={ TextVariants.p }>\n                                    <Truncate\n                                        key={`profile-select-text-${id}`}\n                                        lines={3}>\n                                        { description }\n                                    </Truncate>\n                                </Text>\n                            </TextContent>\n                        </GridItem>\n                    </React.Fragment>);\n            })}\n        </Grid>\n    </React.Fragment>\n);\n\nProfileTypeSelect.propTypes = {\n    profiles: propTypes.array,\n    onClick: propTypes.func\n};\n\nProfileTypeSelect.defaultProps = {\n    profiles: [],\n    onClick: () => ({})\n};\n\nexport default ProfileTypeSelect;\n","import React from 'react';\nimport {\n    QuestionCircleIcon,\n    CheckCircleIcon,\n    ExclamationCircleIcon\n} from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\nimport { fixedPercentage } from 'Utilities/TextHelper';\n\nconst CompliantIcon = (system) => {\n    if ((system.rulesPassed + system.rulesFailed) === 0) {\n        return <QuestionCircleIcon style={{ color: 'var(--pf-global--disabled-color--100)' }}/>;\n    } else {\n        return system.compliant ?\n            <CheckCircleIcon style={{ color: 'var(--pf-global--success-color--200)' }}/> :\n            <ExclamationCircleIcon style={{ color: 'var(--pf-global--danger-color--100)' }}/>;\n    }\n};\n\nexport const complianceScoreString = (system) => {\n    if (system.supported === false) {\n        return ' Unsupported';\n    } else if ((system.rulesPassed + system.rulesFailed) === 0) {\n        return ' N/A';\n    }\n\n    return ' ' + fixedPercentage(system.score);\n};\n\nconst ComplianceScore = (system) => (\n    <React.Fragment>\n        { system.supported ?\n            <Tooltip content={\n                'The system compliance score is calculated by OpenSCAP and ' +\n                'is a normalized weighted sum of rules selected for this policy.'\n            }>\n                <CompliantIcon key={ `system-compliance-icon-${system.id}` } { ...system } />\n                { complianceScoreString(system) }\n            </Tooltip>\n            :\n            complianceScoreString(system) }\n    </React.Fragment>\n);\n\nexport default ComplianceScore;\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst PolicyDetailsContentLoader = () => (\n    <ContentLoader\n        speed={2}\n        width={1000}\n        height={400}\n        viewBox='0 0 1000 400'\n        backgroundcolor='#f3f3f3'\n        foregroundcolor='#ecebeb'\n    >\n        <rect x='-3' y='7' rx='3' ry='3' width='760' height='19' />\n        <rect x='823' y='3' rx='3' ry='3' width='67' height='29' />\n        <rect x='910' y='3' rx='3' ry='3' width='67' height='29' />\n        <rect x='6' y='54' rx='0' ry='0' width='46' height='19' />\n        <rect x='68' y='54' rx='0' ry='0' width='46' height='19' />\n        <rect x='133' y='54' rx='0' ry='0' width='46' height='19' />\n        <rect x='3' y='110' rx='0' ry='0' width='255' height='17' />\n        <rect x='1' y='149' rx='0' ry='0' width='47' height='16' />\n        <rect x='1' y='185' rx='0' ry='0' width='255' height='17' />\n        <rect x='-1' y='224' rx='0' ry='0' width='187' height='16' />\n        <rect x='-4' y='267' rx='0' ry='0' width='255' height='17' />\n        <rect x='-6' y='306' rx='0' ry='0' width='47' height='16' />\n        <rect x='-6' y='342' rx='0' ry='0' width='255' height='17' />\n        <rect x='-8' y='381' rx='0' ry='0' width='187' height='16' />\n    </ContentLoader>\n);\n\nexport default PolicyDetailsContentLoader;\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst ReportDetailsContentLoader = () => (\n    <ContentLoader\n        height={320}\n        width={1550}\n        speed={2}\n        primaryColor=\"#f3f3f3\"\n        secondaryColor=\"#ecebeb\">\n        <rect x=\"18\" y=\"50\" rx=\"4\" ry=\"4\" width=\"478\" height=\"15\" />\n        <rect x=\"19\" y=\"18\" rx=\"3\" ry=\"3\" width=\"220\" height=\"9\" />\n        <circle cx=\"118\" cy=\"156\" r=\"73\" />\n        <rect x=\"1002\" y=\"40\" rx=\"0\" ry=\"0\" width=\"69\" height=\"23\" />\n        <rect x=\"47\" y=\"77\" rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" />\n        <rect x=\"36\" y=\"77\" rx=\"0\" ry=\"0\" width=\"16\" height=\"0\" />\n        <rect x=\"409\" y=\"149\" rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" />\n        <rect x=\"214\" y=\"145\" rx=\"0\" ry=\"0\" width=\"205\" height=\"9\" />\n        <rect x=\"216\" y=\"119\" rx=\"0\" ry=\"0\" width=\"205\" height=\"9\" />\n        <rect x=\"526\" y=\"100\" rx=\"0\" ry=\"0\" width=\"431\" height=\"8\" />\n        <rect x=\"526\" y=\"122\" rx=\"0\" ry=\"0\" width=\"431\" height=\"8\" />\n        <rect x=\"526\" y=\"146\" rx=\"0\" ry=\"0\" width=\"431\" height=\"8\" />\n        <rect x=\"527\" y=\"170\" rx=\"0\" ry=\"0\" width=\"431\" height=\"8\" />\n        <rect x=\"527\" y=\"194\" rx=\"0\" ry=\"0\" width=\"431\" height=\"8\" />\n        <rect x=\"527\" y=\"218\" rx=\"0\" ry=\"0\" width=\"431\" height=\"8\" />\n        <rect x=\"529\" y=\"275\" rx=\"0\" ry=\"0\" width=\"231\" height=\"7\" />\n    </ContentLoader>\n);\n\nexport default ReportDetailsContentLoader;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { fixedPercentage } from 'Utilities/TextHelper';\nimport {\n    Card,\n    CardHeader,\n    CardBody,\n    TextContent,\n    TextVariants,\n    Text,\n    Tooltip\n} from '@patternfly/react-core';\nimport Truncate from '@redhat-cloud-services/frontend-components/Truncate';\nimport linkifyHtml from 'linkifyjs/html';\n\nconst PolicyDetailsDescription = ({ policy }) => (\n    <Card>\n        <CardHeader>\n            <Text style={ { fontSize: 20 } }>\n                <b>Policy details</b>\n            </Text>\n        </CardHeader>\n        <CardBody>\n            <TextContent>\n                <Text component={TextVariants.h5}>\n                    Compliance threshold\n                    <Tooltip\n                        position='right'\n                        content={\n                            <React.Fragment>\n                                The compliance threshold defines what percentage of rules must be\n                                met in order for a system to be determined &quot;compliant&quot;.\n                            </React.Fragment>\n                        }\n                    >\n                        <span>\n                            &nbsp;<OutlinedQuestionCircleIcon className='grey-icon'/>\n                        </span>\n                    </Tooltip>\n                </Text>\n                <Text className='threshold-tooltip' component={TextVariants.p}>\n                    { fixedPercentage(policy.complianceThreshold, 1) }\n                </Text>\n                <Text component={TextVariants.h5}>\n                    Business objective\n                    <Tooltip\n                        position='right'\n                        content={\n                            <React.Fragment>\n                                This is an optional field that can be used to label policies that\n                                are related to specific business objectives.\n                            </React.Fragment>\n                        }\n                    >\n                        <span>\n                            &nbsp;<OutlinedQuestionCircleIcon className='grey-icon'/>\n                        </span>\n                    </Tooltip>\n                </Text>\n                <Text component={TextVariants.p}>\n                    { policy.businessObjective && policy.businessObjective.title || '-' }\n                </Text>\n                <Text component={TextVariants.h5}>Policy description</Text>\n                <Text component={TextVariants.p}>\n                    <Truncate text={linkifyHtml(policy.description || '')} length={380} inline={true} />\n                </Text>\n                <Text component={TextVariants.h5}>\n                    Operating system\n                </Text>\n                <Text component={TextVariants.p}>\n                    RHEL { policy.majorOsVersion }\n                </Text>\n                <Text component={TextVariants.h5}>Policy type </Text>\n                <Text component={TextVariants.p}>{ policy.policyType }</Text>\n                <Text component={TextVariants.h5}>Reference ID</Text>\n                <Text component={TextVariants.p}>{ policy.refId }</Text>\n            </TextContent>\n        </CardBody>\n    </Card>\n);\n\nPolicyDetailsDescription.propTypes = {\n    policy: propTypes.object\n};\n\nexport default PolicyDetailsDescription;\n","import React from 'react';\nimport { fixedPercentage } from 'Utilities/TextHelper';\nimport propTypes from 'prop-types';\nimport {\n    Text,\n    TextContent,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\nimport {\n    Link\n} from 'react-router-dom';\n\nconst PropTypes = {\n    children: propTypes.node\n};\n\nconst Dt = ({ children, ...props }) => (\n    <TextListItem { ...props } component={ TextListItemVariants.dt }>\n        { children }\n    </TextListItem>\n);\nDt.propTypes = PropTypes;\n\nconst Dd = ({ children, ...props }) => (\n    <TextListItem { ...props } component={ TextListItemVariants.dd }>\n        { children }\n    </TextListItem>\n);\nDd.propTypes = PropTypes;\n\nconst PolicyDescription = ({ profile }) => (\n    <React.Fragment>\n        <TextList component={TextListVariants.dl}>\n            <Dt>\n                <Text className='ins-c-non-bold-h2'>\n                    Policy details\n                </Text>\n            </Dt>\n            <Dt>\n                Operating system\n            </Dt>\n            <Dd>\n                RHEL { profile.majorOsVersion }\n            </Dd>\n            <Dt>\n                Compliance threshold\n            </Dt>\n            <Dd>\n                { fixedPercentage(profile.complianceThreshold, 1) }\n            </Dd>\n            <Dt>\n                Business objective\n            </Dt>\n            <Dd>\n                { profile.businessObjective ? profile.businessObjective.title : '--' }\n            </Dd>\n        </TextList>\n        <Link to={'/scappolicies/' + profile.policy.id} >\n            View policy\n        </Link>\n    </React.Fragment>\n);\n\nPolicyDescription.propTypes = {\n    profile: propTypes.shape({\n        id: propTypes.string,\n        complianceThreshold: propTypes.number,\n        businessObjective: propTypes.object,\n        majorOsVersion: propTypes.string,\n        policy: propTypes.shape({\n            id: propTypes.string\n        }),\n        benchmark: propTypes.shape({\n            version: propTypes.string\n        })\n    })\n};\n\nconst ReportDetailsDescription = ({ profile }) => (\n    <TextContent className='policy-details'>\n        <PolicyDescription { ...{ profile }} />\n    </TextContent>\n);\n\nReportDetailsDescription.propTypes = {\n    profile: propTypes.object\n};\n\nexport default ReportDetailsDescription;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Progress, ProgressVariant\n} from '@patternfly/react-core/dist/js/components/Progress';\n\nconst ProgressBar = ({ percent, failed }) => {\n    let variant;\n    let title;\n\n    if (percent === 100) {\n        title = 'Success';\n        variant = ProgressVariant.success;\n    } else if (failed) {\n        title = 'Error';\n        variant = ProgressVariant.danger;\n    } else {\n        title = 'Progress';\n        variant = ProgressVariant.info;\n    }\n\n    return <Progress\n        id={'finished-create-policy'}\n        value={percent}\n        title={title}\n        variant={variant}\n        className='wizard-progress-bar'\n    />;\n};\n\nProgressBar.propTypes = {\n    percent: propTypes.number,\n    failed: propTypes.bool\n};\n\nexport default ProgressBar;\n","import React from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport propTypes from 'prop-types';\nimport { Tabs } from '@patternfly/react-core';\nimport { useAnchor } from 'Utilities/Router';\n\nexport const ContentTab = ({ children }) => (children);\n\nconst useAnchorLevels = (defaultAnchor, level) => {\n    const anchor = useAnchor(defaultAnchor);\n    const levels = anchor.split('|');\n    const currentAnchor = levels[level] || defaultAnchor;\n\n    return {\n        levels,\n        currentAnchor\n    };\n};\n\nconst TabSwitcher = (props) => (\n    props.children.map((tab) => (\n        tab.props.eventKey === props.activeKey ? tab : undefined\n    )).filter((c) => (!!c))\n);\n\nTabSwitcher.propTypes = {\n    activeTab: propTypes.number,\n    children: propTypes.node\n};\n\nexport const RoutedTabSwitcher = ({ children, defaultTab, level }) => {\n    const { currentAnchor } = useAnchorLevels(defaultTab, level);\n\n    return children.map((tab) => (\n        tab.props.eventKey === currentAnchor ? tab : undefined\n    )).filter((c) => (!!c));\n};\n\nRoutedTabSwitcher.propTypes = {\n    children: propTypes.node,\n    defaultTab: propTypes.string,\n    level: propTypes.number\n};\n\nRoutedTabSwitcher.defaultProps = {\n    level: 0\n};\n\nexport const RoutedTabs = ({ children, defaultTab, level, ...props }) => {\n    const { push } = useHistory();\n    const { pathname, state } = useLocation();\n    const { currentAnchor, levels } = useAnchorLevels(defaultTab, level);\n    const handleTabSelect = (e, eventKey) => {\n        e.preventDefault();\n        const tabToActivate = eventKey.replace('#', '');\n        let tabAnchor = levels;\n        tabAnchor[level] = tabToActivate;\n\n        push({\n            state,\n            to: pathname,\n            hash: tabAnchor.slice(0, (level + 1)).join('|')\n        });\n    };\n\n    return <Tabs\n        { ...props }\n        onSelect={ handleTabSelect }\n        activeKey={ currentAnchor }>\n        { children }\n    </Tabs>;\n};\n\nRoutedTabs.defaultProps = {\n    level: 0\n};\n\nRoutedTabs.propTypes = {\n    children: propTypes.node,\n    defaultTab: propTypes.string,\n    level: propTypes.number\n};\n\nexport default TabSwitcher;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    ErrorPage\n} from 'PresentationalComponents';\n\nexport const StateViewPart = ({ children }) => (children);\n\nconst props = {\n    stateValues: propTypes.object,\n    children: propTypes.node\n};\n\nexport const StateView = ({ stateValues, children }) => (\n    children.flatMap((c) => (c)).filter((child) => (\n        stateValues[child.props.stateKey]\n    ))\n);\n\nStateView.propTypes = props;\n\nexport const StateViewWithError = ({ stateValues, children }) => (\n    <StateView stateValues={ stateValues }>\n        <StateViewPart key='error-state' stateKey='error'>\n            <ErrorPage error={ stateValues.error } />\n        </StateViewPart>\n        { children }\n    </StateView>\n);\n\nStateViewWithError.propTypes = props;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Tooltip,\n    TooltipPosition\n} from '@patternfly/react-core';\nimport {\n    WarningText\n} from 'PresentationalComponents';\n\nconst WARNING_TEXT = 'Policies without systems will not have reports.';\n\nconst WithOptionalToolTip = ({ showTooltip, children }) => (\n    showTooltip ? <Tooltip\n        position={ TooltipPosition.bottom }\n        content={ WARNING_TEXT }>\n        { children }\n    </Tooltip> : children\n);\n\nWithOptionalToolTip.propTypes = {\n    showTooltip: propTypes.bool,\n    children: propTypes.node\n};\n\nconst SystemsCountWarning = ({ count, variant }) => {\n    let text;\n\n    switch (variant) {\n        case 'count':\n            text = count;\n            break;\n        case 'compact':\n            text = 'No Systems';\n            break;\n        case 'full':\n            text = WARNING_TEXT;\n            break;\n        default:\n            text = count;\n    }\n\n    return <WithOptionalToolTip showTooltip={ variant === 'count' || variant === 'compact' }>\n        <WarningText>\n            { text }\n        </WarningText>\n    </WithOptionalToolTip>;\n};\n\nSystemsCountWarning.defaultProps = {\n    variant: 'compact'\n};\n\nSystemsCountWarning.propTypes = {\n    count: propTypes.number.isRequired,\n    variant: propTypes.string\n};\n\nexport { WARNING_TEXT };\nexport default SystemsCountWarning;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Text\n} from '@patternfly/react-core';\nimport {\n    ExclamationTriangleIcon\n} from '@patternfly/react-icons';\n\nconst WarningText = ({ children }) => (\n    <React.Fragment>\n        <ExclamationTriangleIcon className='ins-u-warning'/>\n        <Text component=\"span\" className='ins-c-warning-text'>\n            &nbsp;{ children }\n        </Text>\n    </React.Fragment>\n);\n\nWarningText.propTypes = {\n    children: propTypes.node\n};\n\nexport default WarningText;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst BackgroundLink = ({\n    to, hash, children, state: desiredState, backgroundLocation, ...props\n}) => {\n    const currentLocation = useLocation();\n    const background = { ...currentLocation, ...backgroundLocation };\n    const state = { ...desiredState, background };\n\n    return <Link\n        to={{ pathname: to, state, hash }}\n        { ...props }>\n        { children }\n    </Link>;\n};\n\nBackgroundLink.propTypes = {\n    backgroundLocation: propTypes.object,\n    children: propTypes.node,\n    hash: propTypes.string,\n    state: propTypes.object,\n    to: propTypes.string.isRequired\n};\n\nexport default BackgroundLink;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link as ReactRouterLink } from 'react-router-dom';\nimport { BreadcrumbItem } from '@patternfly/react-core';\n\nconst RouterLink = ({ href, ...props }) => (\n    <ReactRouterLink { ...props } to={ href } />\n);\n\nRouterLink.propTypes = {\n    href: propTypes.string\n};\n\nconst BreadcrumbLinkItem = ({ children, ...props }) => (\n    <BreadcrumbItem { ...props } component={ RouterLink }>\n        { children}\n    </BreadcrumbItem>\n);\n\nBreadcrumbLinkItem.propTypes = {\n    children: propTypes.node\n};\n\nexport default BreadcrumbLinkItem;\n","import { useState } from 'react';\n\nconst getSortable = (property, item) => {\n    if (typeof(property) === 'function') {\n        return property(item);\n    } else {\n        return item[property];\n    }\n};\n\nexport const orderArrayByProp = (property, objects, direction) => (\n    objects.sort((a, b) => {\n        if (direction === 'asc') {\n            return String(getSortable(property, a)).localeCompare(String(getSortable(property, b)));\n        } else {\n            return -String(getSortable(property, a)).localeCompare(String(getSortable(property, b)));\n        }\n    })\n);\n\nexport const orderByArray = (objectArray, orderProp, orderArray, direction) => (\n    (direction !== 'asc' ? orderArray.reverse() : orderArray).flatMap((orderKey) => (\n        objectArray.filter((item) => (item[orderProp] === orderKey))\n    ))\n);\n\nconst useTableSort = (array, columns) => {\n    const [sortBy, setSortBy] = useState({\n        index: 0,\n        direction: 'desc'\n    });\n    const column = columns[sortBy.index];\n    const onSort = (_, index, direction) => (\n        setSortBy({\n            index,\n            direction\n        })\n    );\n\n    return {\n        tableSort: {\n            onSort,\n            sortBy\n        },\n        sorted: orderArrayByProp(\n            (column?.sortByProperty || column?.sortByFunction), array, sortBy.direction\n        )\n    };\n};\n\nexport default useTableSort;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { TextContent, Text, Progress } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { PolicyPopover, GreySmallText, UnsupportedSSGVersion, OperatingSystemBadge } from 'PresentationalComponents';\n\nexport const Name = (profile) => (\n    <TextContent>\n        <Link to={'/reports/' + profile.id} style={ { marginRight: '.5rem' }}>\n            { profile.policy.name }\n        </Link>\n        <React.Fragment>\n            <PolicyPopover { ...{ profile, position: 'right' } } />\n            <GreySmallText>{ profile.policyType }</GreySmallText>\n        </React.Fragment>\n    </TextContent>\n);\n\nName.propTypes = {\n    profile: propTypes.object\n};\n\nexport const OperatingSystem = ({ majorOsVersion, ssgVersion, unsupportedHostCount, policy }) => {\n    const supported = unsupportedHostCount === 0;\n    ssgVersion = 'SSG: ' + ssgVersion;\n\n    return <React.Fragment>\n        <OperatingSystemBadge { ...{ majorOsVersion } } />\n        { policy === null && ssgVersion && <Text>\n            <GreySmallText>\n                { supported ? ssgVersion : <UnsupportedSSGVersion>{ ssgVersion }</UnsupportedSSGVersion> }\n            </GreySmallText>\n        </Text> }\n    </React.Fragment>;\n};\n\nOperatingSystem.propTypes = {\n    majorOsVersion: propTypes.string,\n    ssgVersion: propTypes.string,\n    unsupportedHostCount: propTypes.number,\n    policy: propTypes.object\n};\n\nexport const CompliantSystems = ({ testResultHostCount = 0, compliantHostCount = 0, unsupportedHostCount = 0 }) => {\n    const tooltipText = 'Insights cannot provide a compliance score for systems running an unsupported ' +\n        'version of the SSG at the time this report was created, as the SSG version was not supported by RHEL.';\n    return <React.Fragment>\n        <Progress\n            measureLocation={ 'outside' }\n            value={ testResultHostCount ? (100 / testResultHostCount) * compliantHostCount : 0 } />\n        <GreySmallText>\n            { `${ compliantHostCount } of ${ testResultHostCount } systems ` }\n\n            { unsupportedHostCount > 0 && <UnsupportedSSGVersion { ...{ tooltipText } } style={ { marginLeft: '.5em' } }>\n                <strong className='ins-c-warning-text'>{ unsupportedHostCount } unsupported</strong>\n            </UnsupportedSSGVersion> }\n        </GreySmallText>\n    </React.Fragment>;\n};\n\nCompliantSystems.propTypes = {\n    testResultHostCount: propTypes.number,\n    compliantHostCount: propTypes.number,\n    unsupportedHostCount: propTypes.number\n};\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\n\nexport const policyNameFilter = [{\n    type: conditionalFilterType.text,\n    label: 'Policy name',\n    filter: (profiles, value) => {\n        const lowerCaseValue = value.toLowerCase();\n        return profiles.filter((profile) => (\n            [\n                profile.name,\n                profile.policy.name\n            ].join().toLowerCase().includes(lowerCaseValue)\n        ));\n    }\n}];\n\nexport const policyTypeFilter = (policyTypes) => ([{\n    type: conditionalFilterType.checkbox,\n    label: 'Policy type',\n    filter: (profiles, values) => (\n        profiles.filter(({ policyType }) => values.includes(policyType))\n    ),\n    items: policyTypes.map((policyType) => ({\n        label: policyType,\n        value: policyType\n    }))\n}]);\n\nexport const operatingSystemFilter = (operatingSystems) => ([{\n    type: conditionalFilterType.checkbox,\n    label: 'Operating system',\n    filter: (profiles, values) => (\n        profiles.filter(({ majorOsVersion }) => (\n            values.includes(majorOsVersion)\n        ))\n    ),\n    items: operatingSystems.map((operatingSystem) => ({\n        label: `RHEL ${operatingSystem}`,\n        value: operatingSystem\n    }))\n}]);\n\nexport const policyComplianceFilter = [{\n    type: conditionalFilterType.checkbox,\n    label: 'Systems meeting compliance',\n    filter: (profiles, values) => (\n        profiles.filter(({ testResultHostCount, compliantHostCount }) => {\n            const compliantHostsPercent = Math.round((100 / testResultHostCount) * compliantHostCount);\n            const matching = values.map((value) => {\n                const [min, max] = value.split('-');\n                return compliantHostsPercent >= min && compliantHostsPercent <= max;\n            }).filter((i) => (!!i));\n            return matching.length > 0;\n        })\n    ),\n    items: [\n        { label: '90 - 100%', value: '90-100' },\n        { label: '70 - 89%', value: '70-89' },\n        { label: '50 - 69%', value: '50-69' },\n        { label: 'Less than 50%', value: '0-49' }\n    ]\n}];\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, sortable, fitContent } from '@patternfly/react-table';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { emptyRows } from 'PresentationalComponents';\nimport useFilterConfig from 'Utilities/hooks/useFilterConfig';\nimport useTableSort from 'Utilities/hooks/useTableSort';\nimport { Name, OperatingSystem, CompliantSystems } from './Cells';\nimport { uniq } from 'Utilities/helpers';\nimport {\n    policyNameFilter, policyTypeFilter, operatingSystemFilter, policyComplianceFilter\n} from './Filters';\n\nconst ReportsTable = ({ profiles }) => {\n    const columns = [\n        {\n            title: 'Policy',\n            transforms: [sortable],\n            sortByProperty: 'name',\n            props: {\n                width: 55\n            }\n        },\n        {\n            title: 'Operating system',\n            transforms: [sortable, fitContent],\n            sortByProperty: 'majorOsVersion',\n            props: {\n                width: 20\n            }\n        },\n        {\n            title: 'Systems meeting compliance',\n            transforms: [sortable, fitContent],\n            sortByFunction: ({ testResultHostCount, compliantHostCount }) => (\n                (100 / testResultHostCount) * compliantHostCount\n            ),\n            props: {\n                width: 25\n            }\n        }\n    ];\n    const policyTypes = uniq(profiles.map(({ policyType }) => (policyType)).filter((i) => (!!i)));\n    const operatingSystems = uniq(profiles.map(({ majorOsVersion }) => (majorOsVersion)).filter((i) => (!!i)));\n    const { conditionalFilter, filtered: filteredProfiles } = useFilterConfig([\n        ...policyNameFilter,\n        ...policyTypes.length > 0 && policyTypeFilter(policyTypes) || [],\n        ...operatingSystems.length > 0 && operatingSystemFilter(operatingSystems) || [],\n        ...policyComplianceFilter\n    ], profiles);\n    const { tableSort, sorted: sortedProfiles } = useTableSort(filteredProfiles, columns);\n    const rows = sortedProfiles.length > 0 ? sortedProfiles.map((profile) => ({\n        cells: [\n            { title: <Name { ...profile } /> },\n            { title: <OperatingSystem { ...profile } /> },\n            { title: <CompliantSystems { ...profile } /> }\n        ]\n    })) : emptyRows;\n\n    return <React.Fragment>\n        <PrimaryToolbar { ...conditionalFilter } />\n        <Table\n            aria-label='Reports'\n            cells={ columns }\n            rows={ rows }\n            { ...tableSort }>\n            <TableHeader />\n            <TableBody />\n        </Table>\n    </React.Fragment>;\n};\n\nReportsTable.propTypes = {\n    profiles: propTypes.array\n};\n\nexport default ReportsTable;\n","import React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport ComplianceEmptyState from '@redhat-cloud-services/frontend-components-inventory-compliance/ComplianceEmptyState';\nimport { BackgroundLink } from 'PresentationalComponents';\n\nconst ReportsEmptyState = () => (\n    <ComplianceEmptyState\n        title={ 'No policies are reporting' }\n        mainButton={ <BackgroundLink to='/scappolicies/new'>\n            <Button variant='primary'>Create new policy</Button>\n        </BackgroundLink> }\n    />\n);\n\nexport default ReportsEmptyState;\n","import React from 'react';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport {\n    Button,\n    Popover,\n    Text,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport { fixedPercentage } from 'Utilities/TextHelper';\nimport {\n    Link\n} from 'react-router-dom';\nimport propTypes from 'prop-types';\n\nconst PolicyPopover = ({ profile, position = 'top' }) => {\n    const { policy, policyType, complianceThreshold, majorOsVersion, businessObjective } = profile;\n    return (\n        <Popover\n            { ...{ position } }\n            headerContent={\n                <TextContent>\n                    { policy.name }\n                    <Text component={ TextVariants.small }>{ policyType }</Text>\n                </TextContent>\n            }\n            footerContent={\n                <Link to={'/scappolicies/' + policy.id} >\n                    View policy\n                </Link>\n            }\n            bodyContent={\n                <TextContent className='policy-details'>\n                    <TextList component={TextListVariants.dl}>\n                        <TextListItem component={TextListItemVariants.dt}>\n                            Operating system\n                        </TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>\n                            RHEL { majorOsVersion }\n                        </TextListItem>\n                        <TextListItem component={TextListItemVariants.dt}>\n                            Compliance threshold\n                        </TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>\n                            { fixedPercentage(complianceThreshold, 1) }\n                        </TextListItem>\n                        { businessObjective &&\n                        <React.Fragment>\n                            <TextListItem component={TextListItemVariants.dt}>\n                                Business objective\n                            </TextListItem>\n                            <TextListItem component={TextListItemVariants.dd}>\n                                { businessObjective.title }\n                            </TextListItem>\n                        </React.Fragment> }\n                    </TextList>\n                </TextContent>\n            }\n        >\n            <Button variant=\"link\" isInline>\n                <OutlinedQuestionCircleIcon className='grey-icon'/>\n            </Button>\n        </Popover>\n    );\n};\n\nPolicyPopover.propTypes = {\n    profile: propTypes.object,\n    position: propTypes.string\n};\n\nexport default PolicyPopover;\n","import React from 'react';\nimport {\n    Bullseye, EmptyState, EmptyStateBody, EmptyStateVariant, Title\n} from '@patternfly/react-core';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\n\nconst NoResultsTable = () => (\n    <EmptyTable>\n        <Bullseye>\n            <EmptyState variant={ EmptyStateVariant.full }>\n                <Title headingLevel=\"h5\" size=\"lg\">\n                    No matching policies found\n                </Title>\n                <EmptyStateBody>\n                    This filter criteria matches no policies. <br /> Try changing your filter settings.\n                </EmptyStateBody>\n            </EmptyState>\n        </Bullseye>\n    </EmptyTable>\n);\n\nexport const emptyRows = [{\n    cells: [\n        {\n            title: () => (<NoResultsTable />),  // eslint-disable-line\n            props: {\n                colSpan: 3\n            }\n        }\n    ]\n}];\n\nexport default NoResultsTable;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Table, TableHeader, TableBody, fitContent } from '@patternfly/react-table';\nimport { Button, Pagination, PaginationVariant, ToolbarItem, TextContent } from '@patternfly/react-core';\nimport PrimaryToolbar from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport TableToolbar from '@redhat-cloud-services/frontend-components/TableToolbar';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { FilterConfigBuilder } from '@redhat-cloud-services/frontend-components-inventory-compliance/Utilities';\nimport {\n    BackgroundLink, GreySmallText, SystemsCountWarning, emptyRows, OperatingSystemBadge\n} from 'PresentationalComponents';\n\nexport const PolicyNameCell = ({ profile }) => (\n    <TextContent>\n        <Link to={'/scappolicies/' + profile.id}>{ profile.policy.name }</Link>\n        <GreySmallText>{ profile.policyType }</GreySmallText>\n    </TextContent>\n);\n\nPolicyNameCell.propTypes = {\n    profile: propTypes.object\n};\n\nconst policiesToRows = (policies) => (\n    policies.map((policy) => (\n        {\n            policyId: policy.id,\n            cells: [\n                { title: <PolicyNameCell profile={policy} /> },\n                { title: <OperatingSystemBadge majorOsVersion={ policy.majorOsVersion } /> },\n                { title: policy.totalHostCount > 0 ? policy.totalHostCount :\n                    <SystemsCountWarning count={ policy.totalHostCount } variant='count' /> },\n                policy.businessObjective && policy.businessObjective.title || '--',\n                `${policy.complianceThreshold}%`\n            ]\n        }\n    ))\n);\n\nconst FILTER_CONFIGURATION = [\n    {\n        type: conditionalFilterType.text,\n        label: 'Name',\n        filter: (policies, value) => (\n            policies.filter((policy) => policy.name.includes(value))\n        )\n    }\n];\n\nexport class PoliciesTable extends React.Component {\n    filterConfigBuilder = new FilterConfigBuilder(FILTER_CONFIGURATION);\n    chipBuilder = this.filterConfigBuilder.getChipBuilder();\n    filterBuilder = this.filterConfigBuilder.getFilterBuilder();\n    columns = [\n        { title: 'Name' },\n        { title: 'Operating system' },\n        { title: 'Systems' },\n        { title: 'Business objective', transforms: [fitContent] },\n        { title: 'Compliance threshold', transforms: [fitContent] }\n    ]\n    state = {\n        page: 1,\n        itemsPerPage: 10,\n        activeFilters: {}\n    }\n\n    setPage = (_event, page) => (\n        this.changePage(page, this.state.itemsPerPage)\n    )\n\n    setPerPage = (_event, itemsPerPage) => (\n        this.changePage(1, itemsPerPage)\n    )\n\n    changePage = (page, itemsPerPage) => (\n        this.setState({\n            page,\n            itemsPerPage\n        })\n    )\n\n    paginatedPolicies = (policies) => (\n        policies.slice(\n            (this.state.page - 1) * this.state.itemsPerPage,\n            this.state.page * this.state.itemsPerPage\n        )\n    )\n\n    filteredPolicies = () => (\n        this.filterConfigBuilder.applyFilterToObjectArray(\n            this.props.policies, this.state.activeFilters\n        )\n    )\n\n    onFilterUpdate = (filter, value) => {\n        this.setState({\n            page: 1,\n            activeFilters: {\n                ...this.state.activeFilters,\n                [filter]: value\n            }\n        });\n    }\n\n    deleteFilter = (chips) => {\n        const activeFilters =  this.filterConfigBuilder.removeFilterWithChip(\n            chips, this.state.activeFilters\n        );\n        this.setState({\n            activeFilters\n        });\n    }\n\n    clearAllFilter = () => (\n        this.setState({\n            activeFilters: this.filterConfigBuilder.initialDefaultState()\n        })\n    )\n\n    onFilterDelete = (_event, chips, clearAll = false) => (\n        clearAll ? this.clearAllFilter() : this.deleteFilter(chips[0])\n    )\n\n    actionResolver = () => ([\n        {\n            title: 'Delete policy',\n            onClick: (_event, _index, { policyId }) => {\n                const policy = this.props.policies.find((policy) => (\n                    policy.id === policyId\n                ));\n                this.props.history.push(`/scappolicies/${ policyId }/delete`, {\n                    policy,\n                    background: this.props.location\n                });\n            }\n        },\n        {\n            title: 'Edit policy',\n            onClick: (_event, _index, { policyId }) => {\n                const policy = this.props.policies.find((policy) => (\n                    policy.id === policyId\n                ));\n                this.props.history.push(`/scappolicies/${ policyId }/edit`, {\n                    policy,\n                    background: this.props.location,\n                    state: { policy }\n                });\n            }\n        }\n    ]);\n\n    render() {\n        const { page, itemsPerPage } = this.state;\n        const policies = this.filteredPolicies();\n        const filterChips = this.chipBuilder.chipsFor(this.state.activeFilters);\n        const rows = policiesToRows(this.paginatedPolicies(policies));\n        const filterConfig = this.filterConfigBuilder.buildConfiguration(\n            this.onFilterUpdate,\n            this.state.activeFilters,\n            { hideLabel: true }\n        );\n        const pagination = {\n            page,\n            itemCount: policies.length,\n            dropDirection: 'down',\n            onSetPage: this.setPage,\n            onPerPageSelect: this.setPerPage,\n            perPage: itemsPerPage\n        };\n\n        return <React.Fragment>\n            <PrimaryToolbar\n                filterConfig={ filterConfig }\n                activeFiltersConfig={{\n                    filters: filterChips,\n                    onDelete: this.onFilterDelete\n                }}\n                pagination={{\n                    ...pagination,\n                    dropDirection: 'down'\n                }}>\n                <ToolbarItem>\n                    <BackgroundLink to='/scappolicies/new'>\n                        <Button variant='primary'>Create new policy</Button>\n                    </BackgroundLink>\n                </ToolbarItem>\n                <ToolbarItem>\n                    { policies.length } results\n                </ToolbarItem>\n            </PrimaryToolbar>\n            <Table\n                aria-label='policies'\n                className='compliance-policies-table'\n                cells={ this.columns }\n                actionResolver={ rows.length > 0 && this.actionResolver }\n                rows={ (rows.length === 0) ? emptyRows : rows }>\n                <TableHeader />\n                <TableBody />\n            </Table>\n            <TableToolbar isFooter className=\"ins-c-inventory__table--toolbar\">\n                <Pagination\n                    { ...pagination }\n                    dropDirection='up'\n                    variant={ PaginationVariant.bottom }\n                />\n            </TableToolbar>\n        </React.Fragment>;\n    }\n}\n\nPoliciesTable.propTypes = {\n    policies: propTypes.array.isRequired,\n    history: propTypes.object.isRequired,\n    location: propTypes.object.isRequired\n};\n\nPoliciesTable.defaultProps = {\n    policies: []\n};\n\nexport { policiesToRows };\n\nexport default withRouter(PoliciesTable);\n","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { FormGroup, Title, Popover, PopoverPosition } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { ReduxFormTextInput } from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport propTypes from 'prop-types';\nimport round from 'lodash/round';\nimport { thresholdValid } from '../../SmartComponents/CreatePolicy/validate';\n\nexport class ProfileThresholdField extends React.Component {\n    state = {\n        validThreshold: thresholdValid(this.props.previousThreshold),\n        threshold: round(this.props.previousThreshold || 100, 1)\n    };\n\n    handleThresholdChange = (threshold) => (\n        this.setState({\n            validThreshold: thresholdValid(threshold),\n            threshold: round(threshold, 1)\n        })\n    )\n\n    render() {\n        const { threshold, validThreshold } = this.state;\n        const { showTitle } = this.props;\n        const explanation = <React.Fragment>The compliance threshold defines what percentage of rules\n            must be met in order for a system to be determined &quot;compliant&quot;.</React.Fragment>;\n        const titleHeader = <Title headingLevel=\"h3\" size=\"xl\">Compliance threshold</Title>;\n        const title = <React.Fragment>\n            { titleHeader }\n            { explanation }\n        </React.Fragment>;\n        const popover = <Popover\n            position={PopoverPosition.top}\n            headerContent={titleHeader}\n            bodyContent={explanation}\n        >\n            <OutlinedQuestionCircleIcon />\n        </Popover>;\n\n        return (\n            <React.Fragment>\n                { showTitle && title }\n                <FormGroup fieldId='policy-threshold'\n                    validated={ validThreshold ? 'default' : 'error' }\n                    helperTextInvalid='Threshold has to be a number between 0 and 100'\n                    helperText=\"A value of 95% or higher is recommended\"\n                    label={<React.Fragment>Compliance threshold (%) {!showTitle && popover}</React.Fragment>}>\n                    <Field name='complianceThreshold' id='complianceThreshold' isRequired={true}\n                        onChange={this.handleThresholdChange}\n                        validated={ validThreshold ? 'default' : 'error' }\n                        defaultValue={threshold}\n                        aria-label=\"compliance threshold\"\n                        component={ReduxFormTextInput} type='number'\n                        style={ { width: '60%', display: 'block' } } />\n                </FormGroup>\n            </React.Fragment>\n        );\n    }\n}\n\nProfileThresholdField.propTypes = {\n    previousThreshold: propTypes.number,\n    showTitle: propTypes.bool\n};\n\nexport default reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true\n})(ProfileThresholdField);\n","import React from 'react';\nimport { supportedConfigsLink } from '@redhat-cloud-services/frontend-components-inventory-compliance';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nconst SupportedSSGVersionsLink = () => (\n    <a target='_blank' rel='noopener noreferrer' href={ supportedConfigsLink }>\n        Supported SSG versions <ExternalLinkAltIcon />\n    </a>\n);\n\nexport default SupportedSSGVersionsLink;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Popover, Tooltip, Text } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { SupportedSSGVersionsLink } from 'PresentationalComponents';\n\nconst UNSUPPORTED_SINGULAR_MESSAGE =\n    'This system was using an incompatible version of the SSG at the time this report was generated. ' +\n    'Assessment of rules failed/passed on this system is a best-guess effort and may not be accurate.';\nconst UNSUPPORTED_PLURAL_MESSAGE = <React.Fragment>\n    <Text variant='p' style={ { marginBottom: '1rem' } }>\n        These systems are running unsupported versions of the SCAP Security Guide (SSG) for the version of RHEL installed on them.\n        Assessment of rules failed/passed on these systems is a best-guess effort and may not be accurate.\n    </Text>\n    <Text variant='p'>\n        The policy&apos;s compliance score excludes these systems.\n    </Text>\n</React.Fragment>;\n\nconst WarningWithPopover = ({ children, variant = 'plural' }) => (\n    <Popover\n        id='unsupported-popover'\n        maxWidth='25rem'\n        headerContent='Unsupported SSG versions'\n        bodyContent={ variant === 'plural' ? UNSUPPORTED_PLURAL_MESSAGE : UNSUPPORTED_SINGULAR_MESSAGE }\n        footerContent={ <SupportedSSGVersionsLink /> }>\n        { children }\n    </Popover>\n);\n\nWarningWithPopover.propTypes = {\n    children: propTypes.node,\n    variant: propTypes.oneOf(['singular', 'plural'])\n};\n\nconst WarningWithTooltip = ({ children, content }) => (\n    <Tooltip content={ content } position='bottom'>\n        { children }\n    </Tooltip>\n);\n\nWarningWithTooltip.propTypes = {\n    content: propTypes.string,\n    children: propTypes.node\n};;\n\nconst TooltipOrPopover = ({ variant, children, tooltipProps }) => {\n    const { Component, componentProps } = {\n        tooltip: {\n            Component: WarningWithTooltip,\n            componentProps: tooltipProps\n        },\n        popover: {\n            Component: WarningWithPopover,\n            componentProps: {\n                showHeader: tooltipProps.showPopupHeader,\n                variant: tooltipProps.messageVariant\n            }\n        }\n    }[variant];\n\n    return <Component { ...componentProps }>\n        { children }\n    </Component>;\n};\n\nTooltipOrPopover.propTypes = {\n    children: propTypes.node,\n    variant: propTypes.oneOf(['tooltip', 'popover']),\n    tooltipProps: propTypes.object\n};\n\nconst UnsupportedSSGVersion = ({\n    children, showWarningIcon = true, showHelpIcon = false, style, tooltipText, messageVariant\n}) => {\n    const tooltipProps = {\n        ...tooltipText && { content: <div>{ tooltipText }</div> },\n        messageVariant\n    };\n    const variant = tooltipText ? 'tooltip' : 'popover';\n    const iconProps = {\n        variant,\n        tooltipProps\n    };\n    const defaultStyle = !tooltipText ? { cursor: 'pointer' } : {};\n\n    return <span style={ { ...style, display: 'inline-block' } }>\n        { showWarningIcon && <TooltipOrPopover { ...iconProps }>\n            <ExclamationTriangleIcon\n                className='ins-u-warning'\n                style={ {\n                    ...defaultStyle,\n                    marginRight: '.25em'\n                } }\n            />\n        </TooltipOrPopover> }\n\n        { children }\n\n        { showHelpIcon &&  <TooltipOrPopover { ...iconProps }>\n            <OutlinedQuestionCircleIcon\n                style={ {\n                    ...defaultStyle,\n                    marginLeft: '.25em'\n                } }\n            />\n        </TooltipOrPopover> }\n    </span>;\n};\n\nUnsupportedSSGVersion.propTypes = {\n    showWarningIcon: propTypes.bool,\n    showHelpIcon: propTypes.bool,\n    style: propTypes.object,\n    tooltipText: propTypes.string,\n    children: propTypes.node,\n    variant: propTypes.string,\n    messageVariant: propTypes.string,\n    showPopupHeader: propTypes.bool\n};\n\nexport default UnsupportedSSGVersion;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Text } from '@patternfly/react-core';\n\nconst SubPageTitle = ({ children }) => (\n    <Text\n        component='h2'\n        style={ {\n            color: 'var(--pf-global--Color--200)',\n            lineHeight: '2rem'\n        } }>\n        { children }\n    </Text>\n);\n\nSubPageTitle.propTypes = {\n    children: propTypes.node\n};\n\nexport default SubPageTitle;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Label } from '@patternfly/react-core';\n\nconst OperatingSystemBadge = ({ majorOsVersion }) => {\n    const colorMap = {\n        default: 'var(--pf-global--disabled-color--200)',\n        7: 'cyan',\n        8: 'purple'\n    };\n    const color = colorMap[majorOsVersion] || colorMap.default;\n\n    return <Label { ...{ color } }>\n        RHEL { majorOsVersion }\n    </Label>;\n};\n\nOperatingSystemBadge.propTypes = {\n    majorOsVersion: propTypes.string\n};\n\nexport default OperatingSystemBadge;\n","const OsVersionText = ({ profile, newOsMinorVersion }) => (\n    `RHEL${'\\u00A0'}${ profile.osMajorVersion }.${ (profile.osMinorVersion || newOsMinorVersion) }`\n);\n\nexport default OsVersionText;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport {\n    Text, TextVariants, TextContent, Grid, Spinner, Badge, Popover\n} from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport SystemRulesTable from '@redhat-cloud-services/frontend-components-inventory-compliance/SystemRulesTable';\nimport { StateViewWithError, StateViewPart, SupportedSSGVersionsLink } from 'PresentationalComponents';\nimport { pluralize } from 'Utilities/TextHelper';\nimport OsVersionText from './OsVersionText';\n\nconst ProfileSystemCount = ({ count = 0 }) => (\n    <Badge isRead>\n        { `${count} ${ pluralize(count, 'system')}` }\n    </Badge>\n);\n\nProfileSystemCount.propTypes = {\n    profile: propTypes.object,\n    count: propTypes.number\n};\n\nconst SSGVersionText = ({ profile, newOsMinorVersion }) => (\n    <Text component={ TextVariants.p }>\n        SSG version: { profile.ssgVersion }\n        {' '}\n        <Popover\n            position='right'\n            bodyContent={ <SSGPopoverBody { ...{ profile, newOsMinorVersion } } /> }\n            footerContent={ <SupportedSSGVersionsLink /> }>\n            <OutlinedQuestionCircleIcon style={ { cursor: 'pointer' } } />\n        </Popover>\n    </Text>\n);\n\nSSGVersionText.propTypes = {\n    profile: propTypes.object.isRequired,\n    newOsMinorVersion: propTypes.string\n};\n\nconst SSGPopoverBody = ({ profile, newOsMinorVersion }) => (\n    <TextContent style={ { fontSize: 'var(--pf-c-popover--FontSize)' } }>\n        <Text>\n            This is the latest supported version of the SCAP Security Guide (SSG) for\n            {' '}\n            <OsVersionText { ...{ profile, newOsMinorVersion } } />\n        </Text>\n        <Text>\n            <OsVersionText { ...{ profile, newOsMinorVersion } } /> systems assigned to this\n            policy will report using this rule list.\n        </Text>\n    </TextContent>\n);\n\nSSGPopoverBody.propTypes = {\n    profile: propTypes.object.isRequired,\n    newOsMinorVersion: propTypes.string\n};\n\nconst BENCHMARK_QUERY = gql`\nquery benchmarkQuery($id: String!) {\n    benchmark(id: $id) {\n        id\n        osMajorVersion\n        rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n        }\n    }\n}\n`;\n\nconst ProfileTabContent = ({\n    profile, columns, handleSelect, systemCount, selectedRuleRefIds, rulesTableProps, newOsMinorVersion\n}) => {\n    const { data: benchmark, error, loading } = useQuery(BENCHMARK_QUERY, {\n        variables: {\n            id: profile.benchmark.id\n        },\n        skip: !handleSelect || !profile.benchmark?.id\n    });\n    const rules = handleSelect ? benchmark?.benchmark?.rules : profile?.rules;\n\n    return <React.Fragment>\n        <Grid>\n            <TextContent className=\"pf-u-mt-md\">\n                <Text component={ TextVariants.h3 } >\n                    <span className='pf-u-pr-sm'>\n                        <OsVersionText { ...{ profile, newOsMinorVersion } } />\n                    </span>\n                    <ProfileSystemCount count={ systemCount } />\n                </Text>\n                <SSGVersionText { ...{ profile, newOsMinorVersion } } />\n            </TextContent>\n        </Grid>\n        <StateViewWithError stateValues={ { error, loading, rules } }>\n            <StateViewPart stateKey=\"loading\">\n                <Spinner />\n            </StateViewPart>\n            <StateViewPart stateKey=\"rules\">\n\n                <SystemRulesTable\n                    remediationAvailableFilter\n                    remediationsEnabled={false}\n                    columns={ columns }\n                    profileRules={ [{ profile, rules: (rules || []) }] }\n                    selectedRefIds={ selectedRuleRefIds }\n                    handleSelect={\n                        handleSelect\n                        && ((selectedRuleRefIds) => handleSelect(profile, selectedRuleRefIds))\n                    }\n                    { ...rulesTableProps } />\n\n            </StateViewPart>\n        </StateViewWithError>\n    </React.Fragment>;\n};\n\nProfileTabContent.propTypes = {\n    profile: propTypes.object,\n    newOsMinorVersion: propTypes.string,\n    columns: propTypes.array,\n    handleSelect: propTypes.func,\n    systemCount: propTypes.object,\n    selectedRuleRefIds: propTypes.array,\n    rulesTableProps: propTypes.object\n};\n\nexport default ProfileTabContent;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Tab, Badge } from '@patternfly/react-core';\nimport {\n    selectColumns as selectRulesTableColumns\n} from '@redhat-cloud-services/frontend-components-inventory-compliance/SystemRulesTable';\nimport { RoutedTabs } from 'PresentationalComponents';\nimport ProfileTabContent from './ProfileTabContent';\nimport OsVersionText from './OsVersionText';\n\nconst eventKey = (id) => (\n    `rules-${id}`\n);\n\nconst defaultTab = (tabsData, profileId) => {\n    if (tabsData && tabsData.length > 0) {\n        return eventKey(profileId || tabsData[0].profile.id);\n    }\n};\n\nconst TabbedRules = ({\n    tabsData, defaultProfileId, columns, level, handleSelect, ...rulesTableProps\n}) => {\n    return <RoutedTabs level={ level } defaultTab={ defaultTab(tabsData, defaultProfileId) }>\n        {\n            tabsData?.map(({ profile, selectedRuleRefIds, newOsMinorVersion, systemCount }) => (\n                <Tab\n                    key={ eventKey(profile.id) }\n                    eventKey={ eventKey(profile.id) }\n                    title={\n                        <span>\n                            <span className='pf-u-pr-sm'>\n                                <OsVersionText profile={ profile } newOsMinorVersion={newOsMinorVersion} />\n                            </span>\n                            <Badge isRead>{ systemCount }</Badge>\n                        </span>\n                    }>\n                    <ProfileTabContent\n                        { ...{\n                            profile,\n                            newOsMinorVersion,\n                            columns,\n                            handleSelect,\n                            rulesTableProps,\n                            systemCount,\n                            selectedRuleRefIds: (selectedRuleRefIds || [])\n                        } } />\n                </Tab>\n            ))\n        }\n    </RoutedTabs>;\n};\n\nTabbedRules.propTypes = {\n    tabsData: propTypes.arrayOf(\n        propTypes.shape(\n            {\n                profile: propTypes.object.isRequired,\n                selectedRuleRefIds: propTypes.arrayOf(propTypes.string),\n                newOsMinorVersion: propTypes.string,\n                systemCount: propTypes.number\n            }\n        )\n    ).isRequired,\n    columns: propTypes.arrayOf(propTypes.object),\n    defaultProfileId: propTypes.string,\n    handleSelect: propTypes.func,\n    level: propTypes.number\n};\n\nTabbedRules.defaultProps = {\n    columns: selectRulesTableColumns(['Name', 'Severity', 'Ansible']),\n    level: 0\n};\n\nexport default TabbedRules;\n","export const validateBenchmarkPage = (benchmark, osMajorVersion, profile) => {\n    if (benchmark && osMajorVersion && profile) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\nexport const thresholdValid = (threshold) => (\n    threshold < 101 && threshold >= 0\n);\n\nexport const validateDetailsPage = (name, refId, complianceThreshold) => (\n    !name || !refId  || !complianceThreshold || !thresholdValid(complianceThreshold) ? false : true\n);\n\nexport const validateRulesPage = (selectedRuleRefIds) => (\n    selectedRuleRefIds?.length > 0\n);\n\nexport const validateSystemsPage = (systemIds) => {\n    if (systemIds) {\n        return systemIds.length > 0;\n    } else {\n        return false;\n    }\n};\n","export const isNumberRange = (value) => value && !!value.match(/\\d\\d*-\\d\\d*/);\n\nexport const fixedPercentage = (value, fixed = 0, withPercent = true) => {\n    const fixedValue = (value)?.toFixed(fixed);\n    return fixedValue ? (fixedValue + (withPercent ? '%' : '')) : 'N/A';\n};\n\nexport const pluralize = (value, singular, plural) => {\n    if (!plural) {\n        plural = singular + 's';\n    }\n\n    return (value > 1 || value === 0 ? plural : singular);\n};\n\nexport const stringToId = (string) => (\n    string.replace(' ', '').toLowerCase()\n);\n","export const uniq = (collection) => [...new Set(collection)];\n\nexport const sortingByProp = (propName, order = 'asc') => (\n    (objA, objB) => {\n        const propA = (objA && objA[propName]) || '';\n        const propB = (objB && objB[propName]) || '';\n        if (propA === propB) {\n            return 0;\n        } else if (order === 'asc') {\n            return propA < propB ? -1 : 1;\n        } else {\n            return propA < propB ? 1 : -1;\n        }\n    }\n);\n","import { useState } from 'react';\nimport { FilterConfigBuilder } from '@redhat-cloud-services/frontend-components-inventory-compliance/Utilities';\n\nconst useFilterConfig = (initialConfig, arrayToFilter) => {\n    const filterConfigBuilder = new FilterConfigBuilder(initialConfig);\n    const [activeFilters, setActiveFilters] = useState(filterConfigBuilder.initialDefaultState());\n    const onFilterUpdate = (filter, value) => (\n        setActiveFilters({\n            ...activeFilters,\n            [filter]: value\n        })\n    );\n    const clearAllFilter = () => (\n        setActiveFilters(filterConfigBuilder.initialDefaultState())\n    );\n    const deleteFilter = (chips) => (\n        setActiveFilters(filterConfigBuilder.removeFilterWithChip(\n            chips, activeFilters\n        ))\n    );\n    const onFilterDelete = (_event, chips, clearAll = false) => (\n        clearAll ? clearAllFilter() : deleteFilter(chips[0])\n    );\n    const chipBuilder = filterConfigBuilder.getChipBuilder();\n    const filterConfig = filterConfigBuilder.buildConfiguration(\n        onFilterUpdate,\n        activeFilters\n    );\n    const filterChips = chipBuilder.chipsFor(activeFilters);\n    const filteredArray = arrayToFilter ? filterConfigBuilder.applyFilterToObjectArray(\n        arrayToFilter, activeFilters\n    ) : undefined;\n\n    return {\n        conditionalFilter: {\n            filterConfig,\n            activeFiltersConfig: {\n                filters: filterChips,\n                onDelete: onFilterDelete\n            }\n        },\n        filtered: filteredArray,\n        activeFilters,\n        buildFilterString: () => filterConfigBuilder.getFilterBuilder().buildFilterString(activeFilters)\n    };\n};\n\nexport default useFilterConfig;\n"],"sourceRoot":""}