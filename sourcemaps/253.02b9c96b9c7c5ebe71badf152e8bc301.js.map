{"version":3,"file":"js/253.95fcc75c851c606601e7.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/plus-circle-icon.js","webpack:///./src/PresentationalComponents/SystemPolicyCard/UnsupportedSSGVersion.js","webpack:///./src/PresentationalComponents/SystemPolicyCard/SystemPolicyCard.js","webpack:///./src/PresentationalComponents/SystemPolicyCards/SystemPolicyCards.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/NotConnected/NotConnected.js","webpack:///./src/SmartComponents/SystemDetails/NoPoliciesState.js","webpack:///./src/SmartComponents/SystemDetails/NoReportsState.js","webpack:///./src/SmartComponents/SystemDetails/EmptyState.js","webpack:///./src/SmartComponents/SystemDetails/ComplianceDetail.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const PlusCircleIconConfig = {\n  name: 'PlusCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PlusCircleIcon = createIcon(PlusCircleIconConfig);\n\nexport default PlusCircleIcon;","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Popover, Alert } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { supportedConfigsLink } from '@/constants';\n\nconst UnsupportedSSGVersion = ({ ssgVersion, style, ...props }) => {\n  const bodyContent =\n    'This system was using an incompatible version of the SSG at the time this report was generated.' +\n    ' Assessment of rules failed/passed on this system is a best-guess effort and may not be accurate.';\n  const footerContent = (\n    <a target=\"_blank\" rel=\"noopener noreferrer\" href={supportedConfigsLink}>\n      Supported SSG versions\n    </a>\n  );\n\n  return (\n    <Alert\n      variant=\"warning\"\n      isInline\n      style={style}\n      title={\n        <React.Fragment>\n          Unsupported SSG version ({ssgVersion})\n          <Popover position=\"right\" {...{ bodyContent, footerContent }}>\n            <OutlinedQuestionCircleIcon\n              style={{\n                marginLeft: '.5em',\n                cursor: 'pointer',\n                color: 'var(--pf-global--Color--200)',\n              }}\n            />\n          </Popover>\n        </React.Fragment>\n      }\n      {...props}\n    />\n  );\n};\n\nUnsupportedSSGVersion.propTypes = {\n  ssgVersion: propTypes.string,\n  style: propTypes.object,\n};\n\nexport default UnsupportedSSGVersion;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n} from '@patternfly/react-icons';\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  Text,\n  TextContent,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Truncate from '@redhat-cloud-services/frontend-components/Truncate';\nimport UnsupportedSSGVersion from './UnsupportedSSGVersion';\n\nclass SystemPolicyCard extends React.Component {\n  complianceIcon = (compliant) =>\n    compliant ? (\n      <div className=\"ins-c-policy-card ins-m-compliant\">\n        <CheckCircleIcon /> Compliant\n      </div>\n    ) : (\n      <div className=\"ins-c-policy-card ins-m-noncompliant\">\n        <ExclamationCircleIcon /> Not compliant\n      </div>\n    );\n\n  fixedPercentage = (value, fixed = 0, withPercent = true) =>\n    value.toFixed(fixed) + (withPercent ? '%' : '');\n\n  render() {\n    const { policy, style, onClick, isSelected } = this.props;\n    const {\n      rulesFailed,\n      compliant,\n      lastScanned,\n      score,\n      benchmark: { version: ssgVersion },\n      supported,\n      name,\n      policyType,\n    } = policy;\n    const passedPercentage = this.fixedPercentage(score);\n    const truncateDefaults = { expandOnMouseOver: true, hideExpandText: true };\n\n    return (\n      <Card\n        ouiaId=\"PolicyCard\"\n        onClick={(event) => {\n          event.stopPropagation();\n          onClick(policy);\n        }}\n        isSelected={isSelected}\n        style={style}\n      >\n        <CardBody>\n          <TextContent className=\"margin-bottom-md\">\n            <Text\n              ouiaId=\"PolicyCardName\"\n              className=\"margin-bottom-top-none\"\n              component={TextVariants.h4}\n            >\n              <Truncate text={name} length={110} {...truncateDefaults} />\n            </Text>\n            <Text\n              ouiaId=\"PolicyCardType\"\n              style={{ color: 'var(--pf-global--Color--200)' }}\n              component={TextVariants.small}\n            >\n              <Truncate text={policyType} length={110} {...truncateDefaults} />\n            </Text>\n          </TextContent>\n          <div className=\"margin-bottom-md\">\n            {supported && this.complianceIcon(compliant)}\n            <Text\n              ouiaId=\"PolicyCardFailedRulesScore\"\n              component={TextVariants.small}\n            >\n              {rulesFailed} rule{rulesFailed === 1 ? '' : 's'} failed{' '}\n              <Tooltip\n                position=\"bottom\"\n                maxWidth=\"22em\"\n                content={\n                  'The system compliance score is calculated by OpenSCAP and ' +\n                  'is a normalized weighted sum of rules selected for this policy.'\n                }\n              >\n                <span>\n                  (Score: {supported ? passedPercentage : 'Unsupported'})\n                </span>\n              </Tooltip>\n            </Text>\n          </div>\n          <Text className=\"margin-bottom-none\" component={TextVariants.small}>\n            <Text ouiaId=\"PolicyCardSSGVersion\">SSG version: {ssgVersion}</Text>\n            <Text ouiaId=\"PolicyCardLastScanned\">\n              Last scanned:{' '}\n              {lastScanned !== 'Never' ? (\n                <DateFormat date={Date.parse(lastScanned)} type=\"relative\" />\n              ) : (\n                lastScanned\n              )}\n            </Text>\n          </Text>\n        </CardBody>\n        {!supported && (\n          <CardFooter style={{ padding: '0' }}>\n            <UnsupportedSSGVersion\n              ouiaId=\"PolicyCardUnsupportedSSG\"\n              ssgVersion={ssgVersion}\n              style={{\n                paddingTop: 'var(--pf-c-alert--PaddingTop)',\n                paddingRight: 'var(--pf-c-card--child--PaddingRight)',\n                paddingLeft: 'var(--pf-c-card--child--PaddingLeft)',\n                paddingBottom: 'var(--pf-c-alert--PaddingBottom)',\n              }}\n            />\n          </CardFooter>\n        )}\n      </Card>\n    );\n  }\n}\n\nSystemPolicyCard.propTypes = {\n  policy: PropTypes.shape({\n    rulesPassed: PropTypes.number,\n    rulesFailed: PropTypes.number,\n    score: PropTypes.number,\n    lastScanned: PropTypes.string,\n    refId: PropTypes.string,\n    name: PropTypes.string,\n    policyType: PropTypes.string,\n    compliant: PropTypes.bool,\n    benchmark: PropTypes.string,\n    supported: PropTypes.bool,\n  }),\n  style: PropTypes.object,\n  onClick: PropTypes.func,\n  isSelected: PropTypes.bool,\n};\n\nexport default SystemPolicyCard;\n","import React from 'react';\nimport { Grid, GridItem, Card, CardBody } from '@patternfly/react-core';\nimport SystemPolicyCard from '../SystemPolicyCard';\nimport propTypes from 'prop-types';\nimport { Instagram } from 'react-content-loader';\n\nclass SystemPolicyCards extends React.Component {\n  systemPolicyCards() {\n    const { policies, selectedPolicies, onCardClick } = this.props;\n\n    return policies\n      .filter((policy) => policy.rulesFailed + policy.rulesPassed > 0)\n      .map((policy, i) => (\n        <GridItem sm={12} md={12} lg={6} xl={4} key={i}>\n          <SystemPolicyCard\n            policy={policy}\n            style={{ height: '100%' }}\n            onClick={(policy) => onCardClick(policy)}\n            isSelected={selectedPolicies?.find(\n              (policyId) => policyId === policy.id\n            )}\n          />\n        </GridItem>\n      ));\n  }\n\n  render() {\n    const { loading } = this.props;\n\n    return (\n      <React.Fragment>\n        <Grid hasGutter>\n          {this.systemPolicyCards()}\n          {loading &&\n            [...Array(3)].map((_item, i) => (\n              <GridItem span={4} key={i}>\n                <Card>\n                  <CardBody>\n                    <Instagram />\n                  </CardBody>\n                </Card>\n              </GridItem>\n            ))}\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nSystemPolicyCards.propTypes = {\n  policies: propTypes.array,\n  loading: propTypes.bool,\n  onCardClick: propTypes.func,\n  selectedPolicies: propTypes.string,\n};\n\nSystemPolicyCards.defaultProps = {\n  policies: [],\n};\n\nexport default SystemPolicyCards;\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Button, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { DisconnectedIcon } from '@patternfly/react-icons';\nvar NotConnected = function (_a) {\n    var _b = _a.titleText, titleText = _b === void 0 ? 'This system isn’t connected to Insights yet' : _b, _c = _a.bodyText, bodyText = _c === void 0 ? 'To get started, activate the Insights client for this system.' : _c, _d = _a.buttonText, buttonText = _d === void 0 ? 'Learn how to activate the Insights client' : _d;\n    return (_jsxs(EmptyState, { children: [_jsx(EmptyStateIcon, { icon: DisconnectedIcon }), _jsx(Title, __assign({ headingLevel: \"h5\", size: \"lg\" }, { children: titleText })), _jsx(EmptyStateBody, { children: bodyText }), _jsx(Button, __assign({ variant: \"primary\", component: \"a\", href: \"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\", target: \"_blank\", rel: \"noopener noreferrer\", className: \"pf-u-mt-lg\" }, { children: buttonText }))] }));\n};\nexport default NotConnected;\n//# sourceMappingURL=NotConnected.js.map","import React from 'react';\nimport { BackgroundLink, LinkButton } from 'PresentationalComponents';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport {\n  Title,\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStatePrimary,\n  EmptyStateSecondaryActions,\n  EmptyStateIcon,\n} from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\n\nconst NoPoliciesState = () => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        This system is not part of any SCAP policies defined within Compliance.\n      </Title>\n      <EmptyStateBody>\n        To assess and monitor compliance against a SCAP policy for this system,\n        add it to an existing policy or create a new policy.\n      </EmptyStateBody>\n      <EmptyStatePrimary>\n        <BackgroundLink\n          to=\"/scappolicies/new\"\n          variant=\"primary\"\n          ouiaId=\"CreateNewPolicyButton\"\n          component={LinkButton}\n        >\n          Create new policy\n        </BackgroundLink>\n      </EmptyStatePrimary>\n      <EmptyStateSecondaryActions>\n        <Link variant=\"plain\" to=\"/scappolicies\">\n          View compliance policies\n        </Link>\n      </EmptyStateSecondaryActions>\n    </EmptyState>\n  </Bullseye>\n);\n\nexport default NoPoliciesState;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { CloudSecurityIcon } from '@patternfly/react-icons';\nimport {\n  Title,\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n} from '@patternfly/react-core';\n\nconst NoReportsState = ({ system }) => (\n  <Bullseye>\n    <EmptyState>\n      <EmptyStateIcon\n        icon={CloudSecurityIcon}\n        title=\"Compliance\"\n        size=\"xl\"\n        style={{\n          fontWeight: '500',\n          color: 'var(--pf-global--primary-color--100)',\n        }}\n      />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        No results reported\n      </Title>\n      <EmptyStateBody>\n        This system is part of {system?.policies?.length}\n        {system?.policies?.length > 1 ? ' policies' : ' policy'}, but has not\n        returned any results.\n      </EmptyStateBody>\n      <EmptyStateBody>\n        Reports are returned when the system checks into Insights. By default,\n        systems check in every 24 hours.\n      </EmptyStateBody>\n    </EmptyState>\n  </Bullseye>\n);\n\nNoReportsState.propTypes = {\n  system: propTypes.shape({\n    policies: propTypes.array,\n  }),\n};\n\nexport default NoReportsState;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\nimport NoPoliciesState from './NoPoliciesState';\nimport NoReportsState from './NoReportsState';\n\nconst EmptyState = ({ system }) => {\n  if (!system?.insightsId) {\n    return <NotConnected />;\n  } else {\n    if (!system?.hasPolicy) {\n      return <NoPoliciesState system={system} />;\n    } else if (system?.hasPolicy && system?.testResultProfiles?.length === 0) {\n      return <NoReportsState system={system} />;\n    }\n  }\n};\n\nEmptyState.propTypes = {\n  system: propTypes.object,\n};\n\nexport default EmptyState;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport SystemPolicyCards from '../../PresentationalComponents/SystemPolicyCards';\nimport RulesTable from '@/PresentationalComponents/RulesTable/RulesTable';\nimport ComplianceEmptyState from 'PresentationalComponents/ComplianceEmptyState';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\n\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport './compliance.scss';\nimport { ErrorCard } from 'PresentationalComponents';\n\nimport EmptyState from './EmptyState';\n\nconst QUERY = gql`\n  query System($systemId: String!) {\n    system(id: $systemId) {\n      id\n      name\n      hasPolicy\n      insightsId\n      policies {\n        id\n      }\n      testResultProfiles {\n        id\n        name\n        policyType\n        refId\n        compliant\n        rulesFailed\n        rulesPassed\n        lastScanned\n        score\n        supported\n        osMajorVersion\n        benchmark {\n          version\n          ruleTree\n        }\n        policy {\n          id\n        }\n        rules {\n          id\n          title\n          severity\n          rationale\n          refId\n          description\n          compliant\n          remediationAvailable\n          references\n          identifier\n          precedence\n        }\n      }\n    }\n  }\n`;\n\nconst SystemQuery = ({ data: { system }, loading, hidePassed }) => {\n  const [selectedPolicy, setSelectedPolicy] = useState(\n    system.testResultProfiles[0]?.id\n  );\n  const policies = system?.testResultProfiles;\n\n  return (\n    <>\n      <SystemPolicyCards policies={policies} loading={loading} />\n      <br />\n      {system?.testResultProfiles?.length ? (\n        <>\n          {system.testResultProfiles.length > 1 && (\n            <Tabs\n              activeKey={selectedPolicy}\n              style={{ background: 'var(--pf-global--BackgroundColor--100)' }}\n            >\n              {system.testResultProfiles.map((policy, idx) => {\n                return (\n                  <Tab\n                    key={'policy-tab-' + idx}\n                    eventKey={policy.id}\n                    title={<TabTitleText> {policy.name} </TabTitleText>}\n                    onClick={() => {\n                      setSelectedPolicy(policy.id);\n                    }}\n                  />\n                );\n              })}\n            </Tabs>\n          )}\n          <RulesTable\n            ansibleSupportFilter\n            hidePassed={hidePassed}\n            showFailedCounts\n            system={{\n              ...system,\n              supported:\n                (system?.testResultProfiles || []).filter(\n                  (profile) => profile.supported\n                ).length > 0,\n            }}\n            profileRules={system?.testResultProfiles\n              .filter((policy) => selectedPolicy === policy.id)\n              .map((profile) => ({\n                system,\n                profile,\n                rules: profile.rules,\n              }))}\n            loading={loading}\n            options={{\n              sortBy: {\n                index: 4,\n                direction: 'asc',\n                property: 'severity',\n              },\n            }}\n          />\n        </>\n      ) : (\n        <EmptyState system={system} />\n      )}\n    </>\n  );\n};\n\nSystemQuery.propTypes = {\n  data: propTypes.shape({\n    system: propTypes.shape({\n      hasPolicy: propTypes.bool,\n      policies: propTypes.shape({\n        id: propTypes.string,\n      }),\n      profiles: propTypes.array,\n      testResultProfiles: propTypes.array,\n    }),\n  }),\n  loading: propTypes.bool,\n  hidePassed: propTypes.bool,\n};\n\nSystemQuery.defaultProps = {\n  loading: true,\n};\n\nexport const Details = ({ inventoryId, hidePassed, ...props }) => {\n  const { data, error, loading } = useQuery(QUERY, {\n    variables: { systemId: inventoryId },\n    fetchPolicy: 'no-cache',\n  });\n  const is404 = error?.networkError?.statusCode === 404;\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  if (error && !is404) {\n    // network errors other than 404 are unexpected\n    return <ErrorCard />;\n  }\n\n  return (\n    <div className=\"ins-c-compliance__scope\">\n      {!data?.system || is404 ? (\n        <ComplianceEmptyState title=\"No policies are reporting for this system\" />\n      ) : (\n        <SystemQuery\n          {...props}\n          hidePassed={hidePassed}\n          data={data}\n          loading={loading}\n        />\n      )}\n    </div>\n  );\n};\n\nDetails.propTypes = {\n  inventoryId: propTypes.string,\n  hidePassed: propTypes.bool,\n};\n\nexport default Details;\n"],"names":["PlusCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","PlusCircleIcon","UnsupportedSSGVersion","_ref","ssgVersion","style","props","_objectWithoutProperties","_excluded","footerContent","React","target","rel","href","supportedConfigsLink","Alert","_extends","variant","isInline","title","Popover","position","bodyContent","OutlinedQuestionCircleIcon","marginLeft","cursor","color","propTypes","SystemPolicyCard","_React$Component","_inherits","_super","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","compliant","className","CheckCircleIcon","ExclamationCircleIcon","value","fixed","undefined","withPercent","toFixed","_createClass","key","_this$props","this","policy","onClick","isSelected","rulesFailed","lastScanned","score","benchmark","version","supported","policyType","passedPercentage","fixedPercentage","truncateDefaults","expandOnMouseOver","hideExpandText","Card","ouiaId","event","stopPropagation","CardBody","TextContent","Text","component","TextVariants","Truncate","text","complianceIcon","Tooltip","maxWidth","content","DateFormat","date","Date","parse","type","CardFooter","padding","paddingTop","paddingRight","paddingLeft","paddingBottom","PropTypes","rulesPassed","refId","SystemPolicyCards","policies","selectedPolicies","onCardClick","filter","map","i","GridItem","sm","md","lg","xl","find","policyId","id","loading","Grid","hasGutter","systemPolicyCards","_toConsumableArray","_item","span","Instagram","defaultProps","__assign","Object","assign","t","s","n","p","prototype","hasOwnProperty","_a","_b","titleText","_c","bodyText","_d","buttonText","EmptyState","children","EmptyStateIcon","icon","DisconnectedIcon","Title","headingLevel","size","EmptyStateBody","Button","Bullseye","EmptyStatePrimary","BackgroundLink","to","LinkButton","EmptyStateSecondaryActions","Link","NoReportsState","_system$policies","_system$policies2","system","CloudSecurityIcon","fontWeight","_system$testResultPro","insightsId","hasPolicy","testResultProfiles","NoPoliciesState","NotConnected","QUERY","gql","_templateObject","_taggedTemplateLiteral","SystemQuery","_system$testResultPro2","data","hidePassed","_useState","useState","_useState2","_slicedToArray","selectedPolicy","setSelectedPolicy","Tabs","activeKey","background","idx","Tab","eventKey","TabTitleText","RulesTable","ansibleSupportFilter","showFailedCounts","_objectSpread","profile","profileRules","rules","options","sortBy","index","direction","property","profiles","Details","_ref2","_error$networkError","inventoryId","_useQuery","useQuery","variables","systemId","fetchPolicy","error","is404","networkError","statusCode","Spinner","ErrorCard","ComplianceEmptyState"],"sourceRoot":""}