{"version":3,"sources":["webpack:///./src/SmartComponents/ComplianceSystems/ComplianceSystems.js","webpack:///./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyProfilesRules.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack:///./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack:///./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyDetailsTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyRulesTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicySystemsTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyForm.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicy.js","webpack:///./src/SmartComponents/EditPolicy/usePolicy.js","webpack:///./src/SmartComponents/SystemsTable/constants.js","webpack:///./src/SmartComponents/InventoryDetails/InventoryDetails.js","webpack:///./src/Utilities/Export.js","webpack:///./src/SmartComponents/SystemsTable/InventoryTable.js","webpack:///./src/SmartComponents/SystemsTable/hooks.js","webpack:///./src/Utilities/hooks/api/utils/ApiClient.js","webpack:///./src/Utilities/hooks/api/useApi.js","webpack:///./src/Utilities/hooks/api/useCollection.js","webpack:///./src/Utilities/ruleHelpers.js","webpack:///./src/store/ActionTypes.js","webpack:///./src/store/Reducers/SystemStore.js"],"names":["QUERY","gql","ComplianceSystems","useQuery","data","error","loading","dispatch","useDispatch","columns","key","title","props","width","isStatic","renderFunc","systemName","policyNames","policiesCell","id","detailsLink","testResultProfiles","policies","profiles","edges","map","node","useLayoutEffect","type","payload","ids","className","stateValues","stateKey","query","GET_SYSTEMS","defaultFilter","systemProps","isFullView","showOsFilter","showComplianceSystemsInfo","enableEditPolicy","remediationsEnabled","BENCHMARKS_AND_PROFILES","PolicyTooltip","Tooltip","position","content","style","opacity","CreateSCAPPolicy","change","selectedBenchmarkId","fetchPolicy","Spinner","selectedBenchmark","validProfiles","benchmark","benchmarks","latestBenchmarks","find","userProfileRefIds","filter","profile","refId","disabled","includes","TextContent","Text","component","TextVariants","Form","FormGroup","label","isRequired","fieldId","sort","a","b","localeCompare","osMajorVersion","Button","onClick","setBenchmark","variant","labelIcon","propTypes","reduxFormPropTypes","selector","formValueSelector","compose","connect","state","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","PROFILES_QUERY","EditPolicyProfilesRules","policy","selectedRuleRefIds","osMinorVersionCounts","selectRulesTableColumns","useCollection","include","params","search","i","osMinorVersion","join","benchmarksLoading","profileIds","tabsData","profileSelectedRuleRefIds","systemCount","count","latestSupportedOsMinorVersions","getBenchmarkBySupportedOsMinor","collection","profileRefId","benchmarkProfile","getBenchmarkProfile","rules","relationships","push","newOsMinorVersion","ruleRefIds","skipProfilesQuery","length","variables","skip","profilesData","dataState","undefined","loadingState","noRuleSets","p","rule","name","EmptyState","Title","headingLevel","size","EmptyStateBody","EmptyTable","selectedFilter","level","handleSelect","newSelectedRuleRefIds","newSelection","JSON","parse","WizardContextConsumer","goToStepById","PrependComponent","EditPolicySystems","selectedSystemIds","useEffect","showOsMinorVersionFilter","prependComponent","emptyStateComponent","displayName","_id","compact","showActions","GET_SYSTEMS_WITHOUT_FAILED_RULES","enableExport","defaultProps","countOsMinorVersions","entities","selectedEntities","e","EditPolicyDetails","description","Field","ReduxFormTextInput","aria-describedby","isDisabled","ReduxFormTextArea","defaultValue","businessObjective","showTitle","previousThreshold","complianceThreshold","initialValues","REVIEW","ReviewCreatedPolicy","benchmarkId","parentProfileName","marginTop","TextList","TextListVariants","TextListItem","TextListItemVariants","parseFloat","rulesCount","EmtpyStateWithErrors","errors","Array","isArray","List","ListItem","FinishedCreatePolicy","onWizardFinish","cloneFromProfileId","systemIds","useState","percent","setPercent","message","setMessage","setErrors","failed","setFailed","updatePolicy","usePolicy","onProgress","progress","newPolicy","hosts","then","catch","networkError","result","Bullseye","EmptyStateVariant","EmptyStateIcon","icon","WrenchIcon","EmptyStateSecondaryActions","withApollo","CreatePolicy","history","useHistory","stepIdReached","setStepIdReached","resetAnchor","location","hash","onClose","steps","enableNext","validateBenchmarkPage","canJumpTo","validateDetailsPage","validateSystemsPage","validateRulesPage","nextButtonText","isFinishedStep","Wizard","isOpen","onNext","onGoToStep","onBack","EditPolicyDetailsTab","setUpdatedPolicy","validThreshold","setValidThreshold","threshold","valid","thresholdValid","useThresholdValidate","validateThreshold","TextArea","height","onChange","value","TextInput","validated","helperTextInvalid","helperText","complianceThresholdValid","EditPolicyRulesTabEmptyState","EditPolicyRulesTab","osMinorVersions","Object","keys","benchmarkSearch","values","sortingByProp","parentProfileId","toTabsData","tab","forEach","refIds","empty","EditPolicySystemsTab","policyOsMinorVersions","selectedSystemOsMinorVersions","useSelector","entity","systemOsMinorVersion","Alert","isInline","actionLinks","AlertActionLink","profilesToOsMinorMap","reduce","acc","mapCountOsMinorVersions","EditPolicyForm","updatedPolicy","policyProfiles","setSelectedRuleRefIds","setOsMinorVersionCounts","updateSelectedRuleRefIds","policyProfile","defaultTab","Tab","eventKey","TabTitleText","filteredSelection","selectedProfile","uniq","MULTIVERSION_QUERY","EditPolicy","route","policyId","useParams","policy_id","anchor","useAnchor","linkToBackground","useLinkToBackground","isSaving","setIsSaving","saveEnabled","linkToBackgroundWithHash","actions","spinnerAriaValueText","isLoading","useTitleEntity","Modal","create","createBusinessObjective","useMutation","CREATE_BUSINESS_OBJECTIVE","newBusinessObjective","input","UPDATE_PROFILE","updateProfile","CREATE_PROFILE","createProfile","associateSystems","ASSOCIATE_SYSTEMS_TO_PROFILES","h","useAssociateSystems","associateRules","ASSOCIATE_RULES_TO_PROFILE","ruleInput","useAssociateRules","expectedUpdates","dispatchProgress","businessObjectiveId","policyInput","policyFilter","osFilter","systemsPolicyFilterConfiguration","systemsOsFilterConfiguration","osMinorVersionFilter","systemsOsMinorFilterConfiguration","InventoryDetails","registryDecorator","DetailWrapper","onLoad","mergeWithDetail","getRegistry","register","InventoryDetail","fallback","Skeleton","SkeletonSize","hideBack","React","getNestedObject","nestedObj","path","split","obj","textCsvCell","row","cell","exportValue","InventoryTable","showFilter","supportedSsgs","showAllSystems","client","compliantFilter","showOnlySystemsWithTestResults","store","useStore","inventory","useRef","perPage","page","pagination","setPagination","isLoaded","setIsLoaded","isEmpty","setIsEmpty","showVersion","version","String","currentValue","Set","groupByMajorVersion","useFilterConfig","DEFAULT_SYSTEMS_FILTER_CONFIGURATION","COMPLIANT_SYSTEMS_FILTER_CONFIGURATION","conditionalFilter","activeFilters","buildFilterString","total","systemsCount","items","systems","system","shallowEqual","fetchSystems","filterString","combindedFilter","fetchResults","totalCount","debounceFetchSystems","useCallback","debounce","activeFiltersConfig","filters","noError","INVENTORY_ACTION_TYPES","mergeWithEntities","systemsReducer","SkeletonTable","colSize","rowSize","tableProps","canSelectAll","TableVariant","ref","onRefresh","options","callback","per_page","current","onRefreshData","bulkSelect","checked","every","selected","onSelect","isSelected","selectAll","clearSelection","dedicatedAction","ComplianceRemediationButton","allSystems","systemsWithRuleObjectsFailed","selectedRules","exportConfig","_","format","rows","csvRows","column","concat","noExport","encodeURI","csvFromState","object","stringify","jsonFromState","filename","link","document","createElement","setAttribute","dispatchEvent","MouseEvent","bubbles","cancelable","view","window","linkAndDownload","CSV_FILE_PREFIX","Date","toISOString","exportFromState","getState","_event","_index","beta","pathname","href","origin","PropTypes","Accept","this","apiBase","authenticate","Promise","resolve","onUnauthorised","defaultHeaders","headers","DEFAULT_API_HEADERS","apiProps","method","callAuthenticate","fetch","checkForEmptyResponse","response","checkForErrors","json","finalCatch","promise","reject","credentials","fullPath","url","URL","encodeURIComponent","URLSearchParams","body","status","ignore404","responseCloneJson","clone","request","ApiClient","includeAttributes","prop","attributes","newEntity","includePropAndDelete","normalizeData","jsonNormalized","normalize","normalizedJson","entries","item","relationship","relationshipData","v","includeRelationship","fetchCollection","apiClient","get","normalized","meta","dependencies","collectionState","setCollectionState","useApi","COMPLIANCE_API_ROOT","profilesRulesFailed","flatMap","compliant","profilesRulesPassed","systemRulesFailed","ruleObjectsFailed","SELECT_ENTITY","NEVER","lines","Link","to","matchingSystem","systemsToRows","scoreTotal","numScored","dates","last","rulesPassed","rulesFailed","lastScanned","Math","max","apply","date","isFinite","display_name","score","supported","ssgVersion","selectRowsByIds","rowsToSelect","deselectRowsByIds","INVENTORY_ACTION","applyReducerHash","loaded","LOAD_ENTITIES_PENDING","LOAD_ENTITIES_FULFILLED","newState","clearAll","selectAllRows","deselectAllRows","selectRow","deselectRow"],"mappings":"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","file":"js/EditPolicy.2a621d9d95b8ae1a553d.js","sourcesContent":["/* eslint-disable react/display-name */\nimport React, { useLayoutEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport { InventoryTable } from 'SmartComponents';\nimport { GET_SYSTEMS } from '../SystemsTable/constants';\nimport { systemName, detailsLink, policiesCell } from 'Store/Reducers/SystemStore';\n\nconst QUERY = gql`\n{\n    profiles(search: \"external = false and canonical = false\") {\n        edges {\n            node {\n                id\n                name\n                refId\n                majorOsVersion\n            }\n        }\n    }\n}\n`;\n\nconst DEFAULT_FILTER = 'has_test_results = true or has_policy = true';\n\nexport const ComplianceSystems = () => {\n    const { data, error, loading } = useQuery(QUERY);\n    const dispatch = useDispatch();\n    const columns = [{\n        key: 'display_name',\n        title: 'Name',\n        props: {\n            width: 40, isStatic: true\n        },\n        renderFunc: systemName\n    }, {\n        key: 'policyNames',\n        title: 'Policies',\n        props: {\n            width: 40, isStatic: true\n        },\n        renderFunc: (policyNames) => {\n            const { title } = policiesCell({ policyNames }) || { title: '' };\n            return title;\n        }\n    }, {\n        key: 'testResultProfiles',\n        title: '',\n        props: {\n            width: 20, isStatic: true\n        },\n        renderFunc: (data, id) => {\n            const { title } = detailsLink({ testResultProfiles: data, id }) || { title: '' };\n            return title;\n        }\n    }];\n    const policies = data?.profiles?.edges.map(({ node }) => node);\n\n    useLayoutEffect(() => { dispatch({ type: 'SELECT_ENTITIES', payload: { ids: [] } }); }, []);\n\n    return (\n        <React.Fragment>\n            <PageHeader className='page-header'>\n                <PageHeaderTitle title=\"Systems\" />\n            </PageHeader>\n            <Main>\n                <StateViewWithError stateValues={ { error, data, loading } }>\n                    <StateViewPart stateKey=\"data\">\n                        { policies && <InventoryTable\n                            query={GET_SYSTEMS}\n                            defaultFilter={ DEFAULT_FILTER }\n                            systemProps={{\n                                isFullView: true\n                            }}\n                            showOsFilter\n                            showComplianceSystemsInfo\n                            enableEditPolicy={ false }\n                            remediationsEnabled={ false }\n                            columns={ columns }\n                            policies={ policies } /> }\n                    </StateViewPart>\n                </StateViewWithError>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default ComplianceSystems;\n","import React from 'react';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport {\n    Button,\n    Form,\n    FormGroup,\n    Text,\n    TextContent,\n    TextVariants,\n    Tooltip\n} from '@patternfly/react-core';\nimport { ProfileTypeSelect } from 'PresentationalComponents';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { propTypes as reduxFormPropTypes, formValueSelector, reduxForm } from 'redux-form';\nimport { connect, useDispatch } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\n\nconst BENCHMARKS_AND_PROFILES = gql`\nquery benchmarksAndProfiles {\n    latestBenchmarks {\n        id\n        title\n        refId\n        version\n        osMajorVersion\n        profiles {\n            id\n            name\n            refId\n            description\n            complianceThreshold\n        }\n    }\n    profiles(search: \"external = false and canonical = false\") {\n        edges {\n            node {\n                id\n                refId\n                benchmark {\n                    refId\n                }\n            }\n        }\n    }\n}\n`;\n\nconst PolicyTooltip = () => (\n    <Tooltip\n        position=\"right\"\n        content=\"Policy types are OpenSCAP policies that are supported by RHEL.\n        For each major version of RHEL, users can create one policy of each type.\">\n        <OutlinedQuestionCircleIcon style={{ opacity: 0.5 }}/>\n    </Tooltip>\n);\n\nexport const CreateSCAPPolicy = ({ change, selectedBenchmarkId }) => {\n    const { data, error, loading } = useQuery(BENCHMARKS_AND_PROFILES, { fetchPolicy: 'no-cache' });\n\n    const inUseProfileRefIds = (profiles, benchmark) => (\n        profiles.filter(profile => benchmark.refId === profile.node.benchmark.refId).map(profile => profile.node.refId)\n    );\n\n    const dispatch = useDispatch();\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const benchmarks = data.latestBenchmarks;\n    let selectedBenchmark;\n    let validProfiles;\n    if (selectedBenchmarkId) {\n        selectedBenchmark = benchmarks.find(benchmark => benchmark.id === selectedBenchmarkId);\n        const userProfileRefIds = inUseProfileRefIds(data.profiles.edges, selectedBenchmark);\n        validProfiles = selectedBenchmark.profiles.map((profile) => ({\n            ...profile,\n            disabled: userProfileRefIds.includes(profile.refId)\n        }));\n    }\n\n    const setBenchmark = ({ id, osMajorVersion }) => {\n        if (selectedBenchmark?.osMajorVersion !== osMajorVersion) {\n            change('systems', []);\n            dispatch({\n                type: 'SELECT_ENTITIES',\n                payload: { ids: [] }\n            });\n        }\n\n        change('benchmark', id);\n        change('osMajorVersion', osMajorVersion);\n    };\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1} className=\"pf-u-mb-md\">\n                    Create SCAP policy\n                </Text>\n                <Text className=\"pf-u-mb-md\">\n                    Select the operating system and policy type for this policy.\n                </Text>\n            </TextContent>\n            <Form>\n                <FormGroup\n                    label=\"Operating system\"\n                    isRequired\n                    fieldId=\"benchmark\">\n                    { benchmarks && benchmarks.sort((a, b) => a.refId.localeCompare(b.refId)).map((benchmark) => {\n                        const { id, osMajorVersion } = benchmark;\n                        return (\n                            <Button key={id} onClick={ () => setBenchmark(benchmark) }\n                                className={`wizard-os-button ${selectedBenchmarkId === id ? 'active-wizard-os-button' : ''}`}\n                                variant=\"tertiary\">\n                                { `RHEL ${osMajorVersion}` }\n                            </Button>\n                        );\n                    })}\n                </FormGroup>\n                <FormGroup\n                    isRequired\n                    labelIcon={<PolicyTooltip/>}\n                    label=\"Policy type\"\n                    fieldId=\"policy-type\">\n                    <ProfileTypeSelect\n                        profiles={selectedBenchmark && validProfiles }\n                        onClick={ () => {\n                            change('selectedRuleRefIds', null);\n                        }}/>\n                </FormGroup>\n            </Form>\n        </React.Fragment>\n    );\n};\n\nCreateSCAPPolicy.propTypes = {\n    selectedBenchmarkId: propTypes.string,\n    change: reduxFormPropTypes.change\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            selectedBenchmarkId: selector(state, 'benchmark')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(CreateSCAPPolicy);\n","import React, { useLayoutEffect } from 'react';\nimport { propTypes as reduxFormPropTypes, formValueSelector, reduxForm } from 'redux-form';\nimport {\n    selectColumns as selectRulesTableColumns\n} from '@redhat-cloud-services/frontend-components-inventory-compliance/SystemRulesTable';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n    Title, Text, TextContent, TextVariants,\n    EmptyState, EmptyStateBody\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport { StateViewWithError, StateViewPart, TabbedRules } from 'PresentationalComponents';\nimport useCollection from 'Utilities/hooks/api/useCollection';\n\nconst PROFILES_QUERY = gql`\nquery Profiles($filter: String!){\n    profiles(search: $filter){\n        edges {\n            node {\n                id\n                name\n                refId\n                osMinorVersion\n                osMajorVersion\n                policy {\n                    id\n\n                }\n                policyType\n                benchmark {\n                    id\n                    refId\n                    latestSupportedOsMinorVersions\n                    osMajorVersion\n                }\n                ssgVersion\n                rules {\n                    id\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n    }\n}\n`;\n\nconst getBenchmarkProfile = (benchmark, profileRefId) => (\n    benchmark.profiles.find((benchmarkProfile) => (benchmarkProfile.refId === profileRefId))\n);\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) => (\n    benchmarks.find((benchmark) =>\n        benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n    )\n);\n\nexport const EditPolicyProfilesRules = ({ policy, selectedRuleRefIds, change, osMajorVersion, osMinorVersionCounts }) => {\n    const columns = selectRulesTableColumns(['Name', 'Severity', 'Ansible']);\n    const handleSelectCallback = (profile, newSelectedRuleRefIds) => {\n        const newSelection = selectedRuleRefIds.map((profileSelectedRuleRefIds) => {\n            if (profileSelectedRuleRefIds.id === profile.id) {\n                return {\n                    id: profileSelectedRuleRefIds.id,\n                    ruleRefIds: newSelectedRuleRefIds\n                };\n            } else {\n                return profileSelectedRuleRefIds;\n            }\n        });\n\n        change('selectedRuleRefIds', newSelection);\n    };\n\n    const { data: benchmarks, loading: benchmarksLoading } = useCollection('benchmarks', {\n        type: 'benchmark',\n        include: ['profiles'],\n        params: {\n            search: `os_major_version = ${ osMajorVersion } ` +\n                    `and latest_supported_os_minor_version ^ \"${ osMinorVersionCounts.map((i) => (i.osMinorVersion)).join(',') }\"`\n        }\n    });\n\n    let profileIds = [];\n    let tabsData = osMinorVersionCounts.map(({ osMinorVersion, count: systemCount }) => {\n        osMinorVersion = `${osMinorVersion}`;\n        let profile;\n        let profileSelectedRuleRefIds;\n        if (benchmarks) {\n            const benchmark = getBenchmarkBySupportedOsMinor(benchmarks.collection, osMinorVersion);\n            if (benchmark) {\n                profile = getBenchmarkProfile(benchmark, policy.refId);\n                if (profile) {\n                    profile = {\n                        ...profile,\n                        rules: profile.relationships?.rules?.data,\n                        benchmark: profile.relationships?.benchmark?.data\n                    };\n                    profileSelectedRuleRefIds = selectedRuleRefIds?.find(({ id }) => id === profile.id);\n                    profileIds.push(profile.id);\n                }\n            }\n        }\n\n        return {\n            profile,\n            systemCount,\n            newOsMinorVersion: osMinorVersion,\n            selectedRuleRefIds: profileSelectedRuleRefIds?.ruleRefIds\n        };\n    });\n    tabsData = tabsData.filter(({ profile }) => !!profile);\n\n    const filter = `${ (profileIds || []).map((i) => (`id = ${ i }`)).join(' OR ') }`;\n    const skipProfilesQuery = benchmarksLoading || filter.length === 0;\n    const { data: profilesData, error, loading } = useQuery(PROFILES_QUERY, {\n        variables: {\n            filter\n        },\n        skip: skipProfilesQuery\n    });\n    const dataState = ((profileIds?.length > 0) ? profilesData : undefined);\n    const loadingState = ((loading || benchmarksLoading) ? true : undefined);\n    const noRuleSets = !error && !loadingState && profileIds?.length === 0;\n    const profiles = skipProfilesQuery ? [] : profilesData?.profiles.edges.map((p) => (p.node));\n\n    useLayoutEffect(() => {\n        if (!loadingState) {\n            change('selectedRuleRefIds', profiles.map((profile) => ({\n                id: profile.id,\n                ruleRefIds: selectedRuleRefIds?.find(({ id }) => id === profile.id)?.ruleRefIds ||\n                            profile.rules.map((rule) => (rule.refId))\n            })));\n        }\n    }, [profiles, loadingState]);\n\n    return <React.Fragment>\n        <TextContent className='pf-u-pb-md'>\n            <Text component={TextVariants.h1}>\n                Rules\n            </Text>\n            <Text>\n                Customize your <b>{ policy.name }</b> SCAP policy by including and excluding rules.\n            </Text>\n            <Text>\n                Each release of RHEL is supported with a unique and specific version of the SCAP Security\n                Guide (SSG). You must customize each version of SSG for each release of RHEL.\n            </Text>\n        </TextContent>\n\n        <StateViewWithError stateValues={ { error, data: dataState, loading: loadingState, noRuleSets } }>\n            <StateViewPart stateKey=\"noRuleSets\">\n                <EmptyState>\n                    <Title headingLevel=\"h1\" size=\"xl\">\n                        No rules can be configured\n                    </Title>\n                    <EmptyStateBody>\n                        The policy type selected does not exist for the systems and\n                        OS versions selected in the previous steps.\n                    </EmptyStateBody>\n                </EmptyState>\n            </StateViewPart>\n            <StateViewPart stateKey=\"loading\">\n                <EmptyTable><Spinner/></EmptyTable>\n            </StateViewPart>\n            <StateViewPart stateKey=\"data\">\n                <TabbedRules\n                    tabsData={ tabsData }\n                    columns={ columns }\n                    remediationsEnabled={ false }\n                    selectedFilter\n                    level={ 1 }\n                    handleSelect={ handleSelectCallback } />\n            </StateViewPart>\n        </StateViewWithError>\n    </React.Fragment>;\n};\n\nEditPolicyProfilesRules.propTypes = {\n    policy: propTypes.object,\n    change: reduxFormPropTypes.change,\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    selectedRuleRefIds: propTypes.array\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            policy: JSON.parse(selector(state, 'profile')),\n            osMajorVersion: selector(state, 'osMajorVersion'),\n            osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n            selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyProfilesRules);\n","import React, { useEffect } from 'react';\nimport { propTypes as reduxFormPropTypes, reduxForm, formValueSelector } from 'redux-form';\nimport { Button, Form, FormGroup, Text, TextContent, TextVariants, WizardContextConsumer } from '@patternfly/react-core';\nimport { InventoryTable } from 'SmartComponents';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { countOsMinorVersions } from 'Store/Reducers/SystemStore';\n\nconst EmptyState = ({ osMajorVersion }) => (\n    <React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                You do not have any <b>RHEL { osMajorVersion }</b> systems connected to Insights and enabled for Compliance.<br/>\n                Policies must be created with at least one system.\n            </Text>\n        </TextContent>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Choose a different operating system, or connect <b>RHEL { osMajorVersion }</b> systems to Insights.\n            </Text>\n        </TextContent>\n        <WizardContextConsumer>\n            { ({ goToStepById }) => <Button onClick={() => goToStepById(1)}>Choose a different operating system</Button> }\n        </WizardContextConsumer>\n    </React.Fragment>\n);\n\nEmptyState.propTypes = {\n    osMajorVersion: propTypes.number\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n    <React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Select which of your <b>RHEL { osMajorVersion }</b> systems should be included\n                in this policy.<br />\n                Systems can be added or removed at any time.\n            </Text>\n        </TextContent>\n    </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n    osMajorVersion: propTypes.number\n};\n\nconst EditPolicySystems = ({ change, osMajorVersion, osMinorVersionCounts, selectedSystemIds }) => {\n    const columns = [{\n        key: 'display_name',\n        title: 'Name',\n        props: {\n            width: 40, isStatic: true\n        },\n        renderFunc: (displayName, _id, { name }) => (displayName || name)\n    }, {\n        key: 'osMinorVersion',\n        title: 'Operating system',\n        props: {\n            width: 40, isStatic: true\n        },\n        renderFunc: (osMinorVersion, _id, { osMajorVersion }) => `RHEL ${osMajorVersion}.${osMinorVersion}`\n    }];\n\n    useEffect(() => {\n        if (selectedSystemIds) {\n            change('systems', selectedSystemIds);\n        }\n\n        if (osMinorVersionCounts) {\n            change('osMinorVersionCounts', osMinorVersionCounts);\n        }\n    }, [selectedSystemIds, osMinorVersionCounts, change]);\n\n    return (\n        <React.Fragment>\n            <TextContent className=\"pf-u-mb-md\">\n                <Text component={TextVariants.h1}>\n                    Systems\n                </Text>\n            </TextContent>\n            <Form>\n                <FormGroup>\n                    <InventoryTable\n                        showOsMinorVersionFilter={ [osMajorVersion] }\n                        prependComponent={ <PrependComponent osMajorVersion={ osMajorVersion } /> }\n                        emptyStateComponent={ <EmptyState osMajorVersion={ osMajorVersion } /> }\n                        columns={columns}\n                        remediationsEnabled={false}\n                        compact\n                        showActions={ false }\n                        query={ GET_SYSTEMS_WITHOUT_FAILED_RULES }\n                        defaultFilter={ osMajorVersion && `os_major_version = ${osMajorVersion}` }\n                        enableExport={ false }/>\n                </FormGroup>\n            </Form>\n        </React.Fragment>\n    );\n};\n\nEditPolicySystems.propTypes = {\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    selectedSystemIds: propTypes.array,\n    change: reduxFormPropTypes.change\n};\n\nEditPolicySystems.defaultProps = {\n    selectedSystemIds: [],\n    osMinorVersionCounts: []\n};\n\nconst selector = formValueSelector('policyForm');\nconst mapStateToProps = (state) => ({\n    osMajorVersion: selector(state, 'osMajorVersion'),\n    osMinorVersionCounts: countOsMinorVersions(state.entities?.selectedEntities),\n    selectedSystemIds: (state.entities?.selectedEntities || []).map((e) => (e.id))\n});\n\nexport default compose(\n    connect(mapStateToProps),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicySystems);\n","import React, { useEffect } from 'react';\nimport { compose } from 'redux';\nimport { Field, reduxForm, formValueSelector, propTypes as reduxFormPropTypes } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Form, FormGroup, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { ReduxFormTextInput, ReduxFormTextArea } from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport { ProfileThresholdField } from 'PresentationalComponents';\n\nexport const EditPolicyDetails = ({ change, policy, refId }) => {\n\n    useEffect(() => {\n        if (policy && policy.refId !== refId) {\n            change('name', `${policy.name}`);\n            change('refId', `${policy.refId}`);\n            change('description', `${policy.description}`);\n        }\n    }, [policy]);\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Details\n                </Text>\n            </TextContent>\n            <br/>\n            <Form id='editpolicydetails'>\n                <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n                    <Field\n                        component={ReduxFormTextInput}\n                        type='text'\n                        isRequired={true}\n                        id=\"name\"\n                        name=\"name\"\n                        aria-describedby=\"name\" />\n                </FormGroup>\n                <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextInput}\n                        isDisabled\n                        id=\"refId\"\n                        name=\"refId\"\n                        aria-describedby=\"refId\" />\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"description\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextArea}\n                        id=\"description\"\n                        name=\"description\"\n                        aria-describedby=\"description\" />\n                </FormGroup>\n                <FormGroup label=\"Business objective\" fieldId=\"businessObjective\">\n                    <Field\n                        type=\"text\"\n                        component={ ReduxFormTextInput }\n                        id=\"businessObjective\"\n                        name=\"businessObjective\"\n                        aria-describedby=\"businessObjective\"\n                        defaultValue={ policy.businessObjective } />\n                </FormGroup>\n                <ProfileThresholdField\n                    showTitle={ false }\n                    previousThreshold={ policy.complianceThreshold } />\n            </Form>\n        </React.Fragment>\n    );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n    policy: propTypes.object,\n    refId: propTypes.string,\n    change: reduxFormPropTypes.change\n};\n\nconst mapStateToProps = (state) => {\n    const policy = JSON.parse(selector(state, 'profile'));\n    return {\n        policy,\n        refId: selector(state, 'refId'),\n        initialValues: {\n            name: `${policy.name}`,\n            refId: `${policy.refId}`,\n            description: `${policy.description}`,\n            benchmark: selector(state, 'benchmark'),\n            osMajorVersion: selector(state, 'osMajorVersion'),\n            profile: selector(state, 'profile')\n        }\n    };\n};\n\nexport default compose(\n    connect(mapStateToProps),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyDetails);\n","import React from 'react';\nimport {\n    Text,\n    TextVariants,\n    TextContent,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useQuery } from '@apollo/client';\n\nconst REVIEW = gql`\nquery review($benchmarkId: String!) {\n    benchmark(id: $benchmarkId) {\n        id\n        osMajorVersion\n    }\n}\n`;\n\nconst ReviewCreatedPolicy = ({\n    benchmarkId, name, businessObjective, complianceThreshold, parentProfileName, osMinorVersionCounts\n}) => {\n    const { data, error, loading } = useQuery(REVIEW, { variables: { benchmarkId } });\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const { benchmark: { osMajorVersion } } = data;\n\n    return (\n        <TextContent>\n            <Text component={TextVariants.h1}>\n                Review\n            </Text>\n            <Text>\n                Review your SCAP policy before finishing.\n            </Text>\n            <Text component={TextVariants.h3} style={ { marginTop: 0 } }>{ name }</Text>\n            <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>Policy type</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ parentProfileName }</TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Compliance threshold</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ complianceThreshold }%</TextListItem>\n                { businessObjective &&\n                    <React.Fragment>\n                        <TextListItem component={TextListItemVariants.dt}>Business objective</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{ businessObjective }</TextListItem>\n                    </React.Fragment>\n                }\n                <TextListItem component={TextListItemVariants.dt}>Systems</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                    <TextList component={TextListVariants.dl}>\n                        { osMinorVersionCounts.map(({ osMinorVersion, count }) => (\n                            <React.Fragment key={osMinorVersion}>\n                                <TextListItem component={TextListItemVariants.dt} style={{ 'font-weight': 'normal' }}>\n                                    RHEL {osMajorVersion}.{osMinorVersion}\n                                </TextListItem>\n                                <TextListItem component={TextListItemVariants.dd}>\n                                    { count } { count > 1 ? 'systems' : 'system' }\n                                </TextListItem>\n                            </React.Fragment>\n                        )) }\n                    </TextList>\n                </TextListItem>\n            </TextList>\n        </TextContent>\n    );\n};\n\nReviewCreatedPolicy.propTypes = {\n    benchmarkId: propTypes.string,\n    refId: propTypes.string,\n    name: propTypes.string,\n    businessObjective: propTypes.string,\n    complianceThreshold: propTypes.number,\n    parentProfileName: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    }))\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect(\n    state => ({\n        benchmarkId: selector(state, 'benchmark'),\n        refId: selector(state, 'refId'),\n        name: selector(state, 'name'),\n        businessObjective: selector(state, 'businessObjective'),\n        osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n        complianceThreshold: parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n        parentProfileName: JSON.parse(selector(state, 'profile')).name,\n        rulesCount: selector(state, 'selectedRuleRefIds').length\n    })\n)(ReviewCreatedPolicy);\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Title, Button, Bullseye, EmptyState, EmptyStateBody, EmptyStateSecondaryActions,\n    EmptyStateVariant, EmptyStateIcon, List, ListItem\n} from '@patternfly/react-core';\nimport { ProgressBar } from 'PresentationalComponents';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from '@apollo/client/react/hoc';\nimport usePolicy from 'SmartComponents/EditPolicy/usePolicy';\n\nconst EmtpyStateWithErrors = ({ errors }) => (\n    (errors && Array.isArray(errors) && errors.length > 0) ? (\n        <EmptyStateBody className='wizard-failed-errors'>\n            <List>\n                {\n                    errors.map((error) => (\n                        <ListItem key={ error }>{ error }</ListItem>\n                    ))\n                }\n            </List>\n        </EmptyStateBody>\n    ) : null\n);\n\nEmtpyStateWithErrors.propTypes = {\n    errors: propTypes.array\n};\n\nexport const FinishedCreatePolicy = ({\n    onWizardFinish,\n    cloneFromProfileId,\n    description,\n    name,\n    complianceThreshold,\n    businessObjective,\n    refId,\n    benchmarkId,\n    systemIds,\n    selectedRuleRefIds\n}) => {\n    const [percent, setPercent] = useState(0);\n    const [message, setMessage] = useState('This usually takes a minute or two.');\n    const [errors, setErrors] = useState(null);\n    const [failed, setFailed] = useState(false);\n    const updatePolicy = usePolicy();\n\n    const onProgress = (progress) => {\n        setPercent(progress * 100);\n    };\n\n    useEffect(() => {\n        const newPolicy = {\n            cloneFromProfileId,\n            description,\n            name,\n            complianceThreshold,\n            businessObjective: { title: businessObjective },\n            refId,\n            benchmarkId,\n            hosts: systemIds.map((id) => ({ id })),\n            selectedRuleRefIds\n        };\n\n        updatePolicy(null, newPolicy, onProgress).then(() => {\n            setPercent(100);\n            setMessage();\n        }).catch((error) => {\n            setMessage(error.networkError?.message);\n            setErrors(error.networkError?.result?.errors);\n            setFailed(true);\n        });\n    }, []);\n\n    return (\n        <Bullseye>\n            <EmptyState variant={EmptyStateVariant.full}>\n                <EmptyStateIcon icon={WrenchIcon} />\n                <br/>\n                <Title headingLevel=\"h1\" size='lg'>\n                    Creating policy\n                </Title>\n                <EmptyStateBody>\n                    <ProgressBar percent={percent} failed={failed} />\n                </EmptyStateBody>\n                <EmptyStateBody className={failed && 'wizard-failed-message'}>\n                    { message }\n                </EmptyStateBody>\n                <EmtpyStateWithErrors error={ errors } />\n                <EmptyStateSecondaryActions>\n                    {\n                        (percent === 100 || failed) &&\n                            <Button\n                                variant={'primary'}\n                                onClick={() => { onWizardFinish(); }}>\n                                { failed ? 'Back' : 'Return to application' }\n                            </Button>\n                    }\n                </EmptyStateSecondaryActions>\n            </EmptyState>\n        </Bullseye>\n    );\n};\n\nFinishedCreatePolicy.propTypes = {\n    benchmarkId: propTypes.string.isRequired,\n    businessObjective: propTypes.object,\n    cloneFromProfileId: propTypes.string.isRequired,\n    refId: propTypes.string.isRequired,\n    name: propTypes.string.isRequired,\n    description: propTypes.string,\n    systemIds: propTypes.array,\n    complianceThreshold: propTypes.number,\n    onWizardFinish: propTypes.func,\n    selectedRuleRefIds: propTypes.arrayOf(propTypes.string).isRequired\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            benchmarkId: selector(state, 'benchmark'),\n            businessObjective: selector(state, 'businessObjective'),\n            cloneFromProfileId: JSON.parse(selector(state, 'profile')).id,\n            refId: selector(state, 'refId'),\n            name: selector(state, 'name'),\n            description: selector(state, 'description'),\n            complianceThreshold: parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n            systemIds: selector(state, 'systems'),\n            selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: true,\n        forceUnregisterOnUnmount: true\n    }),\n    withApollo\n)(FinishedCreatePolicy);\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport { default as EditPolicyRules } from './EditPolicyProfilesRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport { validateBenchmarkPage, validateDetailsPage, validateRulesPage, validateSystemsPage } from './validate';\n\nexport const CreatePolicy = ({\n    benchmark, osMajorVersion, complianceThreshold, name, profile, refId, selectedRuleRefIds, systemIds\n}) => {\n    const history = useHistory();\n    const [stepIdReached, setStepIdReached] = useState(1);\n\n    const resetAnchor = () => {\n        const { location } = history;\n        if (location.hash) {\n            history.push({ ...location, hash: '' });\n        }\n    };\n\n    const onNext = ({ id }) => {\n        setStepIdReached(stepIdReached < id ? id : stepIdReached);\n        resetAnchor();\n    };\n\n    const onClose = () => {\n        history.push('/scappolicies');\n    };\n\n    const steps = [\n        {\n            id: 1,\n            name: 'Create SCAP policy',\n            component: <CreateSCAPPolicy/>,\n            enableNext: validateBenchmarkPage(benchmark, osMajorVersion, profile)\n        },\n        {\n            id: 2,\n            name: 'Details',\n            component: <EditPolicyDetails/>,\n            canJumpTo: stepIdReached >= 2,\n            enableNext: validateDetailsPage(name, refId, complianceThreshold)\n        },\n        {\n            id: 3,\n            name: 'Systems',\n            component: <EditPolicySystems/>,\n            canJumpTo: stepIdReached >= 3,\n            enableNext: validateSystemsPage(systemIds)\n        },\n        {\n            id: 4,\n            name: 'Rules',\n            component: <EditPolicyRules/>,\n            canJumpTo: systemIds?.length > 0 && stepIdReached >= 4,\n            enableNext: validateRulesPage(selectedRuleRefIds)\n        },\n        {\n            id: 5,\n            name: 'Review',\n            component: <ReviewCreatedPolicy/>,\n            nextButtonText: 'Finish',\n            canJumpTo: (\n                validateRulesPage(selectedRuleRefIds) &&\n                systemIds?.length > 0 &&\n                stepIdReached >= 5\n            )\n        },\n        {\n            id: 6,\n            name: 'Finished',\n            component: <FinishedCreatePolicy onWizardFinish={ onClose } />,\n            isFinishedStep: true,\n            canJumpTo: systemIds?.length > 0 && stepIdReached >= 6\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <Wizard\n                isOpen\n                width={ 1220 }\n                onNext={ onNext }\n                onGoToStep={ resetAnchor }\n                onBack={ resetAnchor }\n                onClose={ onClose }\n                title=\"Create SCAP policy\"\n                description=\"Create a new policy for managing SCAP compliance\"\n                steps={ steps } />\n        </React.Fragment>\n    );\n};\n\nCreatePolicy.propTypes = {\n    benchmark: propTypes.string,\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    complianceThreshold: propTypes.string,\n    businessObjective: propTypes.object,\n    dispatch: propTypes.func,\n    isOpen: propTypes.bool,\n    name: propTypes.string,\n    onWizardFinish: propTypes.func,\n    profile: propTypes.string,\n    refId: propTypes.string,\n    selectedRuleRefIds: propTypes.arrayOf(propTypes.string),\n    systemIds: propTypes.arrayOf(propTypes.string)\n};\n\nCreatePolicy.defaultProps = {\n    isOpen: false\n};\n\nconst selector = formValueSelector('policyForm');\nexport default connect(\n    state => ({\n        benchmark: selector(state, 'benchmark'),\n        osMajorVersion: selector(state, 'osMajorVersion'),\n        osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n        businessObjective: selector(state, 'businessObjective'),\n        complianceThreshold: selector(state, 'complianceThreshold') || '100.0',\n        name: selector(state, 'name'),\n        profile: selector(state, 'profile'),\n        refId: selector(state, 'refId'),\n        selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n        systemIds: selector(state, 'systems')\n    })\n)(CreatePolicy);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    FormGroup, TextArea, TextInput\n} from '@patternfly/react-core';\nimport { thresholdValid } from '../CreatePolicy/validate';\n\nexport const useThresholdValidate = () => {\n    const [validThreshold, setValidThreshold] = useState(true);\n    return [validThreshold, (threshold) => {\n        const valid = thresholdValid(threshold);\n        setValidThreshold(valid);\n        return valid;\n    }];\n};\n\nconst EditPolicyDetailsTab = ({ policy, setUpdatedPolicy }) => {\n    const [validThreshold, validateThreshold] = useThresholdValidate();\n\n    return <div className=\"pf-c-form\">\n        <FormGroup label=\"Policy description\" isRequired fieldId=\"description\">\n            <TextArea\n                style={ { width: 800, height: 110 } }\n                isRequired\n                type=\"text\"\n                id=\"description\"\n                name=\"description\"\n                aria-describedby=\"description\"\n                defaultValue={ policy.description }\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) => ({\n                        ...policy,\n                        description: value\n                    }));\n                }} />\n        </FormGroup>\n\n        <FormGroup label=\"Business objective\" fieldId=\"business-objective\">\n            <TextInput\n                type=\"text\"\n                style={ { width: 300 } }\n                id=\"business-objective\"\n                name=\"business-objective\"\n                aria-describedby=\"business-objective\"\n                defaultValue={ policy?.businessObjective?.title }\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) =>({\n                        ...policy,\n                        businessObjective: {\n                            ...policy.businessObjective,\n                            title: value\n                        }\n                    }));\n                }} />\n        </FormGroup>\n\n        <FormGroup\n            validated={ validThreshold ? 'default' : 'error' }\n            label='Compliance threshold (%)'\n            fieldId='policy-threshold'\n            helperTextInvalid='Threshold has to be a number between 0 and 100'\n            helperText='A value of 95% or higher is recommended'>\n            <TextInput\n                type='number'\n                style={ { width: 150 } }\n                name='compliance-threshold'\n                id='compliance-threshold'\n                defaultValue={ policy.complianceThreshold }\n                aria-describedby=\"policy-threshold\"\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) =>({\n                        ...policy,\n                        complianceThreshold: value,\n                        complianceThresholdValid: validateThreshold(value)\n                    }));\n                }} />\n        </FormGroup>\n    </div>;\n};\n\nEditPolicyDetailsTab.propTypes = {\n    policy: propTypes.shape({\n        description: propTypes.string,\n        businessObjective: propTypes.object,\n        complianceThreshold: propTypes.oneOfType([\n            propTypes.string,\n            propTypes.number\n        ])\n    }),\n    setUpdatedPolicy: propTypes.func\n};\n\nexport default EditPolicyDetailsTab;\n","import React, { useLayoutEffect } from 'react';\nimport {\n    EmptyState, EmptyStateBody, Text, TextContent, Title\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { StateViewWithError, StateViewPart, TabbedRules } from 'PresentationalComponents';\nimport useCollection from 'Utilities/hooks/api/useCollection';\nimport { sortingByProp } from 'Utilities/helpers';\n\nconst PROFILES_QUERY = gql`\nquery Profiles($filter: String!){\n    profiles(search: $filter){\n        edges {\n            node {\n                id\n                name\n                refId\n                osMinorVersion\n                osMajorVersion\n                policy {\n                    id\n\n                }\n                policyType\n                benchmark {\n                    id\n                    refId\n                    latestSupportedOsMinorVersions\n                    osMajorVersion\n                }\n                ssgVersion\n                rules {\n                    id\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n    }\n}\n`;\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) => (\n    benchmarks.find((benchmark) =>\n        benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n    )\n);\n\nconst getBenchmarkProfile = (benchmark, profileRefId) => (\n    benchmark.profiles.find((benchmarkProfile) => (benchmarkProfile.refId === profileRefId))\n);\n\nconst EditPolicyRulesTabEmptyState = () => <EmptyState>\n    <Title headingLevel=\"h5\" size=\"lg\">\n        No rules can be configured\n    </Title>\n    <EmptyStateBody>\n        This policy has no associated systems, and therefore no rules can be configured.\n    </EmptyStateBody>\n    <EmptyStateBody>\n        Add at least one system to configure rules for this policy.\n    </EmptyStateBody>\n</EmptyState>;\n\nexport const toTabsData = (policy, osMinorVersionCounts, benchmarks, selectedRuleRefIds) => (\n    Object.values(osMinorVersionCounts).sort(\n        sortingByProp('osMinorVersion', 'desc')\n    ).map(({ osMinorVersion, count: systemCount }) => {\n        osMinorVersion = `${osMinorVersion}`;\n        let profile = policy.policy.profiles.find((profile) => (profile.osMinorVersion === osMinorVersion));\n\n        if (!profile && benchmarks) {\n            const benchmark = getBenchmarkBySupportedOsMinor(benchmarks.collection, osMinorVersion);\n            if (benchmark) {\n                const benchmarkProfile = getBenchmarkProfile(benchmark, policy.refId);\n                if (benchmarkProfile) {\n                    profile = policy.policy.profiles.find((profile) => (profile.parentProfileId === benchmarkProfile.id));\n\n                    profile = {\n                        ...benchmarkProfile,\n                        benchmark: benchmarkProfile.relationships?.benchmark?.data,\n                        rules: benchmarkProfile.relationships?.rules?.data,\n                        ...profile\n                    };\n                }\n            }\n        }\n\n        return {\n            profile,\n            systemCount,\n            newOsMinorVersion: osMinorVersion,\n            selectedRuleRefIds: selectedRuleRefIds?.find(({ id }) => id === profile?.id)?.ruleRefIds\n        };\n    }).filter(({ profile, newOsMinorVersion }) => !!profile && newOsMinorVersion)\n);\n\nexport const EditPolicyRulesTab = ({ handleSelect, policy, selectedRuleRefIds, osMinorVersionCounts }) => {\n    const osMajorVersion = policy?.osMajorVersion;\n    const osMinorVersions = Object.keys(osMinorVersionCounts).sort();\n    const benchmarkSearch = `os_major_version = ${ osMajorVersion } ` +\n        `and latest_supported_os_minor_version ^ \"${ osMinorVersions.join(',') }\"`;\n\n    const { data: benchmarks, loading: benchmarksLoading } = useCollection('benchmarks', {\n        type: 'benchmark',\n        include: ['profiles'],\n        params: { search: benchmarkSearch },\n        skip: osMinorVersions.length === 0\n    }, [benchmarkSearch]);\n    const tabsData = toTabsData(policy, osMinorVersionCounts, benchmarks, selectedRuleRefIds);\n    const profileIds = tabsData.map((tab) => (tab.profile.id));\n    const filter = `${ (profileIds || []).map((i) => (`id = ${ i }`)).join(' OR ') }`;\n    const { data: profilesData, error, loading } = useQuery(PROFILES_QUERY, {\n        variables: {\n            filter\n        },\n        skip: filter.length === 0\n    });\n    const loadingState = ((loading || benchmarksLoading) ? true : undefined);\n    const dataState = ((!loadingState && tabsData?.length > 0) ? profilesData : undefined);\n\n    useLayoutEffect(() => {\n        if (profilesData) {\n            const profiles = profilesData?.profiles.edges.map((p) => (p.node)) || [];\n            profiles.forEach((profile) => {\n                const foundSelection = selectedRuleRefIds?.find(({ id }) => id === profile?.id);\n                if (!foundSelection) {\n                    const refIds = profile.rules.map((rule) => (rule.refId));\n                    handleSelect(profile, refIds);\n                }\n            });\n        }\n    }, [profilesData]);\n\n    return <StateViewWithError stateValues={ {\n        error, data: dataState, loading: loadingState, empty: !loadingState && !dataState\n    } }>\n        <StateViewPart stateKey=\"loading\">\n            <EmptyTable><Spinner/></EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n            <TextContent>\n                <Text>\n                    Different release versions of RHEL are associated with different versions of\n                    the SCAP Security Guide (SSG), therefore each release must be customized independently.\n                </Text>\n            </TextContent>\n            <TabbedRules\n                tabsData={ tabsData }\n                remediationsEnabled={ false }\n                selectedFilter\n                level={ 1 }\n                handleSelect={ handleSelect } />\n        </StateViewPart>\n        <StateViewPart stateKey=\"empty\">\n            <EditPolicyRulesTabEmptyState />\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nEditPolicyRulesTab.propTypes = {\n    handleSelect: propTypes.func,\n    policy: propTypes.object,\n    osMinorVersionCounts: propTypes.shape({\n        osMinorVersion: propTypes.shape({\n            osMinorVersion: propTypes.number,\n            count: propTypes.number\n        })\n    }),\n    selectedRuleRefIds: propTypes.array\n};\n\nexport default EditPolicyRulesTab;\n","import React from 'react';\nimport { Alert, AlertActionLink, Text, TextContent } from '@patternfly/react-core';\nimport { useSelector } from 'react-redux';\nimport { InventoryTable } from 'SmartComponents';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\nimport propTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\n\nconst EmptyState = ({ osMajorVersion }) => (\n    <React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                You do not have any <b>RHEL { osMajorVersion }</b> systems connected to Insights and enabled for Compliance.\n            </Text>\n        </TextContent>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Connect RHEL { osMajorVersion } systems to Insights.\n            </Text>\n        </TextContent>\n    </React.Fragment>\n);\n\nEmptyState.propTypes = {\n    osMajorVersion: propTypes.number\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n    <React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Select which of your <b>RHEL { osMajorVersion }</b> systems should be included\n                in this policy.\n            </Text>\n        </TextContent>\n    </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n    osMajorVersion: propTypes.number\n};\n\nconst EditPolicySystemsTab = ({ osMajorVersion, policyOsMinorVersions }) => {\n    const { push, location } = useHistory();\n    const selectedSystemOsMinorVersions = useSelector(state => (\n        state?.entities?.selectedEntities?.map((entity) => (`${entity.osMinorVersion}`))\n    ));\n\n    const newOsMinorVersions = () => (\n        selectedSystemOsMinorVersions?.find((systemOsMinorVersion) => (\n            !policyOsMinorVersions.includes(systemOsMinorVersion)\n        ))\n    );\n\n    const columns = [{\n        key: 'display_name',\n        title: 'Name',\n        props: {\n            width: 40, isStatic: true\n        },\n        renderFunc: (displayName, _id, { name }) => (displayName || name)\n    }, {\n        key: 'osMinorVersion',\n        title: 'Operating system',\n        props: {\n            width: 40, isStatic: true\n        },\n        renderFunc: (osMinorVersion, _id, { osMajorVersion }) => `RHEL ${osMajorVersion}.${osMinorVersion}`\n    }];\n\n    return (\n        <React.Fragment>\n            <InventoryTable\n                showOsMinorVersionFilter={ [osMajorVersion] }\n                prependComponent={ <PrependComponent osMajorVersion={ osMajorVersion } />  }\n                emptyStateComponent={ <EmptyState osMajorVersion={ osMajorVersion } />  }\n                columns={ columns }\n                compact\n                showActions={ false }\n                query={ GET_SYSTEMS_WITHOUT_FAILED_RULES }\n                defaultFilter={ osMajorVersion && `os_major_version = ${osMajorVersion}` }\n                enableExport={ false }\n                remediationsEnabled={ false }\n            />\n            {newOsMinorVersions() && <Alert\n                variant=\"info\"\n                isInline\n                title=\"You selected a system that has a release version previously not included in this policy.\"\n                actionLinks={\n                    <AlertActionLink onClick={ () => push({ ...location, hash: '#rules' }) }>Open rule editing</AlertActionLink>\n                }>\n                <p>If you have edited any rules for this policy, you will need to do so for this release version as well.</p>\n            </Alert>}\n        </React.Fragment>\n    );\n};\n\nEditPolicySystemsTab.propTypes = {\n    osMajorVersion: propTypes.string,\n    policyOsMinorVersions: propTypes.arrayOf(propTypes.number)\n};\n\nexport default EditPolicySystemsTab;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Form, Tab, TabTitleText } from '@patternfly/react-core';\nimport { RoutedTabs } from 'PresentationalComponents';\nimport { uniq } from 'Utilities/helpers';\nimport EditPolicyDetailsTab from './EditPolicyDetailsTab';\nimport EditPolicyRulesTab from './EditPolicyRulesTab';\nimport EditPolicySystemsTab from './EditPolicySystemsTab';\nimport { mapCountOsMinorVersions } from 'Store/Reducers/SystemStore';\n\nconst profilesToOsMinorMap = (profiles, hosts) => (\n    (profiles || []).reduce((acc, profile) => {\n        if (profile.osMinorVersion !== '') {\n            acc[profile.osMinorVersion] ||= { osMinorVersion: profile.osMinorVersion, count: 0 };\n        }\n\n        return acc;\n    }, mapCountOsMinorVersions(hosts || []))\n);\n\nexport const EditPolicyForm = ({ policy, updatedPolicy, setUpdatedPolicy }) => {\n    const policyProfiles = policy?.policy?.profiles || [];\n    const dispatch = useDispatch();\n    const [selectedRuleRefIds, setSelectedRuleRefIds] = useState([]);\n    const [osMinorVersionCounts, setOsMinorVersionCounts] = useState({});\n    const selectedEntities = useSelector((state) => (state?.entities?.selectedEntities));\n\n    const handleRuleSelect = (profile, newSelectedRuleRefIds) => {\n        const filteredSelection = selectedRuleRefIds.filter((selectedProfile) =>\n            selectedProfile.id !== profile.id\n        );\n        setSelectedRuleRefIds([\n            { id: profile.id, ruleRefIds: newSelectedRuleRefIds },\n            ...filteredSelection\n        ]);\n    };\n\n    const updateSelectedRuleRefIds = () => {\n        if (policy) {\n            setSelectedRuleRefIds(policyProfiles.map((policyProfile) => ({\n                id: policyProfile.id,\n                ruleRefIds: policyProfile.rules.map((rule) => (rule.refId))\n            })));\n        }\n    };\n\n    useEffect(() => {\n        setUpdatedPolicy({\n            ...updatedPolicy,\n            hosts: selectedEntities ? selectedEntities : []\n        });\n        updateSelectedRuleRefIds();\n\n        setOsMinorVersionCounts(\n            profilesToOsMinorMap(policyProfiles, selectedEntities)\n        );\n    }, [selectedEntities]);\n\n    useEffect(() => {\n        if (policy) {\n            const complianceThresholdValid =\n                (policy.complianceThreshold < 101 && policy.complianceThreshold > 0);\n            setUpdatedPolicy({\n                ...policy,\n                complianceThresholdValid\n            });\n            updateSelectedRuleRefIds();\n\n            dispatch({\n                type: 'SELECT_ENTITIES',\n                payload: { ids: policy?.hosts || [] }\n            });\n            setOsMinorVersionCounts(\n                profilesToOsMinorMap(policyProfiles, policy.hosts)\n            );\n        }\n    }, [policy]);\n\n    useEffect(() => setUpdatedPolicy({ ...updatedPolicy, selectedRuleRefIds }), [selectedRuleRefIds]);\n\n    return (\n        <Form>\n            <RoutedTabs defaultTab='details'>\n                <Tab eventKey='details' title={<TabTitleText>Details</TabTitleText>}>\n                    <EditPolicyDetailsTab\n                        policy={ policy }\n                        setUpdatedPolicy={ setUpdatedPolicy } />\n                </Tab>\n\n                <Tab eventKey='rules' title={ <TabTitleText>Rules</TabTitleText> }>\n                    <EditPolicyRulesTab\n                        policy={ policy }\n                        handleSelect={ handleRuleSelect }\n                        selectedRuleRefIds={ selectedRuleRefIds }\n                        osMinorVersionCounts={ osMinorVersionCounts }\n                    />\n                </Tab>\n\n                <Tab eventKey='systems' title={ <TabTitleText>Systems</TabTitleText> }>\n                    <EditPolicySystemsTab\n                        osMajorVersion={ policy.osMajorVersion }\n                        policyOsMinorVersions={ uniq(policyProfiles.map(profile => profile.osMinorVersion)) }\n                    />\n                </Tab>\n            </RoutedTabs>\n        </Form>\n    );\n};\n\nEditPolicyForm.propTypes = {\n    policy: propTypes.object,\n    updatedPolicy: propTypes.object,\n    setUpdatedPolicy: propTypes.func\n};\n\nexport default EditPolicyForm;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Button, Modal, Spinner } from '@patternfly/react-core';\nimport { useLinkToBackground, useAnchor } from 'Utilities/Router';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport EditPolicyForm from './EditPolicyForm';\nimport usePolicy from './usePolicy';\n\nexport const MULTIVERSION_QUERY = gql`\nquery Profile($policyId: String!){\n    profile(id: $policyId) {\n        id\n        name\n        refId\n        external\n        description\n        totalHostCount\n        compliantHostCount\n        complianceThreshold\n        majorOsVersion\n        osMajorVersion\n        lastScanned\n        policyType\n        policy {\n            id\n            name\n            refId\n            profiles {\n                id\n                ssgVersion\n                parentProfileId\n                name\n                refId\n                osMinorVersion\n                osMajorVersion\n                benchmark {\n                    id\n                    title\n                    latestSupportedOsMinorVersions\n                    osMajorVersion\n                }\n                rules {\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n        businessObjective {\n            id\n            title\n        }\n        hosts {\n            id\n            osMinorVersion\n            osMajorVersion\n        }\n    }\n}\n`;\n\nexport const EditPolicy = ({ route }) => {\n    const { policy_id: policyId } = useParams();\n    const { data, loading, error } = useQuery(MULTIVERSION_QUERY, {\n        variables: { policyId }\n    });\n    const policy = data?.profile;\n    const dispatch = useDispatch();\n    const anchor = useAnchor();\n    const [updatedPolicy, setUpdatedPolicy] = useState(null);\n    const updatePolicy = usePolicy();\n    const linkToBackground = useLinkToBackground('/scappolicies');\n    const [isSaving, setIsSaving] = useState();\n    const saveEnabled = updatedPolicy && !updatedPolicy.complianceThresholdValid;\n\n    const linkToBackgroundWithHash = () => {\n        dispatch({\n            type: 'SELECT_ENTITIES',\n            payload: { ids: [] }\n        });\n        linkToBackground({ hash: anchor });\n    };\n\n    const onSave = () => {\n        if (isSaving) { return; }\n\n        setIsSaving(true);\n        updatePolicy(policy, updatedPolicy).then(() => {\n            setIsSaving(false);\n            linkToBackgroundWithHash();\n        }).catch(() => {\n            // TODO report error\n            setIsSaving(false);\n            linkToBackgroundWithHash();\n        });\n    };\n\n    const actions = [\n        <Button\n            isDisabled={ saveEnabled }\n            key='save'\n            variant='primary'\n            spinnerAriaValueText='Saving'\n            isLoading={ isSaving }\n            onClick={ onSave }>\n            Save\n        </Button>,\n        <Button\n            key='cancel'\n            variant='link'\n            onClick={ () => linkToBackgroundWithHash() }>\n            Cancel\n        </Button>\n    ];\n\n    useTitleEntity(route, policy?.name);\n\n    return <Modal\n        isOpen\n        style={ { height: '768px' } }\n        width={ 1220 }\n        title={ `Edit ${ policy ? policy.name : '' }` }\n        onClose={ () => linkToBackgroundWithHash() }\n        actions={ actions }>\n\n        <StateViewWithError stateValues={ { policy, loading, error } }>\n            <StateViewPart stateKey=\"loading\">\n                <Spinner />\n            </StateViewPart>\n            <StateViewPart stateKey=\"policy\">\n                <EditPolicyForm { ...{ policy, updatedPolicy, setUpdatedPolicy } } />\n            </StateViewPart>\n        </StateViewWithError>\n    </Modal>;\n};\n\nEditPolicy.propTypes = {\n    route: propTypes.object\n};\n\nexport default EditPolicy;\n","import { useMutation } from '@apollo/client';\nimport {\n    ASSOCIATE_SYSTEMS_TO_PROFILES, CREATE_BUSINESS_OBJECTIVE, UPDATE_PROFILE, CREATE_PROFILE, ASSOCIATE_RULES_TO_PROFILE\n} from 'Utilities/graphql/mutations';\n\nconst useCreateBusinessObjective = () => {\n    const [create] = useMutation(CREATE_BUSINESS_OBJECTIVE);\n\n    return async (policy, newBusinessObjective) => {\n        if (policy?.businessObjective?.title === newBusinessObjective?.title) {\n            return policy?.businessObjective?.id;\n        } else if (newBusinessObjective?.title === '') {\n            return null;\n        } else {\n            const { data, error } = await create({ variables: {\n                input: { title: newBusinessObjective.title }\n            } });\n\n            if (error) { throw error; }\n\n            return data.createBusinessObjective.businessObjective.id;\n        }\n    };\n};\n\nconst useAssociateSystems = () => {\n    const [associateSystems] = useMutation(ASSOCIATE_SYSTEMS_TO_PROFILES);\n\n    return async ({ id }, hosts) => {\n        const { data, error } = await associateSystems({\n            variables: { input: {\n                id,\n                systemIds: hosts.map((h) => (h.id))\n            } }\n        });\n\n        if (error) { throw error; }\n\n        return data?.associateSystems?.profile;\n    };\n};\n\nconst useAssociateRules = () => {\n    const [associateRules] = useMutation(ASSOCIATE_RULES_TO_PROFILE);\n\n    return async ({ id, ruleRefIds }, profiles) => {\n        const profile = profiles.find((profile) => (\n            profile.id === id || profile.parentProfileId === id\n        ));\n        const ruleInput = {\n            id: profile?.id,\n            ruleRefIds\n        };\n\n        const { error } = await associateRules({ variables: { input: ruleInput } });\n        if (error) { throw error; }\n    };\n};\n\nconst usePolicy = () => {\n    const createBusinessObjective = useCreateBusinessObjective();\n    const [updateProfile] = useMutation(UPDATE_PROFILE);\n    const [createProfile] = useMutation(CREATE_PROFILE);\n    const associateSystems = useAssociateSystems();\n    const associateRules = useAssociateRules();\n\n    return async (policy, updatedPolicy, onProgress) => {\n        const selectedRuleRefIds = updatedPolicy?.selectedRuleRefIds || [];\n\n        const expectedUpdates = 3 + selectedRuleRefIds.length;\n        let progress = 0;\n        const dispatchProgress = () => {\n            if (onProgress) {\n                onProgress((++progress) / expectedUpdates);\n            }\n        };\n\n        const businessObjectiveId = await createBusinessObjective(policy, updatedPolicy?.businessObjective);\n        dispatchProgress();\n\n        let policyInput = {\n            name: updatedPolicy.name,\n            description: updatedPolicy.description,\n            complianceThreshold: parseFloat(updatedPolicy.complianceThreshold)\n        };\n\n        if (businessObjectiveId) {\n            policyInput.businessObjectiveId = businessObjectiveId;\n        }\n\n        if (policy === null) {\n            policyInput.cloneFromProfileId = updatedPolicy.cloneFromProfileId;\n            policyInput.refId = updatedPolicy.refId;\n            policyInput.benchmarkId = updatedPolicy.benchmarkId;\n\n            let {\n                data: { createProfile: { profile: { id } } },\n                error\n            } = await createProfile({ variables: { input: policyInput } });\n\n            if (error) { throw error; }\n\n            dispatchProgress();\n            policy = { id };\n        } else {\n            policyInput.id = policy.id;\n\n            let { error } = await updateProfile({ variables: { input: policyInput } });\n            if (error) { throw error; }\n\n            dispatchProgress();\n        }\n\n        const { policy: { profiles } } = await associateSystems(policy, updatedPolicy.hosts);\n        dispatchProgress();\n\n        for (const profileSelectedRuleRefIds of selectedRuleRefIds) {\n            await associateRules(profileSelectedRuleRefIds, profiles);\n            dispatchProgress();\n        }\n    };\n};\n\nexport default usePolicy;\n","import gql from 'graphql-tag';\nimport pickBy from 'lodash/pickBy';\nimport {\n    systemsPolicyFilterConfiguration, systemsOsFilterConfiguration, systemsOsMinorFilterConfiguration\n} from '@/constants';\n\nexport const GET_SYSTEMS = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    refId\n                    lastScanned\n                    compliant\n                    external\n                    score\n                    supported\n                    ssgVersion\n                    majorOsVersion\n                    rules {\n                        refId\n                        title\n                        compliant\n                        remediationAvailable\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const GET_SYSTEMS_WITHOUT_FAILED_RULES = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    lastScanned\n                    external\n                    compliant\n                    score\n                    supported\n                    ssgVersion\n                    policy {\n                        id\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const policyFilter = (policies, osFilter) => ([\n    ...systemsPolicyFilterConfiguration(policies),\n    ...(osFilter ? systemsOsFilterConfiguration(policies) : [])\n]);\n\nexport const osMinorVersionFilter = (...args) => systemsOsMinorFilterConfiguration(...args);\n\nexport const initFilterState = (filterConfig) => (\n    pickBy(filterConfig.initialDefaultState(), (value) => (!!value))\n);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Skeleton, { SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { registryDecorator } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { InventoryDetail, DetailWrapper } from '@redhat-cloud-services/frontend-components/Inventory';\n\n@registryDecorator()\nclass InventoryDetails extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <DetailWrapper onLoad={({ mergeWithDetail }) => this.getRegistry().register({\n                ...mergeWithDetail()\n            })}>\n                <InventoryDetail fallback={<Skeleton size={ SkeletonSize.md } />} hideBack />\n            </DetailWrapper>\n        );\n    }\n}\n\nInventoryDetails.propTypes = {\n    entity: propTypes.object\n};\n\nconst ConnectedInventoryDetails = (props) => {\n    return <InventoryDetails {...props} />;\n};\n\nexport default ConnectedInventoryDetails;\n","const CSV_FILE_PREFIX = 'compliance-export';\nconst CSV_DELIMITER = ',';\n\nconst linkAndDownload = (data, filename) => {\n    if (!data) {\n        return;\n    }\n\n    let link = document.createElement('a');\n    link.setAttribute('href', data);\n    link.setAttribute('download', filename);\n    link.dispatchEvent(new MouseEvent(`click`, { bubbles: true, cancelable: true, view: window }));\n};\n\nconst getNestedObject = (nestedObj, path) => {\n    return path.split('.').reduce(\n        (obj, key) => (obj && obj[key] !== 'undefined') ? obj[key] : undefined, nestedObj\n    );\n};\n\nconst textCsvCell = (row, key) => {\n    let cell = getNestedObject(row, key);\n\n    if (cell.exportValue) {\n        cell = cell.exportValue;\n    }\n\n    if (typeof(cell) === 'object') {\n        cell = getNestedObject(row, key + '_text');\n    }\n\n    if (typeof(cell) === 'string' && cell.includes(',')) {\n        cell = '\"' + cell + '\"';\n    }\n\n    return cell;\n};\n\nexport const csvFromState = (state) => {\n    const { rows, columns, selectedEntities } = state;\n\n    if (rows) {\n        let csvRows = [columns.map((column) => column.title).join(CSV_DELIMITER)];\n        csvRows = csvRows.concat((selectedEntities || rows).map((row) => (\n            state.columns.map((column) => !column.noExport ? textCsvCell(row, column.key) : '').join(CSV_DELIMITER)\n        )));\n\n        return encodeURI('data:text/csv;charset=utf-8,' + csvRows.join('\\n'));\n    }\n};\n\nexport const jsonFromState = (state) => {\n    const { rows, columns, selectedEntities } = state;\n    let result;\n\n    if (rows) {\n        result = (selectedEntities || rows).map((row) => {\n            let object = {};\n            columns.forEach((column) => {\n                const keys = column.key.split('.');\n                const key = keys[keys.length - 1];\n                object[key] = textCsvCell(row, column.key);\n            });\n\n            return object;\n        });\n\n        return encodeURI('data:application/json;charset=utf-8,' + JSON.stringify(result));\n    }\n};\n\nconst filename = (format) => (\n    CSV_FILE_PREFIX + '-' + (new Date()).toISOString() + '.' + format\n);\n\nexport const exportFromState = (state, format) => {\n    let content;\n\n    if (format === 'csv') {\n        content = csvFromState(state);\n    } else if (format === 'json') {\n        content = jsonFromState(state);\n    }\n\n    linkAndDownload(content, filename(format));\n};\n\n","import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { withApollo } from '@apollo/client/react/hoc';\nimport PropTypes from 'prop-types';\nimport { useStore, useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { policyFilter } from './constants';\nimport { systemsReducer } from 'Store/Reducers/SystemStore';\nimport { selectAll, clearSelection } from 'Store/ActionTypes';\nimport { exportFromState } from 'Utilities/Export';\nimport { DEFAULT_SYSTEMS_FILTER_CONFIGURATION, COMPLIANT_SYSTEMS_FILTER_CONFIGURATION } from '@/constants';\nimport debounce from 'lodash/debounce';\nimport {\n    ErrorPage,\n    StateView,\n    StateViewPart\n} from 'PresentationalComponents';\nimport { Alert } from '@patternfly/react-core';\nimport { TableVariant } from '@patternfly/react-table';\n// eslint-disable-next-line max-len\nimport ComplianceRemediationButton from '@redhat-cloud-services/frontend-components-inventory-compliance/ComplianceRemediationButton';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport useFilterConfig from 'Utilities/hooks/useFilterConfig';\nimport { InventoryTable as FECInventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useOsMinorVersionFilter } from './hooks';\n\nexport const InventoryTable = ({\n    columns,\n    showAllSystems,\n    policyId,\n    query,\n    client,\n    showActions,\n    enableExport,\n    compliantFilter,\n    policies,\n    showOnlySystemsWithTestResults,\n    showOsFilter,\n    error,\n    showComplianceSystemsInfo,\n    compact,\n    remediationsEnabled,\n    systemProps,\n    defaultFilter,\n    emptyStateComponent,\n    prependComponent,\n    showOsMinorVersionFilter\n}) => {\n    const store = useStore();\n    const dispatch = useDispatch();\n    const inventory = useRef(null);\n    const [pagination, setPagination] = useState({\n        perPage: 50,\n        page: 1\n    });\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [isEmpty, setIsEmpty] = useState(false);\n    const osMinorVersionFilter = useOsMinorVersionFilter(showOsMinorVersionFilter);\n    const { conditionalFilter, activeFilters, buildFilterString } = useFilterConfig([\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(policies?.length > 0 ? policyFilter(policies, showOsFilter) : []),\n        ...osMinorVersionFilter\n    ]);\n\n    const total = useSelector(({ entities }) => entities?.systemsCount) || 0;\n    const items = useSelector(({ entities } = {}) => (entities?.systems?.map((system) => (\n        system?.node?.id\n    )) || []), shallowEqual);\n    const selectedEntities = useSelector(({ entities } = {}) => (entities?.selectedEntities || []), shallowEqual);\n    const onBulkSelect = (isSelected) => isSelected ? dispatch(selectAll()) : dispatch(clearSelection());\n\n    const fetchSystems = (perPage = 50, page = 1) => {\n        setIsLoaded(false);\n\n        const filterString = buildFilterString();\n        const combindedFilter = [\n            ...showOnlySystemsWithTestResults ? ['has_test_results = true'] : [],\n            ...filterString?.length > 0 ? [filterString] : []\n        ].join(' and ');\n        const filter = defaultFilter ? `(${ defaultFilter }) and (${ combindedFilter })` : combindedFilter;\n\n        dispatch({ type: 'GET_SYSTEMS_PENDING' });\n        return client.query({\n            query,\n            fetchResults: true,\n            fetchPolicy: 'no-cache',\n            variables: {\n                filter,\n                perPage,\n                page,\n                ...policyId && { policyId }\n            }\n        }).then(({ data, loading }) => {\n            dispatch({\n                type: 'GET_SYSTEMS_FULFILLED',\n                systems: data.systems.edges,\n                systemsCount: data.systems.totalCount\n            });\n            setIsLoaded(true);\n            setPagination(() => ({ page, perPage }));\n\n            if (emptyStateComponent && !loading && data.systems.totalCount === 0 && combindedFilter.length === 0) {\n                setIsEmpty(true);\n            }\n\n            return { data, loading };\n        });\n    };\n\n    const debounceFetchSystems = useCallback(\n        debounce(fetchSystems, 800),\n        [conditionalFilter.activeFiltersConfig.filters]\n    );\n\n    useEffect(() => {\n        if (conditionalFilter.activeFiltersConfig.filters) {\n            debounceFetchSystems(pagination.perPage, 1);\n        }\n    }, [activeFilters]);\n\n    const onRefresh = (options, callback) => {\n        query && fetchSystems(options.per_page, options.page);\n        if (!callback && inventory && inventory.current) {\n            inventory.current.onRefreshData(options);\n        } else if (callback) {\n            callback(options);\n        }\n    };\n\n    return <StateView stateValues={{ error, noError: error === undefined && !isEmpty, empty: isEmpty }}>\n        <StateViewPart stateKey='error'>\n            { !!prependComponent && prependComponent }\n            <ErrorPage error={error}/>\n        </StateViewPart>\n        <StateViewPart stateKey='empty'>\n            { emptyStateComponent }\n        </StateViewPart>\n        <StateViewPart stateKey='noError'>\n            { !!prependComponent && isLoaded && prependComponent }\n            { showComplianceSystemsInfo && <Alert\n                isInline\n                variant=\"info\"\n                title={ 'The list of systems in this view is different than those that appear in the Inventory. ' +\n                    'Only systems currently associated with or reporting against compliance policies are displayed.' } /> }\n            <FECInventoryTable\n                { ...systemProps }\n                onLoad={({\n                    INVENTORY_ACTION_TYPES,\n                    mergeWithEntities\n                }) => {\n                    getRegistry().register({\n                        ...mergeWithEntities(\n                            systemsReducer(\n                                INVENTORY_ACTION_TYPES, columns, showAllSystems, policyId\n                            ))\n                    });\n                }}\n                fallback={<SkeletonTable colSize={2} rowSize={15} />}\n                tableProps={{\n                    canSelectAll: false\n                }}\n                variant={compact ? TableVariant.compact : ''}\n                ref={inventory}\n                onRefresh={onRefresh}\n                bulkSelect={{\n                    checked: selectedEntities.length > 0 ?\n                        (items?.every(id => selectedEntities?.find((selected) => selected?.id === id)) ? true : null)\n                        : false,\n                    onSelect: onBulkSelect,\n                    count: selectedEntities.length,\n                    label: selectedEntities.length > 0 ? `${ selectedEntities.length } Selected` : undefined\n                }}\n                {...!showAllSystems && {\n                    ...pagination,\n                    isLoaded,\n                    items,\n                    total,\n                    ...conditionalFilter,\n                    ...remediationsEnabled && {\n                        dedicatedAction: <ComplianceRemediationButton\n                            allSystems={ systemsWithRuleObjectsFailed(selectedEntities) }\n                            selectedRules={ [] } />\n                    }\n                }}\n                {...enableExport && {\n                    exportConfig: {\n                        isDisabled: total === 0 && selectedEntities.length === 0,\n                        onSelect: (_, format) => exportFromState(store.getState()?.entities, format)\n                    }\n                }}\n                {...showActions && {\n                    actions: [{\n                        title: 'View in inventory',\n                        onClick: (_event, _index, { id }) => {\n                            const beta = window.location.pathname.split('/')[1] === 'beta';\n                            window.location.href = `${window.location.origin}${beta ? '/beta' : ''}/insights/inventory/${id}`;\n                        }\n                    }]\n                }}\n            />\n        </StateViewPart>\n    </StateView>;\n};\n\nInventoryTable.propTypes = {\n    columns: PropTypes.arrayOf(PropTypes.shape({})),\n    policies: PropTypes.arrayOf(PropTypes.shape({})),\n    client: PropTypes.object,\n    showAllSystems: PropTypes.bool,\n    policyId: PropTypes.string,\n    query: PropTypes.string,\n    showActions: PropTypes.bool,\n    enableExport: PropTypes.bool,\n    compliantFilter: PropTypes.bool,\n    showOnlySystemsWithTestResults: PropTypes.bool,\n    showOsFilter: PropTypes.bool,\n    showComplianceSystemsInfo: PropTypes.bool,\n    error: PropTypes.object,\n    compact: PropTypes.bool,\n    remediationsEnabled: PropTypes.bool,\n    defaultFilter: PropTypes.string,\n    systemProps: PropTypes.shape({\n        isFullView: PropTypes.bool\n    }),\n    emptyStateComponent: PropTypes.node,\n    prependComponent: PropTypes.node,\n    showOsMinorVersionFilter: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.arrayOf(PropTypes.number)\n    ])\n};\n\nInventoryTable.defaultProps = {\n    policyId: '',\n    showActions: true,\n    enableExport: true,\n    compliantFilter: false,\n    showOnlySystemsWithTestResults: false,\n    showComplianceSystemsInfo: false,\n    compact: false,\n    remediationsEnabled: true\n};\n\nexport default withApollo(InventoryTable);\n","import useCollection from 'Utilities/hooks/api/useCollection';\nimport { osMinorVersionFilter } from './constants';\n\nconst groupByMajorVersion = (versions = [], showFilter) => {\n    const showVersion = (version) => {\n        if (showFilter.length > 0) {\n            return Array(showFilter).map(String).includes(String(version));\n        } else {\n            return true;\n        }\n    };\n\n    return versions.reduce((acc, currentValue) => {\n        if (showVersion(currentValue.osMajorVersion)) {\n            acc[String(currentValue.osMajorVersion)] = [...new Set(\n                [...acc[currentValue.osMajorVersion] || [], currentValue.osMinorVersion]\n            )];\n        }\n\n        return acc;\n    }, []);\n};\n\nexport const useOsMinorVersionFilter = (showFilter) => {\n    const { data: supportedSsgs } = useCollection('supported_ssgs', {\n        type: 'supportedSsg',\n        skip: !showFilter\n    });\n\n    return showFilter ? osMinorVersionFilter(groupByMajorVersion(supportedSsgs?.collection, showFilter)) : [];\n};\n","class ApiClient {\n    DEFAULT_API_HEADERS = {\n        'Content-Type': 'application/vnd.api+json',\n        Accept: 'application/json'\n    }\n\n    constructor(options = {}) {\n        this.apiBase = options.apiBase || '/api';\n        this.path = options.path || '';\n        this.authenticate = options.authenticate || (() => Promise.resolve({}));\n        this.onUnauthorised = options.onUnauthorised || (() => Promise.resolve({}));\n        this.defaultHeaders = options.headers || this.DEFAULT_API_HEADERS;\n    }\n\n    async request(path, apiProps, method, options = {}) {\n        return await this.callAuthenticate()\n        .then(() => this.fetch(path, apiProps, method, options))\n        .then(this.checkForEmptyResponse)\n        .then((response) => this.checkForErrors(response, options))\n        .then((response) => response.json())\n        .catch(this.finalCatch);\n    }\n\n    finalCatch(promise) {\n        if (promise.errors === undefined) {\n            return Promise.reject({ title: 'Error parsing' });\n        } else {\n            return Promise.reject({ ...promise });\n        }\n    }\n\n    fetch(path, apiProps, method, options) {\n        let params = {\n            method: method || 'get',\n            headers: this.defaultHeaders,\n            credentials: 'include'\n        };\n        const fullPath = `${ this.apiBase }${ this.path ? this.path : '' }${ path ? path : '' }`;\n        let url = new URL(fullPath, window.location.origin);\n        if (options.params) {\n            const params = Object.keys(options.params).map((key) => (\n                encodeURIComponent(key) + '=' + encodeURIComponent(options.params[key])\n            )).join('&');\n            url.search = new URLSearchParams(params);\n        }\n\n        if (apiProps) {\n            params.body = JSON.stringify(apiProps);\n        }\n\n        return fetch(\n            url, params\n        );\n    }\n\n    checkForEmptyResponse(response) {\n        return response.status === 204 ? { json: () => ({}) } : response;\n    }\n\n    checkForErrors(response, options = {}) {\n        if (response.status === 404 && options.ignore404) {\n            return { json: () => ({}) };\n        }\n\n        if (response.status === 401) {\n            return this.onUnauthorised();\n        }\n\n        const responseCloneJson = response.clone ? response.clone().json() : response;\n\n        if (response.status === 422) {\n            return responseCloneJson.then((json) =>\n                Promise.reject({ ...json, title: 'Validation error' })\n            );\n        }\n\n        if (response.status >= 400 && response.status <= 600) {\n            return responseCloneJson.then((json) =>\n                Promise.reject(json.errors[0])\n            );\n        }\n\n        return response;\n    }\n\n    callAuthenticate() {\n        return Promise.resolve(this.authenticate() || true);\n    }\n\n    create(path, apiProps) {\n        return this.request(path, apiProps, 'post');\n    }\n\n    update(path, apiProps) {\n        return this.request(path, apiProps, 'put');\n    }\n\n    get(path, options = {}) {\n        return this.request(path, null, 'get', options);\n    }\n\n    destroy(path) {\n        return this.request(path, null, 'delete');\n    }\n}\n\nexport default ApiClient;\n","import ApiClient from './utils/ApiClient';\n\nconst useApi = (options) => {\n    const apiClient = new ApiClient({\n        ...options\n    });\n\n    return apiClient;\n};\n\nexport default useApi;\n","import { useEffect, useState } from 'react';\nimport { COMPLIANCE_API_ROOT } from '@/constants';\nimport normalize from 'json-api-normalizer';\nimport useApi from './useApi';\n\nconst includePropAndDelete = (entity, prop) => {\n    const attributes = entity[prop];\n    let newEntity = entity;\n    delete newEntity[prop];\n    return { ...newEntity, ...attributes };\n};\n\nconst includeAttributes = (entity) => (\n    entity && includePropAndDelete(entity, 'attributes')\n);\n\nconst includeRelationship = (entity, normalizedJson) => {\n    let relationships = {};\n    Object.entries(entity?.relationships || []).forEach((item) => {\n        const [relationship, relationshipData] = item;\n        relationships[relationship] = relationshipData?.data.map((entity) => (\n            includeAttributes(normalizedJson?.[entity.type]?.[entity.id])\n        )).filter((v) => (!!v));\n    });\n    delete entity.relationships;\n    return { ...entity, ...relationships };\n};\n\nconst normalizeData = (json, type) => {\n    const jsonNormalized = normalize(json);\n    return Object.values(jsonNormalized[type] || {})?.map((entity) => (\n        includeRelationship(includeAttributes(entity), jsonNormalized)\n    ));\n};\n\nconst fetchCollection = async (apiClient, collection, params = {}, options = {}) => {\n    const json = await apiClient.get(`/${ collection }`, { params });\n    const normalized = await normalizeData(json, options?.type || collection);\n\n    return {\n        collection: normalized,\n        meta: json.meta,\n        total: json.meta.total,\n        json\n    };\n};\n\nconst useCollection = (collection, options = {}, dependencies = []) => {\n    const [collectionState, setCollectionState] = useState({\n        data: undefined,\n        loading: false,\n        error: undefined\n    });\n    const apiClient = useApi({\n        apiBase: COMPLIANCE_API_ROOT\n    });\n    const params = {\n        ...(options?.params || {}),\n        include: (options?.include || [])\n    };\n\n    useEffect(() => {\n        if (!options?.skip) {\n            setCollectionState({\n                data: undefined,\n                loading: true,\n                error: undefined\n            });\n\n            fetchCollection(apiClient, collection, params, options).then((data) => {\n                setCollectionState({\n                    data,\n                    loading: false,\n                    error: undefined\n                });\n            });\n        }\n    }, [...dependencies, options?.skip]);\n\n    return collectionState;\n};\n\nexport default useCollection;\n","export const profilesRulesFailed = (profiles) => (\n    profiles.flatMap(profile => profile.rules && profile.rules.filter(rule => !rule.compliant))\n);\n\nexport const profilesRulesPassed = (profiles) => (\n    profiles.flatMap(profile => profile.rules && profile.rules.filter(rule => rule.compliant))\n);\n\nexport const systemRulesPassed = (system) => (\n    system.testResultProfiles ? profilesRulesPassed(system.testResultProfiles) : []\n);\n\nexport const systemRulesFailed = (system) => (\n    system.testResultProfiles ? profilesRulesFailed(system.testResultProfiles) : []\n);\n\nexport const systemsWithRuleObjectsFailed = (systems) => (\n    systems.map(system => (\n        {\n            ...system,\n            ruleObjectsFailed: systemRulesFailed(system),\n            profiles: system.testResultProfiles\n        }\n    ))\n);\n","export const EXPORT = '@@COMPLIANCE/EXPORT';\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\n\nexport const exportFromState = (format) => ({\n    type: EXPORT, payload: { format }\n});\n\nexport const selectAll = () => ({\n    type: SELECT_ENTITY,\n    payload: { id: 0, selected: true }\n});\n\nexport const clearSelection = () => ({\n    type: SELECT_ENTITY,\n    payload: { id: 0, selected: false }\n});\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Link } from 'react-router-dom';\nimport { SELECT_ENTITY } from 'Store/ActionTypes';\nimport {\n    Tooltip,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport {\n    profilesRulesPassed,\n    profilesRulesFailed\n} from 'Utilities/ruleHelpers';\nimport Truncate from 'react-truncate';\nimport { sortingByProp } from 'Utilities/helpers';\n\nconst NEVER = 'Never';\n\nexport const lastScanned = ({ testResultProfiles: profiles = [] }) => {\n    const dates = profiles.map((profile) => new Date(profile.lastScanned));\n    const last = new Date(Math.max.apply(null, dates.filter((date) => isFinite(date))));\n    const result = (last instanceof Date && isFinite(last)) ? last : NEVER;\n\n    return result;\n};\n\nexport const compliant = ({ testResultProfiles: profiles = [] }) => (\n    profiles.every(profile => profile.lastScanned === NEVER || profile.compliant === true)\n);\n\nexport const score = ({ testResultProfiles: profiles = [] }) => {\n    const scoreTotal = profiles.reduce((acc, profile) => acc + profile.score, 0);\n    const numScored = profiles.reduce((acc, profile) => {\n        if (profilesRulesPassed([profile]).length + profilesRulesFailed([profile]).length > 0) { return acc + 1; }\n\n        return acc;\n    }, 0);\n    if (numScored) { return scoreTotal / numScored; }\n\n    return 0;\n};\n\nexport const supported = ({ testResultProfiles: profiles = [] }) => (\n    profiles.reduce((acc, profile) => acc && profile.supported, true)\n);\n\nexport const policyNames = (system) => {\n    if (system === {}) { return ''; }\n\n    let policyNames = system.policies.map(({ name }) => name);\n    return policyNames.join(', ');\n};\n\nexport const policiesCell = ({ policyNames }) => ({\n    title: policyNames ? (\n        <Tooltip content={policyNames}>\n            <Truncate lines={2} width={540}>{policyNames}</Truncate>\n        </Tooltip>\n    ) : <Text className='grey-icon'>No policies</Text>,\n    exportValue: policyNames\n});\n\nexport const detailsLink = (system) => {\n    if (system.testResultProfiles && system.testResultProfiles.length > 0) {\n        return {\n            title: (\n                <Link to={{ pathname: `/systems/${system.id}` }}>\n                    View report\n                </Link>\n            )\n        };\n    }\n};\n\nexport const hasOsInfo = (matchingSystem) => (\n    typeof(matchingSystem.osMajorVersion) !== 'undefined' && typeof(matchingSystem.osMinorVersion) !== 'undefined' &&\n        matchingSystem.osMajorVersion !== null && matchingSystem.osMinorVersion !== null &&\n        !(matchingSystem.osMajorVersion === 0 && matchingSystem.osMinorVersion === 0)\n);\n\nexport const systemName = (displayName, id, { osMajorVersion, osMinorVersion, name }) => (\n    <TextContent>\n        <Link to={{ pathname: `/systems/${id}` }}>\n            { displayName || name }\n        </Link>\n        { hasOsInfo({ osMajorVersion, osMinorVersion }) &&\n            <Text component={TextVariants.small}>RHEL {osMajorVersion}.{osMinorVersion}</Text> }\n    </TextContent>\n);\n\nconst isSelected = (id, selectedEntities) => (\n    !!(selectedEntities || []).find((entity) => (entity.id === id))\n);\n\nconst profilesSsgVersions = ({ testResultProfiles: profiles = [] }) => (\n    profiles.map((p) => (p.ssgVersion)).filter((version) => (!!version)).join(', ')\n);\n\nexport const mapCountOsMinorVersions = (systems) => {\n    if (!systems) { return {}; }\n\n    return systems.reduce((acc, { osMinorVersion }) => {\n        if (osMinorVersion !== undefined && osMinorVersion !== null) {\n            (acc[osMinorVersion] = acc[osMinorVersion] || { osMinorVersion, count: 0 }).count++;\n        }\n\n        return acc;\n    }, {});\n};\n\nexport const countOsMinorVersions = (systems) => (\n    Object.values(mapCountOsMinorVersions(systems)).sort(sortingByProp('osMinorVersion', 'desc'))\n);\n\nexport const systemsToRows = (systems) => (\n    systems.map(({ node }) => ({\n        ...node,\n        policyNames: policyNames({ policies: node?.policies, testResultProfiles: [] }),\n        rulesPassed: profilesRulesPassed(node.testResultProfiles).length,\n        rulesFailed: profilesRulesFailed(node.testResultProfiles).length,\n        lastScanned: lastScanned(node),\n        compliant: compliant(node),\n        display_name: node.name, // eslint-disable-line camelcase\n        score: score(node),\n        supported: supported(node),\n        ssgVersion: profilesSsgVersions(node),\n        detailsLink: detailsLink(node)\n    }))\n);\n\nconst selectRowsByIds = (state, ids) => {\n    const rowsToSelect = state.rows.filter((row) => (\n        ids.includes(row.id) && !(state.selectedEntities || []).map((e) => (e.id)).includes(row.id)\n    ));\n\n    return {\n        ...state,\n        selectedEntities: (state.selectedEntities || []).concat(rowsToSelect)\n    };\n};\n\nconst deselectRowsByIds = (state, ids) => ({\n    ...state,\n    selectedEntities: (state.selectedEntities || []).filter((row) => !ids.includes(row.id))\n});\n\nconst selectAllRows = (state) => (\n    selectRowsByIds(state, state.rows.map((row) => (row.id)))\n);\n\nconst deselectAllRows = (state) => (\n    deselectRowsByIds(state, state.rows.map((row) => (row.id)))\n);\n\nconst selectRow = (state, id) => (\n    selectRowsByIds(state, [id])\n);\n\nconst deselectRow = (state, id) => (\n    deselectRowsByIds(state, [id])\n);\n\nexport const systemsReducer = (INVENTORY_ACTION, columns) => applyReducerHash({\n    ['GET_SYSTEMS_PENDING']: (state) => ({\n        ...state,\n        rows: [],\n        systems: undefined,\n        systemsCount: undefined,\n        columns,\n        loaded: false\n    }),\n    ['GET_SYSTEMS_FULFILLED']: (state, { systems, systemsCount }) => ({\n        ...state,\n        systems,\n        systemsCount,\n        total: systemsCount,\n        rows: systemsToRows(systems).map((row) => ({\n            ...row, selected: isSelected(row.id, state.selectedEntities)\n        })),\n        columns,\n        loaded: true\n    }),\n    [INVENTORY_ACTION.LOAD_ENTITIES_PENDING]: (state) => ({\n        ...state,\n        total: state.systemsCount,\n        rows: state.systems !== undefined ? systemsToRows(state.systems).map((row) => ({\n            ...row, selected: isSelected(row.id, state.selectedEntities)\n        })) : [],\n        columns,\n        loaded: state.systemsCount !== undefined\n    }),\n    [INVENTORY_ACTION.LOAD_ENTITIES_FULFILLED]: (state) => ({\n        ...state,\n        total: state.systemsCount,\n        rows: state.systems !== undefined ? systemsToRows(state.systems).map((row) => ({\n            ...row, selected: isSelected(row.id, state.selectedEntities)\n        })) : [],\n        columns,\n        loaded: state.systemsCount !== undefined\n    }),\n    [SELECT_ENTITY]: (state, { payload: { id, selected, clearAll } }) => {\n        let newState;\n\n        if (id === 0) {\n            newState = selected ? selectAllRows(state) : deselectAllRows(state);\n        } else {\n            newState = selected ? selectRow(state, id) : deselectRow(state, id);\n        }\n\n        if (newState.selectedEntities.length === 0 || clearAll) {\n            newState.selectedEntities = undefined;\n        }\n\n        return newState;\n    },\n    ['SELECT_ENTITIES']: (state, { payload: { ids } }) => ({\n        selectedEntities: ids\n    })\n});\n"],"sourceRoot":""}