{"version":3,"sources":["webpack:///./src/SmartComponents/PolicyDetails/EditRulesButtonToolbarItem.js","webpack:///./src/SmartComponents/PolicyDetails/PolicyRulesTab.js","webpack:///./src/SmartComponents/PolicyDetails/PolicySystemsTab.js","webpack:///./src/SmartComponents/PolicyDetails/PolicyMultiversionRules.js","webpack:///./src/SmartComponents/PolicyDetails/PolicyDetails.js","webpack:///./src/SmartComponents/PolicyDetails/PolicyDetails.scss","webpack:///./src/SmartComponents/PolicyDetails/PolicyDetails.scss?2376"],"names":["EditRulesButtonToolbarItem","policy","anchor","useAnchor","ToolbarItem","to","id","state","hash","backgroundLocation","Button","variant","propTypes","PolicyRulesTab","loading","Alert","isInline","title","PageSection","PageSectionVariants","Text","component","TextVariants","benchmark","version","SystemRulesTable","remediationsEnabled","columns","selectRulesTableColumns","profileRules","profile","refId","name","rules","toolbarItems","PolicySystemsTab","showOsMinorVersionFilter","majorOsVersion","query","GET_SYSTEMS","policyId","defaultFilter","showActions","key","props","width","isStatic","renderFunc","Link","pathname","realProfile","Cells","supported","ssgVersion","ssg_version","osMinorVersion","_id","osMajorVersion","complianceThreshold","systemTableProps","PolicyMultiversionRules","hosts","profilesForTabs","profiles","filter","systemCounts","mapCountOsMinorVersions","tabsData","sort","sortingByProp","map","systemCount","count","level","QUERY","gql","PolicyDetails","route","defaultTab","useParams","policy_id","location","useLocation","dispatch","useDispatch","useQuery","variables","data","error","refetch","hasOsMinorProfiles","find","useEffect","useLayoutEffect","type","payload","ids","useTitleEntity","stateValues","stateKey","PageHeader","Main","Spinner","Fragment","className","Breadcrumb","BreadcrumbItem","isActive","Grid","gutter","GridItem","xl2","xl","lg","md","sm","PageHeaderTitle","aria-label","Tab","eventKey","exports","___CSS_LOADER_API_IMPORT___","push","module","update","hot","invalidate","oldLocals","accept","a","b","isNamedExport","p","isEqualLocals","dispose"],"mappings":"2YAMMA,EAA6B,SAAC,GAAe,IAAbC,EAAa,EAAbA,OAC9BC,GAASC,UAEb,OACI,kBAAC,EAAAC,YAAD,KACI,kBAAC,KAAD,CACIC,GAAE,wBAAqBJ,EAAOK,GAA5B,SACFC,MAAQ,CAAEN,UACVO,KAAON,EACPO,mBAAqB,CAAED,KAAMN,IAC7B,kBAAC,EAAAQ,OAAD,CAAQC,QAAQ,WAAhB,iBAMhBX,EAA2BY,UAAY,CACnCX,OAAQW,uBAGZ,UClBA,IAAMC,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASb,EAAZ,EAAYA,OAAZ,OACnB,kBAAC,aAAD,KACI,kBAAC,EAAAc,MAAD,CAAOC,UAAQ,EAACL,QAAQ,OAAOM,MAAM,kCAArC,uPAKA,kBAAC,EAAAC,YAAD,CAAaP,QAASQ,6BAClB,kBAAC,EAAAC,KAAD,CAAMC,UAAWC,kBACb,uEADJ,+DAEkErB,EAAOsB,UAAUC,QAFnF,4JAOJ,kBAACC,EAAA,GAAD,CACIC,qBAAqB,EACrBC,SAAUC,QAAwB,CAAC,OAAQ,WAAY,YACvDd,QAAUA,EACVe,aAAc,CAAC,CACXC,QAAS,CAAEC,MAAO9B,EAAO8B,MAAOC,KAAM/B,EAAO+B,MAC7CC,MAAOhC,EAAOgC,QAElBC,aAAe,kBAAC,EAAD,CAA4BjC,OAASA,QAKhEY,EAAeD,UAAY,CACvBE,QAASF,SACTX,OAAQW,UAAgB,CACpBoB,KAAMpB,WACNmB,MAAOnB,WACPqB,MAAOrB,UACPW,UAAWX,cAInB,U,qCCtCMuB,EAAmB,SAAC,GAAD,IAAGlC,EAAH,EAAGA,OAAH,OACrB,kBAAC,KAAD,CACImC,yBAA2B,CAACnC,EAAOoC,gBACnCC,MAAOC,KACPC,SAAWvC,EAAOK,GAClBmC,cAAa,sBAAiBxC,EAAOK,IACrCoC,aAAc,EACdhB,qBAAsB,EACtBC,QAAS,CAAC,CACNgB,IAAK,eACL1B,MAAO,OACP2B,MAAO,CACHC,MAAO,GAAIC,UAAU,GAEzBC,WAAY,SAACf,EAAM1B,GAAP,OAAc,kBAAC,EAAA0C,KAAD,CAAM3C,GAAI,CAAE4C,SAAU,YAAF,OAAc3C,KAAlC,IAA4C0B,EAA5C,OAC3B,CACCW,IAAK,aACL1B,MAAO,cACP8B,WAAY,SAACjB,GAAqB,QAC1BoB,EAAcpB,EAKlB,MAJuB,iBAAZA,IACPoB,EAAc,UAAH,+BAGRA,GAAe,kBAACC,EAAA,aAAD,CAClBC,UAAYF,EAAYE,UACxBC,YAAwB,QAAX,EAAAH,SAAA,eAAaI,eAAb,UAA4BJ,SAA5B,aAA4B,EAAaG,gBAE/D,CACCV,IAAK,iBACL1B,MAAO,mBACP8B,WAAY,SAACQ,EAAgBC,EAAjB,OAAwBC,EAAxB,EAAwBA,eAAxB,qBAAqDA,EAArD,YAAuEF,MAEvFG,oBAAsBzD,EAAOyD,uBAGrCvB,EAAiBvB,UAAY,CACzBX,OAAQW,UAAgB,CACpBN,GAAIM,sBACJ8C,oBAAqB9C,sBACrByB,eAAgBzB,wBAEpB+C,iBAAkB/C,YAGtB,U,0BC1CMgD,EAA0B,SAAC,GAAe,IAAb3D,EAAa,EAAbA,OACvB4D,EAAgC5D,EAAhC4D,MACFC,EADkC7D,EAAzBA,OAAU8D,SACQC,QAAO,SAAClC,GAAD,QAAeA,EAAQyB,kBACzDU,GAAeC,QAAwBL,GAEvCM,EAAWL,EAAgBM,MAAKC,OAAc,iBAAkB,SAASC,KAAI,SAACxC,GAAD,YAC/E,CACIA,UACAyC,aAAa,UAAAN,EAAanC,EAAQyB,uBAArB,eAAsCiB,QAAS,MAIpE,OAAO,kBAAC,aAAD,KACH,kBAAC,EAAAtD,YAAD,CAAaP,QAAUQ,6BACnB,kBAAC,KAAD,CACIgD,SAAWA,EACXxC,SAAUC,QAAwB,CAAC,OAAQ,WAAY,YACvD6C,MAAQ,EACRvC,aAAe,kBAAC,EAAD,CAA4BjC,OAASA,SAKpE2D,EAAwBhD,UAAY,CAChCX,OAAQW,uBAGZ,U,eChBa8D,EAAQC,IAAH,88CAoELC,EAAgB,SAAC,GAAc,MASpC3E,EATwB4E,EAAY,EAAZA,MACtBC,EAAa,UACAtC,GAAauC,iBAAxBC,UACFC,GAAWC,mBACXhF,GAASC,UACTgF,GAAWC,mBALuB,GAMAC,cAASX,EAAO,CACpDY,UAAW,CAAE9C,cADX+C,EANkC,EAMlCA,KAAMC,EAN4B,EAM5BA,MAAO1E,EANqB,EAMrBA,QAAS2E,EANY,EAMZA,QAIxBC,GAAqB,EAczB,OAbIH,IAASzE,IAET4E,KADAzF,EAASsF,EAAKzD,SACgB7B,OAAO8D,SAAS4B,MAAK,SAAC7D,GAAD,QAAeA,EAAQyB,oBAG9EqC,gBAAU,WACNH,MACD,CAACR,EAAUQ,KAEdI,sBAAgB,WAAQV,EAAS,CAAEW,KAAM,kBAAmBC,QAAS,CAAEC,IAAK,QAAY,KAExFC,OAAepB,EAAD,UAAQ5E,SAAR,aAAQ,EAAQ+B,MAEvB,kBAAC,KAAD,CAAoBkE,YAAc,CAAEV,QAAOD,OAAMzE,YACpD,kBAAC,KAAD,CAAeqF,SAAS,WACpB,kBAACC,EAAA,EAAD,KAAY,kBAAC,KAAD,OACZ,kBAACC,EAAA,EAAD,KAAM,kBAACC,EAAA,EAAD,QAEV,kBAAC,KAAD,CAAeH,SAAS,QAClBlG,GAAU,kBAAC,EAAAsG,SAAD,KACR,kBAACH,EAAA,EAAD,CAAYI,UAAU,oBAClB,kBAAC,EAAAC,WAAD,KACI,kBAAC,KAAD,CAAoBpG,GAAG,KAAvB,cAGA,kBAAC,KAAD,CAAoBA,GAAG,iBAAvB,iBAGA,kBAAC,EAAAqG,eAAD,CAAgBC,UAAQ,GAAE1G,EAAO+B,OAErC,kBAAC,EAAA4E,KAAD,CAAMC,OAAO,MACT,kBAAC,EAAAC,SAAD,CAAUC,IAAK,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC3C,kBAACC,EAAA,EAAD,CAAiBnG,MAAOhB,EAAO+B,QAEnC,kBAAC,EAAA8E,SAAD,CAAUN,UAAU,wBAAwBO,IAAK,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACzE,kBAAC,KAAD,CACI9G,GAAE,wBAAqBJ,EAAOK,GAA5B,SACFC,MAAQ,CAAEN,UACVO,KAAON,EACPO,mBAAqB,CAAED,KAAM,YAC7B,kBAAC,EAAAE,OAAD,CAAQC,QAAQ,aAAhB,kBAIZ,kBAAC,KAAD,CAAY0G,aAAW,cAAcvC,WAAaA,GAC9C,kBAAC,EAAAwC,IAAD,CAAKrG,MAAM,UAAUX,GAAG,iBAAiBiH,SAAS,YAClD,kBAAC,EAAAD,IAAD,CAAKrG,MAAM,QAAQX,GAAG,eAAeiH,SAAS,UAC9C,kBAAC,EAAAD,IAAD,CAAKrG,MAAM,UAAUX,GAAG,iBAAiBiH,SAAS,cAG1D,kBAAClB,EAAA,EAAD,KACI,kBAAC,KAAD,CAAavB,WAAaA,GACtB,kBAAC,KAAD,CAAYyC,SAAS,WACjB,kBAAC,KAAD,CAA0BtH,OAASA,KAEvC,kBAAC,KAAD,CAAYsH,SAAS,SACf7B,EACI,kBAAC,EAAD,CAAyBzF,OAASA,IAClC,kBAAC,EAAD,CAAgBA,OAASA,KAEnC,kBAAC,KAAD,CAAYsH,SAAS,WACjB,kBAAC,EAAD,CAAkBtH,OAASA,WASvD2E,EAAchE,UAAY,CACtBiE,MAAOjE,YAGX,W,iBC7KA4G,EADkC,EAAQ,MAChCC,EAA4B,IAE9BC,KAAK,CAACC,EAAOrH,GAAI,sJAAuJ,KAEhLqH,EAAOH,QAAUA,G,yECEbI,EAAS,IAAI,IALH,CAEd,OAAiB,OACjB,WAAoB,IAMlB,IAAK,YAAkBD,EAAOE,IAAIC,WAAY,CAC5C,IA+BIC,EAAY,WAEhBJ,EAAOE,IAAIG,OACT,OACA,eAnCkB,SAAuBC,EAAGC,EAAGC,GACnD,IAAKF,GAAKC,GAAKD,IAAMC,EACnB,OAAO,EAGT,IAAIE,EAEJ,IAAKA,KAAKH,EACR,GAKIA,EAAEG,KAAOF,EAAEE,GACb,OAAO,EAIX,IAAKA,KAAKF,EACR,IAKKD,EAAEG,GACL,OAAO,EAIX,OAAO,EAOIC,CAAcN,GADrB,YACgC,SAMxBA,EAAY,WAEZH,EAAO,MAPLD,EAAOE,IAAIC,gBAYzBH,EAAOE,IAAIS,SAAQ,WACjBV,OAIW","file":"js/PolicyDetails.efbeca048e29ed72eafc.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { ToolbarItem, Button } from '@patternfly/react-core';\nimport { BackgroundLink } from 'PresentationalComponents';\nimport { useAnchor } from 'Utilities/Router';\n\nconst EditRulesButtonToolbarItem = ({ policy }) => {\n    let anchor = useAnchor();\n\n    return (\n        <ToolbarItem>\n            <BackgroundLink\n                to={ `/scappolicies/${ policy.id }/edit` }\n                state={ { policy } }\n                hash={ anchor }\n                backgroundLocation={ { hash: anchor } }>\n                <Button variant='primary'>Edit rules</Button>\n            </BackgroundLink>\n        </ToolbarItem>\n    );\n};\n\nEditRulesButtonToolbarItem.propTypes = {\n    policy: propTypes.object.isRequired\n};\n\nexport default EditRulesButtonToolbarItem;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Alert, Text, TextVariants, PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport SystemRulesTable, {\n    selectColumns as selectRulesTableColumns\n} from '@redhat-cloud-services/frontend-components-inventory-compliance/SystemRulesTable';\nimport EditRulesButtonToolbarItem from './EditRulesButtonToolbarItem';\n\nconst PolicyRulesTab = ({ loading, policy }) => (\n    <React.Fragment>\n        <Alert isInline variant='info' title='Rule editing is now available.'>\n            Edit rules by clicking the &quot;Edit rules&quot; button in the toolbar. Rule can now be edited for\n            each minor version of the RHEL OS associated with this policy and will be displayed in the policy\n            after the &quot;Edit rules&quot; modal has been opened and saved.\n        </Alert>\n        <PageSection variant={PageSectionVariants.light}>\n            <Text component={TextVariants.p}>\n                <strong>What rules are shown on this list?&nbsp;</strong>\n                This view shows rules that are from the latest SSG version ({ policy.benchmark.version }).\n                If you are using a different version of SSG for systems in this policy,\n                those rules will be different and can be viewed on the systems details page.\n            </Text>\n        </PageSection>\n        <SystemRulesTable\n            remediationsEnabled={false}\n            columns={ selectRulesTableColumns(['Name', 'Severity', 'Ansible']) }\n            loading={ loading }\n            profileRules={[{\n                profile: { refId: policy.refId, name: policy.name },\n                rules: policy.rules\n            }]}\n            toolbarItems={ <EditRulesButtonToolbarItem policy={ policy } /> }\n        />\n    </React.Fragment>\n);\n\nPolicyRulesTab.propTypes = {\n    loading: propTypes.bool,\n    policy: propTypes.shape({\n        name: propTypes.string,\n        refId: propTypes.string,\n        rules: propTypes.array,\n        benchmark: propTypes.object\n    })\n};\n\nexport default PolicyRulesTab;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport { InventoryTable } from 'SmartComponents';\nimport { GET_SYSTEMS } from '../SystemsTable/constants';\nimport { Link } from 'react-router-dom';\nimport Cells from '@/SmartComponents/SystemsTable/Cells';\n\nconst PolicySystemsTab = ({ policy }) => (\n    <InventoryTable\n        showOsMinorVersionFilter={ [policy.majorOsVersion] }\n        query={GET_SYSTEMS}\n        policyId={ policy.id }\n        defaultFilter={`policy_id = ${policy.id}`}\n        showActions={ false }\n        remediationsEnabled={ false }\n        columns={[{\n            key: 'display_name',\n            title: 'Name',\n            props: {\n                width: 40, isStatic: true\n            },\n            renderFunc: (name, id) => <Link to={{ pathname: `/systems/${id}` }}> {name} </Link>\n        }, {\n            key: 'ssgVersion',\n            title: 'SSG version',\n            renderFunc: (profile, ...rest) => {\n                let realProfile = profile;\n                if (typeof profile === 'string') {\n                    realProfile = rest[1];\n                }\n\n                return realProfile && <Cells.SSGVersion\n                    supported={ realProfile.supported }\n                    ssgVersion={ realProfile?.ssg_version || realProfile?.ssgVersion } />;\n            }\n        }, {\n            key: 'osMinorVersion',\n            title: 'Operating system',\n            renderFunc: (osMinorVersion, _id, { osMajorVersion }) => `RHEL ${osMajorVersion}.${osMinorVersion}`\n        }]}\n        complianceThreshold={ policy.complianceThreshold } />\n);\n\nPolicySystemsTab.propTypes = {\n    policy: propTypes.shape({\n        id: propTypes.string.isRequired,\n        complianceThreshold: propTypes.number.isRequired,\n        majorOsVersion: propTypes.number.isRequired\n    }),\n    systemTableProps: propTypes.object\n};\n\nexport default PolicySystemsTab;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport {\n    selectColumns as selectRulesTableColumns\n} from '@redhat-cloud-services/frontend-components-inventory-compliance/SystemRulesTable';\nimport { TabbedRules } from 'PresentationalComponents';\nimport { mapCountOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport { sortingByProp } from 'Utilities/helpers';\nimport EditRulesButtonToolbarItem from './EditRulesButtonToolbarItem';\n\nconst PolicyMultiversionRules = ({ policy }) => {\n    const { hosts, policy: { profiles } } = policy;\n    const profilesForTabs = profiles.filter((profile) => !!profile.osMinorVersion);\n    const systemCounts = mapCountOsMinorVersions(hosts);\n\n    const tabsData = profilesForTabs.sort(sortingByProp('osMinorVersion', 'desc')).map((profile) => (\n        {\n            profile,\n            systemCount: systemCounts[profile.osMinorVersion]?.count || 0\n        }\n    ));\n\n    return <React.Fragment>\n        <PageSection variant={ PageSectionVariants.light }>\n            <TabbedRules\n                tabsData={ tabsData }\n                columns={ selectRulesTableColumns(['Name', 'Severity', 'Ansible']) }\n                level={ 1 }\n                toolbarItems={ <EditRulesButtonToolbarItem policy={ policy } /> } />\n        </PageSection>\n    </React.Fragment>;\n};\n\nPolicyMultiversionRules.propTypes = {\n    policy: propTypes.object.isRequired\n};\n\nexport default PolicyMultiversionRules;\n","import React, { Fragment, useEffect, useLayoutEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport propTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { Breadcrumb, BreadcrumbItem, Button, Grid, GridItem, Tab } from '@patternfly/react-core';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n    PolicyDetailsDescription, PolicyDetailsContentLoader, RoutedTabSwitcher as TabSwitcher, ContentTab,\n    StateViewWithError, StateViewPart, RoutedTabs, BreadcrumbLinkItem, BackgroundLink\n} from 'PresentationalComponents';\nimport { useAnchor } from 'Utilities/Router';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport '@/Charts.scss';\nimport PolicyRulesTab from './PolicyRulesTab';\nimport PolicySystemsTab from './PolicySystemsTab';\nimport PolicyMultiversionRules from './PolicyMultiversionRules';\nimport './PolicyDetails.scss';\n\nexport const QUERY = gql`\nquery Profile($policyId: String!){\n    profile(id: $policyId) {\n        id\n        name\n        refId\n        external\n        description\n        totalHostCount\n        compliantHostCount\n        complianceThreshold\n        majorOsVersion\n        lastScanned\n        policyType\n        policy {\n            id\n            name\n            refId\n            profiles {\n                id\n                ssgVersion\n                name\n                refId\n                osMinorVersion\n                osMajorVersion\n                benchmark {\n                    id\n                    title\n                    latestSupportedOsMinorVersions\n                    osMajorVersion\n                }\n                rules {\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n        businessObjective {\n            id\n            title\n        }\n        hosts {\n            id\n            osMinorVersion\n        }\n        benchmark {\n            id\n            title\n            version\n        }\n        rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n        }\n    }\n}\n`;\n\nexport const PolicyDetails = ({ route }) => {\n    const defaultTab = 'details';\n    const { policy_id: policyId } = useParams();\n    const location = useLocation();\n    const anchor = useAnchor();\n    const dispatch = useDispatch();\n    let { data, error, loading, refetch } = useQuery(QUERY, {\n        variables: { policyId }\n    });\n    let policy;\n    let hasOsMinorProfiles = true;\n    if (data && !loading) {\n        policy = data.profile;\n        hasOsMinorProfiles = !!policy.policy.profiles.find((profile) => !!profile.osMinorVersion);\n    }\n\n    useEffect(() => {\n        refetch();\n    }, [location, refetch]);\n\n    useLayoutEffect(() => { dispatch({ type: 'SELECT_ENTITIES', payload: { ids: [] } }); }, []);\n\n    useTitleEntity(route, policy?.name);\n\n    return <StateViewWithError stateValues={ { error, data, loading } }>\n        <StateViewPart stateKey='loading'>\n            <PageHeader><PolicyDetailsContentLoader/></PageHeader>\n            <Main><Spinner/></Main>\n        </StateViewPart>\n        <StateViewPart stateKey='data'>\n            { policy && <Fragment>\n                <PageHeader className='page-header-tabs'>\n                    <Breadcrumb>\n                        <BreadcrumbLinkItem to='/'>\n                            Compliance\n                        </BreadcrumbLinkItem>\n                        <BreadcrumbLinkItem to='/scappolicies'>\n                            SCAP policies\n                        </BreadcrumbLinkItem>\n                        <BreadcrumbItem isActive>{policy.name}</BreadcrumbItem>\n                    </Breadcrumb>\n                    <Grid gutter='lg'>\n                        <GridItem xl2={11} xl={10} lg={12} md={12} sm={12}>\n                            <PageHeaderTitle title={policy.name} />\n                        </GridItem>\n                        <GridItem className='policy-details-button' xl2={1} xl={2} lg={2} md={3} sm={3}>\n                            <BackgroundLink\n                                to={ `/scappolicies/${ policy.id }/edit` }\n                                state={ { policy } }\n                                hash={ anchor }\n                                backgroundLocation={ { hash: 'details' } }>\n                                <Button variant='secondary'>Edit policy</Button>\n                            </BackgroundLink>\n                        </GridItem>\n                    </Grid>\n                    <RoutedTabs aria-label=\"Policy Tabs\" defaultTab={ defaultTab }>\n                        <Tab title='Details' id='policy-details' eventKey='details' />\n                        <Tab title='Rules' id='policy-rules' eventKey='rules' />\n                        <Tab title='Systems' id='policy-systems' eventKey='systems' />\n                    </RoutedTabs>\n                </PageHeader>\n                <Main>\n                    <TabSwitcher defaultTab={ defaultTab }>\n                        <ContentTab eventKey='details'>\n                            <PolicyDetailsDescription policy={ policy } />\n                        </ContentTab>\n                        <ContentTab eventKey='rules'>\n                            { hasOsMinorProfiles\n                                ? <PolicyMultiversionRules policy={ policy } />\n                                : <PolicyRulesTab policy={ policy } /> }\n                        </ContentTab>\n                        <ContentTab eventKey='systems'>\n                            <PolicySystemsTab policy={ policy } />\n                        </ContentTab>\n                    </TabSwitcher>\n                </Main>\n            </Fragment> }\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nPolicyDetails.propTypes = {\n    route: propTypes.object\n};\n\nexport default PolicyDetails;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".threshold-tooltip{margin-bottom:var(--pf-global--spacer--md)}.grey-icon{color:var(--pf-global--Color--200)}.policy-description{padding-top:10px}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./PolicyDetails.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./PolicyDetails.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};"],"sourceRoot":""}