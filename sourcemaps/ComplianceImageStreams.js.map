{"version":3,"sources":["webpack:///./node_modules/@apollo/react-components/lib/react-components.esm.js","webpack:///./node_modules/redux-form/es/FormSection.js","webpack:///./src/SmartComponents/ImageStreamsWizard/AddOpenshiftConnection.js","webpack:///./src/SmartComponents/ImageStreamsWizard/SelectPolicy.js","webpack:///./src/SmartComponents/ImageStreamsWizard/ApplyPoliciesToImageStreams.js","webpack:///./src/SmartComponents/ImageStreamsWizard/ImageStreamEmptyState.js","webpack:///./src/Utilities/ComplianceBackend/ComplianceBackendAPI.js","webpack:///./src/SmartComponents/ImageStreamsWizard/ImageStreamsWizard.js","webpack:///./src/SmartComponents/ComplianceImageStreamsTable/ComplianceImageStreamsTable.js","webpack:///./src/SmartComponents/ComplianceImageStreams/ComplianceImageStreams.js"],"names":["Query","props","children","query","options","result","Mutation","_a","mutation","runMutation","Subscription","subscription","propTypes","client","object","func","isRequired","fetchPolicy","string","notifyOnNetworkStatusChange","bool","onCompleted","onError","pollInterval","number","variables","ssr","partialRefetch","returnPartialData","optimisticResponse","oneOfType","refetchQueries","arrayOf","awaitRefetchQueries","update","onSubscriptionData","onSubscriptionComplete","shouldResubscribe","_Component","FormSection","_this","call","this","_reduxForm","Error","prototype","render","_this$props","name","component","rest","isValidElement","ReduxFormContext","Provider","value","sectionPrefix","prefixName","validateComponentProp","defaultProps","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","Form","FormGroup","label","Field","id","ReduxFormTextInput","type","fieldId","ReduxFormCheckboxInput","aria-label","ApplyPoliciesToImageStreams","React","Component","ImageStreamEmptyState","openWizard","Bullseye","EmptyState","EmptyStateIcon","size","title","icon","ClipboardCheckIcon","Title","className","emptyStateStyles","emptyStateBody","TextContent","Button","variant","onClick","PropTypes","post","path","apiProps","fetch","COMPLIANCE_API_ROOT","concat","method","headers","API_HEADERS","body","JSON","stringify","then","response","ok","statusText","json","ImageStreamsWizard","state","isModalOpen","handleModalToggle","setState","handleOnClose","imagestream","openshift_connection","policy","length","Object","keys","ModalStepContent","key","Fragment","isOpen","confirmAction","onClose","content","shape","registry_api_url","username","token","selector","formValueSelector","connect","QUERY","gql","routerParams","data","error","loading","ComplianceImageStreams"],"mappings":"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","file":"js/ComplianceImageStreams.js","sourcesContent":["export { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __rest } from 'tslib';\nimport { useQuery, useMutation, useSubscription } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\n\nfunction Query(props) {\n    var children = props.children, query = props.query, options = __rest(props, [\"children\", \"query\"]);\n    var result = useQuery(query, options);\n    return children && result ? children(result) : null;\n}\n(function (Query) {\n    Query.propTypes = {\n        client: PropTypes.object,\n        children: PropTypes.func.isRequired,\n        fetchPolicy: PropTypes.string,\n        notifyOnNetworkStatusChange: PropTypes.bool,\n        onCompleted: PropTypes.func,\n        onError: PropTypes.func,\n        pollInterval: PropTypes.number,\n        query: PropTypes.object.isRequired,\n        variables: PropTypes.object,\n        ssr: PropTypes.bool,\n        partialRefetch: PropTypes.bool,\n        returnPartialData: PropTypes.bool\n    };\n})(Query || (Query = {}));\n\nfunction Mutation(props) {\n    var _a = useMutation(props.mutation, props), runMutation = _a[0], result = _a[1];\n    return props.children ? props.children(runMutation, result) : null;\n}\n(function (Mutation) {\n    Mutation.propTypes = {\n        mutation: PropTypes.object.isRequired,\n        variables: PropTypes.object,\n        optimisticResponse: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n        refetchQueries: PropTypes.oneOfType([\n            PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object])),\n            PropTypes.func\n        ]),\n        awaitRefetchQueries: PropTypes.bool,\n        update: PropTypes.func,\n        children: PropTypes.func.isRequired,\n        onCompleted: PropTypes.func,\n        onError: PropTypes.func,\n        fetchPolicy: PropTypes.string\n    };\n})(Mutation || (Mutation = {}));\n\nfunction Subscription(props) {\n    var result = useSubscription(props.subscription, props);\n    return props.children && result ? props.children(result) : null;\n}\n(function (Subscription) {\n    Subscription.propTypes = {\n        subscription: PropTypes.object.isRequired,\n        variables: PropTypes.object,\n        children: PropTypes.func,\n        onSubscriptionData: PropTypes.func,\n        onSubscriptionComplete: PropTypes.func,\n        shouldResubscribe: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n    };\n})(Subscription || (Subscription = {}));\n\nexport { Mutation, Query, Subscription };\n//# sourceMappingURL=react-components.esm.js.map\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport React, { createElement, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport prefixName from './util/prefixName';\nimport { withReduxForm, ReduxFormContext } from './ReduxFormContext';\nimport validateComponentProp from './util/validateComponentProp';\n\nvar FormSection =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(FormSection, _Component);\n\n  function FormSection(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    if (!props._reduxForm) {\n      throw new Error('FormSection must be inside a component decorated with reduxForm()');\n    }\n\n    return _this;\n  }\n\n  var _proto = FormSection.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _reduxForm = _this$props._reduxForm,\n        children = _this$props.children,\n        name = _this$props.name,\n        component = _this$props.component,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"_reduxForm\", \"children\", \"name\", \"component\"]);\n\n    if (React.isValidElement(children)) {\n      return createElement(ReduxFormContext.Provider, {\n        value: _extends({}, this.props._reduxForm, {\n          sectionPrefix: prefixName(this.props, name)\n        }),\n        children: children\n      });\n    }\n\n    return createElement(ReduxFormContext.Provider, {\n      value: _extends({}, this.props._reduxForm, {\n        sectionPrefix: prefixName(this.props, name)\n      }),\n      children: createElement(component, _extends({}, rest, {\n        children: children\n      }))\n    });\n  };\n\n  return FormSection;\n}(Component);\n\nFormSection.propTypes = {\n  name: PropTypes.string.isRequired,\n  component: validateComponentProp\n};\nFormSection.defaultProps = {\n  component: 'div'\n};\nexport default withReduxForm(FormSection);","import React from 'react';\nimport { Field, FormSection, reduxForm } from 'redux-form';\nimport { Form, FormGroup } from '@patternfly/react-core';\nimport { ReduxFormTextInput } from '../ReduxFormWrappers/ReduxFormWrappers';\n\nconst AddOpenshiftConnection = () => {\n    return (\n        <Form>\n            <FormSection name='openshift_connection'>\n                <FormGroup label='Openshift API URL' isRequired>\n                    <Field name='api_url' id='api_url' isRequired={true}\n                        component={ReduxFormTextInput} type='url' />\n                </FormGroup>\n                <FormGroup label='Registry API URL' isRequired>\n                    <Field name='registry_api_url' id='registry_api_url' isRequired={true}\n                        component={ReduxFormTextInput} type='url' />\n                </FormGroup>\n                <FormGroup label='Username' isRequired>\n                    <Field name='username' id='username' isRequired={true}\n                        component={ReduxFormTextInput} type='text' />\n                </FormGroup>\n                <FormGroup label='Token' isRequired>\n                    <Field name='token' id='token' isRequired={true}\n                        component={ReduxFormTextInput} type='text' />\n                </FormGroup>\n            </FormSection>\n        </Form>\n    );\n};\n\nexport default reduxForm({\n    form: 'imagestreamWizard',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true\n})(AddOpenshiftConnection);\n","import React from 'react';\nimport { FormGroup, Form } from '@patternfly/react-core';\nimport { FormSection, Field, reduxForm } from 'redux-form';\nimport { ReduxFormCheckboxInput } from '../ReduxFormWrappers/ReduxFormWrappers';\n\nconst SelectPolicy = () => {\n    return (\n        <Form>\n            <FormSection name='policy'>\n                <FormGroup isRequired label=\"Which policy do you want to scan for?\" fieldId=\"policy\">\n                    <Field component={ReduxFormCheckboxInput} value='pci'\n                        id=\"PCI-DSS v3.2.1 Control Baseline\" name=\"pci-dss\"\n                        label=\"PCI-DSS v3.2.1 Control Baseline\"\n                        aria-label=\"PCI-DSS v3.2.1 Control Baseline\" />\n                    <Field component={ReduxFormCheckboxInput} value='hipaa'\n                        id=\"Health Insurance Portability and Accountability Act (HIPAA)\"\n                        name=\"hipaa\" label=\"Health Insurance Portability and Accountability Act (HIPAA)\"\n                        aria-label=\"Health Insurance Portability and Accountability Act (HIPAA)\" />\n                    <Field component={ReduxFormCheckboxInput} value='cjis'\n                        id=\"Criminal Justice Information Services (CJIS)\" name=\"cjis\"\n                        label=\"Criminal Justice Information Services (CJIS)\"\n                        aria-label=\"Criminal Justice Information Services (CJIS)\" />\n                    <Field component={ReduxFormCheckboxInput} value='standard'\n                        id=\"Standard System Security Profile\" name=\"standard\"\n                        label=\"Standard System Security Profile\" aria-label=\"Standard System Security Profile\" />\n                    <Field component={ReduxFormCheckboxInput} value='disa'\n                        id=\"DISA STIG\" name=\"stig-rhel7-disa\" label=\"DISA STIG\"\n                        aria-label=\"DISA STIG\" />\n                </FormGroup>\n            </FormSection>\n        </Form>\n    );\n};\n\nexport default reduxForm({\n    form: 'imagestreamWizard',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true\n})(SelectPolicy);\n","import React from 'react';\nimport { FormSection, Field, reduxForm } from 'redux-form';\nimport { Form, FormGroup } from '@patternfly/react-core';\nimport { ReduxFormTextInput } from '../ReduxFormWrappers/ReduxFormWrappers';\n\nclass ApplyPoliciesToImageStreams extends React.Component {\n    render() {\n        return (\n            <Form>\n                <FormSection name='imagestream'>\n                    <FormGroup label='Imagestream name (namespace/imagename)' isRequired>\n                        <Field name='name' id='name' isRequired={true}\n                            component={ReduxFormTextInput} type='text' />\n                    </FormGroup>\n                </FormSection>\n            </Form>\n        );\n    }\n}\n\nexport default reduxForm({\n    form: 'imagestreamWizard',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true\n})(ApplyPoliciesToImageStreams);\n","import React from 'react';\nimport {\n    Title,\n    TextContent,\n    Bullseye,\n    EmptyState,\n    EmptyStateIcon,\n    Button\n} from '@patternfly/react-core';\nimport { ClipboardCheckIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\nimport emptyStateStyles from '@patternfly/patternfly/components/EmptyState/empty-state.css';\n\nconst ImageStreamEmptyState = ({ openWizard }) => (\n    <Bullseye>\n        <EmptyState>\n            <EmptyStateIcon size=\"xl\" title=\"Compliance\" icon={ClipboardCheckIcon} />\n            <br/>\n            <Title size=\"lg\">No Image Streams</Title>\n            <span className={emptyStateStyles.emptyStateBody}>\n                <TextContent>\n                    You have not added any Image Streams to scan yet.<br/>\n\n                    Add an Image Stream to scan and view compliance reports.\n                </TextContent>\n            </span>\n            <Button variant='primary' onClick={openWizard}> Scan an Image Stream </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\nImageStreamEmptyState.propTypes = {\n    openWizard: PropTypes.func.isRequired\n};\n\nexport default ImageStreamEmptyState;\n","import { API_HEADERS, COMPLIANCE_API_ROOT } from '../../constants';\n\nexport const post = (path, apiProps) => {\n    return fetch(COMPLIANCE_API_ROOT.concat(path), {\n        method: 'post',\n        headers: API_HEADERS,\n        body: JSON.stringify(apiProps)\n    }).then((response) => {\n        if (!response.ok) {\n            throw new Error(response.statusText);\n        }\n\n        return response.json();\n    });\n};\n","import React from 'react';\nimport { Wizard } from '@redhat-cloud-services/frontend-components';\nimport AddOpenshiftConnection from '../ImageStreamsWizard/AddOpenshiftConnection';\nimport SelectPolicy from '../ImageStreamsWizard/SelectPolicy';\nimport ApplyPoliciesToImageStreams from '../ImageStreamsWizard/ApplyPoliciesToImageStreams';\nimport ImageStreamEmptyState from './ImageStreamEmptyState';\nimport PropTypes from 'prop-types';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { post } from '../../Utilities/ComplianceBackend/ComplianceBackendAPI';\n\nclass ImageStreamsWizard extends React.Component {\n    state = {\n        isModalOpen: false\n    };\n\n    handleModalToggle = () => {\n        this.setState(({ isModalOpen }) => ({\n            isModalOpen: !isModalOpen\n        }));\n    };\n\n    handleOnClose = () => {\n        /* eslint-disable camelcase */\n        const { imagestream, openshift_connection, policy } = this.props;\n        if (imagestream && imagestream.name.length !== 0 && Object.keys(openshift_connection).length === 4) {\n            post('/imagestreams', {\n                imagestream,\n                openshift_connection,\n                /* eslint-enable camelcase */\n                policy\n            });\n        }\n\n        this.setState({\n            isModalOpen: false\n        });\n    }\n\n    render() {\n        const { isModalOpen } = this.state;\n\n        const ModalStepContent = [\n            <AddOpenshiftConnection key='step1'/>,\n            <SelectPolicy key='step2'/>,\n            <ApplyPoliciesToImageStreams key='step3'/>\n        ];\n\n        return (\n            <React.Fragment>\n                <ImageStreamEmptyState key='step0' openWizard={this.handleModalToggle} />\n                <Wizard\n                    title='Add a new Image Stream'\n                    isOpen={isModalOpen}\n                    confirmAction='Scan'\n                    onClose={this.handleOnClose}\n                    content={ModalStepContent}\n                >\n                </Wizard>\n            </React.Fragment>\n        );\n    }\n}\n\nImageStreamsWizard.propTypes = {\n    /* This data is sent in this format to the backend */\n    /* eslint-disable camelcase */\n    openshift_connection: PropTypes.shape({\n        openshift_connection: PropTypes.string,\n        registry_api_url: PropTypes.string,\n        username: PropTypes.string,\n        token: PropTypes.string\n    }),\n    policy: PropTypes.object,\n    imagestream: PropTypes.shape({ name: PropTypes.string })\n};\n\nconst selector = formValueSelector('imagestreamWizard');\nexport default connect(\n    state => ({\n        openshift_connection: selector(state, 'openshift_connection'),\n        /* eslint-enable camelcase */\n        policy: selector(state, 'policy'),\n        imagestream: selector(state, 'imagestream')\n    })\n)(ImageStreamsWizard);\n","import React from 'react';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { ErrorPage } from 'PresentationalComponents';\nimport ImageStreamsWizard from '../ImageStreamsWizard/ImageStreamsWizard';\n\nconst QUERY = gql`\n{\n    allImageStreams {\n        id\n        name\n        profile_names\n        compliant\n    }\n}\n`;\n\nconst ComplianceImageStreamsTable = () => (\n    <Query query={QUERY}>\n        {({ data, error, loading }) => {\n            if (error) { return <ErrorPage error={error} data={data} />; }\n\n            if (loading) { return 'Loading Image Streams...'; }\n\n            const imageStreams = <ImageStreamsWizard/>;\n\n            return imageStreams;\n        }}\n    </Query>\n);\n\nexport default routerParams(ComplianceImageStreamsTable);\n","import React from 'react';\nimport { ComplianceTabs } from 'PresentationalComponents';\nimport ComplianceImageStreamsTable from '../ComplianceImageStreamsTable/ComplianceImageStreamsTable';\nimport { PageHeader, PageHeaderTitle, Main } from '@redhat-cloud-services/frontend-components';\n\nconst ComplianceImageStreams = () => {\n    return (\n        <React.Fragment>\n            <PageHeader>\n                <PageHeaderTitle title=\"Compliance\" />\n                <ComplianceTabs/>\n            </PageHeader>\n            <Main>\n                <ComplianceImageStreamsTable />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default ComplianceImageStreams;\n"],"sourceRoot":""}