{"version":3,"sources":["webpack:///./src/SmartComponents/Reports/Reports.js"],"names":["QUERY","gql","ReportsHeader","title","Reports","profiles","showView","location","useLocation","useQuery","variables","filter","data","error","loading","refetch","useEffect","undefined","edges","map","profile","node","profilesFromEdges","length","stateValues","stateKey","colSize","rowSize"],"mappings":"gSAWMA,GAAQC,QAAH,k8BA8CLC,EAAgB,kBAClB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAiBC,MAAM,cAIlBC,EAAU,WACnB,IAAIC,EAAW,GACXC,GAAW,EACTC,GAAWC,mBAIjB,GAAwCC,cAAST,EAAO,CACpDU,UAAW,CAAEC,OAJF,oIAGTC,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,MAAOC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,QAe5B,OAXAC,gBAAU,WACND,MACD,CAACR,EAAUQ,IAEVH,IAEAC,OAAQI,EACRH,OAAUG,EACVX,GAHAD,EA5BkB,SAACO,GAAD,cACrBA,SAAA,UAAAA,EAAMP,gBAAN,eAAgBa,QAAS,IAAIC,KAAI,SAACC,GAAD,OAC9BA,EAAQC,QA0BGC,CAAkBV,KAGNP,EAASkB,OAAS,GAGtC,kBAAC,KAAD,CAAoBC,YAAc,CAAEX,QAAOD,OAAME,YACpD,kBAAC,KAAD,CAAeW,SAAS,WACpB,kBAACvB,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAewB,QAAU,EAAIC,QAAU,OAG/C,kBAAC,KAAD,CAAeF,SAAS,QACpB,kBAACvB,EAAD,MACA,kBAAC,IAAD,KACMI,EAAW,kBAAC,KAAD,CAAqBD,aAAkB,kBAAC,KAAD,UAMpE","file":"js/Reports.a5616169c81e990f26b0.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport {\n    ReportsTable, StateViewPart, StateViewWithError, ReportsEmptyState\n} from 'PresentationalComponents';\n\nconst QUERY = gql`\nquery Profiles($filter: String!) {\n    profiles(search: $filter, limit: 1000){\n        edges {\n            node {\n                id\n                name\n                refId\n                description\n                policyType\n                totalHostCount\n                testResultHostCount\n                compliantHostCount\n                unsupportedHostCount\n                majorOsVersion\n                ssgVersion\n                complianceThreshold\n                businessObjective {\n                    id\n                    title\n                }\n                policy {\n                    id\n                    name\n                    benchmark {\n                        id\n                        version\n                    }\n                }\n                benchmark {\n                    id\n                    version\n                }\n            }\n        }\n\n    }\n}\n`;\n\nconst profilesFromEdges = (data) => (\n    (data?.profiles?.edges || []).map((profile) => (\n        profile.node\n    ))\n);\n\nconst ReportsHeader = () => (\n    <PageHeader>\n        <PageHeaderTitle title=\"Reports\" />\n    </PageHeader>\n);\n\nexport const Reports = () => {\n    let profiles = [];\n    let showView = false;\n    const location = useLocation();\n    const filter = `(has_policy_test_results = true AND external = false)\n                    OR (has_policy = false AND has_test_results = true)`;\n\n    let { data, error, loading, refetch } = useQuery(QUERY, {\n        variables: { filter }\n    });\n\n    useEffect(() => {\n        refetch();\n    }, [location, refetch]);\n\n    if (data) {\n        profiles = profilesFromEdges(data);\n        error = undefined;\n        loading = undefined;\n        showView = profiles && profiles.length > 0;\n    }\n\n    return <StateViewWithError stateValues={ { error, data, loading } }>\n        <StateViewPart stateKey='loading'>\n            <ReportsHeader />\n            <Main>\n                <SkeletonTable colSize={ 3 } rowSize={ 10 } />\n            </Main>\n        </StateViewPart>\n        <StateViewPart stateKey='data'>\n            <ReportsHeader />\n            <Main>\n                { showView ? <ReportsTable { ...{ profiles } } /> : <ReportsEmptyState /> }\n            </Main>\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nexport default Reports;\n"],"sourceRoot":""}