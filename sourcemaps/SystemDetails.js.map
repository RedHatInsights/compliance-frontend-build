{"version":3,"sources":["webpack:///./src/Utilities/Breadcrumbs.js","webpack:///./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack:///./src/SmartComponents/InventoryDetails/InventoryDetails.js","webpack:///./src/SmartComponents/SystemPolicyCard/SystemPolicyCard.js","webpack:///./src/SmartComponents/SystemPolicyCards/SystemPolicyCards.js","webpack:///./src/SmartComponents/SystemRulesTable/SystemRulesTable.js","webpack:///./src/SmartComponents/SystemDetails/SystemDetails.js"],"names":["onNavigate","event","item","this","props","history","push","__webpack_require__","d","__webpack_exports__","arrayWithoutHoles","iterableToArray","nonIterableSpread","module","exports","arr","Array","isArray","i","arr2","length","iter","Symbol","iterator","Object","prototype","toString","call","from","TypeError","InventoryDetails_InventoryDetails","insights_frontend_components","InventoryDetails","_this","classCallCheck_default","possibleConstructorReturn_default","getPrototypeOf_default","state","InventoryCmp","react_default","a","createElement","fetchInventory","bind","assertThisInitialized_default","insights","loadInventory","react","reactRouterDom","es","reactCore","esm","reactIcons","dist_esm","inventoryConnector","mergeWithDetail","getRegistry","register","objectSpread_default","setState","InventoryDetail","Fragment","hideBack","Component","propTypes","entity","prop_types_default","object","SmartComponents_InventoryDetails_InventoryDetails","SmartComponents_SystemPolicyCard_SystemPolicyCard","SystemPolicyCard","policy","compliant","style","fontSize","color","id","check_circle_icon","exclamation_circle_icon","totalRules","rules_passed","rules_failed","Card","CardBody","TextContent","Text","marginBottom","component","small","marginTop","h4","name","complianceIcon","medium","ref_id","CardFooter","last_scanned","SystemPolicyCards_SystemPolicyCards","SystemPolicyCards","policies","map","GridItem","span","key","undefined","Grid","gutter","systemPolicyCards","array","SmartComponents_SystemPolicyCards_SystemPolicyCards","SystemRulesTable_SystemRulesTable","SystemRulesTable","openNodes","page","itemsPerPage","rows","rulesToRows","profileRules","currentRows","onExpandClick","setPage","setPerPage","onItemSelect","_this2","_this3","slice","_event","selected","_this$state","Number","forEach","profileRule","rules","rule","children","cells","title","profile","severity","isOpen","description","rationale","colSpan","row","rowKey","activeRow","isActive","active","toConsumableArray_default","concat","oneChild","splice","indexOf","filter","_this4","type","width","search_icon","paddingTop","ComplianceRemediationButton","selectedRules","variant","header","hasCheckbox","oneRow","hasOwnProperty","expandable","footer","numberOfItems","onPerPageSelect","onSetPage","SmartComponents_SystemRulesTable_SystemRulesTable","QUERY","src_default","_templateObject","SystemDetails_SystemDetails","SystemDetails","Breadcrumbs","systemId","match","params","inventoryId","react_apollo_browser_umd","query","variables","_ref","data","error","loading","system","profiles","padding","items","navigate","current"],"mappings":"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","file":"js/SystemDetails.js","sourcesContent":["export function onNavigate(event, item) {\n    this.props.history.push(item);\n}\n","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","import React from 'react';\nimport propTypes from 'prop-types';\nimport * as reactRouterDom from 'react-router-dom';\nimport * as reactCore from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { registry as registryDecorator } from '@red-hat-insights/insights-frontend-components';\n\n@registryDecorator()\nclass InventoryDetails extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            InventoryCmp: () => <div>Loading...</div>\n        };\n\n        this.fetchInventory = this.fetchInventory.bind(this);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const {\n            inventoryConnector,\n            mergeWithDetail\n        } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons\n        });\n\n        this.getRegistry().register({\n            ...mergeWithDetail()\n        });\n\n        this.setState({\n            InventoryCmp: inventoryConnector().InventoryDetail\n        });\n    }\n\n    render() {\n        const { InventoryCmp } = this.state;\n        return (\n            <React.Fragment>\n                <InventoryCmp hideBack />\n            </React.Fragment>\n        );\n    }\n}\n\nInventoryDetails.propTypes = {\n    entity: propTypes.object\n};\n\nexport default InventoryDetails;\n","import React from 'react';\nimport { CheckCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport {\n    Card,\n    CardBody,\n    CardFooter,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\n\nclass SystemPolicyCard extends React.Component {\n    constructor(policy) {\n        super();\n        this.policy = policy.policy;\n    }\n\n    complianceIcon(compliant) {\n        let result;\n        if (compliant) {\n            result = <div style={{ fontSize: 'large', color: '#92d400' }} id='policy_compliant'>\n                <CheckCircleIcon /> Compliant\n            </div>;\n        } else {\n            result = <div style={{ fontSize: 'large', color: '#a30000' }} id='policy_compliant'>\n                <ExclamationCircleIcon/> Noncompliant\n            </div>;\n        }\n\n        return result;\n    }\n\n    render() {\n        const totalRules = this.policy.rules_passed + this.policy.rules_failed;\n        return (\n            <Card>\n                <CardBody>\n                    <TextContent>\n                        <Text style={{ marginBottom: '0px' }} component={TextVariants.small}>External Policy</Text>\n                        <Text style={{ marginTop: '0px' }} component={TextVariants.h4}>{this.policy.name}</Text>\n                    </TextContent>\n                    <TextContent>\n                        { this.complianceIcon(this.policy.compliant) }\n                        <Text component={TextVariants.small}>\n                            { this.policy.rules_passed } of { totalRules } passed\n                        </Text>\n                        <Text component={TextVariants.medium}>\n                            Profile <br/>\n                            { this.policy.ref_id }\n                        </Text>\n                    </TextContent>\n                </CardBody>\n                <CardFooter>\n                    <TextContent>\n                        <Text component={TextVariants.small}>\n                          Last scanned: { this.policy.last_scanned }\n                        </Text>\n                    </TextContent>\n                </CardFooter>\n            </Card>\n        );\n    };\n};\n\nexport default SystemPolicyCard;\n","import React from 'react';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { routerParams } from '@red-hat-insights/insights-frontend-components';\nimport SystemPolicyCard from '../SystemPolicyCard/SystemPolicyCard';\nimport propTypes from 'prop-types';\n\nclass SystemPolicyCards extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    systemPolicyCards() {\n        const policyCards = this.props.policies.map(\n            (policy, i) =>\n                <GridItem span={4} key={i}>\n                    <SystemPolicyCard policy={policy} />\n                </GridItem>\n        );\n        return policyCards;\n    }\n\n    render() {\n        if (this.props.policies === undefined) {\n            return ('Loading policy information...');\n        } else {\n            return (\n                <div id=\"system_policy_cards\">\n                    <Grid gutter='md'>\n                        { this.systemPolicyCards() }\n                    </Grid>\n                </div>\n            );\n        }\n    }\n}\n\nSystemPolicyCards.propTypes = {\n    policies: propTypes.array\n};\n\nexport default routerParams(SystemPolicyCards);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport ComplianceRemediationButton from '../ComplianceRemediationButton/ComplianceRemediationButton';\nimport { CheckCircleIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { Table, Input, Pagination, routerParams } from '@red-hat-insights/insights-frontend-components';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { Grid, GridItem, Text, TextVariants } from '@patternfly/react-core';\n\nclass SystemRulesTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            openNodes: [],\n            page: 1,\n            itemsPerPage: 10,\n            rows: this.rulesToRows(this.props.profileRules),\n            currentRows: []\n        };\n        this.state.currentRows = this.currentRows(1, 10);\n        this.onExpandClick = this.onExpandClick.bind(this);\n        this.setPage = this.setPage.bind(this);\n        this.setPerPage = this.setPerPage.bind(this);\n        this.onItemSelect = this.onItemSelect.bind(this);\n    }\n\n    setPage(page) {\n        this.setState(() => (\n            {\n                page,\n                currentRows: this.currentRows(page, this.state.itemsPerPage)\n            }\n        ));\n    }\n\n    setPerPage(itemsPerPage) {\n        this.setState(() => (\n            {\n                itemsPerPage,\n                currentRows: this.currentRows(this.state.page, itemsPerPage)\n            }\n        ));\n    }\n\n    currentRows(page, itemsPerPage) {\n        return this.state.rows.slice(\n            (page - 1) * itemsPerPage * 2,\n            page * itemsPerPage * 2\n        );\n    }\n\n    onItemSelect(_event, key, selected) {\n        let { rows, page, itemsPerPage } = this.state;\n        const firstIndex = page === 1 ? 0 : page * itemsPerPage - itemsPerPage;\n        rows[firstIndex + Number(key)].selected = selected;\n        this.setState({\n            rows\n        });\n    }\n\n    rulesToRows(profileRules) {\n        const rows = [];\n        profileRules.forEach((profileRule) => (\n            profileRule.rules.forEach((rule, i) => {\n                rows.push({\n                    children: [i * 2 + 1],\n                    cells: [\n                        <Text key={i} component={TextVariants.a}>{rule.title}</Text>,\n                        rule.ref_id,\n                        profileRule.profile,\n                        rule.severity,\n                        (rule.compliant ? <CheckCircleIcon style={{ color: '#92d400' }}/> :\n                            <ExclamationCircleIcon style={{ color: '#a30000' }}/>)\n                    ]\n                });\n                rows.push({\n                    isOpen: false,\n                    cells: [\n                        {\n                            title: <React.Fragment key={i}>\n                                <div id='rule-description'>\n                                    <b>Description</b>\n                                    <br/>\n                                    <p>{rule.description}</p>\n                                </div>\n                                <br/>\n                                <div id='rule-rationale'>\n                                    <b>Rationale</b>\n                                    <br/>\n                                    <p>{rule.rationale}</p>\n                                </div>\n                            </React.Fragment>,\n                            colSpan: 5\n                        }\n                    ]\n                });\n            })\n        ));\n        return rows;\n    }\n\n    onExpandClick(_event, row, rowKey) {\n        const activeRow = this.state.rows[rowKey];\n        const isActive = !activeRow.active;\n        let openNodes = this.state.openNodes;\n        activeRow.active = isActive;\n        if (!isActive) {\n            activeRow.children.forEach(oneChild => {\n                openNodes.splice(openNodes.indexOf(oneChild), 1);\n            });\n        } else {\n            openNodes = [\n                ...openNodes,\n                ...row.children\n            ];\n        }\n\n        this.setState({\n            openNodes,\n            rows: this.state.rows\n        });\n    }\n\n    selectedRules() {\n        return this.state.rows.filter(row => row.selected).map(row => row.cells[1]);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Grid gutter=\"sm\">\n                    <GridItem span={10}>\n                        <Input\n                            id=\"search\"\n                            type=\"text\"\n                            style={{ width: '200px' }}\n                        />{' '}\n                        <SearchIcon style={{ paddingTop: '4px' }} />\n                    </GridItem>\n                    <GridItem span={2}>\n                        <ComplianceRemediationButton selectedRules={this.selectedRules()} />\n                    </GridItem>\n\n                    <GridItem span={12}>\n                        <Table\n                            variant='large'\n                            header={['Rule', 'Reference ID', 'Policy', 'Severity', 'Passed']}\n                            hasCheckbox\n                            onItemSelect={this.onItemSelect}\n                            rows={this.state.currentRows.map((oneRow, key) => {\n                                if (!oneRow.hasOwnProperty('isOpen')) {\n                                    return oneRow;\n                                }\n\n                                oneRow.isOpen = this.state.openNodes.indexOf(key) !== -1;\n                                return oneRow;\n                            })}\n                            expandable={true}\n                            onExpandClick={this.onExpandClick}\n                            footer={<Pagination\n                                numberOfItems={this.state.rows.length}\n                                onPerPageSelect={ this.setPerPage }\n                                page={ this.state.page }\n                                onSetPage={ this.setPage }\n                                itemsPerPage={ this.state.itemsPerPage }\n                            />}\n                        />\n                    </GridItem>\n                </Grid>\n            </React.Fragment>\n        );\n    }\n}\n\nSystemRulesTable.propTypes = {\n    profileRules: propTypes.array\n};\n\nexport default routerParams(SystemRulesTable);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Breadcrumbs, PageHeader, Main, routerParams } from '@red-hat-insights/insights-frontend-components';\nimport { onNavigate } from '../../Utilities/Breadcrumbs';\nimport InventoryDetails from '../InventoryDetails/InventoryDetails';\nimport SystemPolicyCards from '../SystemPolicyCards/SystemPolicyCards';\nimport SystemRulesTable from '../SystemRulesTable/SystemRulesTable';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { Card, CardBody } from '@patternfly/react-core';\nconst QUERY = gql`\nquery System($systemId: String!){\n    system(id: $systemId) {\n        id\n        name\n        profiles {\n            name\n            ref_id\n            compliant(system_id: $systemId)\n            rules_failed(system_id: $systemId)\n            rules_passed(system_id: $systemId)\n            last_scanned(system_id: $systemId)\n            rules {\n                title\n                severity\n                rationale\n                ref_id\n                description\n                compliant(system_id: $systemId)\n            }\n        }\n\t}\n}\n`;\n\nclass SystemDetails extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onNavigate = onNavigate.bind(this);\n    }\n\n    render() {\n        const systemId = this.props.match.params.inventoryId;\n        return (\n            <Query query={QUERY} variables={{ systemId }}>\n                {({ data, error, loading }) => {\n                    let rules = {};\n                    if (error) { return 'Oops! Error loading System data: ' + error; }\n\n                    if (loading) {\n                        return (<PageHeader>Loading System details...</PageHeader>);\n                    } else {\n                        rules = data.system.profiles.map((profile) => ({\n                            profile: profile.name,\n                            rules: profile.rules\n                        }));\n                    }\n\n                    return (\n                        <React.Fragment>\n                            <PageHeader>\n                                <Breadcrumbs\n                                    style={{ padding: '0px' }}\n                                    items={[{ title: 'Systems', navigate: '/systems' }]}\n                                    current={data.system.name}\n                                    onNavigate={this.onNavigate}\n                                />\n                                <InventoryDetails />\n                                <br/>\n                            </PageHeader>\n                            <Main>\n                                <SystemPolicyCards policies={data.system.profiles} />\n                                <br/>\n                                <Card>\n                                    <CardBody>\n                                        <SystemRulesTable profileRules={rules} />\n                                    </CardBody>\n                                </Card>\n                            </Main>\n                        </React.Fragment>\n                    );\n                }}\n            </Query>\n        );\n    }\n}\n\nSystemDetails.propTypes = {\n    match: propTypes.object\n};\n\nexport default routerParams(SystemDetails);\n"],"sourceRoot":""}