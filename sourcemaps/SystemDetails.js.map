{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js","webpack:///./node_modules/graphql-tag/src/index.js","webpack:///./node_modules/@babel/runtime/helpers/objectSpread.js","webpack:///./node_modules/@babel/runtime/helpers/defineProperty.js","webpack:///./src/Utilities/Breadcrumbs.js","webpack:///./src/SmartComponents/InventoryDetails/InventoryDetails.js","webpack:///./src/SmartComponents/SystemDetails/SystemDetails.js"],"names":["module","exports","strings","raw","slice","Object","freeze","defineProperties","value","parse","__webpack_require__","normalize","string","replace","trim","docCache","fragmentSourceMap","cacheKeyFromLoc","loc","source","body","substring","start","end","printFragmentWarnings","experimentalFragmentVariables","parseDocument","doc","cacheKey","parsed","kind","Error","stripLoc","removeLocAtThisLevel","docType","prototype","toString","call","map","d","startToken","endToken","key","valueType","keys","hasOwnProperty","ast","astFragmentMap","definitions","i","length","fragmentDefinition","fragmentName","name","sourceKey","console","warn","push","processFragments","gql","args","Array","arguments","literals","result","default","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","defineProperty","target","ownKeys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","obj","configurable","writable","onNavigate","event","item","this","props","history","__webpack_exports__","InventoryDetails_InventoryDetails","insights_frontend_components","InventoryDetails","_this","classCallCheck_default","possibleConstructorReturn_default","getPrototypeOf_default","state","InventoryCmp","react_default","a","createElement","size","md","fetchInventory","bind","assertThisInitialized_default","insights","loadInventory","react","reactRouterDom","es","reactCore","esm","reactIcons","dist_esm","inventoryConnector","mergeWithDetail","getRegistry","register","objectSpread_default","setState","InventoryDetail","Fragment","hideBack","Component","propTypes","entity","prop_types_default","object","SmartComponents_InventoryDetails_InventoryDetails","QUERY","src_default","_templateObject","SystemDetails_SystemDetails","SystemDetails","Breadcrumbs","_this2","inventoryId","match","params","hidePassed","location","query","react_apollo_browser_umd","variables","_ref","data","error","loading","networkError","statusCode","window","chrome","auth","logout","style","padding","items","title","navigate","current","system","sendData","getData"],"mappings":"2EAYAA,EAAAC,QAZA,SAAAC,EAAAC,GAKA,OAJAA,IACAA,EAAAD,EAAAE,MAAA,IAGAC,OAAAC,OAAAD,OAAAE,iBAAAL,GACAC,KACAK,MAAAH,OAAAC,OAAAH,6BCPA,IAEAM,EAFaC,EAAQ,IAErBD,MAIA,SAAAE,EAAAC,GACA,OAAAA,EAAAC,QAAA,eAAAC,OAIA,IAAAC,KAGAC,KAEA,SAAAC,EAAAC,GACA,OAAAP,EAAAO,EAAAC,OAAAC,KAAAC,UAAAH,EAAAI,MAAAJ,EAAAK,MAYA,IAAAC,GAAA,EA2FA,IAAAC,GAAA,EACA,SAAAC,EAAAC,GACA,IAAAC,EAAAjB,EAAAgB,GAEA,GAAAZ,EAAAa,GACA,OAAAb,EAAAa,GAGA,IAAAC,EAAApB,EAAAkB,GAA2BF,kCAC3B,IAAAI,GAAA,aAAAA,EAAAC,KACA,UAAAC,MAAA,iCASA,OAHAF,EA5DA,SAAAG,EAAAL,EAAAM,GACA,IAAAC,EAAA7B,OAAA8B,UAAAC,SAAAC,KAAAV,GAEA,sBAAAO,EACA,OAAAP,EAAAW,IAAA,SAAAC,GACA,OAAAP,EAAAO,EAAAN,KAIA,uBAAAC,EACA,UAAAH,MAAA,qBAKAE,GAAAN,EAAAT,YACAS,EAAAT,IAIAS,EAAAT,aACAS,EAAAT,IAAAsB,kBACAb,EAAAT,IAAAuB,UAGA,IACAC,EACAlC,EACAmC,EAHAC,EAAAvC,OAAAuC,KAAAjB,GAKA,IAAAe,KAAAE,EACAA,EAAAC,eAAAH,KACAlC,EAAAmB,EAAAiB,EAAAF,IAGA,qBAFAC,EAAAtC,OAAA8B,UAAAC,SAAAC,KAAA7B,KAEA,mBAAAmC,IACAhB,EAAAiB,EAAAF,IAAAV,EAAAxB,GAAA,KAKA,OAAAmB,EAmBAK,CADAH,EAzGA,SAAAiB,GAIA,IAHA,IAAAC,KACAC,KAEAC,EAAA,EAAiBA,EAAAH,EAAAE,YAAAE,OAA4BD,IAAA,CAC7C,IAAAE,EAAAL,EAAAE,YAAAC,GAEA,0BAAAE,EAAArB,KAAA,CACA,IAAAsB,EAAAD,EAAAE,KAAA7C,MACA8C,EAAArC,EAAAkC,EAAAjC,KAGAF,EAAA6B,eAAAO,KAAApC,EAAAoC,GAAAE,IAIA9B,GACA+B,QAAAC,KAAA,+BAAAJ,EAAA,iMAKApC,EAAAoC,GAAAE,IAAA,GAEOtC,EAAA6B,eAAAO,KACPpC,EAAAoC,MACApC,EAAAoC,GAAAE,IAAA,GAGAP,EAAAO,KACAP,EAAAO,IAAA,EACAN,EAAAS,KAAAN,SAGAH,EAAAS,KAAAN,GAKA,OADAL,EAAAE,cACAF,EAkEAY,CAAA7B,IACA,GACAd,EAAAa,GAAAC,EAEAA,EAYA,SAAA8B,IAQA,IAPA,IAAAC,EAAAC,MAAA1B,UAAA/B,MAAAiC,KAAAyB,WAEAC,EAAAH,EAAA,GAGAI,EAAA,mBAAAD,IAAA,GAEAd,EAAA,EAAiBA,EAAAW,EAAAV,OAAiBD,IAClCW,EAAAX,IAAAW,EAAAX,GAAAnB,MAAA,aAAA8B,EAAAX,GAAAnB,KACAkC,GAAAJ,EAAAX,GAAA/B,IAAAC,OAAAC,KAEA4C,GAAAJ,EAAAX,GAGAe,GAAAD,EAAAd,GAGA,OAAAvB,EAAAsC,GAIAL,EAAAM,QAAAN,EACAA,EAAAO,YAzJA,WACAnD,KACAC,MAwJA2C,EAAAQ,wBAvGA,WACA3C,GAAA,GAuGAmC,EAAAS,oCAlCA,WACA3C,GAAA,GAkCAkC,EAAAU,qCA/BA,WACA5C,GAAA,GAgCAzB,EAAAC,QAAA0D,uBCnLA,IAAAW,EAAqB5D,EAAQ,KAqB7BV,EAAAC,QAnBA,SAAAsE,GACA,QAAAtB,EAAA,EAAiBA,EAAAa,UAAAZ,OAAsBD,IAAA,CACvC,IAAA9B,EAAA,MAAA2C,UAAAb,GAAAa,UAAAb,MACAuB,EAAAnE,OAAAuC,KAAAzB,GAEA,mBAAAd,OAAAoE,wBACAD,IAAAE,OAAArE,OAAAoE,sBAAAtD,GAAAwD,OAAA,SAAAC,GACA,OAAAvE,OAAAwE,yBAAA1D,EAAAyD,GAAAE,eAIAN,EAAAO,QAAA,SAAArC,GACA4B,EAAAC,EAAA7B,EAAAvB,EAAAuB,MAIA,OAAA6B,sBCHAvE,EAAAC,QAfA,SAAA+E,EAAAtC,EAAAlC,GAYA,OAXAkC,KAAAsC,EACA3E,OAAAiE,eAAAU,EAAAtC,GACAlC,QACAsE,YAAA,EACAG,cAAA,EACAC,UAAA,IAGAF,EAAAtC,GAAAlC,EAGAwE,qCCZO,SAASG,EAAWC,EAAOC,GAC9BC,KAAKC,MAAMC,QAAQ/B,KAAK4B,GAD5B3E,EAAA6B,EAAAkD,EAAA,sBAAAN,0SCQMO,EADLrF,OAAAsF,EAAA,SAAAtF,iBAEG,SAAAuF,EAAYL,GAAO,IAAAM,EAAA,OAAAC,IAAAR,KAAAM,IACfC,EAAAE,IAAAT,KAAAU,IAAAJ,GAAAvD,KAAAiD,KAAMC,KACDU,OACDC,aAAc,kBAAMC,EAAAC,EAAAC,cAACV,EAAA,UAASW,KAAOX,EAAA,aAAaY,OAGtDV,EAAKW,eAAiBX,EAAKW,eAAeC,KAApBC,QAAAb,KACtBA,EAAKW,iBAPUX,0LAcLc,SAASC,eACfC,MAAOV,EAAAC,EACPU,eAAAC,EACAC,UAAAC,EACAC,WAAAC,oBANAC,uBACAC,oBAQJ/B,KAAKgC,cAAcC,SAAnBC,OACOH,MAGP/B,KAAKmC,UACDvB,aAAckB,IAAqBM,qJAIlC,IACGxB,EAAiBZ,KAAKW,MAAtBC,aACR,OACIC,EAAAC,EAAAC,cAACF,EAAAC,EAAMuB,SAAP,KACIxB,EAAAC,EAAAC,cAACH,GAAa0B,UAAQ,YAnCPzB,EAAAC,EAAMyB,eAyCrCnC,EAAiBoC,WACbC,OAAQC,EAAA5B,EAAU6B,QAGP,IAAAC,EAAA,gLCrCf,IAAMC,QAAQC,GAAHC,KAQLC,cACF,SAAAC,EAAYhD,GAAO,IAAAM,EAAA,OAAAC,IAAAR,KAAAiD,IACf1C,EAAAE,IAAAT,KAAAU,IAAAuC,GAAAlG,KAAAiD,KAAMC,KACDJ,WAAaqD,EAAA,EAAW/B,KAAXC,QAAAb,KAFHA,wDAKV,IAAA4C,EAAAnD,KAEkBoD,EACnBpD,KAAKC,MADLoD,MAASC,OAAUF,YAEjBG,EAAavD,KAAKC,MAAMuD,SAASC,OAASzD,KAAKC,MAAMuD,SAASC,MAAMF,WAC1E,OACI1C,EAAAC,EAAAC,cAAC2C,EAAA,OAAMD,MAAOZ,EAAOc,WAAaP,gBAC7B,SAAAQ,GAA8B,IAA3BC,EAA2BD,EAA3BC,KAAMC,EAAqBF,EAArBE,MAAOC,EAAcH,EAAdG,QACb,OAAID,GACsC,MAAlCA,EAAME,aAAaC,YACnBC,OAAO7C,SAAS8C,OAAOC,KAAKC,SAGzB,qCAAuCP,GAG9CC,EACQlD,EAAAC,EAAAC,cAACV,EAAA,WAAD,KAAYQ,EAAAC,EAAAC,cAACV,EAAA,UAASW,KAAOX,EAAA,aAAaY,MAIlDJ,EAAAC,EAAAC,cAACF,EAAAC,EAAMuB,SAAP,KACIxB,EAAAC,EAAAC,cAACV,EAAA,WAAD,KACIQ,EAAAC,EAAAC,cAACV,EAAA,aACGiE,OAASC,QAAS,OAClBC,QAAUC,MAAO,UAAWC,SAAU,aACtCC,QAASd,EAAKe,OAAO7G,KACrB8B,WAAYsD,EAAKtD,aAErBgB,EAAAC,EAAAC,cAAC6B,GAAiBiC,SAAU1B,EAAK2B,UACjCjE,EAAAC,EAAAC,cAAA,YAEJF,EAAAC,EAAAC,cAACV,EAAA,KAAD,KACIQ,EAAAC,EAAAC,cAACV,EAAA,YAAwBkD,WAAYA,eAvCzC1C,EAAAC,EAAMyB,WAiDlCS,EAAcR,WACVa,MAAOX,EAAA5B,EAAU6B,OACjBa,SAAUd,EAAA5B,EAAU6B,QAGTxC,EAAA,QAAApF,OAAAsF,EAAA,cAAa2C","file":"js/SystemDetails.js","sourcesContent":["function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nmodule.exports = _taggedTemplateLiteral;","var parser = require('graphql/language/parser');\n\nvar parse = parser.parse;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\n// A map docString -> graphql document\nvar docCache = {};\n\n// A map fragmentName -> [normalized source]\nvar fragmentSourceMap = {};\n\nfunction cacheKeyFromLoc(loc) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// For testing.\nfunction resetCaches() {\n  docCache = {};\n  fragmentSourceMap = {};\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nvar printFragmentWarnings = true;\nfunction processFragments(ast) {\n  var astFragmentMap = {};\n  var definitions = [];\n\n  for (var i = 0; i < ast.definitions.length; i++) {\n    var fragmentDefinition = ast.definitions[i];\n\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n\n      // We know something about this fragment\n      if (fragmentSourceMap.hasOwnProperty(fragmentName) && !fragmentSourceMap[fragmentName][sourceKey]) {\n\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n\n      } else if (!fragmentSourceMap.hasOwnProperty(fragmentName)) {\n        fragmentSourceMap[fragmentName] = {};\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n      }\n\n      if (!astFragmentMap[sourceKey]) {\n        astFragmentMap[sourceKey] = true;\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  }\n\n  ast.definitions = definitions;\n  return ast;\n}\n\nfunction disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nfunction stripLoc(doc, removeLocAtThisLevel) {\n  var docType = Object.prototype.toString.call(doc);\n\n  if (docType === '[object Array]') {\n    return doc.map(function (d) {\n      return stripLoc(d, removeLocAtThisLevel);\n    });\n  }\n\n  if (docType !== '[object Object]') {\n    throw new Error('Unexpected input.');\n  }\n\n  // We don't want to remove the root loc field so we can use it\n  // for fragment substitution (see below)\n  if (removeLocAtThisLevel && doc.loc) {\n    delete doc.loc;\n  }\n\n  // https://github.com/apollographql/graphql-tag/issues/40\n  if (doc.loc) {\n    delete doc.loc.startToken;\n    delete doc.loc.endToken;\n  }\n\n  var keys = Object.keys(doc);\n  var key;\n  var value;\n  var valueType;\n\n  for (key in keys) {\n    if (keys.hasOwnProperty(key)) {\n      value = doc[keys[key]];\n      valueType = Object.prototype.toString.call(value);\n\n      if (valueType === '[object Object]' || valueType === '[object Array]') {\n        doc[keys[key]] = stripLoc(value, true);\n      }\n    }\n  }\n\n  return doc;\n}\n\nvar experimentalFragmentVariables = false;\nfunction parseDocument(doc) {\n  var cacheKey = normalize(doc);\n\n  if (docCache[cacheKey]) {\n    return docCache[cacheKey];\n  }\n\n  var parsed = parse(doc, { experimentalFragmentVariables: experimentalFragmentVariables });\n  if (!parsed || parsed.kind !== 'Document') {\n    throw new Error('Not a valid GraphQL document.');\n  }\n\n  // check that all \"new\" fragments inside the documents are consistent with\n  // existing fragments of the same name\n  parsed = processFragments(parsed);\n  parsed = stripLoc(parsed, false);\n  docCache[cacheKey] = parsed;\n\n  return parsed;\n}\n\nfunction enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nfunction disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nfunction gql(/* arguments */) {\n  var args = Array.prototype.slice.call(arguments);\n\n  var literals = args[0];\n\n  // We always get literals[0] and then matching post literals for each arg given\n  var result = (typeof(literals) === \"string\") ? literals : literals[0];\n\n  for (var i = 1; i < args.length; i++) {\n    if (args[i] && args[i].kind && args[i].kind === 'Document') {\n      result += args[i].loc.source.body;\n    } else {\n      result += args[i];\n    }\n\n    result += literals[i];\n  }\n\n  return parseDocument(result);\n}\n\n// Support typescript, which isn't as nice as Babel about default exports\ngql.default = gql;\ngql.resetCaches = resetCaches;\ngql.disableFragmentWarnings = disableFragmentWarnings;\ngql.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;\ngql.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;\n\nmodule.exports = gql;\n","var defineProperty = require(\"./defineProperty\");\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nmodule.exports = _objectSpread;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","export function onNavigate(event, item) {\n    this.props.history.push(item);\n}\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport * as reactRouterDom from 'react-router-dom';\nimport * as reactCore from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Skeleton, SkeletonSize, registry as registryDecorator } from '@red-hat-insights/insights-frontend-components';\n\n@registryDecorator()\nclass InventoryDetails extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            InventoryCmp: () => <Skeleton size={ SkeletonSize.md } />\n        };\n\n        this.fetchInventory = this.fetchInventory.bind(this);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const {\n            inventoryConnector,\n            mergeWithDetail\n        } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons\n        });\n\n        this.getRegistry().register({\n            ...mergeWithDetail()\n        });\n\n        this.setState({\n            InventoryCmp: inventoryConnector().InventoryDetail\n        });\n    }\n\n    render() {\n        const { InventoryCmp } = this.state;\n        return (\n            <React.Fragment>\n                <InventoryCmp hideBack />\n            </React.Fragment>\n        );\n    }\n}\n\nInventoryDetails.propTypes = {\n    entity: propTypes.object\n};\n\nexport default InventoryDetails;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Breadcrumbs,\n    PageHeader,\n    Main,\n    Skeleton,\n    SkeletonSize,\n    routerParams\n} from '@red-hat-insights/insights-frontend-components';\nimport { onNavigate } from '../../Utilities/Breadcrumbs';\nimport InventoryDetails from '../InventoryDetails/InventoryDetails';\nimport { Compliance as ComplianceSystemDetails } from '@red-hat-insights/insights-frontend-components';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\n\nconst QUERY = gql`\nquery System($inventoryId: String!){\n    system(id: $inventoryId) {\n        name\n    }\n}\n`;\n\nclass SystemDetails extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onNavigate = onNavigate.bind(this);\n    }\n\n    render() {\n        const {\n            match: { params: { inventoryId } }\n        } = this.props;\n        const hidePassed = this.props.location.query && this.props.location.query.hidePassed;\n        return (\n            <Query query={QUERY} variables={{ inventoryId }}>\n                {({ data, error, loading }) => {\n                    if (error) {\n                        if (error.networkError.statusCode === 401) {\n                            window.insights.chrome.auth.logout();\n                        }\n\n                        return 'Oops! Error loading Systems data: ' + error;\n                    }\n\n                    if (loading) {\n                        return (<PageHeader><Skeleton size={ SkeletonSize.md } /></PageHeader>);\n                    }\n\n                    return (\n                        <React.Fragment>\n                            <PageHeader>\n                                <Breadcrumbs\n                                    style={{ padding: '0px' }}\n                                    items={[{ title: 'Systems', navigate: '/systems' }]}\n                                    current={data.system.name}\n                                    onNavigate={this.onNavigate}\n                                />\n                                <InventoryDetails sendData={this.getData} />\n                                <br/>\n                            </PageHeader>\n                            <Main>\n                                <ComplianceSystemDetails hidePassed={hidePassed} />\n                            </Main>\n                        </React.Fragment>\n                    );\n                }}\n            </Query>\n        );\n    }\n}\n\nSystemDetails.propTypes = {\n    match: propTypes.object,\n    location: propTypes.object\n};\n\nexport default routerParams(SystemDetails);\n"],"sourceRoot":""}