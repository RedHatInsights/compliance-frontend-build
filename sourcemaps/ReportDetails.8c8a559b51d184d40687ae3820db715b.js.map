{"version":3,"file":"js/ReportDetails.13c0891d1123e8f89547.js","mappings":"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","sources":["webpack:///./src/SmartComponents/ReportDetails/ReportDetails.js","webpack:///./src/SmartComponents/ReportDownload/constants.js","webpack:///./src/SmartComponents/ReportDownload/Components/ExportPDFForm.js","webpack:///./src/SmartComponents/ReportDownload/hooks/helpers.js","webpack:///./src/SmartComponents/ReportDownload/hooks/useQueryExportData.js","webpack:///./src/SmartComponents/ReportDownload/Components/ReportPDF/StyleSheet.js","webpack:///./src/SmartComponents/ReportDownload/Components/ReportPDF/SystemsTable.js","webpack:///./src/SmartComponents/ReportDownload/Components/ReportPDF/UnsupportedSystemsTable.js","webpack:///./src/SmartComponents/ReportDownload/Components/ReportPDF/RulesTable.js","webpack:///./src/SmartComponents/ReportDownload/Components/ReportPDF/PanelItem.js","webpack:///./src/SmartComponents/ReportDownload/Components/ReportPDF/SubSection.js","webpack:///./src/SmartComponents/ReportDownload/Components/ReportPDF/ComplianceChart.js","webpack:///./src/SmartComponents/ReportDownload/Components/ReportPDF.js","webpack:///./src/SmartComponents/ReportDownload/hooks/useSupportedSsgFinder.js","webpack:///./src/SmartComponents/ReportDownload/hooks/usePDFExport.js","webpack:///./src/SmartComponents/ReportDownload/hooks/usePDFBuilder.js","webpack:///./src/SmartComponents/ReportDownload/ReportDownload.js","webpack:///./src/SmartComponents/ReportDownload/hooks/useExportSettings.js"],"sourcesContent":["/* eslint-disable react/display-name */\nimport React from 'react';\nimport black300 from '@patternfly/react-tokens/dist/esm/global_palette_black_300';\nimport blue200 from '@patternfly/react-tokens/dist/esm/chart_color_blue_200';\nimport blue300 from '@patternfly/react-tokens/dist/esm/chart_color_blue_300';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { ChartDonut, ChartThemeVariant } from '@patternfly/react-charts';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Grid,\n  GridItem,\n  Text,\n} from '@patternfly/react-core';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { fixedPercentage, pluralize } from 'Utilities/TextHelper';\nimport {\n  BackgroundLink,\n  BreadcrumbLinkItem,\n  ReportDetailsContentLoader,\n  ReportDetailsDescription,\n  StateViewWithError,\n  StateViewPart,\n  UnsupportedSSGVersion,\n  SubPageTitle,\n} from 'PresentationalComponents';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport { InventoryTable } from 'SmartComponents';\nimport '@/Charts.scss';\nimport './ReportDetails.scss';\nimport { GET_SYSTEMS } from '../SystemsTable/constants';\nimport * as Columns from '../SystemsTable/Columns';\n\nexport const QUERY = gql`\n  query Profile($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      testResultHostCount\n      compliantHostCount\n      unsupportedHostCount\n      complianceThreshold\n      majorOsVersion\n      lastScanned\n      policyType\n      policy {\n        id\n        name\n      }\n      benchmark {\n        id\n        version\n      }\n      businessObjective {\n        id\n        title\n      }\n    }\n  }\n`;\n\nexport const ReportDetails = ({ route }) => {\n  const { report_id: policyId } = useParams();\n  const pdfReportEnabled = useFeature('pdfReport');\n  const { data, error, loading } = useQuery(QUERY, {\n    variables: { policyId },\n    fetchPolicy: 'no-cache',\n  });\n  let donutValues = [];\n  let donutId = 'loading-donut';\n  let chartColorScale;\n  let profile = {};\n  let policyName;\n  let legendData;\n  let compliancePercentage;\n  let pageTitle;\n\n  if (!loading && data) {\n    profile = data.profile;\n    policyName = profile.policy.name;\n    pageTitle = `Report: ${policyName}`;\n    const compliantHostCount = profile.compliantHostCount;\n    const testResultHostCount = profile.testResultHostCount;\n    donutId = profile.name.replace(/ /g, '');\n    donutValues = [\n      { x: 'Compliant', y: testResultHostCount ? compliantHostCount : '0' },\n      { x: 'Non-compliant', y: testResultHostCount - compliantHostCount },\n    ];\n    chartColorScale = (testResultHostCount === 0 && [black300.value]) || [\n      blue300.value,\n      blue200.value,\n    ];\n    legendData = [\n      {\n        name:\n          donutValues[0].y +\n          ' ' +\n          pluralize(donutValues[0].y, 'system') +\n          ' compliant',\n      },\n      {\n        name:\n          donutValues[1].y +\n          ' ' +\n          pluralize(donutValues[1].y, 'system') +\n          ' non-compliant',\n      },\n    ];\n    compliancePercentage = testResultHostCount\n      ? fixedPercentage(\n          Math.floor(\n            100 * (donutValues[0].y / (donutValues[0].y + donutValues[1].y))\n          )\n        )\n      : 0;\n  }\n\n  useTitleEntity(route, policyName);\n\n  return (\n    <StateViewWithError stateValues={{ error, data, loading }}>\n      <StateViewPart stateKey=\"loading\">\n        <PageHeader>\n          <ReportDetailsContentLoader />\n        </PageHeader>\n        <Main>\n          <EmptyTable>\n            <Spinner />\n          </EmptyTable>\n        </Main>\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <PageHeader>\n          <Breadcrumb ouiaId=\"ReportDetailsPathBreadcrumb\">\n            <BreadcrumbLinkItem to=\"/\">Compliance</BreadcrumbLinkItem>\n            <BreadcrumbLinkItem to=\"/reports\">Reports</BreadcrumbLinkItem>\n            <BreadcrumbItem isActive>{pageTitle}</BreadcrumbItem>\n          </Breadcrumb>\n          <Grid hasGutter>\n            <GridItem sm={9} md={9} lg={9} xl={9}>\n              <PageHeaderTitle title={pageTitle} />\n              <SubPageTitle>{profile.policyType}</SubPageTitle>\n            </GridItem>\n            <GridItem\n              className=\"report-details-button\"\n              sm={3}\n              md={3}\n              lg={3}\n              xl={3}\n            >\n              {pdfReportEnabled && (\n                <BackgroundLink\n                  state={{ profile }}\n                  to={`/reports/${profile.id}/pdf`}\n                >\n                  <Button\n                    ouiaId=\"ReportDetailsDownloadReportPDFLink\"\n                    variant=\"primary\"\n                    className=\"pf-u-mr-md\"\n                  >\n                    Download PDF\n                  </Button>\n                </BackgroundLink>\n              )}\n              <BackgroundLink\n                state={{ profile }}\n                to={`/reports/${profile.id}/delete`}\n              >\n                <Button\n                  variant=\"link\"\n                  ouiaId=\"ReportDetailsDeleteReportLink\"\n                  isInline\n                >\n                  Delete report\n                </Button>\n              </BackgroundLink>\n            </GridItem>\n          </Grid>\n          <Grid hasGutter>\n            <GridItem sm={12} md={12} lg={12} xl={6}>\n              <div className=\"chart-inline\">\n                <div className=\"chart-container\">\n                  <ChartDonut\n                    data={donutValues}\n                    identifier={donutId}\n                    title={compliancePercentage}\n                    subTitle=\"Compliant\"\n                    themeVariant={ChartThemeVariant.light}\n                    colorScale={chartColorScale}\n                    style={{ fontSize: 20 }}\n                    constrainToVisibleArea={true}\n                    innerRadius={88}\n                    width={462}\n                    legendPosition=\"right\"\n                    legendData={legendData}\n                    legendOrientation=\"vertical\"\n                    padding={{\n                      bottom: 20,\n                      left: 0,\n                      right: 250,\n                      top: 20,\n                    }}\n                  />\n                </div>\n              </div>\n              {profile.unsupportedHostCount > 0 && (\n                <Text>\n                  <UnsupportedSSGVersion showHelpIcon>\n                    <strong className=\"ins-c-warning-text\">\n                      {profile.unsupportedHostCount} systems not supported\n                    </strong>\n                  </UnsupportedSSGVersion>\n                </Text>\n              )}\n            </GridItem>\n            <GridItem sm={12} md={12} lg={12} xl={6}>\n              <ReportDetailsDescription profile={profile} />\n            </GridItem>\n          </Grid>\n        </PageHeader>\n        <Main>\n          <Grid hasGutter>\n            <GridItem span={12}>\n              <InventoryTable\n                showOsMinorVersionFilter={[profile.majorOsVersion]}\n                columns={[\n                  Columns.customName({\n                    showLink: true,\n                    showOsInfo: true,\n                  }),\n                  Columns.inventoryColumn('tags'),\n                  Columns.SsgVersion,\n                  Columns.FailedRules,\n                  Columns.ComplianceScore,\n                  Columns.LastScanned,\n                ]}\n                query={GET_SYSTEMS}\n                showOnlySystemsWithTestResults\n                compliantFilter\n                defaultFilter={`with_results_for_policy_id = ${profile.id}`}\n                policyId={profile.id}\n              />\n            </GridItem>\n          </Grid>\n        </Main>\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nReportDetails.propTypes = {\n  route: propTypes.object,\n};\n\nexport default ReportDetails;\n","import gql from 'graphql-tag';\n\nexport const DEFAULT_EXPORT_SETTINGS = {\n  compliantSystems: false,\n  nonCompliantSystems: true,\n  unsupportedSystems: true,\n  topTenFailedRules: true,\n  userNotes: undefined,\n};\n\nexport const GET_SYSTEMS = gql`\n  query getSystems(\n    $filter: String!\n    $policyId: ID\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n          osMinorVersion\n          testResultProfiles(policyId: $policyId) {\n            id\n            name\n            refId\n            lastScanned\n            compliant\n            external\n            score\n            supported\n            ssgVersion\n            majorOsVersion\n            rules {\n              refId\n              title\n              compliant\n              remediationAvailable\n              severity\n              identifier\n            }\n          }\n          policies(policyId: $policyId) {\n            id\n            name\n          }\n          tags {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_PROFILE = gql`\n  query Profile($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      testResultHostCount\n      compliantHostCount\n      unsupportedHostCount\n      complianceThreshold\n      majorOsVersion\n      lastScanned\n      policyType\n      totalHostCount\n      ssgVersion\n      policy {\n        id\n        name\n      }\n      benchmark {\n        id\n        version\n      }\n      businessObjective {\n        id\n        title\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextArea,\n  Checkbox,\n} from '@patternfly/react-core';\n\nconst ExportPDFForm = ({ policy, setExportSetting, exportSettings }) => {\n  return (\n    <Form>\n      <FormGroup isInline fieldId=\"simple-form-checkbox-group\" label=\"Policy\">\n        <Text>{policy.name}</Text>\n      </FormGroup>\n\n      <FormGroup\n        fieldId=\"simple-form-checkbox-group\"\n        label=\"System data to include\"\n      >\n        <Checkbox\n          label=\"Non-compliant systems\"\n          id=\"non-compliant-systems-export-setting\"\n          aria-label=\"Non-compliant systems\"\n          onChange={setExportSetting('nonCompliantSystems')}\n          isChecked={exportSettings.nonCompliantSystems}\n        />\n        <Checkbox\n          label=\"Systems with unsupported configuration\"\n          id=\"unsupported-systems-export-setting\"\n          aria-label=\"Systems with unsupported configuration\"\n          onChange={setExportSetting('unsupportedSystems')}\n          isChecked={exportSettings.unsupportedSystems}\n        />\n        <Checkbox\n          id=\"compliant-systems-export-setting\"\n          onChange={setExportSetting('compliantSystems')}\n          isChecked={exportSettings.compliantSystems}\n          label=\"Compliant systems\"\n          aria-label=\"Compliant systems\"\n        />\n      </FormGroup>\n\n      <FormGroup label=\"Rule data to include\" fieldId=\"checkbox01\">\n        <Checkbox\n          id=\"failed-rules-export-setting\"\n          label=\"Top failed rules (Up to 10)\"\n          aria-label=\"Rule data to include\"\n          onChange={setExportSetting('topTenFailedRules')}\n          isChecked={exportSettings.topTenFailedRules}\n        />\n      </FormGroup>\n\n      <FormGroup label=\"User notes (optional)\" fieldId=\"checkbox01\">\n        <TextArea\n          aria-label=\"User notes (optional)\"\n          onChange={setExportSetting('userNotes')}\n          value={exportSettings.userNotes}\n        />\n      </FormGroup>\n    </Form>\n  );\n};\n\nExportPDFForm.propTypes = {\n  policy: propTypes.object,\n  exportSettings: propTypes.object,\n  setExportSetting: propTypes.func,\n};\n\nexport default ExportPDFForm;\n","import { orderByArray } from 'Utilities/helpers';\nimport { SEVERITY_LEVELS } from '@/constants';\n\n// TODO move to utilities\n// to make these helpers available elsewhere and then use where needed\n\nconst scannedProfiles = (profiles) =>\n  profiles?.filter((profile) => profile.lastScanned != 'Never') || [];\n\nconst isSystemCompliant = (system) => {\n  const hasScannedProfiles =\n    scannedProfiles(system.testResultProfiles).length > 0;\n  const hasOnlyCompliantScannedProfiles = scannedProfiles(\n    system.testResultProfiles\n  ).every((profile) => profile.compliant);\n\n  return hasScannedProfiles && hasOnlyCompliantScannedProfiles;\n};\n\nconst isSystemNonCompliant = (system) => {\n  const hasScannedProfiles =\n    scannedProfiles(system.testResultProfiles).length > 0;\n  const hasNonCompliantProfiles =\n    scannedProfiles(system.testResultProfiles).filter(\n      (profile) => !profile.compliant\n    ).length > 0;\n\n  return hasScannedProfiles && hasNonCompliantProfiles;\n};\n\nconst hasProfiles = ({ testResultProfiles }) =>\n  scannedProfiles(testResultProfiles).length > 0;\n\nconst isSystemSupported = (system) =>\n  hasProfiles(system) &&\n  scannedProfiles(system.testResultProfiles).every(\n    (profile) => profile.supported\n  );\n\nconst isSystemUnsupported = (system) =>\n  hasProfiles(system) &&\n  scannedProfiles(system.testResultProfiles).every(\n    (profile) => !profile.supported\n  );\n\nexport const compliantSystemsData = (systems) =>\n  systems.filter(\n    (system) => isSystemSupported(system) && isSystemCompliant(system)\n  );\n\nexport const nonCompliantSystemsData = (systems) =>\n  systems.filter(\n    (system) => isSystemSupported(system) && isSystemNonCompliant(system)\n  );\n\nexport const unsupportedSystemsData = (systems) =>\n  systems.filter((system) => isSystemUnsupported(system));\n\nexport const supportedSystemsData = (systems) =>\n  systems.filter((system) => isSystemSupported(system));\n\nconst sortBySystemsCount = (rules) =>\n  rules.sort((ruleWithCount) => ruleWithCount.systemCount);\n\n// Returns the \"top ten\" failed rules by system count\n// or just random \"top 10\" rules by severity\n// TODO refactor.\nconst topTenFromRulesWithCounts = (failedRulesWithCounts) => {\n  const failedRulesWithCountsArray = Object.values(failedRulesWithCounts);\n\n  const topTenByCount = sortBySystemsCount(failedRulesWithCountsArray).slice(\n    0,\n    10\n  );\n\n  const topTenIsSingleCount =\n    topTenByCount.filter((ruleWithCount) => ruleWithCount.systemCount === 1)\n      .length === 10;\n\n  const topTenBySeverity = () =>\n    orderByArray(\n      failedRulesWithCountsArray,\n      'severity',\n      SEVERITY_LEVELS,\n      'asc'\n    ).slice(0, 10);\n\n  return topTenIsSingleCount ? topTenBySeverity() : topTenByCount;\n};\n\n// Sums up rules and adds the number of systems failed for each\n// TODO refactor.\nconst getFailedRulesWithCounts = (systems) => {\n  const failedRulesWithCounts = {};\n  const countIfFailed = (rule) => {\n    if (!rule.compliant) {\n      const failedRuleCount = failedRulesWithCounts[rule.refId];\n      if (failedRuleCount) {\n        failedRulesWithCounts[rule.refId]['systemCount']++;\n      } else {\n        failedRulesWithCounts[rule.refId] = {\n          systemCount: 1,\n          ...rule,\n        };\n      }\n    }\n  };\n\n  supportedSystemsData(systems).forEach((system) => {\n    system.testResultProfiles.forEach((profile) => {\n      profile.rules.forEach((rule) => countIfFailed(rule));\n    });\n  });\n\n  return failedRulesWithCounts;\n};\n\nexport const topTenFailedRulesData = (systems) =>\n  topTenFromRulesWithCounts(getFailedRulesWithCounts(systems));\n","import { useApolloClient } from '@apollo/client';\nimport { GET_SYSTEMS } from '../constants';\nimport {\n  compliantSystemsData,\n  nonCompliantSystemsData,\n  unsupportedSystemsData,\n  topTenFailedRulesData,\n} from './helpers';\n\nconst fetchBatched = (fetchFunction, total, batchSize = 100) => {\n  const pages = Math.ceil(total / batchSize) || 1;\n  return Promise.all(\n    [...new Array(pages)].map((_, pageIdx) =>\n      fetchFunction(batchSize, pageIdx + 1)\n    )\n  );\n};\n\n// Hook that provides a wrapper function for a preconfigured GraphQL client to fetch export data\nconst useQueryExportData = (\n  exportSettings,\n  { id: policyId, totalHostCount } = {},\n  { onComplete, onError } = {\n    onComplete: () => undefined,\n    onError: () => undefined,\n  }\n) => {\n  const client = useApolloClient();\n\n  const prepareForExport = (systems) => {\n    const compliantSystems = compliantSystemsData(systems);\n    const nonCompliantSystems = nonCompliantSystemsData(systems);\n    const unsupportedSystems = unsupportedSystemsData(systems);\n    return {\n      ...(exportSettings.compliantSystems && {\n        compliantSystems: compliantSystems,\n      }),\n      compliantSystemCount: compliantSystems.length,\n      ...(exportSettings.nonCompliantSystems && {\n        nonCompliantSystems: nonCompliantSystems,\n      }),\n      nonCompliantSystemCount: nonCompliantSystems.length,\n      ...(exportSettings.unsupportedSystems && {\n        unsupportedSystems: unsupportedSystems,\n      }),\n      unsupportedSystemCount: unsupportedSystems.length,\n      ...(exportSettings.topTenFailedRules && {\n        topTenFailedRules: topTenFailedRulesData(systems),\n      }),\n      ...(exportSettings.userNotes && { userNotes: exportSettings.userNotes }),\n    };\n  };\n  const fetchFunction = (perPage, page) =>\n    client.query({\n      query: GET_SYSTEMS,\n      fetchResults: true,\n      fetchPolicy: 'no-cache',\n      variables: {\n        perPage,\n        page,\n        filter: '',\n        policyId,\n      },\n    });\n\n  return () =>\n    fetchBatched(fetchFunction, totalHostCount)\n      .then((results) =>\n        results.flatMap(({ data }) => data.systems.edges.map((e) => e.node))\n      )\n      .then((systems) => {\n        const exportData = prepareForExport(systems);\n        onComplete && onComplete(exportData);\n        return exportData;\n      })\n      .catch((error) => {\n        if (onError) {\n          onError(error);\n          return [];\n        } else {\n          throw error;\n        }\n      });\n};\n\nexport default useQueryExportData;\n","import { StyleSheet } from '@react-pdf/renderer';\n\n// Supported style properties see: https://react-pdf.org/styling\nexport default StyleSheet.create({\n  // TODO: bold rendering in PDF does not appear to work\n  bold: {\n    fontWeight: 'bold',\n  },\n  italic: {\n    fontStyle: 'italic',\n  },\n\n  metaTitle: {\n    color: '#C9190B',\n    marginBottom: '20px',\n  },\n\n  userNotes: {\n    backgroundColor: '#F0F0F0',\n    padding: '8px',\n  },\n  userNotesTitle: {\n    marginBottom: '4px',\n  },\n\n  sectionTitle: {\n    color: '#C9190B',\n    fontWeight: 'bold',\n    fontSize: 14,\n  },\n\n  subSectionTitle: {\n    color: '#C9190B',\n    fontWeight: 'bold',\n    fontSize: 10,\n    marginBottom: '10pt',\n  },\n});\n","import React from 'react';\nimport propTypes from 'prop-types';\n// eslint-disable-next-line rulesdir/disallow-fec-relative-imports\nimport { Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { fixedPercentage } from 'Utilities/TextHelper';\nimport { complianceScoreData } from 'Utilities/ruleHelpers';\n\nconst SystemsTable = ({ systems }) => {\n  const headerRow = ['System name', 'OS', 'Failed rules', 'Compliance score'];\n  const rows = systems.map((system) => [\n    system.name,\n    `RHEL ${system.osMajorVersion}.${system.osMinorVersion}`,\n    `${complianceScoreData(system.testResultProfiles).rulesFailed || ''}`,\n    fixedPercentage(complianceScoreData(system.testResultProfiles).score),\n  ]);\n\n  return <Table withHeader rows={[headerRow, ...rows]} />;\n};\n\nSystemsTable.propTypes = {\n  systems: propTypes.array,\n};\n\nexport default SystemsTable;\n","import React from 'react';\nimport propTypes from 'prop-types';\n// eslint-disable-next-line rulesdir/disallow-fec-relative-imports\nimport { Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\n\nconst UnsupportedSystemsTable = ({ systems, ssgFinder }) => {\n  const headerRow = [\n    'System name',\n    'OS',\n    'Running SSG version',\n    'Expected SSG version',\n  ];\n  const rows = systems.map((system) => [\n    system.name,\n    `RHEL ${system.osMajorVersion}.${system.osMinorVersion}`,\n    system.testResultProfiles[0].ssgVersion,\n    ssgFinder(system.osMajorVersion, system.osMinorVersion),\n  ]);\n\n  return <Table withHeader rows={[headerRow, ...rows]} />;\n};\n\nUnsupportedSystemsTable.propTypes = {\n  systems: propTypes.array,\n  ssgFinder: propTypes.func,\n};\n\nexport default UnsupportedSystemsTable;\n","import React from 'react';\nimport propTypes from 'prop-types';\n// eslint-disable-next-line rulesdir/disallow-fec-relative-imports\nimport { Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\n\nconst identifierLabel = ({ identifier }) =>\n  JSON.parse(identifier || '{}').label || '';\n\nconst capitalize = (str = '') => str.charAt(0).toUpperCase() + str.slice(1);\n\nconst RulesTable = ({ rules }) => {\n  const headerRow = ['Rule name', 'ID', 'Severity', 'Failed systems'];\n  const failedRuleRows = rules.map((rule) => [\n    rule.title,\n    identifierLabel(rule),\n    // TODO: Add icon svg for severity\n    capitalize(rule?.severity),\n    `${rule.systemCount}`,\n  ]);\n\n  return <Table withHeader rows={[headerRow, ...failedRuleRows]} />;\n};\n\nRulesTable.propTypes = {\n  rules: propTypes.array,\n};\n\nexport default RulesTable;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Text, View } from '@react-pdf/renderer';\n\n// TODO: Move into pdf-generator components as option to render title at the bottom\nconst PanelItem = (props) => {\n  const { children, title } = props;\n  return (\n    <View\n      style={{\n        justifyContent: 'space-evenly',\n        width: '32%',\n        paddingRight: '1%',\n      }}\n    >\n      <View>\n        <Text style={{ color: '#C9190B', fontSize: 20 }}>{children}</Text>\n      </View>\n      <Text>{title}</Text>\n    </View>\n  );\n};\n\nPanelItem.propTypes = {\n  children: propTypes.node,\n  title: propTypes.string,\n};\n\nexport default PanelItem;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Text, View } from '@react-pdf/renderer';\nimport styles from './StyleSheet';\n\nconst SubSection = ({ children, metaTitle, title }) => {\n  return (\n    <View\n      style={{\n        marginBottom: '20pt',\n      }}\n    >\n      <View\n        style={{\n          justifyContent: 'start',\n        }}\n      >\n        <Text\n          style={{\n            ...styles.subSectionTitle,\n            width: '70%',\n          }}\n        >\n          {title}\n        </Text>\n        <Text>{metaTitle}</Text>\n      </View>\n\n      {children}\n    </View>\n  );\n};\n\nSubSection.propTypes = {\n  children: propTypes.node,\n  metaTitle: propTypes.string,\n  title: propTypes.string,\n};\n\nexport default SubSection;\n","import React from 'react';\nimport propTypes from 'prop-types';\n// eslint-disable-next-line rulesdir/disallow-fec-relative-imports\nimport { Chart } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { fixedPercentage } from 'Utilities/TextHelper';\n\n// TODO Legend table style need to be disablable\nconst ComplianceChart = ({\n  policy: {\n    testResultHostCount = 0,\n    compliantHostCount = 0,\n    percentCompliant = 0,\n  },\n}) => {\n  const nonCompliantSystemsCount = testResultHostCount - compliantHostCount;\n  const compliantSystemsChartData = [\n    {\n      x: `${compliantHostCount} systems compliant`,\n      y: compliantHostCount,\n    },\n    {\n      x: `${nonCompliantSystemsCount} systems non-compliant`,\n      y: nonCompliantSystemsCount,\n    },\n  ];\n  const compliancePercentage = fixedPercentage(percentCompliant);\n\n  return (\n    <Chart\n      legendHeader={''}\n      chartType=\"donut\"\n      subTitle=\"Compliant\"\n      colorSchema=\"blue\"\n      title={compliancePercentage}\n      data={compliantSystemsChartData}\n    />\n  );\n};\n\nComplianceChart.propTypes = {\n  policy: propTypes.object,\n};\n\nexport default ComplianceChart;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Text, View } from '@react-pdf/renderer';\n// eslint-disable-next-line rulesdir/disallow-fec-relative-imports\nimport {\n  Paragraph,\n  Panel,\n  Table,\n  Column,\n  Section,\n} from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport styles from './ReportPDF/StyleSheet';\nimport SystemsTable from './ReportPDF/SystemsTable';\nimport UnsupportedSystemsTable from './ReportPDF/UnsupportedSystemsTable';\nimport RulesTable from './ReportPDF/RulesTable';\nimport PanelItem from './ReportPDF/PanelItem';\nimport SubSection from './ReportPDF/SubSection';\nimport ComplianceChart from './ReportPDF/ComplianceChart';\n\nconst ReportPDF = ({ data, ssgFinder }) => {\n  const {\n    compliantSystems,\n    compliantSystemCount,\n    nonCompliantSystems,\n    nonCompliantSystemCount,\n    topTenFailedRules,\n    unsupportedSystems,\n    unsupportedSystemCount,\n    userNotes,\n    policy,\n  } = data;\n  const { testResultHostCount = 0, compliantHostCount = 0 } = policy;\n  const percentCompliant = Math.floor(\n    100 * (compliantHostCount / testResultHostCount)\n  );\n\n  return (\n    <Fragment>\n      <Text style={styles.subSectionTitle}>{`Report prepared ${\n        DateFormat({ date: new Date(), type: 'exact' }).props.children\n      }`}</Text>\n\n      {userNotes && (\n        <View style={styles.userNotes}>\n          <Paragraph style={styles.userNotesTitle}>\n            <Text style={styles.bold}>User notes</Text>\n          </Paragraph>\n          <Paragraph>\n            <Text>{userNotes}</Text>\n          </Paragraph>\n        </View>\n      )}\n\n      <Section\n        title=\"Policy Details\"\n        titleProps={{\n          style: styles.sectionTitle,\n        }}\n      >\n        <Column style={{ width: '150px' }}>\n          <Table\n            // TODO: correct left side styling\n            rows={[\n              ['Policy type', policy.policyType],\n              ['Operating system', `RHEL ${policy.osMajorVersion}`],\n              ['Compliance threshold', `${policy.complianceThreshold}%`],\n              ['Business Objective', policy.businessObjective?.title || '--'],\n            ]}\n          />\n        </Column>\n        <Column>\n          <ComplianceChart\n            policy={{\n              ...policy,\n              percentCompliant,\n            }}\n          />\n        </Column>\n      </Section>\n\n      <Section\n        title=\"Systems\"\n        withColumn={false}\n        titleProps={{\n          style: styles.sectionTitle,\n        }}\n      >\n        <Panel withColumn={false}>\n          <PanelItem title=\"Non-compliant systems\">\n            {nonCompliantSystemCount}\n          </PanelItem>\n\n          {unsupportedSystemCount ? (\n            <PanelItem title=\"Systems with unsupported configuration\">\n              {unsupportedSystemCount}\n            </PanelItem>\n          ) : null}\n\n          <PanelItem title=\"Compliant systems\">\n            {compliantSystemCount}\n          </PanelItem>\n        </Panel>\n\n        {nonCompliantSystems && nonCompliantSystemCount ? (\n          <SubSection\n            title=\"Non-compliant systems\"\n            metaTitle={`${nonCompliantSystemCount} systems (${\n              100 - percentCompliant\n            }% non-compliant)`}\n          >\n            <SystemsTable systems={nonCompliantSystems} />\n          </SubSection>\n        ) : null}\n\n        {unsupportedSystems && unsupportedSystemCount ? (\n          <SubSection\n            title=\"Systems with unsupported configuration\"\n            metaTitle={`${unsupportedSystemCount} systems`}\n          >\n            <UnsupportedSystemsTable\n              systems={unsupportedSystems}\n              ssgFinder={ssgFinder}\n            />\n          </SubSection>\n        ) : null}\n\n        {compliantSystems && compliantSystemCount ? (\n          <SubSection\n            title=\"Compliant systems\"\n            metaTitle={`${compliantSystemCount} systems (${percentCompliant}% compliant)`}\n          >\n            <SystemsTable systems={compliantSystems} />\n          </SubSection>\n        ) : null}\n      </Section>\n\n      {topTenFailedRules ? (\n        <Section\n          title=\"Rules\"\n          withColumn={false}\n          titleProps={{\n            style: styles.sectionTitle,\n          }}\n        >\n          <SubSection title=\"Top failed rules\">\n            <RulesTable rules={topTenFailedRules} />\n          </SubSection>\n        </Section>\n      ) : null}\n    </Fragment>\n  );\n};\n\nReportPDF.propTypes = {\n  data: propTypes.object,\n  ssgFinder: propTypes.func,\n};\n\nexport default ReportPDF;\n","import useCollection from 'Utilities/hooks/api/useCollection';\n\nconst compareAsIntegers = (firstString, secondString) =>\n  parseInt(firstString) === parseInt(secondString);\n\nconst useSupportedSsgFinder = (skip) => {\n  const { data: supportedSsgs } = useCollection('supported_ssgs', {\n    type: 'supportedSsg',\n    skip,\n  });\n  return (majorVersion, minorVersion) => {\n    const matchingVersion = (supportedSsgs || {}).collection?.find(\n      (profile) =>\n        compareAsIntegers(profile.osMajorVersion, majorVersion) &&\n        compareAsIntegers(profile.osMinorVersion, minorVersion)\n    );\n\n    return matchingVersion?.version || 'N/A';\n  };\n};\n\nexport default useSupportedSsgFinder;\n","import { dispatchNotification } from 'Utilities/Dispatcher';\nimport useQueryExportData from './useQueryExportData';\nimport usePDFBuilder from './usePDFBuilder';\nimport useSupportedSsgFinder from './useSupportedSsgFinder';\n\n// Hook to provide a function that fetches the necessary data to export\n// and compile it into pages for the pdf-generator DownloadButton\nconst usePDFExport = (exportSettings, policy) => {\n  const ssgFinder = useSupportedSsgFinder();\n  const queryExportData = useQueryExportData(exportSettings, policy, {\n    onError: () => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Couldn’t download export',\n        description: 'Reinitiate this export to try again.',\n      });\n    },\n    onComplete: () => {\n      dispatchNotification({\n        variant: 'success',\n        title: 'Downloading export',\n      });\n    },\n  });\n  const buildPDFPages = usePDFBuilder(policy);\n\n  const exportPDF = async () => {\n    dispatchNotification({\n      variant: 'info',\n      title: 'Preparing export',\n      description: 'Once complete, your download will start automatically.',\n    });\n    const data = await queryExportData();\n    return await buildPDFPages(data, ssgFinder);\n  };\n\n  return exportPDF;\n};\n\nexport default usePDFExport;\n","import React from 'react';\nimport ReportPDF from '../Components/ReportPDF';\n\n// (Eventually) responsible for rendering sections and splitting into pages\nconst usePDFBuilder = (policy) => async (data, ssgFinder) =>\n  [\n    <ReportPDF\n      key=\"pdf-page-1\"\n      data={{ ...data, policy }}\n      ssgFinder={ssgFinder}\n    />,\n  ];\n\nexport default usePDFBuilder;\n","import React from 'react';\nimport { Button, Spinner } from '@patternfly/react-core';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n// eslint-disable-next-line\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport {\n  ComplianceModal,\n  StateViewWithError,\n  StateViewPart,\n} from 'PresentationalComponents';\nimport { useLinkToBackground } from 'Utilities/Router';\nimport { GET_PROFILE } from './constants';\nimport ExportPDFForm from './Components/ExportPDFForm';\nimport usePDFExport from './hooks/usePDFExport';\nimport useExportSettings from './hooks/useExportSettings';\n\n// Provides that export settings modal accessible in the report details\nexport const ReportDownload = () => {\n  const { report_id: policyId } = useParams();\n  const linkToReport = useLinkToBackground('/reports/' + policyId);\n  const { data, loading, error } = useQuery(GET_PROFILE, {\n    variables: { policyId },\n  });\n  const policy = data?.profile;\n  const {\n    exportSettings,\n    setExportSetting,\n    isValid: settingsValid,\n  } = useExportSettings();\n\n  const exportPDF = usePDFExport(exportSettings, policy);\n  const exportFileName = `compliance-report--${\n    new Date().toISOString().split('T')[0]\n  }`;\n  const buttonLabel = 'Export report';\n  const buttonProps = {\n    ouiaId: 'ExportReportButton',\n    variant: 'primary',\n    isDisabled: !settingsValid,\n  };\n\n  const FallbackButton = () => <Button {...buttonProps}>{buttonLabel}</Button>;\n\n  const actions = [\n    <DownloadButton\n      groupName=\"Red Hat Insights\"\n      key=\"export\"\n      label={buttonLabel}\n      reportName={`Compliance:`}\n      type={policy && policy.name}\n      fileName={exportFileName}\n      asyncFunction={exportPDF}\n      buttonProps={buttonProps}\n      fallback={<FallbackButton />}\n      className=\"pf-u-mr-sm\"\n    />,\n    <Button\n      variant=\"secondary\"\n      key=\"cancel\"\n      ouiaId=\"ExportReportCancelButton\"\n      onClick={(event) => {\n        event.preventDefault();\n        window.history.back();\n      }}\n    >\n      Cancel\n    </Button>,\n  ];\n\n  return (\n    <ComplianceModal\n      isOpen\n      width=\"440px\"\n      ouiaId=\"DownloadReportModal\"\n      title=\"Compliance report\"\n      onClose={() => linkToReport()}\n      actions={actions}\n    >\n      <StateViewWithError stateValues={{ error, data, loading }}>\n        <StateViewPart stateKey=\"loading\">\n          <Spinner />\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n          <ExportPDFForm {...{ policy, setExportSetting, exportSettings }} />\n        </StateViewPart>\n      </StateViewWithError>\n    </ComplianceModal>\n  );\n};\n\nexport default ReportDownload;\n","import { useState } from 'react';\nimport { DEFAULT_EXPORT_SETTINGS } from '../constants';\n\nconst useExportSettings = () => {\n  const [exportSettings, setExportSettings] = useState(DEFAULT_EXPORT_SETTINGS);\n\n  const setExportSetting = (setting) => (value) =>\n    setExportSettings({\n      ...exportSettings,\n      [setting]: value,\n    });\n\n  const isValid = () =>\n    Object.keys(exportSettings).some(\n      (key) => (key !== 'userNotes' && !!exportSettings[key]) === true\n    );\n\n  return {\n    exportSettings,\n    setExportSetting,\n    isValid: isValid(),\n  };\n};\n\nexport default useExportSettings;\n"],"names":["QUERY","gql","ReportDetails","chartColorScale","policyName","legendData","compliancePercentage","pageTitle","route","policyId","useParams","report_id","pdfReportEnabled","useFeature","useQuery","variables","fetchPolicy","data","error","loading","donutValues","donutId","profile","policy","name","compliantHostCount","testResultHostCount","replace","x","y","black300","blue300","blue200","pluralize","fixedPercentage","Math","floor","useTitleEntity","stateValues","stateKey","Breadcrumb","ouiaId","to","BreadcrumbItem","isActive","Grid","hasGutter","GridItem","sm","md","lg","xl","title","policyType","className","state","id","Button","variant","isInline","identifier","subTitle","themeVariant","ChartThemeVariant","colorScale","style","fontSize","constrainToVisibleArea","innerRadius","width","legendPosition","legendOrientation","padding","bottom","left","right","top","unsupportedHostCount","Text","showHelpIcon","span","showOsMinorVersionFilter","majorOsVersion","columns","Columns","showLink","showOsInfo","query","GET_SYSTEMS","showOnlySystemsWithTestResults","compliantFilter","defaultFilter","propTypes","DEFAULT_EXPORT_SETTINGS","compliantSystems","nonCompliantSystems","unsupportedSystems","topTenFailedRules","userNotes","undefined","GET_PROFILE","ExportPDFForm","setExportSetting","exportSettings","Form","FormGroup","fieldId","label","Checkbox","onChange","isChecked","TextArea","value","scannedProfiles","profiles","filter","lastScanned","hasProfiles","testResultProfiles","length","isSystemSupported","system","every","supported","compliantSystemsData","systems","hasScannedProfiles","hasOnlyCompliantScannedProfiles","compliant","isSystemCompliant","nonCompliantSystemsData","hasNonCompliantProfiles","isSystemNonCompliant","unsupportedSystemsData","isSystemUnsupported","getFailedRulesWithCounts","failedRulesWithCounts","supportedSystemsData","forEach","rules","rule","refId","systemCount","countIfFailed","topTenFailedRulesData","topTenByCount","failedRulesWithCountsArray","Object","values","sort","ruleWithCount","slice","orderByArray","SEVERITY_LEVELS","fetchBatched","fetchFunction","total","batchSize","pages","ceil","Promise","all","Array","map","_","pageIdx","StyleSheet","bold","fontWeight","italic","fontStyle","metaTitle","color","marginBottom","backgroundColor","userNotesTitle","sectionTitle","subSectionTitle","SystemsTable","rows","osMajorVersion","osMinorVersion","complianceScoreData","rulesFailed","score","withHeader","UnsupportedSystemsTable","ssgFinder","ssgVersion","capitalize","str","charAt","toUpperCase","RulesTable","failedRuleRows","JSON","parse","severity","PanelItem","props","children","justifyContent","paddingRight","SubSection","styles","ComplianceChart","percentCompliant","nonCompliantSystemsCount","compliantSystemsChartData","legendHeader","chartType","colorSchema","ReportPDF","compliantSystemCount","nonCompliantSystemCount","unsupportedSystemCount","Fragment","DateFormat","date","Date","type","titleProps","complianceThreshold","businessObjective","withColumn","compareAsIntegers","firstString","secondString","parseInt","skip","supportedSsgs","useCollection","majorVersion","minorVersion","matchingVersion","collection","find","version","queryExportData","totalHostCount","onComplete","onError","client","useApolloClient","prepareForExport","perPage","page","fetchResults","then","results","flatMap","edges","e","node","exportData","catch","useQueryExportData","dispatchNotification","description","buildPDFPages","key","usePDFBuilder","exportPDF","ReportDownload","linkToReport","useLinkToBackground","useState","setExportSettings","setting","isValid","keys","some","useExportSettings","settingsValid","usePDFExport","exportFileName","toISOString","split","buttonLabel","buttonProps","isDisabled","FallbackButton","actions","groupName","reportName","fileName","asyncFunction","fallback","onClick","event","preventDefault","window","history","back","C","isOpen","onClose","Spinner"],"sourceRoot":""}