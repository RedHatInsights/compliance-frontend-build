{"version":3,"sources":["webpack:///./src/SmartComponents/ComplianceSystems/ComplianceSystems.js","webpack:///./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyProfilesRules.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack:///./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack:///./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack:///./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack:///./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyDetailsTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyRulesTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicySystemsTab.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicyForm.js","webpack:///./src/SmartComponents/EditPolicy/hooks.js","webpack:///./src/SmartComponents/EditPolicy/EditPolicy.js","webpack:///./src/SmartComponents/SystemsTable/Cells.js","webpack:///./src/SmartComponents/SystemsTable/Columns.js","webpack:///./src/SmartComponents/SystemsTable/constants.js","webpack:///./src/SmartComponents/InventoryDetails/InventoryDetails.js","webpack:///./src/Utilities/hooks/useTableTools/useExport.js","webpack:///./src/SmartComponents/SystemsTable/hooks.js","webpack:///./src/SmartComponents/SystemsTable/InventoryTable.js","webpack:///./src/Utilities/hooks/api/utils/ApiClient.js","webpack:///./src/Utilities/hooks/api/useApi.js","webpack:///./src/Utilities/hooks/api/useCollection.js","webpack:///./src/store/Reducers/SystemStore.js"],"names":["QUERY","gql","ComplianceSystems","useQuery","data","error","loading","policies","profiles","edges","map","node","className","title","stateValues","stateKey","columns","Columns","showLink","showOsInfo","isStatic","query","GET_SYSTEMS","defaultFilter","systemProps","isFullView","showOsMinorVersionFilter","policy","majorOsVersion","showComplianceSystemsInfo","enableEditPolicy","remediationsEnabled","BENCHMARKS_AND_PROFILES","PolicyTooltip","Tooltip","position","content","CreateSCAPPolicy","change","selectedBenchmarkId","selectedProfile","fetchPolicy","Spinner","selectedBenchmark","validProfiles","benchmark","benchmarks","latestBenchmarks","find","id","userProfileRefIds","filter","profile","refId","disabled","includes","TextContent","Text","component","TextVariants","Form","FormGroup","label","isRequired","fieldId","sort","a","b","localeCompare","osMajorVersion","Tile","key","onClick","setBenchmark","isSelected","isStacked","labelIcon","onChange","value","undefined","propTypes","reduxFormPropTypes","selector","formValueSelector","compose","connect","state","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","PROFILES_QUERY","BENCHMARKS_QUERY","EditPolicyProfilesRules","selectedRuleRefIds","osMinorVersionCounts","osMinorVersions","i","osMinorVersion","benchmarkSearch","join","variables","skip","length","benchmarksData","benchmarksError","benchmarksLoading","nodes","tabsData","systemCount","count","latestSupportedOsMinorVersions","getBenchmarkBySupportedOsMinor","profileRefId","benchmarkProfile","getBenchmarkProfile","newOsMinorVersion","profileToOsMinorMap","tabsDataToOsMinorMap","profileIds","Object","keys","skipProfilesQuery","profilesData","profilesError","profilesLoading","dataState","loadingState","noRuleSets","p","setSelectedRuleRefIds","newSelection","useLayoutEffect","profilesWithOs","extendProfilesByOsMinor","profilesWithRulesToSelection","only","name","EmptyState","Title","headingLevel","size","EmptyStateBody","EmptyTable","TabbedRules","selectedFilter","level","JSON","parse","WizardContextConsumer","goToStepById","Button","PrependComponent","EditPolicySystems","selectedSystems","prependComponent","emptyStateComponent","props","width","sortBy","compact","showActions","GET_SYSTEMS_WITHOUT_FAILED_RULES","enableExport","preselectedSystems","onSelect","newSelectedSystems","countOsMinorVersions","defaultProps","EditPolicyDetails","useEffect","description","Field","ReduxFormTextInput","type","aria-describedby","isDisabled","ReduxFormTextArea","defaultValue","businessObjective","previousThreshold","complianceThreshold","initialValues","REVIEW","ReviewCreatedPolicy","benchmarkId","parentProfileName","style","marginTop","TextList","TextListVariants","TextListItem","TextListItemVariants","fontWeight","parseFloat","rulesCount","EmtpyStateWithErrors","errors","Array","isArray","List","ListItem","FinishedCreatePolicy","onWizardFinish","cloneFromProfileId","systems","useState","percent","setPercent","message","setMessage","setErrors","failed","setFailed","updatePolicy","usePolicy","onProgress","progress","hosts","then","dispatchNotification","variant","autoDismiss","Link","to","catch","networkError","result","Bullseye","EmptyStateVariant","EmptyStateIcon","icon","WrenchIcon","EmptyStateSecondaryActions","ouiaId","withApollo","CreatePolicy","systemIds","history","useHistory","stepIdReached","setStepIdReached","resetAnchor","location","hash","push","onClose","steps","enableNext","validateBenchmarkPage","canJumpTo","validateDetailsPage","validateSystemsPage","validateRulesPage","nextButtonText","isFinishedStep","Wizard","isOpen","onNext","onGoToStep","onBack","dispatch","EditPolicyDetailsTab","setUpdatedPolicy","validThreshold","setValidThreshold","threshold","valid","thresholdValid","useThresholdValidate","validateThreshold","TextArea","height","TextInput","validated","helperTextInvalid","helperText","complianceThresholdValid","EditPolicyRulesTabEmptyState","EditPolicyRulesTab","setNewRuleTabs","values","sortingByProp","parentProfileId","toTabsData","tab","prevSelection","empty","EditPolicySystemsTab","policyId","newRuleTabs","onSystemSelect","Alert","isInline","actionLinks","AlertActionLink","EditPolicyForm","setSelectedSystems","policyProfiles","setOsMinorVersionCounts","handleSystemSelect","reduce","acc","mapCountOsMinorVersions","profilesWithOsMinor","updateSelectedRuleRefIds","defaultTab","Tab","eventKey","TabTitleText","useLinkToPolicy","anchor","useAnchor","linkToBackground","useLinkToBackground","MULTIVERSION_QUERY","EditPolicy","route","useParams","policy_id","linkToPolicy","updatedPolicy","saveEnabled","updatedPolicyHostsAndRules","isSaving","setIsSaving","Promise","resolve","useOnSave","onSave","actions","spinnerAriaValueText","isLoading","useTitleEntity","Modal","minHeight","SystemLink","children","pathname","Name","hasOsInfo","SSGVersion","ssgVersion","supported","messageVariant","SSGVersions","testResultProfiles","DetailsLink","Policies","Truncate","inline","text","FailedRules","rulesFailed","profilesRulesFailed","ComplianceScore","complianceScore","complianceScoreData","lastScanned","dates","Date","last","Math","max","apply","date","isFinite","NEVER","LastScanned","lastScannedDate","DateFormat","operatingSystemString","disableSorting","compileColumnRenderFunc","cell","column","renderFunc","renderComponent","renderExport","system","NameCell","customName","SsgVersion","transforms","nowrap","exportKey","SsgVersionCell","PoliciesCell","DetailsLinkCell","FailedRulesCell","complianceScoreString","trim","ComplianceScoreCell","LastScannedCell","OperatingSystem","inventoryColumn","GET_MINIMAL_SYSTEMS","policyFilter","osFilter","systemsPolicyFilterConfiguration","systemsOsFilterConfiguration","osMinorVersionFilter","systemsOsMinorFilterConfiguration","defaultOnLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","getRegistry","register","entitiesReducer","InventoryDetails","registryDecorator","DetailWrapper","onLoad","mergeWithDetail","InventoryDetail","fallback","Skeleton","SkeletonSize","hideBack","React","entity","ENCODINGS","csv","json","filename","format","CSV_FILE_PREFIX","toISOString","encoding","linkAndDownload","link","document","createElement","href","download","click","textForCell","row","getProperty","csvForItems","items","csvRows","encodeURI","jsonForItems","object","camelCase","stringify","renameInventoryAttributes","culledTimestamp","staleWarningTimestamp","staleTimestamp","insightsId","updated","culled_timestamp","stale_warning_timestamp","stale_timestamp","insights_id","useFetchSystems","onComplete","onError","client","useApolloClient","perPage","page","requestVariables","fetchResults","e","entities","systemsWithRuleObjectsFailed","meta","tags","totalCount","fetchBatched","fetchFunction","total","batchSize","pages","ceil","all","_","pageIdx","buildApiFilters","filters","tagFilters","otherFilters","tagsApiFilter","flatMap","tagFilter","tag","encodeURIComponent","tagKey","toIdFilter","ids","InventoryTable","showFilter","supportedSsgs","showAllSystems","compliantFilter","showOnlySystemsWithTestResults","showOsFilter","onSelectProp","noSystemsTable","inventory","useRef","isEmpty","setIsEmpty","isLoaded","setIsLoaded","setItems","setTotal","tagsEnabled","currentTags","setCurrentTags","hideFilters","registeredWith","stale","showTags","useTags","useFeature","tagsProps","useCollection","showVersion","version","String","currentValue","Set","groupByMajorVersion","collection","useFilterConfig","filterConfig","DEFAULT_SYSTEMS_FILTER_CONFIGURATION","COMPLIANT_SYSTEMS_FILTER_CONFIGURATION","conditionalFilter","toolbarProps","filterString","activeFilterValues","systemsFilter","combindedFilter","useSystemsFilter","systemFetchArguments","preselected","fetchArguments","currentPageIds","systemsCache","fetchSystems","fetchFunc","fetchIds","idFilter","results","cachedOrFetch","selectedIds","cachedSystems","cachedIds","fetchedSystems","onSelectCallback","itemIdsInTable","useBulkSelect","itemIdsOnPage","useSystemBulkSelect","useMemo","bulkSelectTableProps","tableProps","bulkSelectToolBarProps","activeFilters","useDispatch","payload","selected","debounceResetPage","debounce","current","onRefreshData","useInventoryUtilities","getEntities","fetchEntities","appendDirection","attributes","direction","attribute","findColumnByKey","_ids","per_page","orderBy","orderDirection","sortableColumn","filterForApi","fetchedEntities","useGetEntities","exportConfig","selectionFilter","exporter","exportableColumns","export","exportWithFormat","formater","console","info","useExport","fetchedItems","useSystemsExport","noError","disableDefaultColumns","defaultColumns","isStringCol","defaultColumn","defaultCol","ref","isStickyHeader","TableVariant","dedicatedAction","ComplianceRemediationButton","allSystems","selectedRules","_event","_index","beta","window","split","origin","PropTypes","options","Accept","this","apiBase","path","authenticate","onUnauthorised","defaultHeaders","headers","DEFAULT_API_HEADERS","apiProps","method","callAuthenticate","fetch","checkForEmptyResponse","response","checkForErrors","finalCatch","promise","reject","params","credentials","fullPath","url","URL","search","URLSearchParams","body","status","ignore404","responseCloneJson","clone","request","ApiClient","includeAttributes","prop","newEntity","includePropAndDelete","normalizeData","jsonNormalized","normalize","normalizedJson","relationships","entries","forEach","item","relationship","relationshipData","v","includeRelationship","fetchCollection","apiClient","get","normalized","dependencies","collectionState","setCollectionState","useApi","COMPLIANCE_API_ROOT","include","selectRows","rows","applyReducerHash"],"mappings":"wTAaMA,GAAQC,QAAH,uOAiBEC,EAAoB,WAAM,MACrC,GAAiCC,cAASH,GAAlCI,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,QACfC,EAAWH,SAAH,UAAGA,EAAMI,gBAAT,aAAG,EAAgBC,MAAMC,KAAI,qBAAGC,QAE9C,OACE,kBAAC,aAAD,KACE,kBAAC,IAAD,CAAYC,UAAU,eACpB,kBAAC,IAAD,CAAiBC,MAAM,aAEzB,kBAAC,IAAD,KACE,kBAAC,KAAD,CAAoBC,YAAa,CAAET,QAAOD,OAAME,YAC9C,kBAAC,KAAD,CAAeS,SAAS,QACrBR,GACC,kBAAC,KAAD,CACES,QAAS,CACPC,KAAmB,CACjBC,UAAU,EACVC,YAAY,IAEdF,KAAwB,QACxBA,KACAA,KAAwB,UAAW,CAAEG,UAAU,KAEjDC,MAAOC,KACPC,cA1BO,+CA2BPC,YAAa,CACXC,YAAY,GAEdC,yBAA0BnB,EAASG,KACjC,SAACiB,GAAD,OAAYA,EAAOC,kBAErBC,2BAAyB,EACzBC,kBAAkB,EAClBC,qBAAqB,EACrBxB,SAAUA,SAU1B,W,o2BClDA,IAAMyB,GAA0B/B,QAAH,8eA8BvBgC,EAAgB,kBACpB,kBAAC,EAAAC,QAAD,CACEC,SAAS,QACTC,QAAQ,4IAGR,kBAAC,KAAD,CAA4BxB,UAAU,gBAI7ByB,EAAmB,SAAC,GAI3B,IAHJC,EAGI,EAHJA,OACAC,EAEI,EAFJA,oBACAC,EACI,EADJA,gBAEA,GAAiCrC,cAAS6B,EAAyB,CACjES,YAAa,aADPrC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,QASrB,GAAID,EACF,OAAOA,EAGT,GAAIC,EACF,OAAO,kBAACoC,EAAA,EAAD,MAGT,IACIC,EACAC,EAfwBpC,EAAUqC,EAahCC,EAAa1C,EAAK2C,iBAGxB,GAAIR,EAAqB,CACvBI,EAAoBG,EAAWE,MAC7B,SAACH,GAAD,OAAeA,EAAUI,KAAOV,KAElC,IAAMW,GApBoB1C,EAqBxBJ,EAAKI,SAASC,MArBoBoC,EAsBlCF,EArBFnC,EACG2C,QAAO,SAACC,GAAD,OAAaP,EAAUQ,QAAUD,EAAQzC,KAAKkC,UAAUQ,SAC/D3C,KAAI,SAAC0C,GAAD,OAAaA,EAAQzC,KAAK0C,UAqBjCT,EAAgBD,EAAkBnC,SAASE,KAAI,SAAC0C,GAAD,cAC1CA,GAD0C,IAE7CE,SAAUJ,EAAkBK,SAASH,EAAQC,YAajD,OACE,kBAAC,aAAD,KACE,kBAAC,EAAAG,YAAD,KACE,kBAAC,EAAAC,KAAD,CAAMC,UAAWC,kBAAiB/C,UAAU,cAA5C,sBAGA,kBAAC,EAAA6C,KAAD,CAAM7C,UAAU,cAAhB,iEAIF,kBAAC,EAAAgD,KAAD,KACE,kBAAC,EAAAC,UAAD,CAAWC,MAAM,mBAAmBC,YAAU,EAACC,QAAQ,aACpDlB,GACCA,EACGmB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEb,MAAMe,cAAcD,EAAEd,UACvC3C,KAAI,SAACmC,GACJ,IAAQI,EAAuBJ,EAAvBI,GAAIoB,EAAmBxB,EAAnBwB,eACZ,OACE,kBAAC,EAAAC,KAAD,CACEC,IAAKtB,EACLrC,UAAU,aACVC,MAAK,eAAUwD,GACfG,QAAS,kBA/BN,SAAC,GAA2B,MAAzBvB,EAAyB,EAAzBA,GAAIoB,EAAqB,EAArBA,gBACL,QAAjB,EAAA1B,SAAA,eAAmB0B,kBAAmBA,GACxC/B,EAAO,UAAW,IAGpBA,EAAO,YAAaW,GACpBX,EAAO,iBAAkB+B,GAyBMI,CAAa5B,IAC5B6B,WAAYnC,IAAwBU,EACpC0B,WAAS,QAKrB,kBAAC,EAAAd,UAAD,CACEE,YAAU,EACVa,UAAW,kBAAC3C,EAAD,MACX6B,MAAM,cACNE,QAAQ,eAER,kBAAC,KAAD,CACExD,SAAUmC,GAAqBC,EAC/BiC,SAAU,SAACC,GACTxC,EAAO,0BAAsByC,GAC7BzC,EAAO,UAAWwC,IAEpBtC,gBAAiBA,QAQ7BH,EAAiB2C,UAAY,CAC3BzC,oBAAqByC,WACrB1C,OAAQ2C,YACRzC,gBAAiBwC,YAGnB,IAAME,GAAWC,OAAkB,cAEnC,SAAeC,cACbC,cAAQ,SAACC,GAAD,MAAY,CAClB/C,oBAAqB2C,EAASI,EAAO,aACrC9C,gBAAiB0C,EAASI,EAAO,gBAEnCC,OAAU,CACRC,KAAM,aACNC,kBAAkB,EAClBC,0BAA0B,IAR9B,CAUErD,G,8mBCrJF,IAAMsD,GAAiB1F,QAAH,msBAqCd2F,GAAmB3F,QAAH,ySA2BT4F,EAA0B,SAAC,GAMlC,MALJlE,EAKI,EALJA,OACAmE,EAII,EAJJA,mBACAxD,EAGI,EAHJA,OACA+B,EAEI,EAFJA,eACA0B,EACI,EADJA,qBAEM/E,EAAU,CAACC,KAAcA,KAAkBA,MAC3C+E,EAAkBD,EACrBrF,KAAI,SAACuF,GAAD,OAAOA,EAAEC,kBACbjC,OACGkC,EACJ,6BAAsB9B,EAAtB,wDAC4C2B,EAAgBI,KAAK,KADjE,KAGF,GAIIjG,cAASyF,EAAkB,CAC7BS,UAAW,CACTlD,OAAQgD,GAEVG,KAAiC,IAA3BN,EAAgBO,SAPhBC,EADR,EACEpG,KACOqG,EAFT,EAEEpG,MACSqG,EAHX,EAGEpG,QAQIwC,EAAa0D,SAAH,UAAGA,EAAgB1D,kBAAnB,aAAG,EAA4B6D,MAE3CC,EAAWb,EAAqBrF,KAClC,YAA4C,IAEtC0C,EAFH8C,EAAyC,EAAzCA,eAAuBW,EAAkB,EAAzBC,MAGjB,GAFAZ,EAAiB,GAAH,OAAMA,GAEhBpD,EAAY,CACd,IAAMD,EAtCyB,SAACC,EAAYoD,GAAb,OACrCpD,EAAWE,MAAK,SAACH,GAAD,uBACdA,EAAUkE,sCADI,aACd,EAA0CxD,SAAS2C,MAoC7Bc,CAChBlE,EACAoD,GAEErD,IACFO,EAhDkB,SAACP,EAAWoE,GAAZ,OAC1BpE,EAAUrC,SAASwC,MACjB,SAACkE,GAAD,OAAsBA,EAAiB7D,QAAU4D,KA8CjCE,CAAoBtE,EAAWlB,EAAO0B,UAE9CD,EAAU,OACLA,GADE,IAELP,eAMR,MAAO,CACLO,UACAyD,cACAO,kBAAmBlB,MAIzBU,EAAWA,EAASzD,QAAO,sBAAGC,WAE9B,IAAMiE,GAAsBC,QAAqBV,GAC3CW,EAAaC,OAAOC,KAAKJ,GACzBlE,EAASoE,EAAW7G,KAAI,SAACuF,GAAD,qBAAeA,MAAKG,KAAK,QACjDsB,EAAoBhB,GAAuC,IAAlBvD,EAAOoD,OACtD,GAIIpG,cAASwF,EAAgB,CAC3BU,UAAW,CACTlD,UAEFmD,KAAMoB,IAPAC,EADR,EACEvH,KACOwH,EAFT,EAEEvH,MACSwH,EAHX,EAGEvH,QAOID,EAAQoG,GAAmBmB,EAC3BE,GAAYP,aAAA,EAAAA,EAAYhB,QAAS,EAAIoB,OAAe5C,EACpDgD,KAAeF,IAAmBnB,SAA2B3B,EAC7DiD,GAAc3H,IAAU0H,GAAuC,KAAvBR,aAAA,EAAAA,EAAYhB,QACpD/F,EAAWkH,EACb,GACAC,aAF8B,EAE9BA,EAAcnH,SAASC,MAAMC,KAAI,SAACuH,GAAD,OAAOA,EAAEtH,QAExCuH,EAAwB,SAACC,GAC7B7F,EAAO,qBAAsB6F,IAkB/B,OAfAC,sBAAgB,WACd,IAAKL,EAAc,CACjB,IAAMM,GAAiBC,QACrB9H,EACA6G,GAEIc,GAAeI,QACnBF,EACAvC,EACA,CAAE0C,MAAM,IAEVN,EAAsBC,MAEvB,CAAC3H,EAAUuH,IAGZ,kBAAC,aAAD,KACE,kBAAC,EAAAvE,YAAD,CAAa5C,UAAU,cACrB,kBAAC,EAAA6C,KAAD,CAAMC,UAAWC,mBAAjB,SACA,kBAAC,EAAAF,KAAD,uBACiB,2BAAI9B,EAAO8G,MAD5B,kDAIA,kBAAC,EAAAhF,KAAD,iLAOF,kBAAC,KAAD,CACE3C,YAAa,CACXT,QACAD,KAAM0H,EACNxH,QAASyH,EACTC,eAGF,kBAAC,KAAD,CAAejH,SAAS,cACtB,kBAAC,EAAA2H,WAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,8BAGA,kBAAC,EAAAC,eAAD,kHAMJ,kBAAC,KAAD,CAAe/H,SAAS,WACtB,kBAACgI,EAAA,EAAD,KACE,kBAACrG,EAAA,EAAD,QAGJ,kBAAC,KAAD,CAAe3B,SAAS,QACtB,kBAACiI,EAAA,GAAD,CACEpC,SAAUA,EACVd,mBAAoBA,EACpB9E,QAASA,EACTe,qBAAqB,EACrBkH,gBAAc,EACdC,MAAO,EACPhB,sBAAuBA,QAQnCrC,EAAwBb,UAAY,CAClCrD,OAAQqD,WACR1C,OAAQ2C,YACRZ,eAAgBW,WAChBe,qBAAsBf,YACpBA,UAAgB,CACdkB,eAAgBlB,WAChB8B,MAAO9B,cAGXc,mBAAoBd,WAGtB,IAAME,GAAWC,OAAkB,cAEnC,SAAeC,cACbC,cAAQ,SAACC,GAAD,MAAY,CAClB3D,OAAQwH,KAAKC,MAAMlE,EAASI,EAAO,YACnCjB,eAAgBa,EAASI,EAAO,kBAChCS,qBAAsBb,EAASI,EAAO,wBACtCQ,mBAAoBZ,EAASI,EAAO,2BAEtCC,OAAU,CACRC,KAAM,aACNC,kBAAkB,EAClBC,0BAA0B,IAV9B,CAYEG,G,qnBC3PF,IAAM6C,EAAa,SAAC,GAAD,IAAGrE,EAAH,EAAGA,eAAH,OACjB,kBAAC,aAAD,KACE,kBAAC,EAAAb,YAAD,CAAa5C,UAAU,cACrB,kBAAC,EAAA6C,KAAD,4BACsB,mCAASY,GAD/B,6DAGE,6BAHF,uDAOF,kBAAC,EAAAb,YAAD,CAAa5C,UAAU,cACrB,kBAAC,EAAA6C,KAAD,uDACkD,IAChD,mCAASY,GAFX,0BAKF,kBAAC,EAAAgF,sBAAD,MACG,gBAAGC,EAAH,EAAGA,aAAH,OACC,kBAAC,EAAAC,OAAD,CAAQ/E,QAAS,kBAAM8E,EAAa,KAApC,4CAQRZ,EAAW1D,UAAY,CACrBX,eAAgBW,YAGlB,IAAMwE,EAAmB,SAAC,GAAD,IAAGnF,EAAH,EAAGA,eAAH,OACvB,kBAAC,aAAD,KACE,kBAAC,EAAAb,YAAD,CAAa5C,UAAU,cACrB,kBAAC,EAAA6C,KAAD,6BACuB,mCAASY,GADhC,8CAGE,6BAHF,mDAUNmF,EAAiBxE,UAAY,CAC3BX,eAAgBW,YAGX,IAAMyE,EAAoB,SAAC,GAI5B,IAHJnH,EAGI,EAHJA,OACA+B,EAEI,EAFJA,eACAqF,EACI,EADJA,gBAOA,OACE,kBAAC,aAAD,KACE,kBAAC,EAAAlG,YAAD,CAAa5C,UAAU,cACrB,kBAAC,EAAA6C,KAAD,CAAMC,UAAWC,mBAAjB,YAEF,kBAAC,EAAAC,KAAD,KACE,kBAAC,EAAAC,UAAD,KACE,kBAAC,KAAD,CACEnC,yBAA0B,CAAC2C,GAC3BsF,iBACE,kBAACH,EAAD,CAAkBnF,eAAgBA,IAEpCuF,oBAAqB,kBAAClB,EAAD,CAAYrE,eAAgBA,IACjDrD,QAAS,CAAC,OAEHC,MAFE,IAGL4I,MAAO,CACLC,MAAO,IAETC,OAAQ,CAAC,UAEX9I,KAAwB,QARjB,OAUFA,MAVE,IAWL4I,MAAO,GACPE,OAAQ,CAAC,iBAAkB,qBAG/BhI,qBAAqB,EACrBiI,SAAO,EACPC,aAAa,EACb5I,MAAO6I,KACP3I,cACE8C,GAAkB,sBAAJ,OAA0BA,GAE1C8F,cAAc,EACdC,mBAAoBV,EACpBW,SA1Ca,SAACC,GACtBhI,EAAO,UAAWgI,GAClBhI,EAAO,wBAAwBiI,QAAqBD,WAgDxDb,EAAkBzE,UAAY,CAC5BX,eAAgBW,WAChB0E,gBAAiB1E,UACjB1C,OAAQ2C,aAGVwE,EAAkBe,aAAe,CAC/Bd,gBAAiB,IAGnB,IAAMxE,GAAWC,OAAkB,cAMnC,SAAeC,cACbC,cANsB,SAACC,GAAD,MAAY,CAClCjB,eAAgBa,EAASI,EAAO,kBAChCoE,gBAAiBxE,EAASI,EAAO,gBAKjCC,OAAU,CACRC,KAAM,aACNC,kBAAkB,EAClBC,0BAA0B,IAL9B,CAOE+D,G,0BC1HWgB,GAAoB,SAAC,GAA8B,IAA5BnI,EAA4B,EAA5BA,OAAQX,EAAoB,EAApBA,OAAQ0B,EAAY,EAAZA,MASlD,OARAqH,gBAAU,WACJ/I,GAAUA,EAAO0B,QAAUA,IAC7Bf,EAAO,OAAD,UAAYX,EAAO8G,OACzBnG,EAAO,QAAD,UAAaX,EAAO0B,QAC1Bf,EAAO,cAAD,UAAmBX,EAAOgJ,iBAEjC,CAAChJ,IAGF,kBAAC,aAAD,KACE,kBAAC,EAAA6B,YAAD,KACE,kBAAC,EAAAC,KAAD,CAAMC,UAAWC,mBAAjB,YAEF,6BACA,kBAAC,EAAAC,KAAD,CAAMX,GAAG,qBACP,kBAAC,EAAAY,UAAD,CAAWC,MAAM,cAAcC,YAAU,EAACC,QAAQ,QAChD,kBAAC4G,EAAA,EAAD,CACElH,UAAWmH,MACXC,KAAK,OACL/G,YAAY,EACZd,GAAG,OACHwF,KAAK,OACLsC,mBAAiB,UAGrB,kBAAC,EAAAlH,UAAD,CAAWC,MAAM,eAAeC,YAAU,EAACC,QAAQ,SACjD,kBAAC4G,EAAA,EAAD,CACEE,KAAK,OACLpH,UAAWmH,MACXG,YAAU,EACV/H,GAAG,QACHwF,KAAK,QACLsC,mBAAiB,WAGrB,kBAAC,EAAAlH,UAAD,CAAWC,MAAM,cAAcE,QAAQ,eACrC,kBAAC4G,EAAA,EAAD,CACEE,KAAK,OACLpH,UAAWuH,MACXhI,GAAG,cACHwF,KAAK,cACLsC,mBAAiB,iBAGrB,kBAAC,EAAAlH,UAAD,CACEC,MAAM,qBACNc,UAAW,kBAAC,KAAD,MACXZ,QAAQ,qBAER,kBAAC4G,EAAA,EAAD,CACEE,KAAK,OACLpH,UAAWmH,MACX5H,GAAG,oBACHwF,KAAK,oBACLsC,mBAAiB,oBACjBG,aAAcvJ,EAAOwJ,qBAGzB,kBAAC,KAAD,CAAuBC,kBAAmBzJ,EAAO0J,yBAMnDnG,IAAWC,OAAkB,cAEnCsF,GAAkBzF,UAAY,CAC5BrD,OAAQqD,WACR3B,MAAO2B,WACP1C,OAAQ2C,aAmBV,UAAeG,cACbC,cAjBsB,SAACC,GACvB,IAAM3D,EAASwH,KAAKC,MAAMlE,GAASI,EAAO,YAC1C,MAAO,CACL3D,SACA0B,MAAO6B,GAASI,EAAO,SACvBgG,cAAe,CACb7C,KAAM,GAAF,OAAK9G,EAAO8G,MAChBpF,MAAO,GAAF,OAAK1B,EAAO0B,OACjBsH,YAAa,GAAF,OAAKhJ,EAAOgJ,aACvB9H,UAAWqC,GAASI,EAAO,aAC3BjB,eAAgBa,GAASI,EAAO,kBAChClC,QAAS8B,GAASI,EAAO,iBAO7BC,OAAU,CACRC,KAAM,aACNC,kBAAkB,EAClBC,0BAA0B,IAL9B,CAOE+E,I,OCzGIc,IAAStL,QAAH,kJASNuL,GAAsB,SAAC,GAOvB,IANJC,EAMI,EANJA,YACAhD,EAKI,EALJA,KACA0C,EAII,EAJJA,kBACAE,EAGI,EAHJA,oBACAK,EAEI,EAFJA,kBACA3F,EACI,EADJA,qBAEA,GAAiC5F,cAASoL,GAAQ,CAChDlF,UAAW,CAAEoF,iBADPrL,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,QAIrB,GAAID,EACF,OAAOA,EAGT,GAAIC,EACF,OAAO,kBAACoC,EAAA,EAAD,MAGT,IACe2B,EACXjE,EADFyC,UAAawB,eAGf,OACE,kBAAC,EAAAb,YAAD,KACE,kBAAC,EAAAC,KAAD,CAAMC,UAAWC,mBAAjB,UACA,kBAAC,EAAAF,KAAD,kDACA,kBAAC,EAAAA,KAAD,CAAMC,UAAWC,kBAAiBgI,MAAO,CAAEC,UAAW,IACnDnD,GAEH,kBAAC,EAAAoD,SAAD,CAAUnI,UAAWoI,uBACnB,kBAAC,EAAAC,aAAD,CAAcrI,UAAWsI,2BAAzB,eAGA,kBAAC,EAAAD,aAAD,CAAcrI,UAAWsI,2BACtBN,GAEH,kBAAC,EAAAK,aAAD,CAAcrI,UAAWsI,2BAAzB,wBAGA,kBAAC,EAAAD,aAAD,CAAcrI,UAAWsI,2BACtBX,EADH,KAGCF,GACC,kBAAC,aAAD,KACE,kBAAC,EAAAY,aAAD,CAAcrI,UAAWsI,2BAAzB,sBAGA,kBAAC,EAAAD,aAAD,CAAcrI,UAAWsI,2BACtBb,IAIP,kBAAC,EAAAY,aAAD,CAAcrI,UAAWsI,2BAAzB,WACA,kBAAC,EAAAD,aAAD,CAAcrI,UAAWsI,2BACvB,kBAAC,EAAAH,SAAD,CAAUnI,UAAWoI,uBAClB/F,EAAqBrF,KAAI,gBAAGwF,EAAH,EAAGA,eAAgBY,EAAnB,EAAmBA,MAAnB,OACxB,kBAAC,aAAD,CAAgBvC,IAAK2B,GACnB,kBAAC,EAAA6F,aAAD,CACErI,UAAWsI,0BACXL,MAAO,CAAEM,WAAY,WAFvB,QAIQ5H,EAJR,IAIyB6B,GAEzB,kBAAC,EAAA6F,aAAD,CAAcrI,UAAWsI,2BACtBlF,EADH,IACWA,EAAQ,EAAI,UAAY,mBAWnD0E,GAAoBxG,UAAY,CAC9ByG,YAAazG,WACb3B,MAAO2B,WACPyD,KAAMzD,WACNmG,kBAAmBnG,WACnBqG,oBAAqBrG,WACrB0G,kBAAmB1G,WACnBe,qBAAsBf,YACpBA,UAAgB,CACdkB,eAAgBlB,WAChB8B,MAAO9B,eAKb,IAAME,IAAWC,OAAkB,cAEnC,UAAeE,cAAQ,SAACC,GAAD,MAAY,CACjCmG,YAAavG,GAASI,EAAO,aAC7BjC,MAAO6B,GAASI,EAAO,SACvBmD,KAAMvD,GAASI,EAAO,QACtB6F,kBAAmBjG,GAASI,EAAO,qBACnCS,qBAAsBb,GAASI,EAAO,wBACtC+F,oBACEa,WAAWhH,GAASI,EAAO,yBAA2B,IACxDoG,kBAAmBvC,KAAKC,MAAMlE,GAASI,EAAO,YAAYmD,KAC1D0D,WAAYjH,GAASI,EAAO,sBAAsBiB,UATpD,CAUIiF,I,mDC1GEY,GAAuB,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAC3BA,GAAUC,MAAMC,QAAQF,IAAWA,EAAO9F,OAAS,EACjD,kBAAC,EAAAuC,eAAD,CAAgBlI,UAAU,wBACxB,kBAAC,EAAA4L,KAAD,KACGH,EAAO3L,KAAI,SAACL,GAAD,OACV,kBAAC,EAAAoM,SAAD,CAAUlI,IAAKlE,GAAQA,QAI3B,MAEN+L,GAAqBpH,UAAY,CAC/BqH,OAAQrH,WAGH,IAAM0H,GAAuB,SAAC,GAW/B,IAVJC,EAUI,EAVJA,eACAC,EASI,EATJA,mBACAjC,EAQI,EARJA,YACAlC,EAOI,EAPJA,KACA4C,EAMI,EANJA,oBACAF,EAKI,EALJA,kBACA9H,EAII,EAJJA,MACAoI,EAGI,EAHJA,YACAoB,EAEI,EAFJA,QACA/G,EACI,EADJA,mBAEA,GAA8BgH,cAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,cAAS,uCAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA4BJ,cAAS,MAArC,eAAOT,EAAP,KAAec,EAAf,KACA,GAA4BL,eAAS,GAArC,eAAOM,EAAP,KAAeC,EAAf,KACMC,GAAeC,WAEfC,EAAa,SAACC,GAClBT,EAAsB,IAAXS,IA4Cb,OAzCA/C,gBAAU,WAaR4C,EAAa,KAZK,CAChBV,qBACAjC,cACAlC,OACA4C,sBACAF,kBAAmB,CAAEtK,MAAOsK,GAC5B9H,QACAoI,cACAiC,MAAOb,EACP/G,sBAG4B0H,GAC3BG,MAAK,YAAY,IAAT1K,EAAS,EAATA,GACP+J,EAAW,KACXE,KACAU,QAAqB,CACnBC,QAAS,UACThN,MAAO,mBAAF,OAAqB4H,EAArB,KACLqF,aAAa,EACbnD,YACE,0CACW,iDADX,cACqD,IACnD,kBAAC,EAAAoD,KAAD,CAAMC,GAAE,wBAAmB/K,IAAOwF,GAFpC,UAOLwF,OAAM,SAAC5N,GAAU,UAChB6M,EAAU,UAAC7M,EAAM6N,oBAAP,aAAC,EAAoBjB,SAC/BE,EAAS,UAAC9M,EAAM6N,oBAAP,iBAAC,EAAoBC,cAArB,aAAC,EAA4B9B,QACtCgB,GAAU,IACVO,QAAqB,CACnBC,QAAS,SACThN,MAAO,wBACP8J,YAAatK,EAAM4M,eAGxB,IAGD,kBAAC,EAAAmB,SAAD,KACE,kBAAC,EAAA1F,WAAD,CAAYmF,QAASQ,0BACnB,kBAAC,EAAAC,eAAD,CAAgBC,KAAMC,QACtB,6BACA,kBAAC,EAAA7F,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,mBAGA,kBAAC,EAAAC,eAAD,KACE,kBAAC,KAAD,CAAaiE,QAASA,EAASK,OAAQA,KAEzC,kBAAC,EAAAtE,eAAD,CAAgBlI,UAAWwM,GAAU,yBAClCH,GAEH,kBAACb,GAAD,CAAsB/L,MAAOgM,IAC7B,kBAAC,EAAAoC,2BAAD,MACgB,MAAZ1B,GAAmBK,IACnB,kBAAC,EAAA7D,OAAD,CACEsE,QAAS,UACTa,OAAO,oBACPlK,QAAS,WACPmI,MAGDS,EAAS,OAAS,6BASjCV,GAAqB1H,UAAY,CAC/ByG,YAAazG,sBACbmG,kBAAmBnG,WACnB4H,mBAAoB5H,sBACpB3B,MAAO2B,sBACPyD,KAAMzD,sBACN2F,YAAa3F,WACb6H,QAAS7H,UACTqG,oBAAqBrG,WACrB2H,eAAgB3H,SAChBc,mBAAoBd,YAAkBA,YAAkBjB,YAGnD,IAAMmB,IAAWC,OAAkB,cAE1C,UAAeC,cACbC,cAAQ,SAACC,GAAD,MAAY,CAClBmG,YAAavG,GAASI,EAAO,aAC7B6F,kBAAmBjG,GAASI,EAAO,qBACnCsH,mBAAoBzD,KAAKC,MAAMlE,GAASI,EAAO,YAAYrC,GAC3DI,MAAO6B,GAASI,EAAO,SACvBmD,KAAMvD,GAASI,EAAO,QACtBqF,YAAazF,GAASI,EAAO,eAC7B+F,oBACEa,WAAWhH,GAASI,EAAO,yBAA2B,IACxDuH,QAAS3H,GAASI,EAAO,WACzBQ,mBAAoBZ,GAASI,EAAO,2BAEtCC,OAAU,CACRC,KAAM,aACNC,kBAAkB,EAClBC,0BAA0B,IAE5BiJ,KAlBF,CAmBEjC,I,ylBCtJK,IAAMkC,GAAe,SAAC,GASvB,IARJ/L,EAQI,EARJA,UACAwB,EAOI,EAPJA,eACAgH,EAMI,EANJA,oBACA5C,EAKI,EALJA,KACArF,EAII,EAJJA,QACAC,EAGI,EAHJA,MACAyC,EAEI,EAFJA,mBACA+I,EACI,EADJA,UAEMC,GAAUC,kBAChB,GAA0CjC,cAAS,GAAnD,eAAOkC,EAAP,KAAsBC,EAAtB,KAEMC,EAAc,WAClB,IAAQC,EAAaL,EAAbK,SACJA,EAASC,MACXN,EAAQO,KAAR,SAAkBF,GAAlB,IAA4BC,KAAM,OAShCE,EAAU,WACdR,EAAQO,KAAK,kBAGTE,EAAQ,CACZ,CACEtM,GAAI,EACJwF,KAAM,qBACN/E,UAAW,kBAAC,EAAD,MACX8L,YAAYC,SAAsB5M,EAAWwB,EAAgBjB,IAE/D,CACEH,GAAI,EACJwF,KAAM,UACN/E,UAAW,kBAAC,GAAD,MACXgM,UAAWV,GAAiB,EAC5BQ,YAAYG,SAAoBlH,EAAMpF,EAAOgI,IAE/C,CACEpI,GAAI,EACJwF,KAAM,UACN/E,UAAW,kBAAC,EAAD,MACXgM,UAAWV,GAAiB,EAC5BQ,YAAYI,SAAoBf,IAElC,CACE5L,GAAI,EACJwF,KAAM,QACN/E,UAAW,kBAAC,EAAD,MACXgM,WAAWb,aAAA,EAAAA,EAAWtI,QAAS,GAAKyI,GAAiB,EACrDQ,YAAYK,SAAkB/J,IAEhC,CACE7C,GAAI,EACJwF,KAAM,SACN/E,UAAW,kBAAC,GAAD,MACXoM,eAAgB,SAChBJ,WACEG,SAAkB/J,KAClB+I,aAAA,EAAAA,EAAWtI,QAAS,GACpByI,GAAiB,GAErB,CACE/L,GAAI,EACJwF,KAAM,WACN/E,UAAW,kBAAC,GAAD,CAAsBiJ,eAAgB2C,IACjDS,gBAAgB,EAChBL,WAAWb,aAAA,EAAAA,EAAWtI,QAAS,GAAKyI,GAAiB,IAIzD,OACE,kBAAC,aAAD,KACE,kBAAC,EAAAgB,OAAD,CACEC,QAAM,EACNC,OA5DS,SAAC,GAAW,IAATjN,EAAS,EAATA,GAChBgM,EAAiBD,EAAgB/L,EAAKA,EAAK+L,GAC3CE,KA2DIiB,WAAYjB,EACZkB,OAAQlB,EACRI,QAASA,EACTzO,MAAM,qBACN8J,YAAY,mDACZ4E,MAAOA,MAMfX,GAAa5J,UAAY,CACvBnC,UAAWmC,WACXX,eAAgBW,WAChBe,qBAAsBf,YACpBA,UAAgB,CACdkB,eAAgBlB,WAChB8B,MAAO9B,cAGXqG,oBAAqBrG,WACrBmG,kBAAmBnG,WACnBqL,SAAUrL,SACViL,OAAQjL,SACRyD,KAAMzD,WACN2H,eAAgB3H,SAChB5B,QAAS4B,WACT3B,MAAO2B,WACPc,mBAAoBd,YAAkBA,YACtC6J,UAAW7J,YAAkBA,aAG/B4J,GAAapE,aAAe,CAC1ByF,QAAQ,GAGV,IAAM/K,IAAWC,OAAkB,cACnC,UAAeE,cAAQ,SAACC,GAAD,MAAY,CACjCzC,UAAWqC,GAASI,EAAO,aAC3BjB,eAAgBa,GAASI,EAAO,kBAChCS,qBAAsBb,GAASI,EAAO,wBACtC6F,kBAAmBjG,GAASI,EAAO,qBACnC+F,oBAAqBnG,GAASI,EAAO,wBAA0B,QAC/DmD,KAAMvD,GAASI,EAAO,QACtBlC,QAAS8B,GAASI,EAAO,WACzBjC,MAAO6B,GAASI,EAAO,SACvBQ,mBAAoBZ,GAASI,EAAO,sBACpCuJ,UAAW3J,GAASI,EAAO,cAV7B,CAWIsJ,K,o0BC3IG,IAYD0B,EAAuB,SAAC,GAAiC,MAA/B3O,EAA+B,EAA/BA,OAAQ4O,EAAuB,EAAvBA,iBACtC,EAbkC,WAClC,OAA4CzD,eAAS,GAArD,eAAO0D,EAAP,KAAuBC,EAAvB,KACA,MAAO,CACLD,EACA,SAACE,GACC,IAAMC,GAAQC,QAAeF,GAE7B,OADAD,EAAkBE,GACXA,IAMiCE,GAA5C,eAAOL,EAAP,KAAuBM,EAAvB,KAEA,OACE,yBAAKlQ,UAAU,aACb,kBAAC,EAAAiD,UAAD,CAAWC,MAAM,qBAAqBC,YAAU,EAACC,QAAQ,eACvD,kBAAC,EAAA+M,SAAD,CACEpF,MAAO,CAAE7B,MAAO,IAAKkH,OAAQ,KAC7BjN,YAAU,EACV+G,KAAK,OACL7H,GAAG,cACHwF,KAAK,cACLsC,mBAAiB,cACjBG,aAAcvJ,EAAOgJ,YACrB9F,SAAU,SAACC,GACTyL,GAAiB,SAAC5O,GAAD,cACZA,GADY,IAEfgJ,YAAa7F,WAMrB,kBAAC,EAAAjB,UAAD,CACEC,MAAM,qBACNc,UAAW,kBAAC,KAAD,MACXZ,QAAQ,sBAER,kBAAC,EAAAiN,UAAD,CACEnG,KAAK,OACLa,MAAO,CAAE7B,MAAO,KAChB7G,GAAG,qBACHwF,KAAK,qBACLsC,mBAAiB,qBACjBG,aAAcvJ,SAAF,UAAEA,EAAQwJ,yBAAV,aAAE,EAA2BtK,MACzCgE,SAAU,SAACC,GACTyL,GAAiB,SAAC5O,GAAD,cACZA,GADY,IAEfwJ,kBAAmB,EAAF,KACZxJ,EAAOwJ,mBADK,IAEftK,MAAOiE,aAOjB,kBAAC,EAAAjB,UAAD,CACEqN,UAAWV,EAAiB,UAAY,QACxC1M,MAAM,2BACNc,UAAW,kBAAC,KAAD,MACXZ,QAAQ,mBACRmN,kBAAkB,iDAClBC,WAAW,2CAEX,kBAAC,EAAAH,UAAD,CACEnG,KAAK,SACLa,MAAO,CAAE7B,MAAO,KAChBrB,KAAK,uBACLxF,GAAG,uBACHiI,aAAcvJ,EAAO0J,oBACrBN,mBAAiB,mBACjBlG,SAAU,SAACC,GACTyL,GAAiB,SAAC5O,GAAD,cACZA,GADY,IAEf0J,oBAAqBvG,EACrBuM,yBAA0BP,EAAkBhM,cAS1DwL,EAAqBtL,UAAY,CAC/BrD,OAAQqD,UAAgB,CACtB2F,YAAa3F,WACbmG,kBAAmBnG,WACnBqG,oBAAqBrG,cAAoB,CACvCA,WACAA,eAGJuL,iBAAkBvL,UAGpB,U,ooBCrFA,IAAMW,GAAiB1F,QAAH,msBAqCd2F,GAAmB3F,QAAH,+QA0BhBqR,EAA+B,kBACnC,kBAAC,EAAA5I,WAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,8BAGA,kBAAC,EAAAC,eAAD,yFAIA,kBAAC,EAAAA,eAAD,sEAgDSyI,EAAqB,SAAC,GAM7B,MALJ5P,EAKI,EALJA,OACAmE,EAII,EAJJA,mBACAoC,EAGI,EAHJA,sBACAnC,EAEI,EAFJA,qBACAyL,EACI,EADJA,eAEMnN,EAAiB1C,aAAH,EAAGA,EAAQ0C,eACzB2B,EAAkBwB,OAAOC,KAAK1B,GAAsB9B,OACpDkC,EACJ,6BAAsB9B,EAAtB,wDAC4C2B,EAAgBI,KAAK,KADjE,KAGF,GAIIjG,cAASyF,EAAkB,CAC7BS,UAAW,CACTlD,OAAQgD,GAEVG,KAAiC,IAA3BN,EAAgBO,SAPhBC,EADR,EACEpG,KACOqG,EAFT,EAEEpG,MACSqG,EAHX,EAGEpG,QAQIwC,EAAa0D,SAAH,UAAGA,EAAgB1D,kBAAnB,aAAG,EAA4B6D,MAEzCC,EApEkB,SAACjF,EAAQoE,EAAsBjD,GAA/B,OACxB0E,OAAOiK,OAAO1L,GACX9B,MAAKyN,QAAc,iBAAkB,SACrChR,KAAI,YAA4C,IAAzCwF,EAAyC,EAAzCA,eAAuBW,EAAkB,EAAzBC,MACtBZ,EAAiB,GAAH,OAAMA,GACpB,IAAI9C,EAAUzB,EAAOA,OAAOnB,SAASwC,MACnC,SAACI,GAAD,OAAaA,EAAQ8C,iBAAmBA,KAEtC7B,EAAiB1C,EAAO0C,eAE5B,IAAKjB,GAAWN,EAAY,CAC1B,IAAMD,EApCyB,SAACC,EAAYoD,GAAb,OACrCpD,EAAWE,MAAK,SAACH,GAAD,uBACdA,EAAUkE,sCADI,aACd,EAA0CxD,SAAS2C,MAkC7Bc,CAChBlE,EACAoD,GAEF,GAAIrD,EAAW,CACb,IAAMqE,EApCY,SAACrE,EAAWoE,GAAZ,OAC1BpE,EAAUrC,SAASwC,MACjB,SAACkE,GAAD,OAAsBA,EAAiB7D,QAAU4D,KAkClBE,CAAoBtE,EAAWlB,EAAO0B,OAC3D6D,IACF9D,EAAUzB,EAAOA,OAAOnB,SAASwC,MAC/B,SAACI,GAAD,OACEA,EAAQuO,kBAAoBzK,EAAiBjE,IAC7CG,EAAQ8C,iBAAmBA,KAG/B9C,EAAU,OACL8D,GADE,IAELrE,YACAwB,kBACGjB,KAMX,MAAO,CACLA,UACAyD,cACAO,kBAAmBlB,MAGtB/C,QAAO,gBAAGC,EAAH,EAAGA,QAASgE,EAAZ,EAAYA,kBAAZ,QAAsChE,GAAWgE,KA4B1CwK,CAAWjQ,EAAQoE,EAAsBjD,GACpDuE,GAAsBC,QAAqBV,GAC3CzD,EAASqE,OAAOC,KAAKJ,GACxB3G,KAAI,SAACuF,GAAD,qBAAeA,MACnBG,KAAK,QACR,GAIIjG,cAASwF,EAAgB,CAC3BU,UAAW,CACTlD,UAEFmD,KAAwB,IAAlBnD,EAAOoD,SAPPoB,EADR,EACEvH,KACOwH,EAFT,EAEEvH,MAQI0H,KAVN,EAGEzH,UAOsCoG,SAA2B3B,EAC7D+C,GACHC,IAAgBnB,aAAA,EAAAA,EAAUL,QAAS,EAAIoB,OAAe5C,EAEpDgD,GACHyJ,IACI5K,EAAS5D,MAAK,SAAC6O,GAAD,OACdlQ,EAAOA,OAAOnB,SAASwC,MACrB,SAACI,GAAD,OAAaA,EAAQ8C,iBAAmB2L,EAAIzK,0BAMpDgB,sBAAgB,WACd,GAAIT,EAAc,CAChB,IAAMnH,GAAWmH,aAAA,EAAAA,EAAcnH,SAASC,MAAMC,KAAI,SAACuH,GAAD,OAAOA,EAAEtH,UAAS,GAC9D0H,GAAiBC,QACrB9H,EACA6G,GAEFa,GAAsB,SAAC4J,GAAD,OACpBvJ,QAA6BF,EAAgByJ,SAGhD,CAACnK,IACJ,IAAMtH,EAAQoG,GAAmBmB,EAEjC,OACE,kBAAC,KAAD,CACE9G,YAAa,CACXT,QACAD,MAAOC,GAASyH,EAChBxH,QAASyH,EACTgK,OAAQhK,IAAiBD,IAAczH,IAGzC,kBAAC,KAAD,CAAeU,SAAS,WACtB,kBAACgI,EAAA,EAAD,KACE,kBAACrG,EAAA,EAAD,QAGJ,kBAAC,KAAD,CAAe3B,SAAS,QACtB,kBAAC,EAAAyC,YAAD,KACE,kBAAC,EAAAC,KAAD,8KAMF,kBAACuF,EAAA,GAAD,CACEhI,QAAS,CAACC,KAAcA,KAAkBA,MAC1C2F,SAAUA,EACVd,mBAAoBA,EACpBoC,sBAAuBA,EACvBnG,qBAAqB,EACrBkH,gBAAc,EACdC,MAAO,KAGX,kBAAC,KAAD,CAAenI,SAAS,SACtB,kBAACuQ,EAAD,SAMRC,EAAmBvM,UAAY,CAC7BwM,eAAgBxM,SAChBrD,OAAQqD,WACRe,qBAAsBf,UAAgB,CACpCkB,eAAgBlB,UAAgB,CAC9BkB,eAAgBlB,WAChB8B,MAAO9B,eAGXc,mBAAoBd,UACpBkD,sBAAuBlD,UAGzB,U,0mBC3PA,IAAM0D,EAAa,SAAC,GAAD,IAAGrE,EAAH,EAAGA,eAAH,OACjB,kBAAC,aAAD,KACE,kBAAC,EAAAb,YAAD,CAAa5C,UAAU,cACrB,kBAAC,EAAA6C,KAAD,4BACsB,mCAASY,GAD/B,+DAKF,kBAAC,EAAAb,YAAD,CAAa5C,UAAU,cACrB,kBAAC,EAAA6C,KAAD,qBAAoBY,EAApB,4BAKNqE,EAAW1D,UAAY,CACrBX,eAAgBW,YAGlB,IAAMwE,EAAmB,SAAC,GAAD,IAAGnF,EAAH,EAAGA,eAAH,OACvB,kBAAC,aAAD,KACE,kBAAC,EAAAb,YAAD,CAAa5C,UAAU,cACrB,kBAAC,EAAA6C,KAAD,6BACuB,mCAASY,GADhC,kDAQNmF,EAAiBxE,UAAY,CAC3BX,eAAgBW,YAGlB,IAAMgN,EAAuB,SAAC,GAKxB,QAJJrQ,OAAcsQ,EAIV,EAJMhP,GAAcoB,EAIpB,EAJoBA,eACxB6N,EAGI,EAHJA,YACAC,EAEI,EAFJA,eACAzI,EACI,EADJA,gBAEA,GAA2BqF,kBAAnBM,EAAR,EAAQA,KAAMF,EAAd,EAAcA,SAEd,OACE,kBAAC,aAAD,KACE,kBAAC,KAAD,CACEnO,QAAS,CACPC,KACAA,KAAwB,QACxBA,MAEFS,yBAA0B,CAAC2C,GAC3BsF,iBAAkB,kBAACH,EAAD,CAAkBnF,eAAgBA,IACpDuF,oBAAqB,kBAAClB,EAAD,CAAYrE,eAAgBA,IACjD2F,SAAO,EACPC,aAAa,EACb5I,MAAO6I,KACP3I,cACE8C,GAAc,6BACQA,EADR,2BACyC4N,GAEzD9H,cAAc,EACdpI,qBAAqB,EACrBqI,mBAAoBV,EACpBW,SAAU8H,IAEXD,GACC,kBAAC,EAAAE,MAAD,CACEvE,QAAQ,OACRwE,UAAQ,EACRxR,MAAM,2FACNyR,YACE,kBAAC,EAAAC,gBAAD,CACE/N,QAAS,kBAAM6K,EAAK,OAAKF,GAAN,IAAgBC,KAAM,cAD3C,sBAOF,wIAUV4C,EAAqBhN,UAAY,CAC/BrD,OAAQqD,WACRkN,YAAalN,SACbmN,eAAgBnN,SAChB0E,gBAAiB1E,WAGnB,U,olBCjGA,IAYawN,EAAiB,SAAC,GAOzB,MANJ7Q,EAMI,EANJA,OACA4O,EAKI,EALJA,iBACAzK,EAII,EAJJA,mBACAoC,EAGI,EAHJA,sBACAwB,EAEI,EAFJA,gBACA+I,EACI,EADJA,mBAEMC,GAAiB/Q,SAAA,UAAAA,EAAQA,cAAR,eAAgBnB,WAAY,GACnD,GAAwDsM,cAAS,IAAjE,eAAO/G,EAAP,KAA6B4M,EAA7B,KACA,GAAsC7F,eAAS,GAA/C,eAAOoF,EAAP,KAAoBV,EAApB,KAEMoB,EAAqB,SAAClJ,GAxBD,IAAWgE,EAyBpC+E,EAAmB/I,GAEnBiJ,GA3BoCjF,EA4BGhE,GAAhBgJ,GA3BZ,IAAIG,QAAO,SAACC,EAAK1P,GACO,MAOnC,MAP+B,KAA3BA,EAAQ8C,iBACV4M,EAAI,EAAA1P,EAAQ8C,kBAAZ4M,EAAI,GAA4B,CAC9B5M,eAAgB9C,EAAQ8C,eACxBY,MAAO,KAIJgM,KACNC,QAAwBrF,GAAS,QA6CpC,OAbAhD,gBAAU,WACR,GAAI/I,EAAQ,CACV,IAAM0P,EACJ1P,EAAO0J,oBAAsB,KAAO1J,EAAO0J,oBAAsB,EACnEkF,EAAiB,OACZ5O,GADW,IAEd0P,8BAhB2B,WAC/B,GAAI1P,EAAQ,CAEV,IAAMqR,EAAsBN,EAAevP,QACzC,sBAAG+C,kBAELgC,GAAsBK,QAA6ByK,KAYnDC,GACAL,EAAmBjR,EAAO+L,UAE3B,CAAC/L,IAGF,kBAAC,EAAAiC,KAAD,KACE,kBAAC,KAAD,CAAYsP,WAAW,WACrB,kBAAC,EAAAC,IAAD,CAAKC,SAAS,UAAUvS,MAAO,kBAAC,EAAAwS,aAAD,iBAC7B,kBAAC,EAAD,CACE1R,OAAQA,EACR4O,iBAAkBA,KAItB,kBAAC,EAAA4C,IAAD,CAAKC,SAAS,QAAQvS,MAAO,kBAAC,EAAAwS,aAAD,eAC3B,kBAAC,EAAD,CACE1R,OAAQA,EACR6P,eAAgBA,EAChBtJ,sBAAuBA,EACvBpC,mBAAoBA,EACpBC,qBAAsBA,KAI1B,kBAAC,EAAAoN,IAAD,CAAKC,SAAS,UAAUvS,MAAO,kBAAC,EAAAwS,aAAD,iBAC7B,kBAAC,EAAD,CACE1R,OAAQA,EACRuQ,YAAaA,EACbxI,gBAAiBA,EACjByI,eAAgBS,QAQ5BJ,EAAexN,UAAY,CACzBrD,OAAQqD,WACRuL,iBAAkBvL,SAClBc,mBAAoBd,YAAkBA,YACtCkD,sBAAuBlD,SACvByN,mBAAoBzN,SACpB0E,gBAAiB1E,WAGnB,U,uCCtGasO,EAAkB,WAC7B,IAAMC,GAASC,UACTC,GAAmBC,QAAoB,iBAC7C,OAAO,WACLD,EAAiB,CAAErE,KAAMmE,M,ykBCEtB,IAAMI,IAAqB1T,QAAH,wiCAyDlB2T,GAAa,SAAC,GAAc,IAAZC,EAAY,EAAZA,MACR5B,GAAa6B,iBAAxBC,UACR,GAAiC5T,cAASwT,GAAoB,CAC5DtN,UAAW,CAAE4L,cADP7R,EAAR,EAAQA,KAAME,EAAd,EAAcA,QAASD,EAAvB,EAAuBA,MAGjBsB,EAASvB,aAAH,EAAGA,EAAMgD,QACf4Q,EAAeV,IACrB,GAA0CxG,cAAS,MAAnD,eAAOmH,EAAP,KAAsB1D,EAAtB,KACA,GAAoDzD,cAAS,IAA7D,eAAOhH,EAAP,KAA2BoC,EAA3B,KACA,GAA8C4E,cAAS,IAAvD,eAAOpD,EAAP,KAAwB+I,EAAxB,KACMyB,EAAcD,IAAkBA,EAAc5C,yBAMpD,EDvEuB,SAAC1P,EAAQwS,GAChC,IAAM7G,GAAeC,UACfyG,EAAeV,IACrB,GAAgCxG,eAAS,GAAzC,eAAOsH,EAAP,KAAiBC,EAAjB,KA4BA,MAAO,CAACD,EA3BO,WACb,GAAIA,EACF,OAAOE,QAAQC,QAAQ,IAGzBF,GAAY,GACZ/G,EAAa3L,EAAQwS,GAClBxG,MAAK,WACJ0G,GAAY,IACZzG,OAAqB,CACnBC,QAAS,UACThN,MAAO,iBACPiN,aAAa,IAEfkG,OAED/F,OAAM,SAAC5N,GACNgU,GAAY,IACZzG,OAAqB,CACnBC,QAAS,SACThN,MAAO,wBACP8J,YAAatK,EAAM4M,UAErB+G,SC4CqBQ,CAAU7S,EALF,SAC9BsS,GAD2B,IAE9BnO,qBACA4H,MAAOhE,KAET,eAAO0K,EAAP,KAAiBK,EAAjB,KAEMC,EAAU,CACd,kBAAC,EAAAnL,OAAD,CACEyB,WAAYkJ,EACZ3P,IAAI,OACJmK,OAAO,uBACPb,QAAQ,UACR8G,qBAAqB,SACrBC,UAAWR,EACX5P,QAASiQ,GAPX,QAWA,kBAAC,EAAAlL,OAAD,CACEhF,IAAI,SACJmK,OAAO,yBACPb,QAAQ,OACRrJ,QAAS,kBAAMwP,MAJjB,WAYF,OAFAa,OAAehB,EAAOlS,aAAR,EAAQA,EAAQ8G,MAG5B,kBAAC,EAAAqM,MAAD,CACE7E,QAAM,EACN9N,SAAU,MACVwJ,MAAO,CAAEoJ,UAAW,SACpBlH,QAAS,QACTa,OAAO,kBACP7N,MAAK,eAAUc,EAASA,EAAO8G,KAAO,IACtC6G,QAAS,kBAAM0E,KACfU,QAASA,GAET,kBAAC,KAAD,CAAoB5T,YAAa,CAAEa,SAAQrB,UAASD,UAClD,kBAAC,KAAD,CAAeU,SAAS,WACtB,kBAAC,EAAA2B,QAAD,OAEF,kBAAC,KAAD,CAAe3B,SAAS,UACtB,kBAAC,EAAD,CAEIY,SACAsS,gBACA1D,mBACAzK,qBACAoC,wBACAwB,kBACA+I,2BASdmB,GAAW5O,UAAY,CACrB6O,MAAO7O,YAGT,a,0RCnIMgQ,EAAa,SAAC,GAAD,IAAG/R,EAAH,EAAGA,GAAIgS,EAAP,EAAOA,SAAP,OACjB,kBAAC,EAAAlH,KAAD,CAAMC,GAAI,CAAEkH,SAAU,YAAF,OAAcjS,KAASgS,IAG7CD,EAAWhQ,UAAY,CACrB/B,GAAI+B,WACJiQ,SAAUjQ,UAGL,IAAMmQ,EAAO,SAAC,GAOf,IANJlS,EAMI,EANJA,GACAwF,EAKI,EALJA,KACApE,EAII,EAJJA,eACA6B,EAGI,EAHJA,eAGI,IAFJ/E,kBAEI,aADJD,gBACI,SAIJ,OACE,kBAAC,EAAAsC,YAAD,KACGtC,EAAW,kBAAC8T,EAAD,CAAkB/R,MAAOwF,GAAqBA,EAL5C,SAACpE,EAAgB6B,GAAjB,QACd7B,KAAoB6B,GAAkB/E,EAMrCiU,CAAU/Q,EAAgB6B,IACzB,kBAAC,EAAAzC,KAAD,CAAMC,UAAWC,sBAAjB,QACQU,EADR,IACyB6B,KAOjCiP,EAAKnQ,UAAY,CACf/B,GAAI+B,WACJyD,KAAMzD,WACNX,eAAgBW,WAChBkB,eAAgBlB,WAChB7D,WAAY6D,SACZ9D,SAAU8D,UAGL,IAMMqQ,EAAa,SAAC,GAAD,QAAGC,kBAAH,MAAgB,gBAAhB,WAAiCC,UAEvDD,EAEA,kBAAC,KAAD,CAAuBE,eAAe,YACnCF,IAIPD,EAAWrQ,UAAY,CACrBuQ,UAAWvQ,SACXsQ,WAAYtQ,YAGP,IAAMyQ,EAAc,SAAC,GAAD,QAAGC,0BAAH,MAAwB,GAAxB,SACK,IAA9BA,EAAmBnP,OACfmP,EAAmBhV,KAAI,SAAC0C,GAAD,OACrB,kBAACiS,GAAD,QAAY9Q,IAAG,qBAAgBnB,EAAQH,KAAUG,OAEnD,iBAENqS,EAAYzQ,UAAY,CACtB0Q,mBAAoB1Q,WAGf,IAAM2Q,EAAc,SAAC,GAAD,IAAG1S,EAAH,EAAGA,GAAH,IAAOyS,mBAAP,kBAA4B,GAA5B,GACNnP,OAAS,EAC1B,kBAACyO,EAAD,CAAkB/R,MAAlB,eAEA,IAGJ0S,EAAY3Q,UAAY,CACtB/B,GAAI+B,WACJ0Q,mBAAoB1Q,WAGf,IAAM4Q,EAAW,SAAC,GAAD,IAAGrV,EAAH,EAAGA,SAAH,OACrBA,GAAY,IAAIgG,OAAS,GACxB,kBAACsP,EAAA,EAAD,CACEC,QAAM,EACNC,KAAMxV,EAASG,KAAI,SAACuH,GAAD,OAAOA,EAAEQ,QAAMrC,KAAK,MACvCG,OAAQ,OAIdqP,EAAS5Q,UAAY,CACnBzE,SAAUyE,WAGL,IAAMgR,EAAc,SAAC,GAA+B,IAA7B/S,EAA6B,EAA7BA,GAAIyS,EAAyB,EAAzBA,mBAC1BO,GAAcC,QAAoBR,GAAoBnP,OAC5D,OAAO,kBAACyO,EAAD,CAAkB/R,MAAOgT,IAGlCD,EAAYhR,UAAY,CACtB/B,GAAI+B,WACJ0Q,mBAAoB1Q,WAIf,IAAMmR,EAAkB,SAAC,GAAD,IAAGT,EAAH,EAAGA,mBAAH,OAC7BU,SAAgBC,QAAoBX,KAEtCS,EAAgBnR,UAAY,CAC1B0Q,mBAAoB1Q,WAGf,IAAMsR,EAAc,SAAC9V,GAC1B,IAAM+V,EAAQ/V,EAASE,KAAI,SAAC0C,GAAD,OAAa,IAAIoT,KAAKpT,EAAQkT,gBACnDG,EAAO,IAAID,KACfE,KAAKC,IAAIC,MACP,KACAL,EAAMpT,QAAO,SAAC0T,GAAD,OAAUC,SAASD,QAKpC,OAFeJ,aAAgBD,MAAQM,SAASL,GAAQA,EAAOM,MAKpDC,EAAc,SAAC,GAAqC,IAAfxW,EAAe,EAAnCkV,mBACtBuB,EAAkBX,EAAY9V,GAAY,IAEhD,OAAOyW,aAA2BT,KAChC,kBAACU,EAAA,EAAD,CAAYL,KAAML,KAAKpN,MAAM6N,GAAkBnM,KAAK,aAEpDmM,GAIJD,EAAYhS,UAAY,CACtB0Q,mBAAoB1Q,WAGf,IAAMmS,EAAwB,SAAC,GAAD,IAAGjR,EAAH,EAAGA,eAAgB7B,EAAnB,EAAmBA,eAAnB,qBAC3BA,EAD2B,YACT6B,I,glBC7I5B,IAAMkR,EAAiB,CAAEhW,UAAU,GAEtBiW,EAA0B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAASC,GAAZ,0BAClCA,GADkC,IAErCC,YAAYC,QAAgBH,EAAMC,EAAO1N,UAY9BsL,EAAOkC,EAAwB,CAC1C9S,IAAK,OACL1D,MAAO,OACPgJ,MAAO,EAAF,CACHC,MAAO,IACJsN,GAELM,aAAc,SAACC,GAAD,gBAAeA,EAAOlP,KAAtB,aAA+B0O,EAAsBQ,GAArD,MACdL,KAAMM,IAGKC,EAAa,SAAChO,GAAD,cACrBsL,GADqB,IAExBtL,MAAO,EAAF,KACAsL,EAAKtL,OACLA,GAEL2N,YAAYC,QAAgBG,EAAU/N,MAG3BiO,EAAa,CACxBjX,MAAO,cACPkX,WAAY,CAACC,UACbC,UAAW,qBACXpO,MAAOuN,EACPM,aAAc,SAAChC,GAAD,OACZA,EACGhV,KACC,gBAAG6U,EAAH,EAAGA,UAAWD,EAAd,EAAcA,WAAd,gBAAmCC,EAAkB,GAAN,KAA/C,OAA0DD,MAE3DlP,KAAK,OACVoR,YAAYC,QAAgBS,IAGjBtC,EAAW,CACtB/U,MAAO,WACPkX,WAAY,CAACC,UACbC,UAAW,WACXP,aAAc,SAACnX,GAAD,OAAcA,EAASG,KAAI,qBAAG+H,QAAiBrC,KAAK,OAClEyD,MAAO,EAAF,CACHC,MAAO,IACJsN,GAELI,YAAYC,QAAgBU,IAajBnC,GAPJ,EAAF,CACHlM,MAAO,IACJsN,IAEOK,QAAgBW,GAGH,CACzBvX,MAAO,eACPoX,UAAW,qBACXF,WAAY,CAACC,UACbnO,MAAO,EAAF,CACHC,MAAO,GACJsN,GAELM,aAAc,SAAChC,GAAD,OACZQ,QAAoBR,GAAoBnP,QAC1CiR,YAAYC,QAAgBY,KAGjBlC,EAAkB,CAC7BtV,MAAO,mBACPoX,UAAW,qBACXF,WAAY,CAACC,UACbnO,MAAO,EAAF,CACHC,MAAO,GACJsN,GAELM,aAAc,SAAChC,GAAD,OACZ4C,SAAsBjC,QAAoBX,IAAqB6C,QACjEf,YAAYC,QAAgBe,IAGjBxB,EAAc,CACzBnW,MAAO,eACPkX,WAAY,CAACC,UACbC,UAAW,qBACXpO,MAAO,EAAF,CACHC,MAAO,IACJsN,GAELM,aAAc,SAAChC,GAAD,OAAwBY,EAAYZ,IAClD8B,YAAYC,QAAgBgB,IAGjBC,EAAkBrB,EAAwB,CACrDxW,MAAO,mBACP0D,IAAK,kBACLwT,WAAY,CAACC,UACbnO,MAAOuN,EACPM,aAAc,SAACJ,GAAD,OAAUH,EAAsBG,IAC9CA,KD2B6B,SAACK,GAAD,OAAYR,EAAsBQ,MCxBpDgB,EAAkB,SAACpB,EAAQ1N,GAAT,MAAoB,CACjDtF,IAAKgT,EACL1N,W,4ZClIK,IAAMvI,GAAcrB,QAAH,krCA6DXiK,GAAmCjK,QAAH,+iCAwDhC2Y,GAAsB3Y,QAAH,8XAyBnB4Y,EAAe,SAACtY,EAAUuY,GAAX,yBACvBC,QAAiCxY,KADV,OAEtBuY,GAAWE,QAA6BzY,GAAY,MAG7C0Y,EAAuB,kBAClCC,gBAAA,cAKWC,EACX,SAACnY,GAAD,OACA,gBAAGoY,EAAH,EAAGA,uBAAwBC,EAA3B,EAA2BA,kBAA3B,OACEC,UAAcC,S,qWAAd,IACKF,GAAkBG,QAAgBJ,EAAwBpY,S,6bC3J7DyY,GADLC,S,2cAEC,WAAY7P,GAAO,kCACXA,G,qCAGR,WAAS,WACP,OACE,kBAAC8P,EAAA,EAAD,CACEC,OAAQ,gBAAGC,EAAH,EAAGA,gBAAH,OACN,EAAKP,cAAcC,S,qWAAnB,IACKM,QAIP,kBAACC,EAAA,EAAD,CACEC,SAAU,kBAACC,EAAA,EAAD,CAAUnR,KAAMoR,SAC1BC,UAAQ,S,GAhBaC,iB,EAuB/BV,EAAiBzU,UAAY,CAC3BoV,OAAQpV,YAOV,QAJkC,SAAC6E,GACjC,OAAO,kBAAC4P,EAAqB5P,I,2QCpCzBwQ,EAAY,CAChBC,IAAK,WACLC,KAAM,oBAGFC,EAAW,SAACC,GAAD,MACfC,sBAAwB,IAAIlE,MAAOmE,cAAgB,IAAMF,GAErDG,EAAW,SAACH,GAAD,qBAAoBJ,EAAUI,GAA9B,mBAEJI,EAAkB,SAACza,EAAMoa,GACpC,IAAMM,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAO7a,EACZ0a,EAAKI,SAAWV,EAChBM,EAAKK,SAGDC,EAAc,SAACC,EAAK9D,GACxB,IAAQU,EAA4BV,EAA5BU,UAAWP,EAAiBH,EAAjBG,aACfJ,EAAOW,GAAYqD,QAAYD,EAAKpD,GAAaoD,EACrD,OAAI3D,EACKA,EAAaJ,GAEbA,GAIEiE,EAAc,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,MAAOxa,EAAc,EAAdA,QAE7Bya,EAAU,CADDza,EAAQN,KAAI,SAAC6W,GAAD,OAAYA,EAAO1W,SAAOuF,KA7BjC,MA8BP,eAERoV,EAAM9a,KAAI,SAAC2a,GAAD,OACXra,EACGN,KAAI,SAAC6W,GAAD,iBAAgB6D,EAAYC,EAAK9D,GAAjC,QACJnR,KAnCa,UAuCpB,OAAOsV,UAAU,GAAD,OAAId,EAAS,OAAb,YAAuBa,EAAQrV,KAAK,SAGzCuV,EAAe,SAAC,GAAuB,IAArBH,EAAqB,EAArBA,MAAOxa,EAAc,EAAdA,QAC9BmN,EAASqN,EAAM9a,KAAI,SAAC2a,GAAD,OACvBra,EAAQ6R,QAAO,SAAC+I,EAAQrE,GACtB,IAAMhT,GAAMsX,QAAUtE,EAAO1W,OACvBiE,EAAQsW,EAAYC,EAAK9D,GAG/B,OADAqE,EAAOrX,GAAOO,EACP8W,IACN,OAGL,OAAOF,UAAU,GAAD,OAAId,EAAS,QAAb,YAAwBzR,KAAK2S,UAAU3N,M,2sBC7CzD,IAqDM4N,GAA4B,SAAC,GAAD,IAChCC,EADgC,EAChCA,gBACAC,EAFgC,EAEhCA,sBACAC,EAHgC,EAGhCA,eACAC,EAJgC,EAIhCA,WACA7F,EALgC,EAKhCA,YALgC,UAAC,OAAD,iBAShC8F,QAAS9F,EACT+F,iBAAkBL,EAClBM,wBAAyBL,EACzBM,gBAAiBL,EACjBM,YAAaL,KAGFM,GAAkB,SAAC,GAK1B,IAJJpb,EAII,EAJJA,MACAqb,EAGI,EAHJA,WAGI,IAFJrW,iBAEI,MAFQ,GAER,EADJsW,EACI,EADJA,QAEMC,GAASC,uBAEf,OAAO,SAACC,EAASC,GAAV,IAAgBC,EAAhB,uDAAmC,GAAnC,OACLJ,EACGvb,MAAM,CACLA,QACA4b,cAAc,EACdxa,YAAa,WACb4D,UAAW,OACTyW,UACAC,QACG1W,GACA2W,KAGNrP,MAAK,YAAc,UAAXvN,EAAW,EAAXA,KACDyM,GAAUzM,SAAA,UAAAA,EAAMyM,eAAN,mBAAepM,aAAf,eAAsBC,KAAI,SAACwc,GAAD,OAAOA,EAAEvc,UAAS,GAItDwN,EAAS,CACbgP,UAJeC,QAA6BvQ,GAASnM,IACrDqb,IAIAsB,KAAM,SACAL,EAAiBM,MAAQ,CAAEA,KAAMN,EAAiBM,OADpD,IAEFC,YAAYnd,SAAA,UAAAA,EAAMyM,eAAN,eAAe0Q,aAAc,KAK7C,OADAb,GAAcA,EAAWvO,GAClBA,KAERF,OAAM,SAAC5N,GACN,GAAIsc,EAEF,OADAA,EAAQtc,GACD,CAAE8c,SAAU,GAAIE,KAAM,CAAEE,WAAY,IAE3C,MAAMld,OAKVmd,GAAe,SAACC,EAAeC,EAAOva,GAA4B,IAApBwa,EAAoB,uDAAR,IACxDC,EAAQlH,KAAKmH,KAAKH,EAAQC,IAAc,EAC9C,OAAOrJ,QAAQwJ,KACb,OAAI,IAAIxR,MAAMsR,IAAQld,KAAI,SAACqd,EAAGC,GAAJ,OACxBP,EAAcE,EAAWK,EAAU,EAAG7a,QAKtC8a,GAAkB,WAAkB,IAAjBC,EAAiB,uDAAP,GACzBC,EAAgCD,EAAhCC,WAAeC,GAAvB,OAAwCF,EAAxC,GACMG,EAAgBF,EAClB,CACEb,KAAMa,EAAWG,SAAQ,SAACC,GAAD,OACvBA,EAAU9M,OAAO/Q,KACf,SAAC8d,GAAD,gBACKC,mBAAmBF,EAAUha,KADlC,YAC0Cka,mBACtCD,EAAIE,QAFR,YAGOD,mBAAmBD,EAAI1Z,eAIpC,GAEJ,gBACKsZ,GACAC,IAuFDM,GAAa,SAACC,GAAD,OACjBA,aAAA,EAAAA,EAAKrY,QAAS,EAAd,gBAA2BqY,EAAIxY,KAAK,KAApC,UAA8CrB,G,qlBCvNzC,IAAM8Z,GAAiB,SAAC,GAuBzB,IDfkCC,EACxBC,ECRd/d,EAsBI,EAtBJA,QACAge,EAqBI,EArBJA,eACA/M,EAoBI,EApBJA,SACA5Q,EAmBI,EAnBJA,MACA4I,EAkBI,EAlBJA,YACAE,EAiBI,EAjBJA,aACA8U,EAgBI,EAhBJA,gBACA1e,EAeI,EAfJA,SACA2e,EAcI,EAdJA,+BACAC,EAaI,EAbJA,aACA9e,EAYI,EAZJA,MACAwB,EAWI,EAXJA,0BACAmI,EAUI,EAVJA,QACAjI,EASI,EATJA,oBACAP,EAQI,EARJA,YACAD,EAOI,EAPJA,cACAqI,EAMI,EANJA,oBACAD,EAKI,EALJA,iBACAjI,EAII,EAJJA,yBACA0I,EAGI,EAHJA,mBACUgV,EAEN,EAFJ/U,SACAgV,EACI,EADJA,eAEMC,GAAYC,YAAO,MACzB,GAA8BzS,eAAS,GAAvC,eAAO0S,EAAP,KAAgBC,EAAhB,KACA,IAAgC3S,eAAS,GAAzC,iBAAO4S,GAAP,MAAiBC,GAAjB,MACA,IAA0B7S,cAAS,IAAnC,iBAAO0O,GAAP,MAAcoE,GAAd,MACA,IAA0B9S,cAAS,GAAnC,iBAAO4Q,GAAP,MAAcmC,GAAd,MAEA,GD6TqB,SAACC,GACtB,OAAsChT,cAAS,IAA/C,eAAOiT,EAAP,KAAoBC,EAApB,KAEA,OAAOF,EACH,CACEjW,MAAO,CACLoW,YAAa,CACXxX,MAAM,EACN6U,MAAM,EACN4C,gBAAgB,EAChBC,OAAO,GAETC,UAAU,GAEZL,cACAC,kBAEF,CACEnW,MAAO,CACLoW,YAAa,CACXxX,MAAM,EACN6U,MAAM,EACN4C,gBAAgB,EAChBC,OAAO,KChVbE,EALgBC,SAAW,SAEtBC,GADT,GACE1W,MACAkW,GAFF,GAEEA,YACAC,GAHF,GAGEA,eAGI/G,ID5BgC6F,EC6BpCpd,ED5BYqd,GAAkByB,OAAc,iBAAkB,CAC9D1V,KAAM,eACNxE,MAAOwY,IAFD1e,KAKD0e,GACH7F,QA9BsB,WAAoC,IAApB6F,EAAoB,uDAAP,GACjD2B,EAAc,SAACC,GACnB,QAAI5B,EAAWvY,OAAS,IACfuY,EAAWpe,IAAIigB,QAAQpd,SAASod,OAAOD,KAMlD,OAT8D,uDAAxB,IAStB7N,QAAO,SAACC,EAAK8N,GAU3B,OATIH,EAAYG,EAAavc,kBAC3ByO,EAAI6N,OAAOC,EAAavc,kBAAxB,OACK,IAAIwc,IAAJ,kBACG/N,EAAI8N,EAAavc,iBAAmB,IADvC,CAEDuc,EAAa1a,oBAKZ4M,IACN,IAWGgO,CAAoB/B,aAAD,EAACA,EAAegC,WAAYjC,IAEjD,ICqBJ,IAIIkC,OAAgB,CAClB9C,QAAS,CACP+C,aAAc,GAAF,eACPC,OADO,OAENjC,EAAkBkC,KAAyC,KAFrD,QAGN5gB,aAAA,EAAAA,EAAUgG,QAAS,GAAIsS,QAAatY,EAAU4e,GAAgB,KAHxD,OAIPlG,QATOmI,GADhB,GACEC,aACAC,GAFF,GAEEA,aACAC,GAHF,GAGEA,mBAWIC,GDhCwB,SAC9BF,EACApC,EACA3d,GAEA,IAAMkgB,EAAkB,kBAClBvC,EAAiC,CAAC,2BAA6B,KAD7C,QAElBoC,aAAA,EAAAA,EAAc/a,QAAS,EAAI,CAAC+a,GAAgB,KAChDlb,KAAK,SAMP,OALe7E,EACX,WAAIA,EAAJ,MACCkgB,EAAkB,SAAH,OAAYA,EAAZ,KAAiC,IACjDA,ECoBkBC,CACpBJ,KACApC,EACA3d,GAGIogB,GAAuB,CAC3BtgB,QACAgF,UAAW,IACTiX,KAAMyC,GACN5c,OAAQqe,IACJvP,GAAY,CAAEA,cAStB,GD4MiC,SAAC,GAO9B,IANJyL,EAMI,EANJA,MACArT,EAKI,EALJA,SACAuX,EAII,EAJJA,YACAC,EAGI,EAHJA,eACAC,EAEI,EAFJA,eAEI,IADJC,oBACI,MADW,GACX,EAEJ,GAA8CjV,cAAS,IAAvD,eAAOpD,EAAP,KAAwB+I,EAAxB,KACMuP,EAAevF,GAAgB,SAChCoF,GAD+B,IAElCxgB,MAAOuX,KACP+D,QAAS,SAACtc,IACRuN,OAAqB,CACnBC,QAAS,SACThN,MAAO,0BACP8J,YAAatK,EAAM4M,cAKnBgV,EAAS,mCAAG,WAAOC,GAAP,4EACQ,IAApBA,EAAS3b,OADG,yCAEP,IAFO,cAKV4b,EAAWxD,GAAWuD,GALZ,SAMM1E,GAAawE,EAAcE,EAAS3b,OAAxB,MAC5B4b,GAAY,CAAEhf,OAAQgf,KAPZ,cAMVC,EANU,yBAUTA,EAAQ9D,SAAQ,SAACnQ,GAAD,OAAYA,EAAOgP,aAV1B,2CAAH,sDAaTkF,EAAa,mCAAG,WAAOC,GAAP,oFACdC,EAAgBR,EAAa5e,QAAO,gBAAGF,EAAH,EAAGA,GAAH,OACxCqf,EAAY/e,SAASN,MAEjBuf,EAAYD,EAAc7hB,KAAI,qBAAGuC,MACjCif,EAAWI,EAAYnf,QAAO,SAACF,GAAD,OAASuf,EAAUjf,SAASN,MAL5C,SAMSgf,EAAUC,GANnB,cAMdO,EANc,2CAQTF,IARS,OAQSE,KART,2CAAH,sDAWbC,EAAgB,mCAAG,WAAOJ,GAAP,uFACDD,EAAcC,GADb,OACjBzV,EADiB,OAEvB4F,EAAmB5F,GACnBxC,GAAYA,EAASwC,GAHE,2CAAH,sDAMhB8V,EAAc,mCAAG,oGACCnF,GAAawE,EAActE,GAD5B,cACf0E,EADe,yBAEdA,EAAQ9D,SAAQ,SAACnQ,GAAD,OAAYA,EAAOgP,SAASzc,KAAI,qBAAGuC,UAFrC,2CAAH,qDAYpB,WACEyG,oBARiBkZ,OAAc,CAC/BlF,QACArT,SAAUqY,EACVd,cACAe,iBACAE,cAAe,kBAAMf,MCrQnBgB,CAAoB,CACtBpF,SACArT,SAAU+U,EACVwC,aAbmBmB,cACnB,kBAAM3Y,EAAmB1J,KAAI,qBAAGuC,QAChC,CAACmH,IAYDyX,eAAgBF,GAChBG,eAAgBtG,GAAM9a,KAAI,qBAAGuC,MAC7B8e,aAAcvG,KAVd8G,GADF,GACEA,YACA5Y,GAFF,GAEEA,gBACYsZ,GAHd,GAGEC,WACcC,GAJhB,GAIE7B,cD8FiC,SACnC/B,EACA5V,EACAyZ,GAEA,IAAM9S,GAAW+S,oBAIjBhb,sBAAgB,WACdiI,EAAS,CACPvF,KAAM,qBAEP,KAGHJ,gBAAU,WACR2F,EAAS,CACPvF,KAAM,kBACNuY,QAAS,CACPC,SAAU5Z,OAGb,CAACA,IAIJ,IASM6Z,GAAoBC,QATR,WAChBlP,QAAQC,QACNlE,EAAS,CACPvF,KAAM,gBAER6C,MAAK,wBAAM2R,SAAN,UAAMA,EAAWmE,eAAjB,aAAM,EAAoBC,qBAIW,KAE9ChZ,gBAAU,WACR6Y,MACC,CAACJ,IC5HJQ,CAAsBrE,EAAWgD,GAAaf,IAE9C,IAoBMqC,GDsBsB,SAACC,GAA8C,6DAAP,GAAtBP,EAA6B,EAA7BA,SAAUtiB,EAAmB,EAAnBA,QAClD8iB,EAAkB,SAACC,EAAYC,GAAb,OACtBD,EAAWrjB,KAAI,SAACujB,GAAD,gBAAkBA,EAAlB,YAA+BD,OAE1CE,EAAkB,SAAC3f,GAAD,OACrBvD,GAAW,IAAIgC,MAAK,SAACuU,GAAD,OAAYA,EAAOhT,MAAQA,MAElD,0CAAO,WACL4f,EADK,6GAEHpH,YAFG,MAEI,EAFJ,EAEiBD,EAFjB,EAEOsH,SAAmBC,EAF1B,EAE0BA,QAASC,EAFnC,EAEmCA,eAAgBpG,EAFnD,EAEmDA,QAElDqG,EAAiBL,EAAgBG,GACjCta,EACJwa,GAAkBA,EAAexa,OAC7B+Z,EAAgBS,EAAexa,OAAQua,QACvCvf,EACAyf,EAAevG,GAAgBC,GAThC,SAWyB2F,EAAc/G,EAASC,EAAV,GAAC,MACvCyH,GADsC,IAEzCza,YAbG,cAWC0a,EAXD,OAgBHtH,GAhBG,EAkBDsH,GAAmB,IAFrBtH,SACQI,EAjBL,EAiBHF,KAAQE,WAjBL,kBAoBE,CACL6E,QAASjF,EAASzc,KAAI,SAAC0Z,GAAD,UAAC,MAClBA,GADiB,IAEpBkJ,UAAWA,GAAY,IAAI5iB,KAAI,SAACuC,GAAD,OAAQA,KAAIM,SAAS6W,EAAOnX,SAE7DohB,UACAC,iBACA5G,MAAOH,IA3BJ,2CAAP,wDC7BoBmH,CAJCjI,GAAgB,SAChCkF,IAD+B,IAElCjF,WAlBiB,SAACvO,GAAW,QAC7B0R,GAAS1R,EAAOkP,KAAKE,YACrBqC,GAASzR,EAAOgP,UAChBwC,IAAY,GACZK,IAAkBA,GAAe7R,EAAOkP,KAAKC,MAG3C1T,GAC2B,IAA3BuE,EAAOkP,KAAKE,YACkB,IAA9BgE,GAAmBhb,QACY,KAA/B4H,SAAA,UAAAA,EAAQkP,YAAR,mBAAcC,YAAd,eAAoB/W,SAEpBkZ,GAAW,OAQkC,CAC/C6D,SAAUhB,GACVthB,YAEI2jB,GDwGwB,SAAC,GAK3B,IAJJ3jB,EAII,EAJJA,QACAsiB,EAGI,EAHJA,SACA5F,EAEI,EAFJA,MACAmE,EACI,EADJA,eAEM+C,EAAkBtB,EAAW3E,GAAW2E,QAAYve,EACpDid,EAAevF,GAAgB,CACnCpb,MAAOwgB,EAAexgB,MACtBgF,UAAW,YACNwb,EAAexb,WACdwb,EAAevE,MAAQ,CAAEA,KAAMuE,EAAevE,OAF3C,IAGPna,OAAQyhB,EAAe,UAChB/C,EAAexb,UAAUlD,OADT,iBACwByhB,EADxB,KAEnB/C,EAAexb,UAAUlD,SAE/BwZ,QAAS,YACP/O,OAAqB,CACnBC,QAAS,SACThN,MAAO,2BACP8J,YAAa,0CAGjB+R,WAAY,YACV9O,OAAqB,CACnBC,QAAS,UACThN,MAAO,0BA+Bb,ODjPgB,SAAC,GAAmD,IAAjDgkB,EAAiD,EAAjDA,SAAiD,IAAvC7jB,eAAuC,MAA7B,GAA6B,MAAzBgK,kBAAyB,SAC9D8Z,EAAoB9jB,EAAQmC,QAChC,SAACoU,GAAD,OACoB,IAAlBA,EAAOwN,SAAqBxN,EAAOU,WAAaV,EAAOG,iBAErDsN,EAAgB,mCAAG,WAAOvK,GAAP,yFACHoK,IADG,UACjBrJ,EADiB,OAEjByJ,EAAsB,QAAXxK,EAAmBc,EAAcI,GAE9CH,EAJmB,yCAKdX,EACLoK,EAAS,CACPzJ,QACAxa,QAAS8jB,IAEXtK,EAASC,KAVU,cAarByK,QAAQC,KAAK,gCAbQ,+DAAH,sDAkBtB,MAAO,CACL9D,aAAc,CACZsD,aAAc,CACZ3Z,aACAX,SAAU,SAAC0T,EAAGtD,GAAJ,OAAeuK,EAAiBvK,OCgN5C2K,CAAU,CACZP,SAlBY,mCAAG,2FACfjX,OAAqB,CACnBC,QAAS,OACThN,MAAO,mBACP8J,YAAa,2DAJA,SAMY6S,GACzBwE,EACAtE,GAVF4F,aAAA,EAAAA,EAAU/c,QAAS,EAAIoY,GAAW2E,QAAYve,GAE/B,cAMTsgB,EANS,yBAYRA,EAAa/G,SAAQ,SAACnQ,GAAD,OAAYA,EAAOgP,aAZhC,2CAAH,qDAmBZnc,UACAgK,WAAsB,IAAV0S,IAJZ2D,aAAgBsD,aC1JGW,CAAiB,CACpCtkB,UACAmC,OAAQqe,GACR8B,SAAUhB,GACV5E,SACAmE,eAAgB,IACdvE,KAAMyC,IACH4B,MAqBP,OACE,kBAAC,KAAD,CACE7gB,YAAa,CACXT,QACAklB,aAAmBxgB,IAAV1E,IAAwBmf,EACjCzN,MAAOyN,IAGT,kBAAC,KAAD,CAAeze,SAAS,WACnB4I,GAAoBA,EACvB,kBAAC,KAAD,CAAWtJ,MAAOA,KAEpB,kBAAC,KAAD,CAAeU,SAAS,SAAS6I,GACjC,kBAAC,KAAD,CAAe7I,SAAS,aACnB4I,GAAoB+V,IAAY/V,EAClC9H,GACC,kBAAC,EAAAuQ,MAAD,CACEC,UAAQ,EACRxE,QAAQ,OACRa,OAAO,8BACP7N,MACE,0LAKN,kBAAC,KAAD,UACMW,EACA+e,GAFN,CAGEiF,uBAAqB,EACrBxkB,QA/Cc,SAACykB,GAAD,OACpBzkB,EAAQN,KAAI,SAAC6W,GACX,IAAMmO,EAAgC,iBAAXnO,EACrBhT,EAAMmhB,EAAcnO,EAASA,EAAOhT,IACpCohB,EAAgBF,EAAeziB,MACnC,SAAC4iB,GAAD,OAAgBA,EAAWrhB,MAAQA,KAErC,mBACKohB,GACCD,EAAc,CAAEnhB,IAAKgT,GAAWA,GAFtC,IAGE1N,MAAO,SACF8b,aADA,EACAA,EAAe9b,OACf0N,aAFA,EAEAA,EAAQ1N,aAoCXwV,eAAgBA,EAChBwG,IAAKvG,EACLsE,YAAaA,GACbhK,QAAQT,QAAcnY,GACtBiiB,WAAU,SACLD,IADK,IAER8C,gBAAgB,IAElB/L,SAAU,kBAAC,EAAArX,QAAD,MACVmL,QAAS7D,EAAU+b,uBAAuB,IACtC7C,IACElE,GAAD,SACAoC,IACCrf,GAAuB,CACzBikB,gBACE,kBAACC,EAAA,EAAD,CACEC,WAAYxc,GACZyc,cAAe,OAKlBhc,GAAgB,CAAEwa,iBAClB1a,GAAe,CAClByK,QAAS,CACP,CACE7T,MAAO,oBACP2D,QAAS,SAAC4hB,EAAQC,EAAT,GAA4B,IAATpjB,EAAS,EAATA,GACpBqjB,EACuC,SAA3CC,OAAOpX,SAAS+F,SAASsR,MAAM,KAAK,GACtCD,OAAOpX,SAAS8L,KAAhB,UAA0BsL,OAAOpX,SAASsX,QAA1C,OACEH,EAAO,QAAU,GADnB,+BAEuBrjB,YAWzC4b,GAAe7Z,UAAY,CACzBhE,QAAS0lB,YACPA,cAAoB,CAACA,UAAgB,IAAKA,cAE5CnmB,SAAUmmB,YAAkBA,UAAgB,KAC5C1H,eAAgB0H,SAChBzU,SAAUyU,WACVrlB,MAAOqlB,cAAoB,CAACA,WAAkBA,aAC9Czc,YAAayc,SACbvc,aAAcuc,SACdzH,gBAAiByH,SACjBxH,+BAAgCwH,SAChCvH,aAAcuH,SACd7kB,0BAA2B6kB,SAC3BrmB,MAAOqmB,WACP1c,QAAS0c,SACT3kB,oBAAqB2kB,SACrBnlB,cAAemlB,WACfllB,YAAaklB,UAAgB,CAC3BjlB,WAAYilB,WAEd9c,oBAAqB8c,SACrB/c,iBAAkB+c,SAClBhlB,yBAA0BglB,cAAoB,CAC5CA,SACAA,YAAkBA,cAEpBtc,mBAAoBsc,UACpBrc,SAAUqc,SACVrH,eAAgBqH,UAGlB7H,GAAerU,aAAe,CAC5ByH,SAAU,GACVhI,aAAa,EACbE,cAAc,EACd8U,iBAAiB,EACjBC,gCAAgC,EAChCrd,2BAA2B,EAC3BmI,SAAS,EACTjI,qBAAqB,EACrBqI,mBAAoB,IAGtB,a,qvBC9KA,Q,WAzGE,aAA0B,IAAduc,EAAc,uDAAJ,IAAI,kDALJ,CACpB,eAAgB,2BAChBC,OAAQ,qBAIRC,KAAKC,QAAUH,EAAQG,SAAW,OAClCD,KAAKE,KAAOJ,EAAQI,MAAQ,GAC5BF,KAAKG,aAAeL,EAAQK,cAAiB,kBAAM1S,QAAQC,QAAQ,KACnEsS,KAAKI,eAAiBN,EAAQM,gBAAmB,kBAAM3S,QAAQC,QAAQ,KACvEsS,KAAKK,eAAiBP,EAAQQ,SAAWN,KAAKO,oB,iEAGhD,WAAcL,EAAMM,EAAUC,GAA9B,iGAAsCX,EAAtC,+BAAgD,GAAhD,SACeE,KAAKU,mBACf5Z,MAAK,kBAAM,EAAK6Z,MAAMT,EAAMM,EAAUC,EAAQX,MAC9ChZ,KAAKkZ,KAAKY,uBACV9Z,MAAK,SAAC+Z,GAAD,OAAc,EAAKC,eAAeD,EAAUf,MACjDhZ,MAAK,SAAC+Z,GAAD,OAAcA,EAASnN,UAC5BtM,MAAM4Y,KAAKe,YANhB,wF,0EASA,SAAWC,GACT,YAAuB9iB,IAAnB8iB,EAAQxb,OACHiI,QAAQwT,OAAO,CAAEjnB,MAAO,kBAExByT,QAAQwT,OAAR,KAAoBD,M,wIAI/B,SAAMd,EAAMM,EAAUC,EAAQX,GAC5B,IAAIoB,EAAS,CACXT,OAAQA,GAAU,MAClBH,QAASN,KAAKK,eACdc,YAAa,WAETC,EAAW,GAAH,OAAMpB,KAAKC,SAAX,OAAqBD,KAAKE,KAAOF,KAAKE,KAAO,IAA7C,OACZA,GAAc,IAEZmB,EAAM,IAAIC,IAAIF,EAAU1B,OAAOpX,SAASsX,QAC5C,GAAIE,EAAQoB,OAAQ,CAClB,IAAMA,EAASvgB,OAAOC,KAAKkf,EAAQoB,QAChCrnB,KACC,SAAC6D,GAAD,OACEka,mBAAmBla,GACnB,IACAka,mBAAmBkI,EAAQoB,OAAOxjB,OAErC6B,KAAK,KACR8hB,EAAIE,OAAS,IAAIC,gBAAgBN,GAOnC,OAJIV,IACFU,EAAOO,KAAOnf,KAAK2S,UAAUuL,IAGxBG,MAAMU,EAAKH,O,mCAGpB,SAAsBL,GACpB,OAA2B,MAApBA,EAASa,OAAiB,CAAEhO,KAAM,iBAAO,KAAQmN,I,4BAG1D,SAAeA,GAAwB,IAAdf,EAAc,uDAAJ,GACjC,GAAwB,MAApBe,EAASa,QAAkB5B,EAAQ6B,UACrC,MAAO,CAAEjO,KAAM,iBAAO,KAGxB,GAAwB,MAApBmN,EAASa,OACX,OAAO1B,KAAKI,iBAGd,IAAMwB,EAAoBf,EAASgB,MAC/BhB,EAASgB,QAAQnO,OACjBmN,EAEJ,OAAwB,MAApBA,EAASa,OACJE,EAAkB9a,MAAK,SAAC4M,GAAD,OAC5BjG,QAAQwT,OAAR,OAAoBvN,GAApB,IAA0B1Z,MAAO,yBAIjC6mB,EAASa,QAAU,KAAOb,EAASa,QAAU,IACxCE,EAAkB9a,MAAK,SAAC4M,GAAD,OAAUjG,QAAQwT,OAAOvN,EAAKlO,OAAO,OAG9Dqb,I,8BAGT,WACE,OAAOpT,QAAQC,QAAQsS,KAAKG,iBAAkB,K,oBAGhD,SAAOD,EAAMM,GACX,OAAOR,KAAK8B,QAAQ5B,EAAMM,EAAU,U,oBAGtC,SAAON,EAAMM,GACX,OAAOR,KAAK8B,QAAQ5B,EAAMM,EAAU,S,iBAGtC,SAAIN,GAAoB,IAAdJ,EAAc,uDAAJ,GAClB,OAAOE,KAAK8B,QAAQ5B,EAAM,KAAM,MAAOJ,K,qBAGzC,SAAQI,GACN,OAAOF,KAAK8B,QAAQ5B,EAAM,KAAM,c,mOCjGpC,QARe,SAACJ,GAKd,OAJkB,IAAIiC,E,qWAAJ,IACbjC,K,qkBCCP,IAOMkC,EAAoB,SAACzO,GAAD,OACxBA,GAR2B,SAACA,EAAQ0O,GACpC,IAAM/E,EAAa3J,EAAO0O,GACtBC,EAAY3O,EAEhB,cADO2O,EAAUD,GACjB,OAAYC,GAAchF,GAIhBiF,CAAqB5O,EAAQ,eAgBnC6O,EAAgB,SAAC1O,EAAMzP,GAAS,MAC9Boe,EAAiBC,IAAU5O,GACjC,iBAAO/S,OAAOiK,OAAOyX,EAAepe,IAAS,WAA7C,aAAO,EAA2CpK,KAAI,SAAC0Z,GAAD,OAhB5B,SAACA,EAAQgP,GACnC,IAAIC,EAAgB,GAUpB,OATA7hB,OAAO8hB,SAAQlP,aAAA,EAAAA,EAAQiP,gBAAiB,IAAIE,SAAQ,SAACC,GACnD,cAAyCA,EAAzC,GAAOC,EAAP,KAAqBC,EAArB,KACAL,EAAcI,GAAgBC,aAA9B,EAA8BA,EAAkBtpB,KAC7CM,KAAI,SAAC0Z,GAAD,aACHyO,EAAkBO,SAAD,UAACA,EAAiBhP,EAAOtP,aAAzB,aAAC,EAAgCsP,EAAOnX,QAE1DE,QAAO,SAACwmB,GAAD,QAASA,eAEdvP,EAAOiP,cACd,OAAYjP,GAAWiP,GAMrBO,CAAoBf,EAAkBzO,GAAS8O,OAI7CW,EAAe,mCAAG,WACtBC,EACA/I,GAFsB,gGAGtBgH,EAHsB,+BAGb,GACTpB,EAJsB,+BAIZ,GAJY,SAMHmD,EAAUC,IAAV,WAAkBhJ,GAAc,CAAEgH,WAN/B,cAMhBxN,EANgB,gBAOG0O,EAAc1O,GAAMoM,aAAA,EAAAA,EAAS7b,OAAQiW,GAPxC,cAOhBiJ,EAPgB,yBASf,CACLjJ,WAAYiJ,EACZ3M,KAAM9C,EAAK8C,KACXK,MAAOnD,EAAK8C,KAAKK,MACjBnD,SAboB,2CAAH,wDAoDrB,QAnCsB,SAACwG,GAAgD,IAApC4F,EAAoC,uDAA1B,GAAIsD,EAAsB,uDAAP,GAC9D,GAA8Cnd,cAAS,CACrD1M,UAAM2E,EACNzE,SAAS,EACTD,WAAO0E,IAHT,eAAOmlB,EAAP,KAAwBC,EAAxB,KAKML,EAAYM,EAAO,CACvBtD,QAASuD,OAELtC,EAAS,QACTpB,aAAA,EAAAA,EAASoB,SAAU,IADb,IAEVuC,SAAS3D,aAAA,EAAAA,EAAS2D,UAAW,KAqB/B,OAlBA5f,gBAAU,WACHic,WAASrgB,OACZ6jB,EAAmB,CACjB/pB,UAAM2E,EACNzE,SAAS,EACTD,WAAO0E,IAGT8kB,EAAgBC,EAAW/I,EAAYgH,EAAQpB,GAAShZ,MAAK,SAACvN,GAC5D+pB,EAAmB,CACjB/pB,OACAE,SAAS,EACTD,WAAO0E,UAZN,kBAgBFklB,GAhBE,CAgBYtD,aAhBZ,EAgBYA,EAASrgB,QAEvB4jB,I,2qBClFT,IAAMK,EAAa,SAACC,EAAMlH,GAAP,OACjBkH,EAAK9pB,KAAI,SAAC2a,GAAD,cACJA,GADI,IAEPiI,SAAUA,EAAS/f,SAAS8X,EAAIpY,UAGvBuW,EAAkB,wBAC7BiR,SAAgB,eACb,kBAAmB,iBAAO,CACzBD,KAAM,GACN9M,MAAO,OAHK,SAKb,cAAe,SAACpY,GAAD,cACXA,GADW,IAEdyX,KAAM,QAPM,SASb,mBAAoB,SAACzX,EAAD,OAAqBge,EAArB,EAAUD,QAAWC,SAArB,cAChBhe,GADgB,IAEnBklB,KAAMD,EAAWjlB,EAAMklB,KAAMlH,QAXjB,KAeLvQ,EAA0B,SAAClG,GACtC,OAAKA,EAIEA,EAAQgG,QAAO,SAACC,EAAD,GAA6B,IAArB5M,EAAqB,EAArBA,eAQ5B,OAPIA,UACD4M,EAAI5M,GAAkB4M,EAAI5M,IAAmB,CAC5CA,iBACAY,MAAO,IACNA,QAGEgM,IACN,IAZM,IAeEvI,EAAuB,SAACsC,GAAD,OAClCrF,OAAOiK,OAAOsB,EAAwBlG,IAAU5I,MAC9CyN,QAAc,iBAAkB","file":"js/EditPolicy.c0bb8e339328bf0cb942.js","sourcesContent":["/* eslint-disable react/display-name */\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport { InventoryTable } from 'SmartComponents';\nimport { GET_SYSTEMS } from '../SystemsTable/constants';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst QUERY = gql`\n  {\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          name\n          refId\n          majorOsVersion\n        }\n      }\n    }\n  }\n`;\n\nconst DEFAULT_FILTER = 'has_test_results = true or has_policy = true';\n\nexport const ComplianceSystems = () => {\n  const { data, error, loading } = useQuery(QUERY);\n  const policies = data?.profiles?.edges.map(({ node }) => node);\n\n  return (\n    <React.Fragment>\n      <PageHeader className=\"page-header\">\n        <PageHeaderTitle title=\"Systems\" />\n      </PageHeader>\n      <Main>\n        <StateViewWithError stateValues={{ error, data, loading }}>\n          <StateViewPart stateKey=\"data\">\n            {policies && (\n              <InventoryTable\n                columns={[\n                  Columns.customName({\n                    showLink: true,\n                    showOsInfo: true,\n                  }),\n                  Columns.inventoryColumn('tags'),\n                  Columns.Policies,\n                  Columns.inventoryColumn('updated', { isStatic: true }),\n                ]}\n                query={GET_SYSTEMS}\n                defaultFilter={DEFAULT_FILTER}\n                systemProps={{\n                  isFullView: true,\n                }}\n                showOsMinorVersionFilter={policies.map(\n                  (policy) => policy.majorOsVersion\n                )}\n                showComplianceSystemsInfo\n                enableEditPolicy={false}\n                remediationsEnabled={false}\n                policies={policies}\n              />\n            )}\n          </StateViewPart>\n        </StateViewWithError>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default ComplianceSystems;\n","import React from 'react';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  Tile,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ProfileTypeSelect } from 'PresentationalComponents';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\n\nconst BENCHMARKS_AND_PROFILES = gql`\n  query benchmarksAndProfiles {\n    latestBenchmarks {\n      id\n      title\n      refId\n      version\n      osMajorVersion\n      profiles {\n        id\n        name\n        refId\n        description\n        complianceThreshold\n      }\n    }\n    profiles(search: \"external = false and canonical = false\") {\n      edges {\n        node {\n          id\n          refId\n          benchmark {\n            refId\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst PolicyTooltip = () => (\n  <Tooltip\n    position=\"right\"\n    content=\"Policy types are OpenSCAP policies that are supported by RHEL.\n        For each major version of RHEL, users can create one policy of each type.\"\n  >\n    <OutlinedQuestionCircleIcon className=\"grey-icon\" />\n  </Tooltip>\n);\n\nexport const CreateSCAPPolicy = ({\n  change,\n  selectedBenchmarkId,\n  selectedProfile,\n}) => {\n  const { data, error, loading } = useQuery(BENCHMARKS_AND_PROFILES, {\n    fetchPolicy: 'no-cache',\n  });\n\n  const inUseProfileRefIds = (profiles, benchmark) =>\n    profiles\n      .filter((profile) => benchmark.refId === profile.node.benchmark.refId)\n      .map((profile) => profile.node.refId);\n\n  if (error) {\n    return error;\n  }\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  const benchmarks = data.latestBenchmarks;\n  let selectedBenchmark;\n  let validProfiles;\n  if (selectedBenchmarkId) {\n    selectedBenchmark = benchmarks.find(\n      (benchmark) => benchmark.id === selectedBenchmarkId\n    );\n    const userProfileRefIds = inUseProfileRefIds(\n      data.profiles.edges,\n      selectedBenchmark\n    );\n    validProfiles = selectedBenchmark.profiles.map((profile) => ({\n      ...profile,\n      disabled: userProfileRefIds.includes(profile.refId),\n    }));\n  }\n\n  const setBenchmark = ({ id, osMajorVersion }) => {\n    if (selectedBenchmark?.osMajorVersion !== osMajorVersion) {\n      change('systems', []);\n    }\n\n    change('benchmark', id);\n    change('osMajorVersion', osMajorVersion);\n  };\n\n  return (\n    <React.Fragment>\n      <TextContent>\n        <Text component={TextVariants.h1} className=\"pf-u-mb-md\">\n          Create SCAP policy\n        </Text>\n        <Text className=\"pf-u-mb-md\">\n          Select the operating system and policy type for this policy.\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroup label=\"Operating system\" isRequired fieldId=\"benchmark\">\n          {benchmarks &&\n            benchmarks\n              .sort((a, b) => a.refId.localeCompare(b.refId))\n              .map((benchmark) => {\n                const { id, osMajorVersion } = benchmark;\n                return (\n                  <Tile\n                    key={id}\n                    className=\"pf-u-mr-md\"\n                    title={`RHEL ${osMajorVersion}`}\n                    onClick={() => setBenchmark(benchmark)}\n                    isSelected={selectedBenchmarkId === id}\n                    isStacked\n                  />\n                );\n              })}\n        </FormGroup>\n        <FormGroup\n          isRequired\n          labelIcon={<PolicyTooltip />}\n          label=\"Policy type\"\n          fieldId=\"policy-type\"\n        >\n          <ProfileTypeSelect\n            profiles={selectedBenchmark && validProfiles}\n            onChange={(value) => {\n              change('selectedRuleRefIds', undefined);\n              change('profile', value);\n            }}\n            selectedProfile={selectedProfile}\n          />\n        </FormGroup>\n      </Form>\n    </React.Fragment>\n  );\n};\n\nCreateSCAPPolicy.propTypes = {\n  selectedBenchmarkId: propTypes.string,\n  change: reduxFormPropTypes.change,\n  selectedProfile: propTypes.object,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    selectedBenchmarkId: selector(state, 'benchmark'),\n    selectedProfile: selector(state, 'profile'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(CreateSCAPPolicy);\n","import React, { useLayoutEffect } from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  formValueSelector,\n  reduxForm,\n} from 'redux-form';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n  Title,\n  Text,\n  TextContent,\n  TextVariants,\n  EmptyState,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\n\nconst PROFILES_QUERY = gql`\n  query Profiles($filter: String!) {\n    profiles(search: $filter) {\n      edges {\n        node {\n          id\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          policy {\n            id\n          }\n          policyType\n          benchmark {\n            id\n            refId\n            latestSupportedOsMinorVersions\n            osMajorVersion\n          }\n          ssgVersion\n          rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst BENCHMARKS_QUERY = gql`\n  query Benchmarks($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        profiles {\n          id\n          refId\n          osMajorVersion\n          ssgVersion\n        }\n      }\n    }\n  }\n`;\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nexport const EditPolicyProfilesRules = ({\n  policy,\n  selectedRuleRefIds,\n  change,\n  osMajorVersion,\n  osMinorVersionCounts,\n}) => {\n  const columns = [Columns.Name, Columns.Severity, Columns.Ansible];\n  const osMinorVersions = osMinorVersionCounts\n    .map((i) => i.osMinorVersion)\n    .sort();\n  const benchmarkSearch =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const {\n    data: benchmarksData,\n    error: benchmarksError,\n    loading: benchmarksLoading,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter: benchmarkSearch,\n    },\n    skip: osMinorVersions.length === 0,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  let tabsData = osMinorVersionCounts.map(\n    ({ osMinorVersion, count: systemCount }) => {\n      osMinorVersion = `${osMinorVersion}`;\n      let profile;\n      if (benchmarks) {\n        const benchmark = getBenchmarkBySupportedOsMinor(\n          benchmarks,\n          osMinorVersion\n        );\n        if (benchmark) {\n          profile = getBenchmarkProfile(benchmark, policy.refId);\n          if (profile) {\n            profile = {\n              ...profile,\n              benchmark,\n            };\n          }\n        }\n      }\n\n      return {\n        profile,\n        systemCount,\n        newOsMinorVersion: osMinorVersion,\n      };\n    }\n  );\n  tabsData = tabsData.filter(({ profile }) => !!profile);\n\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n  const profileIds = Object.keys(profileToOsMinorMap);\n  const filter = profileIds.map((i) => `id = ${i}`).join(' OR ');\n  const skipProfilesQuery = benchmarksLoading || filter.length === 0;\n  const {\n    data: profilesData,\n    error: profilesError,\n    loading: profilesLoading,\n  } = useQuery(PROFILES_QUERY, {\n    variables: {\n      filter,\n    },\n    skip: skipProfilesQuery,\n  });\n  const error = benchmarksError || profilesError;\n  const dataState = profileIds?.length > 0 ? profilesData : undefined;\n  const loadingState = profilesLoading || benchmarksLoading ? true : undefined;\n  const noRuleSets = !error && !loadingState && profileIds?.length === 0;\n  const profiles = skipProfilesQuery\n    ? []\n    : profilesData?.profiles.edges.map((p) => p.node);\n\n  const setSelectedRuleRefIds = (newSelection) => {\n    change('selectedRuleRefIds', newSelection);\n  };\n\n  useLayoutEffect(() => {\n    if (!loadingState) {\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      const newSelection = profilesWithRulesToSelection(\n        profilesWithOs,\n        selectedRuleRefIds,\n        { only: true }\n      );\n      setSelectedRuleRefIds(newSelection);\n    }\n  }, [profiles, loadingState]);\n\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-pb-md\">\n        <Text component={TextVariants.h1}>Rules</Text>\n        <Text>\n          Customize your <b>{policy.name}</b> SCAP policy by including and\n          excluding rules.\n        </Text>\n        <Text>\n          Each release of RHEL is supported with a unique and specific version\n          of the SCAP Security Guide (SSG). You must customize each version of\n          SSG for each release of RHEL.\n        </Text>\n      </TextContent>\n\n      <StateViewWithError\n        stateValues={{\n          error,\n          data: dataState,\n          loading: loadingState,\n          noRuleSets,\n        }}\n      >\n        <StateViewPart stateKey=\"noRuleSets\">\n          <EmptyState>\n            <Title headingLevel=\"h1\" size=\"xl\">\n              No rules can be configured\n            </Title>\n            <EmptyStateBody>\n              The policy type selected does not exist for the systems and OS\n              versions selected in the previous steps.\n            </EmptyStateBody>\n          </EmptyState>\n        </StateViewPart>\n        <StateViewPart stateKey=\"loading\">\n          <EmptyTable>\n            <Spinner />\n          </EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n          <TabbedRules\n            tabsData={tabsData}\n            selectedRuleRefIds={selectedRuleRefIds}\n            columns={columns}\n            remediationsEnabled={false}\n            selectedFilter\n            level={1}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </React.Fragment>\n  );\n};\n\nEditPolicyProfilesRules.propTypes = {\n  policy: propTypes.object,\n  change: reduxFormPropTypes.change,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  selectedRuleRefIds: propTypes.array,\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    policy: JSON.parse(selector(state, 'profile')),\n    osMajorVersion: selector(state, 'osMajorVersion'),\n    osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n    selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyProfilesRules);\n","import React from 'react';\nimport {\n  propTypes as reduxFormPropTypes,\n  reduxForm,\n  formValueSelector,\n} from 'redux-form';\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n  WizardContextConsumer,\n} from '@patternfly/react-core';\nimport { InventoryTable } from 'SmartComponents';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { countOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n        <br />\n        Policies must be created with at least one system.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Choose a different operating system, or connect{' '}\n        <b>RHEL {osMajorVersion}</b> systems to Insights.\n      </Text>\n    </TextContent>\n    <WizardContextConsumer>\n      {({ goToStepById }) => (\n        <Button onClick={() => goToStepById(1)}>\n          Choose a different operating system\n        </Button>\n      )}\n    </WizardContextConsumer>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n        <br />\n        Systems can be added or removed at any time.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nexport const EditPolicySystems = ({\n  change,\n  osMajorVersion,\n  selectedSystems,\n}) => {\n  const onSystemSelect = (newSelectedSystems) => {\n    change('systems', newSelectedSystems);\n    change('osMinorVersionCounts', countOsMinorVersions(newSelectedSystems));\n  };\n\n  return (\n    <React.Fragment>\n      <TextContent className=\"pf-u-mb-md\">\n        <Text component={TextVariants.h1}>Systems</Text>\n      </TextContent>\n      <Form>\n        <FormGroup>\n          <InventoryTable\n            showOsMinorVersionFilter={[osMajorVersion]}\n            prependComponent={\n              <PrependComponent osMajorVersion={osMajorVersion} />\n            }\n            emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n            columns={[\n              {\n                ...Columns.Name,\n                props: {\n                  width: 40,\n                },\n                sortBy: ['name'],\n              },\n              Columns.inventoryColumn('tags'),\n              {\n                ...Columns.OperatingSystem,\n                props: {},\n                sortBy: ['osMajorVersion', 'osMinorVersion'],\n              },\n            ]}\n            remediationsEnabled={false}\n            compact\n            showActions={false}\n            query={GET_SYSTEMS_WITHOUT_FAILED_RULES}\n            defaultFilter={\n              osMajorVersion && `os_major_version = ${osMajorVersion}`\n            }\n            enableExport={false}\n            preselectedSystems={selectedSystems}\n            onSelect={onSystemSelect}\n          />\n        </FormGroup>\n      </Form>\n    </React.Fragment>\n  );\n};\n\nEditPolicySystems.propTypes = {\n  osMajorVersion: propTypes.string,\n  selectedSystems: propTypes.array,\n  change: reduxFormPropTypes.change,\n};\n\nEditPolicySystems.defaultProps = {\n  selectedSystems: [],\n};\n\nconst selector = formValueSelector('policyForm');\nconst mapStateToProps = (state) => ({\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  selectedSystems: selector(state, 'systems'),\n});\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicySystems);\n","import React, { useEffect } from 'react';\nimport { compose } from 'redux';\nimport {\n  Field,\n  reduxForm,\n  formValueSelector,\n  propTypes as reduxFormPropTypes,\n} from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport {\n  Form,\n  FormGroup,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  ReduxFormTextInput,\n  ReduxFormTextArea,\n} from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport {\n  ProfileThresholdField,\n  PolicyBusinessObjectiveTooltip,\n} from 'PresentationalComponents';\n\nexport const EditPolicyDetails = ({ change, policy, refId }) => {\n  useEffect(() => {\n    if (policy && policy.refId !== refId) {\n      change('name', `${policy.name}`);\n      change('refId', `${policy.refId}`);\n      change('description', `${policy.description}`);\n    }\n  }, [policy]);\n\n  return (\n    <React.Fragment>\n      <TextContent>\n        <Text component={TextVariants.h1}>Details</Text>\n      </TextContent>\n      <br />\n      <Form id=\"editpolicydetails\">\n        <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n          <Field\n            component={ReduxFormTextInput}\n            type=\"text\"\n            isRequired={true}\n            id=\"name\"\n            name=\"name\"\n            aria-describedby=\"name\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            isDisabled\n            id=\"refId\"\n            name=\"refId\"\n            aria-describedby=\"refId\"\n          />\n        </FormGroup>\n        <FormGroup label=\"Description\" fieldId=\"description\">\n          <Field\n            type=\"text\"\n            component={ReduxFormTextArea}\n            id=\"description\"\n            name=\"description\"\n            aria-describedby=\"description\"\n          />\n        </FormGroup>\n        <FormGroup\n          label=\"Business objective\"\n          labelIcon={<PolicyBusinessObjectiveTooltip />}\n          fieldId=\"businessObjective\"\n        >\n          <Field\n            type=\"text\"\n            component={ReduxFormTextInput}\n            id=\"businessObjective\"\n            name=\"businessObjective\"\n            aria-describedby=\"businessObjective\"\n            defaultValue={policy.businessObjective}\n          />\n        </FormGroup>\n        <ProfileThresholdField previousThreshold={policy.complianceThreshold} />\n      </Form>\n    </React.Fragment>\n  );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n  policy: propTypes.object,\n  refId: propTypes.string,\n  change: reduxFormPropTypes.change,\n};\n\nconst mapStateToProps = (state) => {\n  const policy = JSON.parse(selector(state, 'profile'));\n  return {\n    policy,\n    refId: selector(state, 'refId'),\n    initialValues: {\n      name: `${policy.name}`,\n      refId: `${policy.refId}`,\n      description: `${policy.description}`,\n      benchmark: selector(state, 'benchmark'),\n      osMajorVersion: selector(state, 'osMajorVersion'),\n      profile: selector(state, 'profile'),\n    },\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: false,\n    forceUnregisterOnUnmount: true,\n  })\n)(EditPolicyDetails);\n","import React from 'react';\nimport {\n  Text,\n  TextVariants,\n  TextContent,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useQuery } from '@apollo/client';\n\nconst REVIEW = gql`\n  query review($benchmarkId: String!) {\n    benchmark(id: $benchmarkId) {\n      id\n      osMajorVersion\n    }\n  }\n`;\n\nconst ReviewCreatedPolicy = ({\n  benchmarkId,\n  name,\n  businessObjective,\n  complianceThreshold,\n  parentProfileName,\n  osMinorVersionCounts,\n}) => {\n  const { data, error, loading } = useQuery(REVIEW, {\n    variables: { benchmarkId },\n  });\n\n  if (error) {\n    return error;\n  }\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  const {\n    benchmark: { osMajorVersion },\n  } = data;\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.h1}>Review</Text>\n      <Text>Review your SCAP policy before finishing.</Text>\n      <Text component={TextVariants.h3} style={{ marginTop: 0 }}>\n        {name}\n      </Text>\n      <TextList component={TextListVariants.dl}>\n        <TextListItem component={TextListItemVariants.dt}>\n          Policy type\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>\n          {parentProfileName}\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dt}>\n          Compliance threshold\n        </TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>\n          {complianceThreshold}%\n        </TextListItem>\n        {businessObjective && (\n          <React.Fragment>\n            <TextListItem component={TextListItemVariants.dt}>\n              Business objective\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {businessObjective}\n            </TextListItem>\n          </React.Fragment>\n        )}\n        <TextListItem component={TextListItemVariants.dt}>Systems</TextListItem>\n        <TextListItem component={TextListItemVariants.dd}>\n          <TextList component={TextListVariants.dl}>\n            {osMinorVersionCounts.map(({ osMinorVersion, count }) => (\n              <React.Fragment key={osMinorVersion}>\n                <TextListItem\n                  component={TextListItemVariants.dt}\n                  style={{ fontWeight: 'normal' }}\n                >\n                  RHEL {osMajorVersion}.{osMinorVersion}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  {count} {count > 1 ? 'systems' : 'system'}\n                </TextListItem>\n              </React.Fragment>\n            ))}\n          </TextList>\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n\nReviewCreatedPolicy.propTypes = {\n  benchmarkId: propTypes.string,\n  refId: propTypes.string,\n  name: propTypes.string,\n  businessObjective: propTypes.string,\n  complianceThreshold: propTypes.number,\n  parentProfileName: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect((state) => ({\n  benchmarkId: selector(state, 'benchmark'),\n  refId: selector(state, 'refId'),\n  name: selector(state, 'name'),\n  businessObjective: selector(state, 'businessObjective'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  complianceThreshold:\n    parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n  parentProfileName: JSON.parse(selector(state, 'profile')).name,\n  rulesCount: selector(state, 'selectedRuleRefIds').length,\n}))(ReviewCreatedPolicy);\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  Title,\n  Button,\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  List,\n  ListItem,\n} from '@patternfly/react-core';\nimport { ProgressBar } from 'PresentationalComponents';\nimport { Link } from 'react-router-dom';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from '@apollo/client/react/hoc';\nimport { usePolicy } from 'Mutations';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nconst EmtpyStateWithErrors = ({ errors }) =>\n  errors && Array.isArray(errors) && errors.length > 0 ? (\n    <EmptyStateBody className=\"wizard-failed-errors\">\n      <List>\n        {errors.map((error) => (\n          <ListItem key={error}>{error}</ListItem>\n        ))}\n      </List>\n    </EmptyStateBody>\n  ) : null;\n\nEmtpyStateWithErrors.propTypes = {\n  errors: propTypes.array,\n};\n\nexport const FinishedCreatePolicy = ({\n  onWizardFinish,\n  cloneFromProfileId,\n  description,\n  name,\n  complianceThreshold,\n  businessObjective,\n  refId,\n  benchmarkId,\n  systems,\n  selectedRuleRefIds,\n}) => {\n  const [percent, setPercent] = useState(0);\n  const [message, setMessage] = useState('This usually takes a minute or two.');\n  const [errors, setErrors] = useState(null);\n  const [failed, setFailed] = useState(false);\n  const updatePolicy = usePolicy();\n\n  const onProgress = (progress) => {\n    setPercent(progress * 100);\n  };\n\n  useEffect(() => {\n    const newPolicy = {\n      cloneFromProfileId,\n      description,\n      name,\n      complianceThreshold,\n      businessObjective: { title: businessObjective },\n      refId,\n      benchmarkId,\n      hosts: systems,\n      selectedRuleRefIds,\n    };\n\n    updatePolicy(null, newPolicy, onProgress)\n      .then(({ id }) => {\n        setPercent(100);\n        setMessage();\n        dispatchNotification({\n          variant: 'success',\n          title: `Created policy \"${name}\"`,\n          autoDismiss: true,\n          description: (\n            <span>\n              From the <strong>SCAP Policies</strong> list, open{' '}\n              <Link to={`/scappolicies/${id}`}>{name}</Link>.\n            </span>\n          ),\n        });\n      })\n      .catch((error) => {\n        setMessage(error.networkError?.message);\n        setErrors(error.networkError?.result?.errors);\n        setFailed(true);\n        dispatchNotification({\n          variant: 'danger',\n          title: 'Error creating policy',\n          description: error.message,\n        });\n      });\n  }, []);\n\n  return (\n    <Bullseye>\n      <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={WrenchIcon} />\n        <br />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          Creating policy\n        </Title>\n        <EmptyStateBody>\n          <ProgressBar percent={percent} failed={failed} />\n        </EmptyStateBody>\n        <EmptyStateBody className={failed && 'wizard-failed-message'}>\n          {message}\n        </EmptyStateBody>\n        <EmtpyStateWithErrors error={errors} />\n        <EmptyStateSecondaryActions>\n          {(percent === 100 || failed) && (\n            <Button\n              variant={'primary'}\n              ouiaId=\"ReturnToAppButton\"\n              onClick={() => {\n                onWizardFinish();\n              }}\n            >\n              {failed ? 'Back' : 'Return to application'}\n            </Button>\n          )}\n        </EmptyStateSecondaryActions>\n      </EmptyState>\n    </Bullseye>\n  );\n};\n\nFinishedCreatePolicy.propTypes = {\n  benchmarkId: propTypes.string.isRequired,\n  businessObjective: propTypes.object,\n  cloneFromProfileId: propTypes.string.isRequired,\n  refId: propTypes.string.isRequired,\n  name: propTypes.string.isRequired,\n  description: propTypes.string,\n  systems: propTypes.array,\n  complianceThreshold: propTypes.number,\n  onWizardFinish: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string).isRequired,\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n  connect((state) => ({\n    benchmarkId: selector(state, 'benchmark'),\n    businessObjective: selector(state, 'businessObjective'),\n    cloneFromProfileId: JSON.parse(selector(state, 'profile')).id,\n    refId: selector(state, 'refId'),\n    name: selector(state, 'name'),\n    description: selector(state, 'description'),\n    complianceThreshold:\n      parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n    systems: selector(state, 'systems'),\n    selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  })),\n  reduxForm({\n    form: 'policyForm',\n    destroyOnUnmount: true,\n    forceUnregisterOnUnmount: true,\n  }),\n  withApollo\n)(FinishedCreatePolicy);\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport { default as EditPolicyRules } from './EditPolicyProfilesRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport {\n  validateBenchmarkPage,\n  validateDetailsPage,\n  validateRulesPage,\n  validateSystemsPage,\n} from './validate';\n\nexport const CreatePolicy = ({\n  benchmark,\n  osMajorVersion,\n  complianceThreshold,\n  name,\n  profile,\n  refId,\n  selectedRuleRefIds,\n  systemIds,\n}) => {\n  const history = useHistory();\n  const [stepIdReached, setStepIdReached] = useState(1);\n\n  const resetAnchor = () => {\n    const { location } = history;\n    if (location.hash) {\n      history.push({ ...location, hash: '' });\n    }\n  };\n\n  const onNext = ({ id }) => {\n    setStepIdReached(stepIdReached < id ? id : stepIdReached);\n    resetAnchor();\n  };\n\n  const onClose = () => {\n    history.push('/scappolicies');\n  };\n\n  const steps = [\n    {\n      id: 1,\n      name: 'Create SCAP policy',\n      component: <CreateSCAPPolicy />,\n      enableNext: validateBenchmarkPage(benchmark, osMajorVersion, profile),\n    },\n    {\n      id: 2,\n      name: 'Details',\n      component: <EditPolicyDetails />,\n      canJumpTo: stepIdReached >= 2,\n      enableNext: validateDetailsPage(name, refId, complianceThreshold),\n    },\n    {\n      id: 3,\n      name: 'Systems',\n      component: <EditPolicySystems />,\n      canJumpTo: stepIdReached >= 3,\n      enableNext: validateSystemsPage(systemIds),\n    },\n    {\n      id: 4,\n      name: 'Rules',\n      component: <EditPolicyRules />,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 4,\n      enableNext: validateRulesPage(selectedRuleRefIds),\n    },\n    {\n      id: 5,\n      name: 'Review',\n      component: <ReviewCreatedPolicy />,\n      nextButtonText: 'Finish',\n      canJumpTo:\n        validateRulesPage(selectedRuleRefIds) &&\n        systemIds?.length > 0 &&\n        stepIdReached >= 5,\n    },\n    {\n      id: 6,\n      name: 'Finished',\n      component: <FinishedCreatePolicy onWizardFinish={onClose} />,\n      isFinishedStep: true,\n      canJumpTo: systemIds?.length > 0 && stepIdReached >= 6,\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <Wizard\n        isOpen\n        onNext={onNext}\n        onGoToStep={resetAnchor}\n        onBack={resetAnchor}\n        onClose={onClose}\n        title=\"Create SCAP policy\"\n        description=\"Create a new policy for managing SCAP compliance\"\n        steps={steps}\n      />\n    </React.Fragment>\n  );\n};\n\nCreatePolicy.propTypes = {\n  benchmark: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersionCounts: propTypes.arrayOf(\n    propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    })\n  ),\n  complianceThreshold: propTypes.string,\n  businessObjective: propTypes.object,\n  dispatch: propTypes.func,\n  isOpen: propTypes.bool,\n  name: propTypes.string,\n  onWizardFinish: propTypes.func,\n  profile: propTypes.string,\n  refId: propTypes.string,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.string),\n  systemIds: propTypes.arrayOf(propTypes.string),\n};\n\nCreatePolicy.defaultProps = {\n  isOpen: false,\n};\n\nconst selector = formValueSelector('policyForm');\nexport default connect((state) => ({\n  benchmark: selector(state, 'benchmark'),\n  osMajorVersion: selector(state, 'osMajorVersion'),\n  osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n  businessObjective: selector(state, 'businessObjective'),\n  complianceThreshold: selector(state, 'complianceThreshold') || '100.0',\n  name: selector(state, 'name'),\n  profile: selector(state, 'profile'),\n  refId: selector(state, 'refId'),\n  selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n  systemIds: selector(state, 'systems'),\n}))(CreatePolicy);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { FormGroup, TextArea, TextInput } from '@patternfly/react-core';\nimport {\n  PolicyThresholdTooltip,\n  PolicyBusinessObjectiveTooltip,\n} from 'PresentationalComponents';\nimport { thresholdValid } from '../CreatePolicy/validate';\n\nexport const useThresholdValidate = () => {\n  const [validThreshold, setValidThreshold] = useState(true);\n  return [\n    validThreshold,\n    (threshold) => {\n      const valid = thresholdValid(threshold);\n      setValidThreshold(valid);\n      return valid;\n    },\n  ];\n};\n\nconst EditPolicyDetailsTab = ({ policy, setUpdatedPolicy }) => {\n  const [validThreshold, validateThreshold] = useThresholdValidate();\n\n  return (\n    <div className=\"pf-c-form\">\n      <FormGroup label=\"Policy description\" isRequired fieldId=\"description\">\n        <TextArea\n          style={{ width: 800, height: 110 }}\n          isRequired\n          type=\"text\"\n          id=\"description\"\n          name=\"description\"\n          aria-describedby=\"description\"\n          defaultValue={policy.description}\n          onChange={(value) => {\n            setUpdatedPolicy((policy) => ({\n              ...policy,\n              description: value,\n            }));\n          }}\n        />\n      </FormGroup>\n\n      <FormGroup\n        label=\"Business objective\"\n        labelIcon={<PolicyBusinessObjectiveTooltip />}\n        fieldId=\"business-objective\"\n      >\n        <TextInput\n          type=\"text\"\n          style={{ width: 300 }}\n          id=\"business-objective\"\n          name=\"business-objective\"\n          aria-describedby=\"business-objective\"\n          defaultValue={policy?.businessObjective?.title}\n          onChange={(value) => {\n            setUpdatedPolicy((policy) => ({\n              ...policy,\n              businessObjective: {\n                ...policy.businessObjective,\n                title: value,\n              },\n            }));\n          }}\n        />\n      </FormGroup>\n\n      <FormGroup\n        validated={validThreshold ? 'default' : 'error'}\n        label=\"Compliance threshold (%)\"\n        labelIcon={<PolicyThresholdTooltip />}\n        fieldId=\"policy-threshold\"\n        helperTextInvalid=\"Threshold has to be a number between 0 and 100\"\n        helperText=\"A value of 95% or higher is recommended\"\n      >\n        <TextInput\n          type=\"number\"\n          style={{ width: 150 }}\n          name=\"compliance-threshold\"\n          id=\"compliance-threshold\"\n          defaultValue={policy.complianceThreshold}\n          aria-describedby=\"policy-threshold\"\n          onChange={(value) => {\n            setUpdatedPolicy((policy) => ({\n              ...policy,\n              complianceThreshold: value,\n              complianceThresholdValid: validateThreshold(value),\n            }));\n          }}\n        />\n      </FormGroup>\n    </div>\n  );\n};\n\nEditPolicyDetailsTab.propTypes = {\n  policy: propTypes.shape({\n    description: propTypes.string,\n    businessObjective: propTypes.object,\n    complianceThreshold: propTypes.oneOfType([\n      propTypes.string,\n      propTypes.number,\n    ]),\n  }),\n  setUpdatedPolicy: propTypes.func,\n};\n\nexport default EditPolicyDetailsTab;\n","import React, { useLayoutEffect } from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  Text,\n  TextContent,\n  Title,\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport {\n  TabbedRules,\n  profilesWithRulesToSelection,\n  tabsDataToOsMinorMap,\n  extendProfilesByOsMinor,\n} from 'PresentationalComponents/TabbedRules';\nimport { sortingByProp } from 'Utilities/helpers';\nimport * as Columns from '@/PresentationalComponents/RulesTable/Columns';\n\nconst PROFILES_QUERY = gql`\n  query Profiles($filter: String!) {\n    profiles(search: $filter) {\n      edges {\n        node {\n          id\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          policy {\n            id\n          }\n          policyType\n          benchmark {\n            id\n            refId\n            latestSupportedOsMinorVersions\n            osMajorVersion\n          }\n          ssgVersion\n          rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst BENCHMARKS_QUERY = gql`\n  query Benchmarks($filter: String!) {\n    benchmarks(search: $filter) {\n      nodes {\n        id\n        latestSupportedOsMinorVersions\n        profiles {\n          id\n          refId\n          ssgVersion\n        }\n      }\n    }\n  }\n`;\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) =>\n  benchmarks.find((benchmark) =>\n    benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n  );\n\nconst getBenchmarkProfile = (benchmark, profileRefId) =>\n  benchmark.profiles.find(\n    (benchmarkProfile) => benchmarkProfile.refId === profileRefId\n  );\n\nconst EditPolicyRulesTabEmptyState = () => (\n  <EmptyState>\n    <Title headingLevel=\"h5\" size=\"lg\">\n      No rules can be configured\n    </Title>\n    <EmptyStateBody>\n      This policy has no associated systems, and therefore no rules can be\n      configured.\n    </EmptyStateBody>\n    <EmptyStateBody>\n      Add at least one system to configure rules for this policy.\n    </EmptyStateBody>\n  </EmptyState>\n);\n\nexport const toTabsData = (policy, osMinorVersionCounts, benchmarks) =>\n  Object.values(osMinorVersionCounts)\n    .sort(sortingByProp('osMinorVersion', 'desc'))\n    .map(({ osMinorVersion, count: systemCount }) => {\n      osMinorVersion = `${osMinorVersion}`;\n      let profile = policy.policy.profiles.find(\n        (profile) => profile.osMinorVersion === osMinorVersion\n      );\n      let osMajorVersion = policy.osMajorVersion;\n\n      if (!profile && benchmarks) {\n        const benchmark = getBenchmarkBySupportedOsMinor(\n          benchmarks,\n          osMinorVersion\n        );\n        if (benchmark) {\n          const benchmarkProfile = getBenchmarkProfile(benchmark, policy.refId);\n          if (benchmarkProfile) {\n            profile = policy.policy.profiles.find(\n              (profile) =>\n                profile.parentProfileId === benchmarkProfile.id &&\n                profile.osMinorVersion === osMinorVersion\n            );\n\n            profile = {\n              ...benchmarkProfile,\n              benchmark,\n              osMajorVersion,\n              ...profile,\n            };\n          }\n        }\n      }\n\n      return {\n        profile,\n        systemCount,\n        newOsMinorVersion: osMinorVersion,\n      };\n    })\n    .filter(({ profile, newOsMinorVersion }) => !!profile && newOsMinorVersion);\n\nexport const EditPolicyRulesTab = ({\n  policy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  osMinorVersionCounts,\n  setNewRuleTabs,\n}) => {\n  const osMajorVersion = policy?.osMajorVersion;\n  const osMinorVersions = Object.keys(osMinorVersionCounts).sort();\n  const benchmarkSearch =\n    `os_major_version = ${osMajorVersion} ` +\n    `and latest_supported_os_minor_version ^ \"${osMinorVersions.join(',')}\"`;\n\n  const {\n    data: benchmarksData,\n    error: benchmarksError,\n    loading: benchmarksLoading,\n  } = useQuery(BENCHMARKS_QUERY, {\n    variables: {\n      filter: benchmarkSearch,\n    },\n    skip: osMinorVersions.length === 0,\n  });\n\n  const benchmarks = benchmarksData?.benchmarks?.nodes;\n\n  const tabsData = toTabsData(policy, osMinorVersionCounts, benchmarks);\n  const profileToOsMinorMap = tabsDataToOsMinorMap(tabsData);\n  const filter = Object.keys(profileToOsMinorMap)\n    .map((i) => `id = ${i}`)\n    .join(' OR ');\n  const {\n    data: profilesData,\n    error: profilesError,\n    loading: profilesLoading,\n  } = useQuery(PROFILES_QUERY, {\n    variables: {\n      filter,\n    },\n    skip: filter.length === 0,\n  });\n  const loadingState = profilesLoading || benchmarksLoading ? true : undefined;\n  const dataState =\n    !loadingState && tabsData?.length > 0 ? profilesData : undefined;\n\n  if (!loadingState) {\n    setNewRuleTabs(\n      !!tabsData.find((tab) =>\n        policy.policy.profiles.find(\n          (profile) => profile.osMinorVersion !== tab.newOsMinorVersion\n        )\n      )\n    );\n  }\n\n  useLayoutEffect(() => {\n    if (profilesData) {\n      const profiles = profilesData?.profiles.edges.map((p) => p.node) || [];\n      const profilesWithOs = extendProfilesByOsMinor(\n        profiles,\n        profileToOsMinorMap\n      );\n      setSelectedRuleRefIds((prevSelection) =>\n        profilesWithRulesToSelection(profilesWithOs, prevSelection)\n      );\n    }\n  }, [profilesData]);\n  const error = benchmarksError || profilesError;\n\n  return (\n    <StateViewWithError\n      stateValues={{\n        error,\n        data: !error && dataState,\n        loading: loadingState,\n        empty: !loadingState && !dataState && !error,\n      }}\n    >\n      <StateViewPart stateKey=\"loading\">\n        <EmptyTable>\n          <Spinner />\n        </EmptyTable>\n      </StateViewPart>\n      <StateViewPart stateKey=\"data\">\n        <TextContent>\n          <Text>\n            Different release versions of RHEL are associated with different\n            versions of the SCAP Security Guide (SSG), therefore each release\n            must be customized independently.\n          </Text>\n        </TextContent>\n        <TabbedRules\n          columns={[Columns.Name, Columns.Severity, Columns.Ansible]}\n          tabsData={tabsData}\n          selectedRuleRefIds={selectedRuleRefIds}\n          setSelectedRuleRefIds={setSelectedRuleRefIds}\n          remediationsEnabled={false}\n          selectedFilter\n          level={1}\n        />\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">\n        <EditPolicyRulesTabEmptyState />\n      </StateViewPart>\n    </StateViewWithError>\n  );\n};\n\nEditPolicyRulesTab.propTypes = {\n  setNewRuleTabs: propTypes.func,\n  policy: propTypes.object,\n  osMinorVersionCounts: propTypes.shape({\n    osMinorVersion: propTypes.shape({\n      osMinorVersion: propTypes.number,\n      count: propTypes.number,\n    }),\n  }),\n  selectedRuleRefIds: propTypes.array,\n  setSelectedRuleRefIds: propTypes.func,\n};\n\nexport default EditPolicyRulesTab;\n","import React from 'react';\nimport {\n  Alert,\n  AlertActionLink,\n  Text,\n  TextContent,\n} from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport { InventoryTable } from 'SmartComponents';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\nimport { useHistory } from 'react-router-dom';\nimport * as Columns from '../SystemsTable/Columns';\n\nconst EmptyState = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        You do not have any <b>RHEL {osMajorVersion}</b> systems connected to\n        Insights and enabled for Compliance.\n      </Text>\n    </TextContent>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>Connect RHEL {osMajorVersion} systems to Insights.</Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nEmptyState.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst PrependComponent = ({ osMajorVersion }) => (\n  <React.Fragment>\n    <TextContent className=\"pf-u-mb-md\">\n      <Text>\n        Select which of your <b>RHEL {osMajorVersion}</b> systems should be\n        included in this policy.\n      </Text>\n    </TextContent>\n  </React.Fragment>\n);\n\nPrependComponent.propTypes = {\n  osMajorVersion: propTypes.string,\n};\n\nconst EditPolicySystemsTab = ({\n  policy: { id: policyId, osMajorVersion },\n  newRuleTabs,\n  onSystemSelect,\n  selectedSystems,\n}) => {\n  const { push, location } = useHistory();\n\n  return (\n    <React.Fragment>\n      <InventoryTable\n        columns={[\n          Columns.Name,\n          Columns.inventoryColumn('tags'),\n          Columns.OperatingSystem,\n        ]}\n        showOsMinorVersionFilter={[osMajorVersion]}\n        prependComponent={<PrependComponent osMajorVersion={osMajorVersion} />}\n        emptyStateComponent={<EmptyState osMajorVersion={osMajorVersion} />}\n        compact\n        showActions={false}\n        query={GET_SYSTEMS_WITHOUT_FAILED_RULES}\n        defaultFilter={\n          osMajorVersion &&\n          `os_major_version = ${osMajorVersion} or policy_id = ${policyId}`\n        }\n        enableExport={false}\n        remediationsEnabled={false}\n        preselectedSystems={selectedSystems}\n        onSelect={onSystemSelect}\n      />\n      {newRuleTabs && (\n        <Alert\n          variant=\"info\"\n          isInline\n          title=\"You selected a system that has a release version previously not included in this policy.\"\n          actionLinks={\n            <AlertActionLink\n              onClick={() => push({ ...location, hash: '#rules' })}\n            >\n              Open rule editing\n            </AlertActionLink>\n          }\n        >\n          <p>\n            If you have edited any rules for this policy, you will need to do so\n            for this release version as well.\n          </p>\n        </Alert>\n      )}\n    </React.Fragment>\n  );\n};\n\nEditPolicySystemsTab.propTypes = {\n  policy: propTypes.object,\n  newRuleTabs: propTypes.bool,\n  onSystemSelect: propTypes.func,\n  selectedSystems: propTypes.array,\n};\n\nexport default EditPolicySystemsTab;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { Form, Tab, TabTitleText } from '@patternfly/react-core';\nimport { RoutedTabs } from 'PresentationalComponents';\nimport EditPolicyDetailsTab from './EditPolicyDetailsTab';\nimport EditPolicyRulesTab from './EditPolicyRulesTab';\nimport EditPolicySystemsTab from './EditPolicySystemsTab';\nimport { mapCountOsMinorVersions } from 'Store/Reducers/SystemStore';\nimport { profilesWithRulesToSelection } from 'PresentationalComponents/TabbedRules';\n\nconst profilesToOsMinorMap = (profiles, hosts) =>\n  (profiles || []).reduce((acc, profile) => {\n    if (profile.osMinorVersion !== '') {\n      acc[profile.osMinorVersion] ||= {\n        osMinorVersion: profile.osMinorVersion,\n        count: 0,\n      };\n    }\n\n    return acc;\n  }, mapCountOsMinorVersions(hosts || []));\n\nexport const EditPolicyForm = ({\n  policy,\n  setUpdatedPolicy,\n  selectedRuleRefIds,\n  setSelectedRuleRefIds,\n  selectedSystems,\n  setSelectedSystems,\n}) => {\n  const policyProfiles = policy?.policy?.profiles || [];\n  const [osMinorVersionCounts, setOsMinorVersionCounts] = useState({});\n  const [newRuleTabs, setNewRuleTabs] = useState(false);\n\n  const handleSystemSelect = (selectedSystems) => {\n    setSelectedSystems(selectedSystems);\n\n    setOsMinorVersionCounts(\n      profilesToOsMinorMap(policyProfiles, selectedSystems)\n    );\n  };\n\n  const updateSelectedRuleRefIds = () => {\n    if (policy) {\n      // existing policy profiles and their rule sets\n      const profilesWithOsMinor = policyProfiles.filter(\n        ({ osMinorVersion }) => !!osMinorVersion\n      );\n      setSelectedRuleRefIds(profilesWithRulesToSelection(profilesWithOsMinor));\n    }\n  };\n\n  useEffect(() => {\n    if (policy) {\n      const complianceThresholdValid =\n        policy.complianceThreshold < 101 && policy.complianceThreshold > 0;\n      setUpdatedPolicy({\n        ...policy,\n        complianceThresholdValid,\n      });\n      updateSelectedRuleRefIds();\n      handleSystemSelect(policy.hosts);\n    }\n  }, [policy]);\n\n  return (\n    <Form>\n      <RoutedTabs defaultTab=\"details\">\n        <Tab eventKey=\"details\" title={<TabTitleText>Details</TabTitleText>}>\n          <EditPolicyDetailsTab\n            policy={policy}\n            setUpdatedPolicy={setUpdatedPolicy}\n          />\n        </Tab>\n\n        <Tab eventKey=\"rules\" title={<TabTitleText>Rules</TabTitleText>}>\n          <EditPolicyRulesTab\n            policy={policy}\n            setNewRuleTabs={setNewRuleTabs}\n            setSelectedRuleRefIds={setSelectedRuleRefIds}\n            selectedRuleRefIds={selectedRuleRefIds}\n            osMinorVersionCounts={osMinorVersionCounts}\n          />\n        </Tab>\n\n        <Tab eventKey=\"systems\" title={<TabTitleText>Systems</TabTitleText>}>\n          <EditPolicySystemsTab\n            policy={policy}\n            newRuleTabs={newRuleTabs}\n            selectedSystems={selectedSystems}\n            onSystemSelect={handleSystemSelect}\n          />\n        </Tab>\n      </RoutedTabs>\n    </Form>\n  );\n};\n\nEditPolicyForm.propTypes = {\n  policy: propTypes.object,\n  setUpdatedPolicy: propTypes.func,\n  selectedRuleRefIds: propTypes.arrayOf(propTypes.object),\n  setSelectedRuleRefIds: propTypes.func,\n  setSelectedSystems: propTypes.func,\n  selectedSystems: propTypes.array,\n};\n\nexport default EditPolicyForm;\n","import { useState } from 'react';\nimport { usePolicy } from 'Mutations';\nimport { useLinkToBackground, useAnchor } from 'Utilities/Router';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nexport const useLinkToPolicy = () => {\n  const anchor = useAnchor();\n  const linkToBackground = useLinkToBackground('/scappolicies');\n  return () => {\n    linkToBackground({ hash: anchor });\n  };\n};\n\nexport const useOnSave = (policy, updatedPolicyHostsAndRules) => {\n  const updatePolicy = usePolicy();\n  const linkToPolicy = useLinkToPolicy();\n  const [isSaving, setIsSaving] = useState(false);\n  const onSave = () => {\n    if (isSaving) {\n      return Promise.resolve({});\n    }\n\n    setIsSaving(true);\n    updatePolicy(policy, updatedPolicyHostsAndRules)\n      .then(() => {\n        setIsSaving(false);\n        dispatchNotification({\n          variant: 'success',\n          title: 'Policy updated',\n          autoDismiss: true,\n        });\n        linkToPolicy();\n      })\n      .catch((error) => {\n        setIsSaving(false);\n        dispatchNotification({\n          variant: 'danger',\n          title: 'Error updating policy',\n          description: error.message,\n        });\n        linkToPolicy();\n      });\n  };\n\n  return [isSaving, onSave];\n};\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Button, Modal, Spinner } from '@patternfly/react-core';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport EditPolicyForm from './EditPolicyForm';\nimport { useOnSave, useLinkToPolicy } from './hooks';\n\nexport const MULTIVERSION_QUERY = gql`\n  query Profile($policyId: String!) {\n    profile(id: $policyId) {\n      id\n      name\n      refId\n      external\n      description\n      totalHostCount\n      compliantHostCount\n      complianceThreshold\n      majorOsVersion\n      osMajorVersion\n      lastScanned\n      policyType\n      policy {\n        id\n        name\n        refId\n        profiles {\n          id\n          ssgVersion\n          parentProfileId\n          name\n          refId\n          osMinorVersion\n          osMajorVersion\n          benchmark {\n            id\n            title\n            latestSupportedOsMinorVersions\n            osMajorVersion\n          }\n          rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n          }\n        }\n      }\n      businessObjective {\n        id\n        title\n      }\n      hosts {\n        id\n        osMinorVersion\n        osMajorVersion\n      }\n    }\n  }\n`;\n\nexport const EditPolicy = ({ route }) => {\n  const { policy_id: policyId } = useParams();\n  const { data, loading, error } = useQuery(MULTIVERSION_QUERY, {\n    variables: { policyId },\n  });\n  const policy = data?.profile;\n  const linkToPolicy = useLinkToPolicy();\n  const [updatedPolicy, setUpdatedPolicy] = useState(null);\n  const [selectedRuleRefIds, setSelectedRuleRefIds] = useState([]);\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const saveEnabled = updatedPolicy && !updatedPolicy.complianceThresholdValid;\n  const updatedPolicyHostsAndRules = {\n    ...updatedPolicy,\n    selectedRuleRefIds,\n    hosts: selectedSystems,\n  };\n  const [isSaving, onSave] = useOnSave(policy, updatedPolicyHostsAndRules);\n\n  const actions = [\n    <Button\n      isDisabled={saveEnabled}\n      key=\"save\"\n      ouiaId=\"EditPolicySaveButton\"\n      variant=\"primary\"\n      spinnerAriaValueText=\"Saving\"\n      isLoading={isSaving}\n      onClick={onSave}\n    >\n      Save\n    </Button>,\n    <Button\n      key=\"cancel\"\n      ouiaId=\"EditPolicyCancelButton\"\n      variant=\"link\"\n      onClick={() => linkToPolicy()}\n    >\n      Cancel\n    </Button>,\n  ];\n\n  useTitleEntity(route, policy?.name);\n\n  return (\n    <Modal\n      isOpen\n      position={'top'}\n      style={{ minHeight: '350px' }}\n      variant={'large'}\n      ouiaId=\"EditPolicyModal\"\n      title={`Edit ${policy ? policy.name : ''}`}\n      onClose={() => linkToPolicy()}\n      actions={actions}\n    >\n      <StateViewWithError stateValues={{ policy, loading, error }}>\n        <StateViewPart stateKey=\"loading\">\n          <Spinner />\n        </StateViewPart>\n        <StateViewPart stateKey=\"policy\">\n          <EditPolicyForm\n            {...{\n              policy,\n              updatedPolicy,\n              setUpdatedPolicy,\n              selectedRuleRefIds,\n              setSelectedRuleRefIds,\n              selectedSystems,\n              setSelectedSystems,\n            }}\n          />\n        </StateViewPart>\n      </StateViewWithError>\n    </Modal>\n  );\n};\n\nEditPolicy.propTypes = {\n  route: propTypes.object,\n};\n\nexport default EditPolicy;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Truncate from '@redhat-cloud-services/frontend-components/Truncate';\nimport {\n  UnsupportedSSGVersion,\n  ComplianceScore as complianceScore,\n} from 'PresentationalComponents';\nimport {\n  profilesRulesFailed,\n  complianceScoreData,\n  NEVER,\n} from 'Utilities/ruleHelpers';\n\nconst SystemLink = ({ id, children }) => (\n  <Link to={{ pathname: `/systems/${id}` }}>{children}</Link>\n);\n\nSystemLink.propTypes = {\n  id: propTypes.string,\n  children: propTypes.node,\n};\n\nexport const Name = ({\n  id,\n  name,\n  osMajorVersion,\n  osMinorVersion,\n  showOsInfo = false,\n  showLink = false,\n}) => {\n  const hasOsInfo = (osMajorVersion, osMinorVersion) =>\n    !!osMajorVersion && !!osMinorVersion && showOsInfo;\n\n  return (\n    <TextContent>\n      {showLink ? <SystemLink {...{ id }}>{name}</SystemLink> : name}\n\n      {hasOsInfo(osMajorVersion, osMinorVersion) && (\n        <Text component={TextVariants.small}>\n          RHEL {osMajorVersion}.{osMinorVersion}\n        </Text>\n      )}\n    </TextContent>\n  );\n};\n\nName.propTypes = {\n  id: propTypes.string,\n  name: propTypes.string,\n  osMajorVersion: propTypes.string,\n  osMinorVersion: propTypes.string,\n  showOsInfo: propTypes.bool,\n  showLink: propTypes.bool,\n};\n\nexport const profilesSsgVersions = (profiles) =>\n  profiles\n    .map((p) => p.ssgVersion)\n    .filter((version) => !!version)\n    .join(', ');\n\nexport const SSGVersion = ({ ssgVersion = 'Not available', supported }) =>\n  supported ? (\n    ssgVersion\n  ) : (\n    <UnsupportedSSGVersion messageVariant=\"singular\">\n      {ssgVersion}\n    </UnsupportedSSGVersion>\n  );\n\nSSGVersion.propTypes = {\n  supported: propTypes.bool,\n  ssgVersion: propTypes.string,\n};\n\nexport const SSGVersions = ({ testResultProfiles = [] }) =>\n  testResultProfiles.length !== 0\n    ? testResultProfiles.map((profile) => (\n        <SSGVersion key={`ssgversion-${profile.id}`} {...profile} />\n      ))\n    : 'Not available';\n\nSSGVersions.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const DetailsLink = ({ id, testResultProfiles = [] }) =>\n  testResultProfiles.length > 0 ? (\n    <SystemLink {...{ id }}>View Report</SystemLink>\n  ) : (\n    ''\n  );\n\nDetailsLink.propTypes = {\n  id: propTypes.string,\n  testResultProfiles: propTypes.array,\n};\n\nexport const Policies = ({ policies }) =>\n  (policies || []).length > 0 && (\n    <Truncate\n      inline\n      text={policies.map((p) => p.name).join(', ')}\n      length={215}\n    />\n  );\n\nPolicies.propTypes = {\n  policies: propTypes.array,\n};\n\nexport const FailedRules = ({ id, testResultProfiles }) => {\n  const rulesFailed = profilesRulesFailed(testResultProfiles).length;\n  return <SystemLink {...{ id }}>{rulesFailed}</SystemLink>;\n};\n\nFailedRules.propTypes = {\n  id: propTypes.string,\n  testResultProfiles: propTypes.array,\n};\n\nexport { complianceScoreData };\nexport const ComplianceScore = ({ testResultProfiles }) =>\n  complianceScore(complianceScoreData(testResultProfiles));\n\nComplianceScore.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const lastScanned = (profiles) => {\n  const dates = profiles.map((profile) => new Date(profile.lastScanned));\n  const last = new Date(\n    Math.max.apply(\n      null,\n      dates.filter((date) => isFinite(date))\n    )\n  );\n  const result = last instanceof Date && isFinite(last) ? last : NEVER;\n\n  return result;\n};\n\nexport const LastScanned = ({ testResultProfiles: profiles }) => {\n  const lastScannedDate = lastScanned(profiles || []);\n\n  return lastScannedDate instanceof Date ? (\n    <DateFormat date={Date.parse(lastScannedDate)} type=\"relative\" />\n  ) : (\n    lastScannedDate\n  );\n};\n\nLastScanned.propTypes = {\n  testResultProfiles: propTypes.array,\n};\n\nexport const operatingSystemString = ({ osMinorVersion, osMajorVersion }) =>\n  `RHEL ${osMajorVersion}.${osMinorVersion}`;\n\nexport const OperatingSystem = (system) => operatingSystemString(system);\n","import { nowrap } from '@patternfly/react-table';\nimport { complianceScoreString } from 'PresentationalComponents';\nimport { profilesRulesFailed } from 'Utilities/ruleHelpers';\nimport { renderComponent } from 'Utilities/helpers';\n\nimport {\n  Name as NameCell,\n  ComplianceScore as ComplianceScoreCell,\n  DetailsLink as DetailsLinkCell,\n  FailedRules as FailedRulesCell,\n  LastScanned as LastScannedCell,\n  Policies as PoliciesCell,\n  SSGVersions as SsgVersionCell,\n  complianceScoreData,\n  lastScanned,\n  operatingSystemString,\n  OperatingSystem as OperatingSystemCell,\n} from './Cells';\n\nconst disableSorting = { isStatic: true };\n\nexport const compileColumnRenderFunc = ({ cell, ...column }) => ({\n  ...column,\n  renderFunc: renderComponent(cell, column.props),\n});\n\nexport const customColumn = (column, props) =>\n  compileColumnRenderFunc({\n    ...column,\n    props: {\n      ...column.props,\n      ...props,\n    },\n  });\n\nexport const Name = compileColumnRenderFunc({\n  key: 'name',\n  title: 'Name',\n  props: {\n    width: 40,\n    ...disableSorting,\n  },\n  renderExport: (system) => `${system.name} (${operatingSystemString(system)})`,\n  cell: NameCell,\n});\n\nexport const customName = (props) => ({\n  ...Name,\n  props: {\n    ...Name.props,\n    ...props,\n  },\n  renderFunc: renderComponent(NameCell, props),\n});\n\nexport const SsgVersion = {\n  title: 'SSG version',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  props: disableSorting,\n  renderExport: (testResultProfiles) =>\n    testResultProfiles\n      .map(\n        ({ supported, ssgVersion }) => `${!supported ? '!' : ''}${ssgVersion}`\n      )\n      .join(', '),\n  renderFunc: renderComponent(SsgVersionCell),\n};\n\nexport const Policies = {\n  title: 'Policies',\n  transforms: [nowrap],\n  exportKey: 'policies',\n  renderExport: (policies) => policies.map(({ name }) => name).join(', '),\n  props: {\n    width: 40,\n    ...disableSorting,\n  },\n  renderFunc: renderComponent(PoliciesCell),\n};\n\nexport const DetailsLink = {\n  title: '',\n  export: false,\n  props: {\n    width: 20,\n    ...disableSorting,\n  },\n  renderFunc: renderComponent(DetailsLinkCell),\n};\n\nexport const FailedRules = {\n  title: 'Failed rules',\n  exportKey: 'testResultProfiles',\n  transforms: [nowrap],\n  props: {\n    width: 5,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) =>\n    profilesRulesFailed(testResultProfiles).length,\n  renderFunc: renderComponent(FailedRulesCell),\n};\n\nexport const ComplianceScore = {\n  title: 'Compliance score',\n  exportKey: 'testResultProfiles',\n  transforms: [nowrap],\n  props: {\n    width: 5,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) =>\n    complianceScoreString(complianceScoreData(testResultProfiles)).trim(),\n  renderFunc: renderComponent(ComplianceScoreCell),\n};\n\nexport const LastScanned = {\n  title: 'Last scanned',\n  transforms: [nowrap],\n  exportKey: 'testResultProfiles',\n  props: {\n    width: 10,\n    ...disableSorting,\n  },\n  renderExport: (testResultProfiles) => lastScanned(testResultProfiles),\n  renderFunc: renderComponent(LastScannedCell),\n};\n\nexport const OperatingSystem = compileColumnRenderFunc({\n  title: 'Operating system',\n  key: 'operatingSystem',\n  transforms: [nowrap],\n  props: disableSorting,\n  renderExport: (cell) => operatingSystemString(cell),\n  cell: OperatingSystemCell,\n});\n\nexport const inventoryColumn = (column, props) => ({\n  key: column,\n  props,\n});\n","import gql from 'graphql-tag';\nimport pickBy from 'lodash/pickBy';\nimport {\n  systemsPolicyFilterConfiguration,\n  systemsOsFilterConfiguration,\n  systemsOsMinorFilterConfiguration,\n} from '@/constants';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { entitiesReducer } from 'Store/Reducers/SystemStore';\n\nexport const GET_SYSTEMS = gql`\n  query getSystems(\n    $filter: String!\n    $policyId: ID\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n          osMinorVersion\n          culledTimestamp\n          staleWarningTimestamp\n          staleTimestamp\n          insightsId\n          lastScanned\n          testResultProfiles(policyId: $policyId) {\n            id\n            name\n            refId\n            lastScanned\n            compliant\n            external\n            score\n            supported\n            ssgVersion\n            majorOsVersion\n            rules {\n              refId\n              title\n              compliant\n              remediationAvailable\n            }\n          }\n          policies(policyId: $policyId) {\n            id\n            name\n          }\n          tags {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_SYSTEMS_WITHOUT_FAILED_RULES = gql`\n  query getSystems(\n    $filter: String!\n    $policyId: ID\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          name\n          osMajorVersion\n          osMinorVersion\n          culledTimestamp\n          staleWarningTimestamp\n          staleTimestamp\n          insightsId\n          lastScanned\n          testResultProfiles(policyId: $policyId) {\n            id\n            name\n            lastScanned\n            external\n            compliant\n            score\n            supported\n            ssgVersion\n            policy {\n              id\n            }\n          }\n          policies(policyId: $policyId) {\n            id\n            name\n          }\n          tags {\n            namespace\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_MINIMAL_SYSTEMS = gql`\n  query getSystems(\n    $filter: String!\n    $perPage: Int\n    $page: Int\n    $sortBy: [String!]\n    $tags: [String!]\n  ) {\n    systems(\n      search: $filter\n      limit: $perPage\n      offset: $page\n      sortBy: $sortBy\n      tags: $tags\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n        }\n      }\n    }\n  }\n`;\n\nexport const policyFilter = (policies, osFilter) => [\n  ...systemsPolicyFilterConfiguration(policies),\n  ...(osFilter ? systemsOsFilterConfiguration(policies) : []),\n];\n\nexport const osMinorVersionFilter = (...args) =>\n  systemsOsMinorFilterConfiguration(...args);\n\nexport const initFilterState = (filterConfig) =>\n  pickBy(filterConfig.initialDefaultState(), (value) => !!value);\n\nexport const defaultOnLoad =\n  (columns) =>\n  ({ INVENTORY_ACTION_TYPES, mergeWithEntities }) =>\n    getRegistry().register({\n      ...mergeWithEntities(entitiesReducer(INVENTORY_ACTION_TYPES, columns)),\n    });\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Skeleton, {\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { registryDecorator } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport {\n  InventoryDetail,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\n\n@registryDecorator()\nclass InventoryDetails extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <DetailWrapper\n        onLoad={({ mergeWithDetail }) =>\n          this.getRegistry().register({\n            ...mergeWithDetail(),\n          })\n        }\n      >\n        <InventoryDetail\n          fallback={<Skeleton size={SkeletonSize.md} />}\n          hideBack\n        />\n      </DetailWrapper>\n    );\n  }\n}\n\nInventoryDetails.propTypes = {\n  entity: propTypes.object,\n};\n\nconst ConnectedInventoryDetails = (props) => {\n  return <InventoryDetails {...props} />;\n};\n\nexport default ConnectedInventoryDetails;\n","import { camelCase, getProperty } from 'Utilities/helpers';\n\nconst CSV_FILE_PREFIX = 'compliance-export';\nconst CSV_DELIMITER = ',';\nconst ENCODINGS = {\n  csv: 'text/csv',\n  json: 'application/json',\n};\n\nconst filename = (format) =>\n  CSV_FILE_PREFIX + '-' + new Date().toISOString() + '.' + format;\n\nconst encoding = (format) => `data:${ENCODINGS[format]};charset=utf-8`;\n\nexport const linkAndDownload = (data, filename) => {\n  const link = document.createElement('a');\n  link.href = data;\n  link.download = filename;\n  link.click();\n};\n\nconst textForCell = (row, column) => {\n  const { exportKey, renderExport } = column;\n  let cell = exportKey ? getProperty(row, exportKey) : row;\n  if (renderExport) {\n    return renderExport(cell);\n  } else {\n    return cell;\n  }\n};\n\nexport const csvForItems = ({ items, columns }) => {\n  const header = columns.map((column) => column.title).join(CSV_DELIMITER);\n  const csvRows = [\n    header,\n    ...items.map((row) =>\n      columns\n        .map((column) => `\"${textForCell(row, column)}\"`)\n        .join(CSV_DELIMITER)\n    ),\n  ];\n\n  return encodeURI(`${encoding('csv')},${csvRows.join('\\n')}`);\n};\n\nexport const jsonForItems = ({ items, columns }) => {\n  const result = items.map((row) =>\n    columns.reduce((object, column) => {\n      const key = camelCase(column.title);\n      const value = textForCell(row, column);\n\n      object[key] = value;\n      return object;\n    }, {})\n  );\n\n  return encodeURI(`${encoding('json')},${JSON.stringify(result)}`);\n};\n\nconst useExport = ({ exporter, columns = [], isDisabled = false }) => {\n  const exportableColumns = columns.filter(\n    (column) =>\n      column.export !== false && (column.exportKey || column.renderExport)\n  );\n  const exportWithFormat = async (format) => {\n    const items = await exporter();\n    const formater = format === 'csv' ? csvForItems : jsonForItems;\n\n    if (items) {\n      return linkAndDownload(\n        formater({\n          items,\n          columns: exportableColumns,\n        }),\n        filename(format)\n      );\n    } else {\n      console.info('No items returned for export');\n      return;\n    }\n  };\n\n  return {\n    toolbarProps: {\n      exportConfig: {\n        isDisabled,\n        onSelect: (_, format) => exportWithFormat(format),\n      },\n    },\n  };\n};\n\nexport default useExport;\n","import { useEffect, useLayoutEffect, useState } from 'react';\nimport { useApolloClient } from '@apollo/client';\nimport { useDispatch } from 'react-redux';\nimport debounce from '@redhat-cloud-services/frontend-components-utilities/debounce';\nimport useCollection from 'Utilities/hooks/api/useCollection';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport { osMinorVersionFilter, GET_MINIMAL_SYSTEMS } from './constants';\nimport useExport from 'Utilities/hooks/useTableTools/useExport';\nimport { useBulkSelect } from 'Utilities/hooks/useTableTools/useBulkSelect';\nimport { dispatchNotification } from 'Utilities/Dispatcher';\n\nconst groupByMajorVersion = (versions = [], showFilter = []) => {\n  const showVersion = (version) => {\n    if (showFilter.length > 0) {\n      return showFilter.map(String).includes(String(version));\n    } else {\n      return true;\n    }\n  };\n\n  return versions.reduce((acc, currentValue) => {\n    if (showVersion(currentValue.osMajorVersion)) {\n      acc[String(currentValue.osMajorVersion)] = [\n        ...new Set([\n          ...(acc[currentValue.osMajorVersion] || []),\n          currentValue.osMinorVersion,\n        ]),\n      ];\n    }\n\n    return acc;\n  }, []);\n};\n\nexport const useOsMinorVersionFilter = (showFilter) => {\n  const { data: supportedSsgs } = useCollection('supported_ssgs', {\n    type: 'supportedSsg',\n    skip: !showFilter,\n  });\n\n  return showFilter\n    ? osMinorVersionFilter(\n        groupByMajorVersion(supportedSsgs?.collection, showFilter)\n      )\n    : [];\n};\n\nexport const useSystemsFilter = (\n  filterString,\n  showOnlySystemsWithTestResults,\n  defaultFilter\n) => {\n  const combindedFilter = [\n    ...(showOnlySystemsWithTestResults ? ['has_test_results = true'] : []),\n    ...(filterString?.length > 0 ? [filterString] : []),\n  ].join(' and ');\n  const filter = defaultFilter\n    ? `(${defaultFilter})` +\n      (combindedFilter ? ` and (${combindedFilter})` : '')\n    : combindedFilter;\n\n  return filter;\n};\n\nconst renameInventoryAttributes = ({\n  culledTimestamp,\n  staleWarningTimestamp,\n  staleTimestamp,\n  insightsId,\n  lastScanned,\n  ...system\n}) => ({\n  ...system,\n  updated: lastScanned,\n  culled_timestamp: culledTimestamp,\n  stale_warning_timestamp: staleWarningTimestamp,\n  stale_timestamp: staleTimestamp,\n  insights_id: insightsId,\n});\n\nexport const useFetchSystems = ({\n  query,\n  onComplete,\n  variables = {},\n  onError,\n}) => {\n  const client = useApolloClient();\n\n  return (perPage, page, requestVariables = {}) =>\n    client\n      .query({\n        query,\n        fetchResults: true,\n        fetchPolicy: 'no-cache',\n        variables: {\n          perPage,\n          page,\n          ...variables,\n          ...requestVariables,\n        },\n      })\n      .then(({ data }) => {\n        const systems = data?.systems?.edges?.map((e) => e.node) || [];\n        const entities = systemsWithRuleObjectsFailed(systems).map(\n          renameInventoryAttributes\n        );\n        const result = {\n          entities,\n          meta: {\n            ...(requestVariables.tags && { tags: requestVariables.tags }),\n            totalCount: data?.systems?.totalCount || 0,\n          },\n        };\n\n        onComplete && onComplete(result);\n        return result;\n      })\n      .catch((error) => {\n        if (onError) {\n          onError(error);\n          return { entities: [], meta: { totalCount: 0 } };\n        } else {\n          throw error;\n        }\n      });\n};\n\nconst fetchBatched = (fetchFunction, total, filter, batchSize = 100) => {\n  const pages = Math.ceil(total / batchSize) || 1;\n  return Promise.all(\n    [...new Array(pages)].map((_, pageIdx) =>\n      fetchFunction(batchSize, pageIdx + 1, filter)\n    )\n  );\n};\n\nconst buildApiFilters = (filters = {}) => {\n  const { tagFilters, ...otherFilters } = filters;\n  const tagsApiFilter = tagFilters\n    ? {\n        tags: tagFilters.flatMap((tagFilter) =>\n          tagFilter.values.map(\n            (tag) =>\n              `${encodeURIComponent(tagFilter.key)}/${encodeURIComponent(\n                tag.tagKey\n              )}=${encodeURIComponent(tag.value)}`\n          )\n        ),\n      }\n    : {};\n\n  return {\n    ...otherFilters,\n    ...tagsApiFilter,\n  };\n};\n\nexport const useGetEntities = (fetchEntities, { selected, columns } = {}) => {\n  const appendDirection = (attributes, direction) =>\n    attributes.map((attribute) => `${attribute}:${direction}`);\n\n  const findColumnByKey = (key) =>\n    (columns || []).find((column) => column.key === key);\n\n  return async (\n    _ids,\n    { page = 1, per_page: perPage, orderBy, orderDirection, filters }\n  ) => {\n    const sortableColumn = findColumnByKey(orderBy);\n    const sortBy =\n      sortableColumn && sortableColumn.sortBy\n        ? appendDirection(sortableColumn.sortBy, orderDirection)\n        : undefined;\n    const filterForApi = buildApiFilters(filters);\n\n    const fetchedEntities = await fetchEntities(perPage, page, {\n      ...filterForApi,\n      sortBy,\n    });\n    const {\n      entities,\n      meta: { totalCount },\n    } = fetchedEntities || {};\n\n    return {\n      results: entities.map((entity) => ({\n        ...entity,\n        selected: (selected || []).map((id) => id).includes(entity.id),\n      })),\n      orderBy,\n      orderDirection,\n      total: totalCount,\n    };\n  };\n};\n\n// This hook is primarily meant to work around issues in the inventory\nexport const useInventoryUtilities = (\n  inventory,\n  selectedSystems,\n  activeFilters\n) => {\n  const dispatch = useDispatch();\n\n  // Resets the Inventory to a loading state\n  // and prevents previously shown columns and rows to appear\n  useLayoutEffect(() => {\n    dispatch({\n      type: 'INVENTORY_INIT',\n    });\n  }, []);\n\n  // Ensures rows are marked as selected\n  useEffect(() => {\n    dispatch({\n      type: 'SELECT_ENTITIES',\n      payload: {\n        selected: selectedSystems,\n      },\n    });\n  }, [selectedSystems]);\n\n  // Filters do not yet trigger the inventory to call getEntities\n  // and the page would not reset to page 1\n  const resetPage = () => {\n    Promise.resolve(\n      dispatch({\n        type: 'RESET_PAGE',\n      })\n    ).then(() => inventory?.current?.onRefreshData());\n  };\n\n  // The debounce is to not have filter updates collide or get out of order.\n  const debounceResetPage = debounce(resetPage, 50);\n\n  useEffect(() => {\n    debounceResetPage();\n  }, [activeFilters]);\n};\n\nconst toIdFilter = (ids) =>\n  ids?.length > 0 ? `id ^ (${ids.join(',')})` : undefined;\n\nexport const useSystemsExport = ({\n  columns,\n  selected,\n  total,\n  fetchArguments,\n}) => {\n  const selectionFilter = selected ? toIdFilter(selected) : undefined;\n  const fetchSystems = useFetchSystems({\n    query: fetchArguments.query,\n    variables: {\n      ...fetchArguments.variables,\n      ...(fetchArguments.tags && { tags: fetchArguments.tags }),\n      filter: selectionFilter\n        ? `${fetchArguments.variables.filter} and (${selectionFilter})`\n        : fetchArguments.variables.filter,\n    },\n    onError: () => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Couldn’t download export',\n        description: 'Reinitiate this export to try again.',\n      });\n    },\n    onComplete: () => {\n      dispatchNotification({\n        variant: 'success',\n        title: 'Downloading export',\n      });\n    },\n  });\n\n  const selectedFilter = () =>\n    selected?.length > 0 ? toIdFilter(selected) : undefined;\n\n  const exporter = async () => {\n    dispatchNotification({\n      variant: 'info',\n      title: 'Preparing export',\n      description: 'Once complete, your download will start automatically.',\n    });\n    const fetchedItems = await fetchBatched(\n      fetchSystems,\n      total,\n      selectedFilter()\n    );\n\n    return fetchedItems.flatMap((result) => result.entities);\n  };\n\n  const {\n    toolbarProps: { exportConfig },\n  } = useExport({\n    exporter,\n    columns,\n    isDisabled: total === 0,\n  });\n\n  return exportConfig;\n};\n\nexport const useSystemBulkSelect = ({\n  total,\n  onSelect,\n  preselected,\n  fetchArguments,\n  currentPageIds,\n  systemsCache = [],\n}) => {\n  // This is meant as a compatibility layer and to be removed\n  const [selectedSystems, setSelectedSystems] = useState([]);\n  const fetchSystems = useFetchSystems({\n    ...fetchArguments,\n    query: GET_MINIMAL_SYSTEMS,\n    onError: (error) => {\n      dispatchNotification({\n        variant: 'danger',\n        title: 'Error selecting systems',\n        description: error.message,\n      });\n    },\n  });\n\n  const fetchFunc = async (fetchIds) => {\n    if (fetchIds.length === 0) {\n      return [];\n    }\n\n    const idFilter = toIdFilter(fetchIds);\n    const results = await fetchBatched(fetchSystems, fetchIds.length, {\n      ...(idFilter && { filter: idFilter }),\n    });\n\n    return results.flatMap((result) => result.entities);\n  };\n\n  const cachedOrFetch = async (selectedIds) => {\n    const cachedSystems = systemsCache.filter(({ id }) =>\n      selectedIds.includes(id)\n    );\n    const cachedIds = cachedSystems.map(({ id }) => id);\n    const fetchIds = selectedIds.filter((id) => !cachedIds.includes(id));\n    const fetchedSystems = await fetchFunc(fetchIds);\n\n    return [...cachedSystems, ...fetchedSystems];\n  };\n\n  const onSelectCallback = async (selectedIds) => {\n    const systems = await cachedOrFetch(selectedIds);\n    setSelectedSystems(systems);\n    onSelect && onSelect(systems);\n  };\n\n  const itemIdsInTable = async () => {\n    const results = await fetchBatched(fetchSystems, total);\n    return results.flatMap((result) => result.entities.map(({ id }) => id));\n  };\n\n  const bulkSelect = useBulkSelect({\n    total,\n    onSelect: onSelectCallback,\n    preselected,\n    itemIdsInTable,\n    itemIdsOnPage: () => currentPageIds,\n  });\n  return {\n    selectedSystems,\n    ...bulkSelect,\n  };\n};\n\nexport const useTags = (tagsEnabled) => {\n  const [currentTags, setCurrentTags] = useState([]);\n\n  return tagsEnabled\n    ? {\n        props: {\n          hideFilters: {\n            name: true,\n            tags: false,\n            registeredWith: true,\n            stale: true,\n          },\n          showTags: true,\n        },\n        currentTags,\n        setCurrentTags,\n      }\n    : {\n        props: {\n          hideFilters: {\n            name: true,\n            tags: true,\n            registeredWith: true,\n            stale: true,\n          },\n        },\n      };\n};\n","import React, { useMemo, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Spinner } from '@patternfly/react-core';\nimport { TableVariant } from '@patternfly/react-table';\n// eslint-disable-next-line max-len\nimport ComplianceRemediationButton from '@/PresentationalComponents/ComplianceRemediationButton';\nimport {\n  DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n  COMPLIANT_SYSTEMS_FILTER_CONFIGURATION,\n} from '@/constants';\nimport { ErrorPage, StateView, StateViewPart } from 'PresentationalComponents';\nimport useFilterConfig from 'Utilities/hooks/useTableTools/useFilterConfig';\nimport { InventoryTable as FECInventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { policyFilter, defaultOnLoad } from './constants';\nimport {\n  useFetchSystems,\n  useGetEntities,\n  useOsMinorVersionFilter,\n  useInventoryUtilities,\n  useSystemsExport,\n  useSystemsFilter,\n  useSystemBulkSelect,\n  useTags,\n} from './hooks';\nimport useFeature from 'Utilities/hooks/useFeature';\n\nexport const InventoryTable = ({\n  columns,\n  showAllSystems,\n  policyId,\n  query,\n  showActions,\n  enableExport,\n  compliantFilter,\n  policies,\n  showOnlySystemsWithTestResults,\n  showOsFilter,\n  error,\n  showComplianceSystemsInfo,\n  compact,\n  remediationsEnabled,\n  systemProps,\n  defaultFilter,\n  emptyStateComponent,\n  prependComponent,\n  showOsMinorVersionFilter,\n  preselectedSystems,\n  onSelect: onSelectProp,\n  noSystemsTable,\n}) => {\n  const inventory = useRef(null);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [total, setTotal] = useState(0);\n  const tagsEnabled = useFeature('tags');\n  const {\n    props: tagsProps,\n    currentTags,\n    setCurrentTags,\n  } = useTags(tagsEnabled);\n\n  const osMinorVersionFilter = useOsMinorVersionFilter(\n    showOsMinorVersionFilter\n  );\n  const {\n    toolbarProps: conditionalFilter,\n    filterString,\n    activeFilterValues,\n  } = useFilterConfig({\n    filters: {\n      filterConfig: [\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(policies?.length > 0 ? policyFilter(policies, showOsFilter) : []),\n        ...osMinorVersionFilter,\n      ],\n    },\n  });\n  const systemsFilter = useSystemsFilter(\n    filterString(),\n    showOnlySystemsWithTestResults,\n    defaultFilter\n  );\n\n  const systemFetchArguments = {\n    query,\n    variables: {\n      tags: currentTags,\n      filter: systemsFilter,\n      ...(policyId && { policyId }),\n    },\n  };\n\n  const preselection = useMemo(\n    () => preselectedSystems.map(({ id }) => id),\n    [preselectedSystems]\n  );\n\n  const {\n    selectedIds,\n    selectedSystems,\n    tableProps: bulkSelectTableProps,\n    toolbarProps: bulkSelectToolBarProps,\n  } = useSystemBulkSelect({\n    total,\n    onSelect: onSelectProp,\n    preselected: preselection,\n    fetchArguments: systemFetchArguments,\n    currentPageIds: items.map(({ id }) => id),\n    systemsCache: items,\n  });\n\n  useInventoryUtilities(inventory, selectedIds, activeFilterValues);\n\n  const onComplete = (result) => {\n    setTotal(result.meta.totalCount);\n    setItems(result.entities);\n    setIsLoaded(true);\n    setCurrentTags && setCurrentTags(result.meta.tags);\n\n    if (\n      emptyStateComponent &&\n      result.meta.totalCount === 0 &&\n      activeFilterValues.length === 0 &&\n      result?.meta?.tags?.length === 0\n    ) {\n      setIsEmpty(true);\n    }\n  };\n\n  const fetchSystems = useFetchSystems({\n    ...systemFetchArguments,\n    onComplete,\n  });\n  const getEntities = useGetEntities(fetchSystems, {\n    selected: selectedIds,\n    columns,\n  });\n  const exportConfig = useSystemsExport({\n    columns,\n    filter: systemsFilter,\n    selected: selectedIds,\n    total,\n    fetchArguments: {\n      tags: currentTags,\n      ...systemFetchArguments,\n    },\n  });\n\n  const mergedColumns = (defaultColumns) =>\n    columns.map((column) => {\n      const isStringCol = typeof column === 'string';\n      const key = isStringCol ? column : column.key;\n      const defaultColumn = defaultColumns.find(\n        (defaultCol) => defaultCol.key === key\n      );\n      return {\n        ...defaultColumn,\n        ...(isStringCol ? { key: column } : column),\n        props: {\n          ...defaultColumn?.props,\n          ...column?.props,\n        },\n      };\n    });\n\n  return (\n    <StateView\n      stateValues={{\n        error,\n        noError: error === undefined && !isEmpty,\n        empty: isEmpty,\n      }}\n    >\n      <StateViewPart stateKey=\"error\">\n        {!!prependComponent && prependComponent}\n        <ErrorPage error={error} />\n      </StateViewPart>\n      <StateViewPart stateKey=\"empty\">{emptyStateComponent}</StateViewPart>\n      <StateViewPart stateKey=\"noError\">\n        {!!prependComponent && isLoaded && prependComponent}\n        {showComplianceSystemsInfo && (\n          <Alert\n            isInline\n            variant=\"info\"\n            ouiaId=\"SystemsListIsDifferentAlert\"\n            title={\n              'The list of systems in this view is different than those that appear in the Inventory. ' +\n              'Only systems currently associated with or reporting against compliance policies are displayed.'\n            }\n          />\n        )}\n        <FECInventoryTable\n          {...systemProps}\n          {...tagsProps}\n          disableDefaultColumns\n          columns={mergedColumns}\n          noSystemsTable={noSystemsTable}\n          ref={inventory}\n          getEntities={getEntities}\n          onLoad={defaultOnLoad(columns)}\n          tableProps={{\n            ...bulkSelectTableProps,\n            isStickyHeader: true,\n          }}\n          fallback={<Spinner />}\n          variant={compact ? TableVariant.compact : ''}\n          {...bulkSelectToolBarProps}\n          {...(!showAllSystems && {\n            ...conditionalFilter,\n            ...(remediationsEnabled && {\n              dedicatedAction: (\n                <ComplianceRemediationButton\n                  allSystems={selectedSystems}\n                  selectedRules={[]}\n                />\n              ),\n            }),\n          })}\n          {...(enableExport && { exportConfig })}\n          {...(showActions && {\n            actions: [\n              {\n                title: 'View in inventory',\n                onClick: (_event, _index, { id }) => {\n                  const beta =\n                    window.location.pathname.split('/')[1] === 'beta';\n                  window.location.href = `${window.location.origin}${\n                    beta ? '/beta' : ''\n                  }/insights/inventory/${id}`;\n                },\n              },\n            ],\n          })}\n        />\n      </StateViewPart>\n    </StateView>\n  );\n};\n\nInventoryTable.propTypes = {\n  columns: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.shape({}), PropTypes.string])\n  ),\n  policies: PropTypes.arrayOf(PropTypes.shape({})),\n  showAllSystems: PropTypes.bool,\n  policyId: PropTypes.string,\n  query: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  showActions: PropTypes.bool,\n  enableExport: PropTypes.bool,\n  compliantFilter: PropTypes.bool,\n  showOnlySystemsWithTestResults: PropTypes.bool,\n  showOsFilter: PropTypes.bool,\n  showComplianceSystemsInfo: PropTypes.bool,\n  error: PropTypes.object,\n  compact: PropTypes.bool,\n  remediationsEnabled: PropTypes.bool,\n  defaultFilter: PropTypes.string,\n  systemProps: PropTypes.shape({\n    isFullView: PropTypes.bool,\n  }),\n  emptyStateComponent: PropTypes.node,\n  prependComponent: PropTypes.node,\n  showOsMinorVersionFilter: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  preselectedSystems: PropTypes.array,\n  onSelect: PropTypes.func,\n  noSystemsTable: PropTypes.node,\n};\n\nInventoryTable.defaultProps = {\n  policyId: '',\n  showActions: true,\n  enableExport: true,\n  compliantFilter: false,\n  showOnlySystemsWithTestResults: false,\n  showComplianceSystemsInfo: false,\n  compact: false,\n  remediationsEnabled: true,\n  preselectedSystems: [],\n};\n\nexport default InventoryTable;\n","class ApiClient {\n  DEFAULT_API_HEADERS = {\n    'Content-Type': 'application/vnd.api+json',\n    Accept: 'application/json',\n  };\n\n  constructor(options = {}) {\n    this.apiBase = options.apiBase || '/api';\n    this.path = options.path || '';\n    this.authenticate = options.authenticate || (() => Promise.resolve({}));\n    this.onUnauthorised = options.onUnauthorised || (() => Promise.resolve({}));\n    this.defaultHeaders = options.headers || this.DEFAULT_API_HEADERS;\n  }\n\n  async request(path, apiProps, method, options = {}) {\n    return await this.callAuthenticate()\n      .then(() => this.fetch(path, apiProps, method, options))\n      .then(this.checkForEmptyResponse)\n      .then((response) => this.checkForErrors(response, options))\n      .then((response) => response.json())\n      .catch(this.finalCatch);\n  }\n\n  finalCatch(promise) {\n    if (promise.errors === undefined) {\n      return Promise.reject({ title: 'Error parsing' });\n    } else {\n      return Promise.reject({ ...promise });\n    }\n  }\n\n  fetch(path, apiProps, method, options) {\n    let params = {\n      method: method || 'get',\n      headers: this.defaultHeaders,\n      credentials: 'include',\n    };\n    const fullPath = `${this.apiBase}${this.path ? this.path : ''}${\n      path ? path : ''\n    }`;\n    let url = new URL(fullPath, window.location.origin);\n    if (options.params) {\n      const params = Object.keys(options.params)\n        .map(\n          (key) =>\n            encodeURIComponent(key) +\n            '=' +\n            encodeURIComponent(options.params[key])\n        )\n        .join('&');\n      url.search = new URLSearchParams(params);\n    }\n\n    if (apiProps) {\n      params.body = JSON.stringify(apiProps);\n    }\n\n    return fetch(url, params);\n  }\n\n  checkForEmptyResponse(response) {\n    return response.status === 204 ? { json: () => ({}) } : response;\n  }\n\n  checkForErrors(response, options = {}) {\n    if (response.status === 404 && options.ignore404) {\n      return { json: () => ({}) };\n    }\n\n    if (response.status === 401) {\n      return this.onUnauthorised();\n    }\n\n    const responseCloneJson = response.clone\n      ? response.clone().json()\n      : response;\n\n    if (response.status === 422) {\n      return responseCloneJson.then((json) =>\n        Promise.reject({ ...json, title: 'Validation error' })\n      );\n    }\n\n    if (response.status >= 400 && response.status <= 600) {\n      return responseCloneJson.then((json) => Promise.reject(json.errors[0]));\n    }\n\n    return response;\n  }\n\n  callAuthenticate() {\n    return Promise.resolve(this.authenticate() || true);\n  }\n\n  create(path, apiProps) {\n    return this.request(path, apiProps, 'post');\n  }\n\n  update(path, apiProps) {\n    return this.request(path, apiProps, 'put');\n  }\n\n  get(path, options = {}) {\n    return this.request(path, null, 'get', options);\n  }\n\n  destroy(path) {\n    return this.request(path, null, 'delete');\n  }\n}\n\nexport default ApiClient;\n","import ApiClient from './utils/ApiClient';\n\nconst useApi = (options) => {\n  const apiClient = new ApiClient({\n    ...options,\n  });\n\n  return apiClient;\n};\n\nexport default useApi;\n","import { useEffect, useState } from 'react';\nimport { COMPLIANCE_API_ROOT } from '@/constants';\nimport normalize from 'json-api-normalizer';\nimport useApi from './useApi';\n\nconst includePropAndDelete = (entity, prop) => {\n  const attributes = entity[prop];\n  let newEntity = entity;\n  delete newEntity[prop];\n  return { ...newEntity, ...attributes };\n};\n\nconst includeAttributes = (entity) =>\n  entity && includePropAndDelete(entity, 'attributes');\n\nconst includeRelationship = (entity, normalizedJson) => {\n  let relationships = {};\n  Object.entries(entity?.relationships || []).forEach((item) => {\n    const [relationship, relationshipData] = item;\n    relationships[relationship] = relationshipData?.data\n      .map((entity) =>\n        includeAttributes(normalizedJson?.[entity.type]?.[entity.id])\n      )\n      .filter((v) => !!v);\n  });\n  delete entity.relationships;\n  return { ...entity, ...relationships };\n};\n\nconst normalizeData = (json, type) => {\n  const jsonNormalized = normalize(json);\n  return Object.values(jsonNormalized[type] || {})?.map((entity) =>\n    includeRelationship(includeAttributes(entity), jsonNormalized)\n  );\n};\n\nconst fetchCollection = async (\n  apiClient,\n  collection,\n  params = {},\n  options = {}\n) => {\n  const json = await apiClient.get(`/${collection}`, { params });\n  const normalized = await normalizeData(json, options?.type || collection);\n\n  return {\n    collection: normalized,\n    meta: json.meta,\n    total: json.meta.total,\n    json,\n  };\n};\n\nconst useCollection = (collection, options = {}, dependencies = []) => {\n  const [collectionState, setCollectionState] = useState({\n    data: undefined,\n    loading: false,\n    error: undefined,\n  });\n  const apiClient = useApi({\n    apiBase: COMPLIANCE_API_ROOT,\n  });\n  const params = {\n    ...(options?.params || {}),\n    include: options?.include || [],\n  };\n\n  useEffect(() => {\n    if (!options?.skip) {\n      setCollectionState({\n        data: undefined,\n        loading: true,\n        error: undefined,\n      });\n\n      fetchCollection(apiClient, collection, params, options).then((data) => {\n        setCollectionState({\n          data,\n          loading: false,\n          error: undefined,\n        });\n      });\n    }\n  }, [...dependencies, options?.skip]);\n\n  return collectionState;\n};\n\nexport default useCollection;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { sortingByProp } from 'Utilities/helpers';\n\nconst selectRows = (rows, selected) =>\n  rows.map((row) => ({\n    ...row,\n    selected: selected.includes(row.id),\n  }));\n\nexport const entitiesReducer = () =>\n  applyReducerHash({\n    ['INVENTORY_INIT']: () => ({\n      rows: [],\n      total: 0,\n    }),\n    ['RESET_PAGE']: (state) => ({\n      ...state,\n      page: 1,\n    }),\n    ['SELECT_ENTITIES']: (state, { payload: { selected } }) => ({\n      ...state,\n      rows: selectRows(state.rows, selected),\n    }),\n  });\n\nexport const mapCountOsMinorVersions = (systems) => {\n  if (!systems) {\n    return {};\n  }\n\n  return systems.reduce((acc, { osMinorVersion }) => {\n    if (osMinorVersion !== undefined && osMinorVersion !== null) {\n      (acc[osMinorVersion] = acc[osMinorVersion] || {\n        osMinorVersion,\n        count: 0,\n      }).count++;\n    }\n\n    return acc;\n  }, {});\n};\n\nexport const countOsMinorVersions = (systems) =>\n  Object.values(mapCountOsMinorVersions(systems)).sort(\n    sortingByProp('osMinorVersion', 'desc')\n  );\n"],"sourceRoot":""}