{"version":3,"sources":["webpack://compliance-frontend/./src/SmartComponents/ComplianceSystems/ComplianceSystems.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack://compliance-frontend/./src/Utilities/hooks/api/utils/ApiClient.js","webpack://compliance-frontend/./src/Utilities/hooks/api/useApi.js","webpack://compliance-frontend/./src/Utilities/hooks/api/useCollection.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/EditPolicyProfilesRules.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/EditPolicyRules.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack://compliance-frontend/./src/SmartComponents/EditPolicy/EditPolicyDetailsTab.js","webpack://compliance-frontend/./src/SmartComponents/EditPolicy/EditPolicyRulesTab.js","webpack://compliance-frontend/./src/SmartComponents/EditPolicy/EditPolicy.js","webpack://compliance-frontend/./src/SmartComponents/EditPolicy/usePolicy.js","webpack://compliance-frontend/./src/SmartComponents/SystemsTable/Cells.js","webpack://compliance-frontend/./src/SmartComponents/SystemsTable/SystemsTable.js","webpack://compliance-frontend/./src/SmartComponents/SystemsTable/constants.js","webpack://compliance-frontend/./src/SmartComponents/InventoryDetails/InventoryDetails.js","webpack://compliance-frontend/./src/SmartComponents/SystemsTable/InventoryTable.js","webpack://compliance-frontend/./src/Utilities/Export.js","webpack://compliance-frontend/./src/Utilities/ruleHelpers.js","webpack://compliance-frontend/./src/store/ActionTypes.js","webpack://compliance-frontend/./src/store/Reducers/SystemStore.js"],"names":["QUERY","gql","ComplianceSystems","newInventory","useFeature","useQuery","data","error","loading","dispatch","useDispatch","columns","key","title","props","width","isStatic","renderFunc","systemName","policyNames","policiesCell","id","detailsLink","testResultProfiles","policies","profiles","edges","map","node","useLayoutEffect","type","payload","ids","InvComponent","InventoryTable","SystemsTable","className","stateValues","stateKey","query","GET_SYSTEMS","defaultFilter","systemProps","isFullView","showOsFilter","showComplianceSystemsInfo","enableEditPolicy","remediationsEnabled","BENCHMARKS_AND_PROFILES","CreateSCAPPolicy","change","selectedBenchmarkId","fetchPolicy","Spinner","selectedBenchmark","validProfiles","benchmark","benchmarks","latestBenchmarks","find","userProfileRefIds","filter","profile","refId","disabled","includes","TextContent","Text","component","TextVariants","Form","FormGroup","label","isRequired","fieldId","sort","a","b","localeCompare","osMajorVersion","Button","onClick","setBenchmark","variant","propTypes","reduxFormPropTypes","selector","formValueSelector","compose","connect","state","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","options","Accept","this","apiBase","path","authenticate","Promise","resolve","onUnauthorised","defaultHeaders","headers","DEFAULT_API_HEADERS","apiProps","method","callAuthenticate","then","fetch","checkForEmptyResponse","response","checkForErrors","json","catch","finalCatch","promise","undefined","errors","reject","params","credentials","fullPath","url","URL","window","location","origin","Object","keys","encodeURIComponent","join","search","URLSearchParams","body","JSON","stringify","status","ignore404","responseCloneJson","clone","request","ApiClient","includeAttributes","entity","prop","attributes","newEntity","includePropAndDelete","normalizeData","jsonNormalized","normalize","values","normalizedJson","relationships","entries","forEach","item","relationship","relationshipData","v","includeRelationship","fetchCollection","apiClient","collection","get","normalized","meta","total","PROFILES_QUERY","EditPolicyProfilesRules","policy","selectedRuleRefIds","osMinorVersionCounts","selectRulesTableColumns","useState","collectionState","setCollectionState","useApi","COMPLIANCE_API_ROOT","include","useEffect","useCollection","i","osMinorVersion","benchmarksLoading","profileIds","tabsData","profileSelectedRuleRefIds","systemCount","count","latestSupportedOsMinorVersions","getBenchmarkBySupportedOsMinor","profileRefId","benchmarkProfile","getBenchmarkProfile","rules","push","newOsMinorVersion","ruleRefIds","variables","skip","length","profilesData","dataState","loadingState","p","rule","EmptyTable","selectedFilter","level","handleSelect","newSelectedRuleRefIds","newSelection","parse","EditPolicyRules","ruleIds","filteredRules","profileId","benchmarkId","multiversionRules","defaultSelection","setDefaultSelection","profileRules","name","ruleId","isInline","SystemRulesTable","tailoringEnabled","remediationAvailableFilter","selectedRefIds","EditPolicyRulesComponent","Component","EditPolicySystems","selectedSystemIds","displayName","_id","emptyStateComponent","WizardContextConsumer","goToStepById","prependComponent","InvCmp","compact","showActions","GET_SYSTEMS_WITHOUT_FAILED_RULES","enableExport","defaultProps","countOsMinorVersions","entities","selectedEntities","e","EditPolicyDetails","description","Field","ReduxFormTextInput","aria-describedby","isDisabled","ReduxFormTextArea","defaultValue","businessObjective","showTitle","previousThreshold","complianceThreshold","initialValues","REVIEW","ReviewCreatedPolicy","parentProfileName","TextList","TextListVariants","TextListItem","TextListItemVariants","style","parseFloat","rulesCount","FinishedCreatePolicy","listErrors","onWizardFinish","cloneFromProfileId","systemIds","percent","setPercent","message","setMessage","setErrors","failed","setFailed","updatePolicy","usePolicy","hosts","networkError","result","Array","isArray","ListItem","Bullseye","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","WrenchIcon","Title","headingLevel","size","EmptyStateBody","List","EmptyStateSecondaryActions","client","withApollo","CreatePolicy","history","useHistory","stepIdReached","setStepIdReached","onClose","steps","enableNext","validateBenchmarkPage","canJumpTo","validateDetailsPage","validateSystemsPage","validateRulesPage","nextButtonText","isFinishedStep","Wizard","isOpen","onNext","EditPolicyDetailsTab","setUpdatedPolicy","validThreshold","setValidThreshold","threshold","valid","thresholdValid","useThresholdValidate","validateThreshold","TextArea","height","onChange","value","TextInput","validated","helperTextInvalid","helperText","complianceThresholdValid","EditPolicyRulesTab","MULTIVERSION_QUERY","EditPolicy","route","policyId","useParams","policy_id","anchor","useAnchor","updatedPolicy","setSelectedRuleRefIds","linkToBackground","useLinkToBackground","useSelector","saveEnabled","extra","lastScanned","linkToBackgroundWithHash","hash","actions","policyProfile","useTitleEntity","Modal","defaultTab","Tab","eventKey","TabTitleText","selectedProfile","majorOsVersion","preselectedSystems","h","create","createBusinessObjective","useMutation","CREATE_BUSINESS_OBJECTIVE","newBusinessObjective","input","UPDATE_PROFILE","updateProfile","CREATE_PROFILE","createProfile","ASSOCIATE_SYSTEMS_TO_PROFILES","associateSystems","ASSOCIATE_RULES_TO_PROFILE","associateRules","businessObjectiveId","policyInput","ruleInput","parentProfileId","SSGVersion","supported","ssgVersion","messageVariant","initFilterState","filterConfig","initialDefaultState","initialState","page","policyFilter","osFilter","systemsPolicyFilterConfiguration","systemsOsFilterConfiguration","registry","React","FilterConfigBuilder","DEFAULT_SYSTEMS_FILTER_CONFIGURATION","compliantFilter","COMPLIANT_SYSTEMS_FILTER_CONFIGURATION","getChipBuilder","getFilterBuilder","perPage","totalCount","activeFilters","clearAll","selectEntities","updateSystems","prevProps","per_page","showAllSystems","inventory","current","setState","onRefreshData","showOnlySystemsWithTestResults","filterBuilder","buildFilterString","fetchResults","prevSystems","systems","s","fetchSystems","items","systemsCount","newSystems","updateRows","prevState","_","format","exportFromState","selectedValues","chips","removeFilterWithChip","_event","clearAllFilter","deleteFilter","selectAll","clearSelection","allSelectedOnPage","noError","selectedEntitiesIds","buildConfiguration","onFilterUpdate","hideLabel","filterChips","chipBuilder","chipsFor","exportConfig","isExportDisabled","onSelect","onExportSelect","inventoryTableProps","onRefresh","ref","tableProps","canSelectAll","bulkSelect","checked","onBulkSelect","_index","beta","pathname","split","href","edge","activeFiltersConfig","filters","onDelete","onFilterDelete","TableVariant","rows","cells","hasItems","hasCheckbox","dedicatedAction","ComplianceRemediationButton","allSystems","systemsWithRuleObjectsFailed","selectedRules","Alert","fallback","SkeletonTable","colSize","rowSize","onLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","getRegistry","register","entitiesReducer","clearInventoryFilter","ConnectedSystemsTable","memo","SystemsTableWithApollo","row","args","SELECT_ENTITY","InventoryDetails","registryDecorator","DetailWrapper","mergeWithDetail","InventoryDetail","Skeleton","SkeletonSize","hideBack","store","useStore","useRef","pagination","setPagination","isLoaded","setIsLoaded","isEmpty","setIsEmpty","useFilterConfig","conditionalFilter","system","shallowEqual","filterString","combindedFilter","debounceFetchSystems","useCallback","debounce","empty","systemsReducer","callback","every","selected","isSelected","getState","PropTypes","getNestedObject","nestedObj","reduce","obj","textCsvCell","cell","exportValue","content","csvRows","column","concat","noExport","encodeURI","csvFromState","object","jsonFromState","filename","link","document","createElement","setAttribute","dispatchEvent","MouseEvent","bubbles","cancelable","view","linkAndDownload","CSV_FILE_PREFIX","Date","toISOString","profilesRulesFailed","flatMap","compliant","profilesRulesPassed","systemRulesFailed","ruleObjectsFailed","EXPORT","NEVER","dates","last","Math","max","apply","date","isFinite","score","scoreTotal","acc","numScored","Tooltip","lines","Link","to","hasOsInfo","matchingSystem","displayNameCell","display_name","profilesSsgVersions","version","mapCountOsMinorVersions","sortingByProp","systemsToInventoryEntities","facts","rulesPassed","rulesFailed","account","bios_uuid","created","fqdn","insights_id","ip_addresses","mac_addresses","rhel_machine_id","satellite_id","subscription_manager_id","tags","updated","hostname","machine_id","release","compliance","details_link","rules_passed","rules_failed","hidePassed","rules_failed_text","compliance_score","complianceScore","compliance_score_text","complianceScoreString","last_scanned","last_scanned_text","ssg_version","systemsToRows","selectRowsByIds","rowsToSelect","deselectRowsByIds","selectAllRows","deselectAllRows","selectRow","deselectRow","INVENTORY_ACTION","applyReducerHash","loaded","LOAD_ENTITIES_PENDING","LOAD_ENTITIES_FULFILLED","newState"],"mappings":"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","file":"js/EditPolicy.ee257667872e54b11551.js","sourcesContent":["/* eslint-disable react/display-name */\nimport React, { useLayoutEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport { InventoryTable, SystemsTable } from 'SmartComponents';\nimport { GET_SYSTEMS } from '../SystemsTable/constants';\nimport { systemName, detailsLink, policiesCell } from 'Store/Reducers/SystemStore';\nimport useFeature from 'Utilities/hooks/useFeature';\n\nconst QUERY = gql`\n{\n    profiles(search: \"external = false and canonical = false\") {\n        edges {\n            node {\n                id\n                name\n                refId\n                majorOsVersion\n            }\n        }\n    }\n}\n`;\n\nconst DEFAULT_FILTER = 'has_test_results = true or has_policy = true';\n\nexport const ComplianceSystems = () => {\n    const newInventory = useFeature('newInventory');\n    const { data, error, loading } = useQuery(QUERY);\n    const dispatch = useDispatch();\n    const columns = [{\n        key: 'facts.compliance.display_name',\n        title: 'Name',\n        props: {\n            width: 40, isStatic: true\n        },\n        ...newInventory && {\n            key: 'display_name',\n            renderFunc: systemName\n        }\n    }, {\n        key: 'facts.compliance.policies',\n        title: 'Policies',\n        props: {\n            width: 40, isStatic: true\n        },\n        ...newInventory && {\n            key: 'policyNames',\n            renderFunc: (policyNames) => {\n                const { title } = policiesCell({ policyNames }) || { title: '' };\n                return title;\n            }\n        }\n    }, {\n        key: 'facts.compliance.details_link',\n        title: '',\n        props: {\n            width: 20, isStatic: true\n        },\n        ...newInventory && {\n            key: 'testResultProfiles',\n            renderFunc: (data, id) => {\n                const { title } = detailsLink({ testResultProfiles: data, id }) || { title: '' };\n                return title;\n            }\n        }\n    }];\n    const policies = data?.profiles?.edges.map(({ node }) => node);\n\n    useLayoutEffect(() => { dispatch({ type: 'SELECT_ENTITIES', payload: { ids: [] } }); }, []);\n\n    const InvComponent = newInventory ? InventoryTable : SystemsTable;\n\n    return (\n        <React.Fragment>\n            <PageHeader className='page-header'>\n                <PageHeaderTitle title=\"Systems\" />\n            </PageHeader>\n            <Main>\n                <StateViewWithError stateValues={ { error, data, loading } }>\n                    <StateViewPart stateKey=\"data\">\n                        { policies && <InvComponent\n                            query={GET_SYSTEMS}\n                            defaultFilter={ DEFAULT_FILTER }\n                            systemProps={{\n                                isFullView: true\n                            }}\n                            showOsFilter\n                            showComplianceSystemsInfo\n                            enableEditPolicy={ false }\n                            remediationsEnabled={ false }\n                            columns={ columns }\n                            policies={ policies } /> }\n                    </StateViewPart>\n                </StateViewWithError>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default ComplianceSystems;\n","import React from 'react';\nimport {\n    Button,\n    Form,\n    FormGroup,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport { ProfileTypeSelect } from 'PresentationalComponents';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { propTypes as reduxFormPropTypes, formValueSelector, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\n\nconst BENCHMARKS_AND_PROFILES = gql`\nquery benchmarksAndProfiles {\n    latestBenchmarks {\n        id\n        title\n        refId\n        version\n        osMajorVersion\n        profiles {\n            id\n            name\n            refId\n            description\n            complianceThreshold\n        }\n    }\n    profiles(search: \"external = false and canonical = false\") {\n        edges {\n            node {\n                id\n                refId\n                benchmark {\n                    refId\n                }\n            }\n        }\n    }\n}\n`;\n\nconst CreateSCAPPolicy = ({ change, selectedBenchmarkId }) => {\n    const { data, error, loading } = useQuery(BENCHMARKS_AND_PROFILES, { fetchPolicy: 'no-cache' });\n\n    const inUseProfileRefIds = (profiles, benchmark) => (\n        profiles.filter(profile => benchmark.refId === profile.node.benchmark.refId).map(profile => profile.node.refId)\n    );\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const benchmarks = data.latestBenchmarks;\n    let selectedBenchmark;\n    let validProfiles;\n    if (selectedBenchmarkId) {\n        selectedBenchmark = benchmarks.find(benchmark => benchmark.id === selectedBenchmarkId);\n        const userProfileRefIds = inUseProfileRefIds(data.profiles.edges, selectedBenchmark);\n        validProfiles = selectedBenchmark.profiles.map((profile) => ({\n            ...profile,\n            disabled: userProfileRefIds.includes(profile.refId)\n        }));\n    }\n\n    const setBenchmark = ({ id, osMajorVersion }) => {\n        change('benchmark', id);\n        change('osMajorVersion', osMajorVersion);\n    };\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Create SCAP policy\n                </Text>\n                <Text component={TextVariants.h4}>\n                    Select the operating system and policy type\n                </Text>\n            </TextContent>\n            <Form>\n                <FormGroup\n                    label=\"Operating system\"\n                    isRequired\n                    fieldId=\"benchmark\">\n                    <br/>\n                    { benchmarks && benchmarks.sort((a, b) => a.refId.localeCompare(b.refId)).map((benchmark) => {\n                        const { id, osMajorVersion } = benchmark;\n                        return (\n                            <Button key={id} onClick={ () => setBenchmark(benchmark) }\n                                className={`wizard-os-button ${selectedBenchmarkId === id ? 'active-wizard-os-button' : ''}`}\n                                variant=\"tertiary\">\n                                { `RHEL ${osMajorVersion}` }\n                            </Button>\n                        );\n                    })}\n                </FormGroup>\n                <FormGroup label=\"Policy type\" isRequired fieldId=\"policy-type\">\n                    <ProfileTypeSelect\n                        profiles={selectedBenchmark && validProfiles }\n                        onClick={ () => {\n                            change('selectedRuleRefIds', null);\n                        }}/>\n                </FormGroup>\n            </Form>\n        </React.Fragment>\n    );\n};\n\nCreateSCAPPolicy.propTypes = {\n    selectedBenchmarkId: propTypes.string,\n    change: reduxFormPropTypes.change\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            selectedBenchmarkId: selector(state, 'benchmark')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(CreateSCAPPolicy);\n","class ApiClient {\n    DEFAULT_API_HEADERS = {\n        'Content-Type': 'application/vnd.api+json',\n        Accept: 'application/json'\n    }\n\n    constructor(options = {}) {\n        this.apiBase = options.apiBase || '/api';\n        this.path = options.path || '';\n        this.authenticate = options.authenticate || (() => Promise.resolve({}));\n        this.onUnauthorised = options.onUnauthorised || (() => Promise.resolve({}));\n        this.defaultHeaders = options.headers || this.DEFAULT_API_HEADERS;\n    }\n\n    async request(path, apiProps, method, options = {}) {\n        return await this.callAuthenticate()\n        .then(() => this.fetch(path, apiProps, method, options))\n        .then(this.checkForEmptyResponse)\n        .then((response) => this.checkForErrors(response, options))\n        .then((response) => response.json())\n        .catch(this.finalCatch);\n    }\n\n    finalCatch(promise) {\n        if (promise.errors === undefined) {\n            return Promise.reject({ title: 'Error parsing' });\n        } else {\n            return Promise.reject({ ...promise });\n        }\n    }\n\n    fetch(path, apiProps, method, options) {\n        let params = {\n            method: method || 'get',\n            headers: this.defaultHeaders,\n            credentials: 'include'\n        };\n        const fullPath = `${ this.apiBase }${ this.path ? this.path : '' }${ path ? path : '' }`;\n        let url = new URL(fullPath, window.location.origin);\n        if (options.params) {\n            const params = Object.keys(options.params).map((key) => (\n                encodeURIComponent(key) + '=' + encodeURIComponent(options.params[key])\n            )).join('&');\n            url.search = new URLSearchParams(params);\n        }\n\n        if (apiProps) {\n            params.body = JSON.stringify(apiProps);\n        }\n\n        return fetch(\n            url, params\n        );\n    }\n\n    checkForEmptyResponse(response) {\n        return response.status === 204 ? { json: () => ({}) } : response;\n    }\n\n    checkForErrors(response, options = {}) {\n        if (response.status === 404 && options.ignore404) {\n            return { json: () => ({}) };\n        }\n\n        if (response.status === 401) {\n            return this.onUnauthorised();\n        }\n\n        const responseCloneJson = response.clone ? response.clone().json() : response;\n\n        if (response.status === 422) {\n            return responseCloneJson.then((json) =>\n                Promise.reject({ ...json, title: 'Validation error' })\n            );\n        }\n\n        if (response.status >= 400 && response.status <= 600) {\n            return responseCloneJson.then((json) =>\n                Promise.reject(json.errors[0])\n            );\n        }\n\n        return response;\n    }\n\n    callAuthenticate() {\n        return Promise.resolve(this.authenticate() || true);\n    }\n\n    create(path, apiProps) {\n        return this.request(path, apiProps, 'post');\n    }\n\n    update(path, apiProps) {\n        return this.request(path, apiProps, 'put');\n    }\n\n    get(path, options = {}) {\n        return this.request(path, null, 'get', options);\n    }\n\n    destroy(path) {\n        return this.request(path, null, 'delete');\n    }\n}\n\nexport default ApiClient;\n","import ApiClient from './utils/ApiClient';\n\nconst useApi = (options) => {\n    const apiClient = new ApiClient({\n        ...options\n    });\n\n    return apiClient;\n};\n\nexport default useApi;\n","import { useEffect, useState } from 'react';\nimport { COMPLIANCE_API_ROOT } from '@/constants';\nimport normalize from 'json-api-normalizer';\nimport useApi from './useApi';\n\nconst includePropAndDelete = (entity, prop) => {\n    const attributes = entity[prop];\n    let newEntity = entity;\n    delete newEntity[prop];\n    return { ...newEntity, ...attributes };\n};\n\nconst includeAttributes = (entity) => (\n    entity && includePropAndDelete(entity, 'attributes')\n);\n\nconst includeRelationship = (entity, normalizedJson) => {\n    let relationships = {};\n    Object.entries(entity?.relationships || []).forEach((item) => {\n        const [relationship, relationshipData] = item;\n        relationships[relationship] = relationshipData?.data.map((entity) => (\n            includeAttributes(normalizedJson?.[entity.type]?.[entity.id])\n        )).filter((v) => (!!v));\n    });\n    delete entity.relationships;\n    return { ...entity, ...relationships };\n};\n\nconst normalizeData = (json, type) => {\n    const jsonNormalized = normalize(json);\n    return Object.values(jsonNormalized[type] || {})?.map((entity) => (\n        includeRelationship(includeAttributes(entity), jsonNormalized)\n    ));\n};\n\nconst fetchCollection = async (apiClient, collection, params = {}, options = {}) => {\n    const json = await apiClient.get(`/${ collection }`, { params });\n    const normalized = await normalizeData(json, options?.type || collection);\n\n    return {\n        collection: normalized,\n        meta: json.meta,\n        total: json.meta.total,\n        json\n    };\n};\n\nconst useCollection = (collection, options = {}) => {\n    const [collectionState, setCollectionState] = useState({\n        data: undefined,\n        loading: true,\n        error: undefined\n    });\n    const apiClient = useApi({\n        apiBase: COMPLIANCE_API_ROOT\n    });\n    const params = {\n        ...(options?.params || {}),\n        include: (options?.include || [])\n    };\n\n    useEffect(() => {\n        fetchCollection(apiClient, collection, params, options).then((data) => {\n            setCollectionState({\n                data,\n                loading: undefined,\n                error: undefined\n            });\n        });\n    }, []);\n\n    return collectionState;\n};\n\nexport default useCollection;\n","import React, { useLayoutEffect } from 'react';\nimport { propTypes as reduxFormPropTypes, formValueSelector, reduxForm } from 'redux-form';\nimport {\n    selectColumns as selectRulesTableColumns\n} from '@redhat-cloud-services/frontend-components-inventory-compliance/SystemRulesTable';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport { StateViewWithError, StateViewPart, TabbedRules } from 'PresentationalComponents';\nimport useCollection from 'Utilities/hooks/api/useCollection';\n\nconst PROFILES_QUERY = gql`\nquery Profiles($filter: String!){\n    profiles(search: $filter){\n        edges {\n            node {\n                id\n                name\n                refId\n                osMinorVersion\n                osMajorVersion\n                policy {\n                    id\n\n                }\n                policyType\n                benchmark {\n                    id\n                    refId\n                    latestSupportedOsMinorVersions\n                    osMajorVersion\n                }\n                ssgVersion\n                rules {\n                    id\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n    }\n}\n`;\n\nconst getBenchmarkProfile = (benchmark, profileRefId) => (\n    benchmark.profiles.find((benchmarkProfile) => (benchmarkProfile.refId === profileRefId))\n);\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) => (\n    benchmarks.find((benchmark) =>\n        benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n    )\n);\n\nexport const EditPolicyProfilesRules = ({ policy, selectedRuleRefIds, change, osMajorVersion, osMinorVersionCounts }) => {\n    const columns = selectRulesTableColumns(['Name', 'Severity', 'Ansible']);\n    const handleSelectCallback = (profile, newSelectedRuleRefIds) => {\n        const newSelection = selectedRuleRefIds.map((profileSelectedRuleRefIds) => {\n            if (profileSelectedRuleRefIds.id === profile.id) {\n                return {\n                    id: profileSelectedRuleRefIds.id,\n                    ruleRefIds: newSelectedRuleRefIds\n                };\n            } else {\n                return profileSelectedRuleRefIds;\n            }\n        });\n\n        change('selectedRuleRefIds', newSelection);\n    };\n\n    const { data: benchmarks, loading: benchmarksLoading } = useCollection('benchmarks', {\n        type: 'benchmark',\n        include: ['profiles'],\n        params: {\n            search: `os_major_version = ${ osMajorVersion } ` +\n                    `and latest_supported_os_minor_version ^ (${ osMinorVersionCounts.map((i) => (i.osMinorVersion)).join(',') })`\n        }\n    });\n\n    let profileIds = [];\n    let tabsData = osMinorVersionCounts.map(({ osMinorVersion, count: systemCount }) => {\n        osMinorVersion = `${osMinorVersion}`;\n        let profile;\n        let profileSelectedRuleRefIds;\n        if (benchmarks) {\n            const benchmark = getBenchmarkBySupportedOsMinor(benchmarks.collection, osMinorVersion);\n            if (benchmark) {\n                profile = getBenchmarkProfile(benchmark, policy.refId);\n                if (profile) {\n                    profile = {\n                        ...profile,\n                        rules: profile.relationships?.rules?.data,\n                        benchmark: profile.relationships?.benchmark?.data\n                    };\n                    profileSelectedRuleRefIds = selectedRuleRefIds?.find(({ id }) => id === profile.id);\n                    profileIds.push(profile.id);\n                }\n            }\n        }\n\n        return {\n            profile,\n            systemCount,\n            newOsMinorVersion: osMinorVersion,\n            selectedRuleRefIds: profileSelectedRuleRefIds?.ruleRefIds\n        };\n    });\n    tabsData = tabsData.filter(({ profile }) => !!profile);\n\n    const filter = `${ (profileIds || []).map((i) => (`id = ${ i }`)).join(' OR ') }`;\n    const { data: profilesData, error, loading } = useQuery(PROFILES_QUERY, {\n        variables: {\n            filter\n        },\n        skip: filter.length === 0\n    });\n    const dataState = ((profileIds?.length > 0) ? profilesData : undefined);\n    const loadingState = ((loading || benchmarksLoading) ? true : undefined);\n\n    useLayoutEffect(() => {\n        if (profilesData && !selectedRuleRefIds) {\n            const profiles = profilesData?.profiles.edges.map((p) => (p.node));\n            change('selectedRuleRefIds', profiles.map((profile) => ({\n                id: profile.id,\n                ruleRefIds: profile.rules.map((rule) => (rule.refId))\n            })));\n        }\n    }, [profilesData]);\n\n    return <StateViewWithError stateValues={ { error, data: dataState, loading: loadingState } }>\n        <StateViewPart stateKey=\"loading\">\n            <EmptyTable><Spinner/></EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Rules\n                </Text>\n            </TextContent>\n            <TextContent>\n                <Text>\n                    Edit your policy by including and excluding rules.\n                </Text>\n            </TextContent>\n            <TabbedRules\n                tabsData={ tabsData }\n                columns={ columns }\n                remediationsEnabled={ false }\n                selectedFilter\n                level={ 1 }\n                handleSelect={ handleSelectCallback } />\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nEditPolicyProfilesRules.propTypes = {\n    policy: propTypes.object,\n    change: reduxFormPropTypes.change,\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    selectedRuleRefIds: propTypes.array\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            policy: JSON.parse(selector(state, 'profile')),\n            osMajorVersion: selector(state, 'osMajorVersion'),\n            osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n            selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyProfilesRules);\n","import React, { useEffect, useState } from 'react';\nimport { propTypes as reduxFormPropTypes, formValueSelector, reduxForm } from 'redux-form';\nimport SystemRulesTable, {\n    selectColumns as selectRulesTableColumns\n} from '@redhat-cloud-services/frontend-components-inventory-compliance/SystemRulesTable';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { Button, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport EditPolicyProfilesRules from './EditPolicyProfilesRules';\n\nconst QUERY = gql`\nquery benchmarkAndProfile($benchmarkId: String!, $profileId: String!){\n    benchmark(id: $benchmarkId) {\n        id\n        rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n        }\n    }\n    profile(id: $profileId) {\n        id\n        name\n        refId\n        rules {\n            id\n            refId\n        }\n    }\n}\n`;\n\nexport const EditPolicyRules = ({ profileId, benchmarkId, osMajorVersion, osMinorVersionCounts, selectedRuleRefIds, change }) => {\n    const multiversionRules = useFeature('multiversionTabs');\n    const columns = selectRulesTableColumns(['Name', 'Severity', 'Ansible']);\n    const { data, error, loading } = useQuery(QUERY, { variables: { profileId, benchmarkId } });\n    const [defaultSelection, setDefaultSelection] = useState(null);\n    const profileRules = data && [{\n        profile: { refId: data.profile.refId, name: data.profile.name },\n        rules: data.benchmark.rules\n    }];\n    const resetToDefaultSelection = () => (\n        change('selectedRuleRefIds', defaultSelection)\n    );\n    const isDefaultSelection = (ruleIds) => {\n        const filteredRules = ruleIds?.filter((ruleId) => (defaultSelection?.includes(ruleId)));\n        return ruleIds && defaultSelection && filteredRules.length === defaultSelection.length;\n    };\n\n    useEffect(() => {\n        if (data) {\n            const ruleIds = data.profile.rules.map((rule) => rule.refId);\n            setDefaultSelection(ruleIds);\n            if (!selectedRuleRefIds) {\n                change('selectedRuleRefIds', ruleIds);\n            }\n        }\n    }, [data, change, selectedRuleRefIds]);\n\n    return <StateViewWithError stateValues={ { error, data, loading } }>\n        <StateViewPart stateKey=\"loading\">\n            <EmptyTable><Spinner/></EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Rules\n                </Text>\n            </TextContent>\n            <TextContent>\n                <Text>\n                    Edit your policy by including and excluding rules.\n                </Text>\n                <Text>\n                    Selected policy type <strong>{ data?.profile.name }</strong> has { defaultSelection?.length } rules.&ensp;\n                    { selectedRuleRefIds && !isDefaultSelection(selectedRuleRefIds) &&\n                        <Button variant=\"link\" isInline onClick={ () => resetToDefaultSelection() }>\n                          Reset to default selection\n                        </Button>\n                    }\n                </Text>\n                { multiversionRules && osMinorVersionCounts && osMinorVersionCounts.length > 0 &&\n                    <Text>\n                        Tailoring for{' '}\n                        { osMinorVersionCounts.map(({ osMinorVersion, count }) =>\n                            `RHEL ${osMajorVersion}.${osMinorVersion} (${count} systems)`).join(', ') }\n                    </Text>\n                }\n            </TextContent>\n            <SystemRulesTable\n                remediationsEnabled={ false }\n                tailoringEnabled\n                selectedFilter\n                remediationAvailableFilter\n                columns={ columns }\n                loading={ loading }\n                handleSelect={ (selectedRuleRefIds) => change('selectedRuleRefIds', selectedRuleRefIds) }\n                profileRules={ profileRules }\n                selectedRefIds={ selectedRuleRefIds || [] }\n            />\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nEditPolicyRules.propTypes = {\n    profileId: propTypes.string,\n    benchmarkId: propTypes.string,\n    change: reduxFormPropTypes.change,\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    selectedRuleRefIds: propTypes.array\n};\n\nconst selector = formValueSelector('policyForm');\n\nconst EditPolicyRulesComponent = compose(\n    connect(\n        state => ({\n            benchmarkId: selector(state, 'benchmark'),\n            profile: JSON.parse(selector(state, 'profile')),\n            profileId: JSON.parse(selector(state, 'profile')).id,\n            osMajorVersion: selector(state, 'osMajorVersion'),\n            osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n            selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyRules);\n\nconst FeatureWrapper = (...props) => {\n    const multiversionRules = useFeature('multiversionTabs');\n    const Component = multiversionRules ? EditPolicyProfilesRules : EditPolicyRulesComponent;\n\n    return <Component { ...props } />;\n};\n\nexport default FeatureWrapper;\n","import React, { useEffect } from 'react';\nimport { propTypes as reduxFormPropTypes, reduxForm, formValueSelector } from 'redux-form';\nimport { Button, Form, FormGroup, Text, TextContent, TextVariants, WizardContextConsumer } from '@patternfly/react-core';\nimport { InventoryTable, SystemsTable } from 'SmartComponents';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport { systemName, countOsMinorVersions } from 'Store/Reducers/SystemStore';\n\nconst EditPolicySystems = ({ change, osMajorVersion, osMinorVersionCounts, selectedSystemIds }) => {\n    const newInventory = useFeature('newInventory');\n    const multiversionRules = useFeature('multiversionTabs');\n\n    const columns = [{\n        key: 'facts.compliance.display_name',\n        title: 'Name',\n        props: {\n            width: 40, isStatic: true\n        },\n        ...newInventory && {\n            key: 'display_name',\n            renderFunc: (displayName, id, { name }) => systemName(displayName, id, { name })\n        }\n    }, {\n        key: 'facts.compliance.osMinorVersion',\n        title: 'Operating system',\n        props: {\n            width: 40, isStatic: true\n        },\n        ...newInventory && {\n            key: 'osMinorVersion',\n            renderFunc: (osMinorVersion, _id, { osMajorVersion }) => `RHEL ${osMajorVersion}.${osMinorVersion}`\n        }\n    }];\n\n    useEffect(() => {\n        if (selectedSystemIds) {\n            change('systems', selectedSystemIds);\n        }\n\n        if (osMinorVersionCounts) {\n            change('osMinorVersionCounts', osMinorVersionCounts);\n        }\n    }, [selectedSystemIds, osMinorVersionCounts, change]);\n\n    const emptyStateComponent = (<React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                You do not have any <b>RHEL { osMajorVersion }</b> systems connected to Insights and enabled for Compliance.<br/>\n                Policies must be created with at least one system.\n            </Text>\n        </TextContent>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Choose a different operating system, or connect RHEL { osMajorVersion } systems to Insights.\n            </Text>\n        </TextContent>\n        <WizardContextConsumer>\n            { ({ goToStepById }) => <Button onClick={() => goToStepById(1)}>Choose a different operating system</Button> }\n        </WizardContextConsumer>\n    </React.Fragment>);\n\n    const prependComponent = (<React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Select which of your <b>RHEL { osMajorVersion }</b> systems should be included\n                in this policy.<br />\n                Systems can be added or removed at any time.\n            </Text>\n        </TextContent>\n    </React.Fragment>);\n\n    const InvCmp = newInventory ? InventoryTable : SystemsTable;\n\n    return (\n        <React.Fragment>\n            <TextContent className=\"pf-u-mb-md\">\n                <Text component={TextVariants.h1}>\n                    Systems\n                </Text>\n            </TextContent>\n            <Form>\n                <FormGroup>\n                    <InvCmp\n                        prependComponent={prependComponent}\n                        emptyStateComponent={multiversionRules ? emptyStateComponent : undefined}\n                        columns={columns}\n                        remediationsEnabled={false}\n                        compact\n                        showActions={ false }\n                        query={ GET_SYSTEMS_WITHOUT_FAILED_RULES }\n                        defaultFilter={ osMajorVersion && `os_major_version = ${osMajorVersion}` }\n                        enableExport={ false }/>\n                </FormGroup>\n            </Form>\n        </React.Fragment>\n    );\n};\n\nEditPolicySystems.propTypes = {\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    selectedSystemIds: propTypes.array,\n    change: reduxFormPropTypes.change\n};\n\nEditPolicySystems.defaultProps = {\n    selectedSystemIds: [],\n    osMinorVersionCounts: []\n};\n\nconst selector = formValueSelector('policyForm');\nconst mapStateToProps = (state) => ({\n    osMajorVersion: selector(state, 'osMajorVersion'),\n    osMinorVersionCounts: countOsMinorVersions(state.entities?.selectedEntities),\n    selectedSystemIds: (state.entities?.selectedEntities || []).map((e) => (e.id))\n});\n\nexport default compose(\n    connect(mapStateToProps),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicySystems);\n","import React, { useEffect } from 'react';\nimport { compose } from 'redux';\nimport { Field, reduxForm, formValueSelector, propTypes as reduxFormPropTypes } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Form, FormGroup, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { ReduxFormTextInput, ReduxFormTextArea } from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport { ProfileThresholdField } from 'PresentationalComponents';\n\nconst EditPolicyDetails = ({ change, policy, refId }) => {\n\n    useEffect(() => {\n        if (policy && policy.refId !== refId) {\n            change('name', `${policy.name}`);\n            change('refId', `${policy.refId}`);\n            change('description', `${policy.description}`);\n        }\n    }, [policy]);\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Details\n                </Text>\n            </TextContent>\n            <br/>\n            <Form id='editpolicydetails'>\n                <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n                    <Field\n                        component={ReduxFormTextInput}\n                        type='text'\n                        isRequired={true}\n                        id=\"name\"\n                        name=\"name\"\n                        aria-describedby=\"name\" />\n                </FormGroup>\n                <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextInput}\n                        isDisabled\n                        id=\"refId\"\n                        name=\"refId\"\n                        aria-describedby=\"refId\" />\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"description\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextArea}\n                        id=\"description\"\n                        name=\"description\"\n                        aria-describedby=\"description\" />\n                </FormGroup>\n                <FormGroup label=\"Business objective\" fieldId=\"businessObjective\">\n                    <Field\n                        type=\"text\"\n                        component={ ReduxFormTextInput }\n                        id=\"businessObjective\"\n                        name=\"businessObjective\"\n                        aria-describedby=\"businessObjective\"\n                        defaultValue={ policy.businessObjective } />\n                </FormGroup>\n                <ProfileThresholdField\n                    showTitle={ false }\n                    previousThreshold={ policy.complianceThreshold } />\n            </Form>\n        </React.Fragment>\n    );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n    policy: propTypes.object,\n    refId: propTypes.string,\n    change: reduxFormPropTypes.change\n};\n\nconst mapStateToProps = (state) => {\n    const policy = JSON.parse(selector(state, 'profile'));\n    return {\n        policy,\n        refId: selector(state, 'refId'),\n        initialValues: {\n            name: `${policy.name}`,\n            refId: `${policy.refId}`,\n            description: `${policy.description}`,\n            benchmark: selector(state, 'benchmark'),\n            osMajorVersion: selector(state, 'osMajorVersion'),\n            profile: selector(state, 'profile')\n        }\n    };\n};\n\nexport default compose(\n    connect(mapStateToProps),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyDetails);\n\nexport { EditPolicyDetails };\n","import React from 'react';\nimport {\n    Text,\n    TextVariants,\n    TextContent,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst REVIEW = gql`\nquery review($benchmarkId: String!) {\n    benchmark(id: $benchmarkId) {\n        id\n        osMajorVersion\n    }\n}\n`;\n\nconst ReviewCreatedPolicy = ({\n    benchmarkId, name, businessObjective, complianceThreshold, parentProfileName, osMinorVersionCounts\n}) => {\n    const { data, error, loading } = useQuery(REVIEW, { variables: { benchmarkId } });\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const { benchmark: { osMajorVersion } } = data;\n\n    return (\n        <TextContent>\n            <Text component={TextVariants.h1}>\n                Review\n            </Text>\n            <Text>\n                Review your SCAP policy before finishing.\n            </Text>\n            <Text component={TextVariants.h3}>{ name }</Text>\n            <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>Policy type</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ parentProfileName }</TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Compliance threshold</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ complianceThreshold }%</TextListItem>\n                { businessObjective &&\n                    <React.Fragment>\n                        <TextListItem component={TextListItemVariants.dt}>Business objective</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{ businessObjective }</TextListItem>\n                    </React.Fragment>\n                }\n                <TextListItem component={TextListItemVariants.dt}>Systems</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                    <TextList component={TextListVariants.dl}>\n                        { osMinorVersionCounts.map(({ osMinorVersion, count }) => (\n                            <React.Fragment key={osMinorVersion}>\n                                <TextListItem component={TextListItemVariants.dt} style={{ 'font-weight': 'normal' }}>\n                                    RHEL {osMajorVersion}.{osMinorVersion}\n                                </TextListItem>\n                                <TextListItem component={TextListItemVariants.dd}>\n                                    { count }\n                                </TextListItem>\n                            </React.Fragment>\n                        )) }\n                    </TextList>\n                </TextListItem>\n            </TextList>\n        </TextContent>\n    );\n};\n\nReviewCreatedPolicy.propTypes = {\n    benchmarkId: propTypes.string,\n    refId: propTypes.string,\n    name: propTypes.string,\n    businessObjective: propTypes.string,\n    complianceThreshold: propTypes.number,\n    parentProfileName: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    }))\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect(\n    state => ({\n        benchmarkId: selector(state, 'benchmark'),\n        refId: selector(state, 'refId'),\n        name: selector(state, 'name'),\n        businessObjective: selector(state, 'businessObjective'),\n        osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n        complianceThreshold: parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n        parentProfileName: JSON.parse(selector(state, 'profile')).name,\n        rulesCount: selector(state, 'selectedRuleRefIds').length\n    })\n)(ReviewCreatedPolicy);\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Title, Button, Bullseye, EmptyState, EmptyStateBody, EmptyStateSecondaryActions,\n    EmptyStateVariant, EmptyStateIcon, List, ListItem\n} from '@patternfly/react-core';\nimport { ProgressBar } from 'PresentationalComponents';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from '@apollo/react-hoc';\nimport usePolicy from 'SmartComponents/EditPolicy/usePolicy';\n\nconst FinishedCreatePolicy = ({\n    onWizardFinish,\n    cloneFromProfileId,\n    description,\n    name,\n    complianceThreshold,\n    businessObjective,\n    refId,\n    benchmarkId,\n    systemIds,\n    selectedRuleRefIds\n}) => {\n    const [percent, setPercent] = useState(0);\n    const [message, setMessage] = useState('This usually takes a minute or two.');\n    const [errors, setErrors] = useState(null);\n    const [failed, setFailed] = useState(false);\n    const updatePolicy = usePolicy();\n\n    useEffect(() => {\n        updatePolicy(null, {\n            cloneFromProfileId,\n            description,\n            name,\n            complianceThreshold,\n            businessObjective: { title: businessObjective },\n            refId,\n            benchmarkId,\n            hosts: systemIds.map((id) => ({ id })),\n            selectedRuleRefIds\n        }).then(() => {\n            setPercent(100);\n        }).catch((error) => {\n            setMessage(error.networkError?.message);\n            setErrors(error.networkError?.result?.errors);\n            setFailed(true);\n        });\n    }, []);\n\n    let listErrors;\n    if (errors && Array.isArray(errors) && errors.length > 0) {\n        listErrors = errors.map((error) => (\n            <ListItem key={ error }>{ error }</ListItem>\n        ));\n    }\n\n    return (\n        <Bullseye>\n            <EmptyState variant={EmptyStateVariant.full}>\n                <EmptyStateIcon icon={WrenchIcon} />\n                <br/>\n                <Title headingLevel=\"h1\" size='lg'>\n                    Creating policy\n                </Title>\n                <EmptyStateBody>\n                    <ProgressBar percent={percent} failed={failed} />\n                </EmptyStateBody>\n                <EmptyStateBody className={failed && 'wizard-failed-message'}>\n                    { message }\n                </EmptyStateBody>\n                { listErrors &&\n                    <EmptyStateBody className='wizard-failed-errors'>\n                        <List>{ listErrors }</List>\n                    </EmptyStateBody>\n                }\n                <EmptyStateSecondaryActions>\n                    { percent === 100 ?\n                        <Button\n                            variant={'primary'}\n                            onClick={() => { onWizardFinish(); }}\n                        >\n                            Return to application\n                        </Button> :\n                        '' }\n                </EmptyStateSecondaryActions>\n            </EmptyState>\n        </Bullseye>\n    );\n};\n\nFinishedCreatePolicy.propTypes = {\n    benchmarkId: propTypes.string.isRequired,\n    client: propTypes.object.isRequired,\n    businessObjective: propTypes.object,\n    cloneFromProfileId: propTypes.string.isRequired,\n    refId: propTypes.string.isRequired,\n    name: propTypes.string.isRequired,\n    description: propTypes.string,\n    systemIds: propTypes.array,\n    complianceThreshold: propTypes.number,\n    onWizardFinish: propTypes.func,\n    selectedRuleRefIds: propTypes.arrayOf(propTypes.string).isRequired\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            benchmarkId: selector(state, 'benchmark'),\n            businessObjective: selector(state, 'businessObjective'),\n            cloneFromProfileId: JSON.parse(selector(state, 'profile')).id,\n            refId: selector(state, 'refId'),\n            name: selector(state, 'name'),\n            description: selector(state, 'description'),\n            complianceThreshold: parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n            systemIds: selector(state, 'systems'),\n            selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: true,\n        forceUnregisterOnUnmount: true\n    }),\n    withApollo\n)(FinishedCreatePolicy);\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport EditPolicyRules from './EditPolicyRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport { validateBenchmarkPage, validateDetailsPage, validateRulesPage, validateSystemsPage } from './validate';\n\nexport const CreatePolicy = ({\n    benchmark, osMajorVersion, complianceThreshold, name, profile, refId, selectedRuleRefIds, systemIds\n}) => {\n    const history = useHistory();\n    const [stepIdReached, setStepIdReached] = useState(1);\n    const onNext = ({ id }) => {\n        setStepIdReached(stepIdReached < id ? id : stepIdReached);\n    };\n\n    const onClose = () => {\n        history.push('/scappolicies');\n    };\n\n    const steps = [\n        {\n            id: 1,\n            name: 'Create SCAP policy',\n            component: <CreateSCAPPolicy/>,\n            enableNext: validateBenchmarkPage(benchmark, osMajorVersion, profile)\n        },\n        {\n            id: 2,\n            name: 'Details',\n            component: <EditPolicyDetails/>,\n            canJumpTo: stepIdReached >= 2,\n            enableNext: validateDetailsPage(name, refId, complianceThreshold)\n        },\n        {\n            id: 3,\n            name: 'Systems',\n            component: <EditPolicySystems/>,\n            canJumpTo: stepIdReached >= 3,\n            enableNext: validateSystemsPage(systemIds)\n        },\n        {\n            id: 4,\n            name: 'Rules',\n            component: <EditPolicyRules/>,\n            canJumpTo: stepIdReached >= 4,\n            enableNext: validateRulesPage(selectedRuleRefIds)\n        },\n        {\n            id: 5,\n            name: 'Review',\n            component: <ReviewCreatedPolicy/>,\n            nextButtonText: 'Finish',\n            canJumpTo: stepIdReached >= 5\n        },\n        {\n            id: 6,\n            name: 'Finished',\n            component: <FinishedCreatePolicy onWizardFinish={ onClose } />,\n            isFinishedStep: true,\n            canJumpTo: stepIdReached >= 6\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <Wizard\n                isOpen\n                width={ 1220 }\n                onClose={ onClose }\n                title=\"Create SCAP policy\"\n                description=\"Create a new policy for managing SCAP compliance\"\n                steps={ steps }\n                onNext={ onNext } />\n        </React.Fragment>\n    );\n};\n\nCreatePolicy.propTypes = {\n    benchmark: propTypes.string,\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    complianceThreshold: propTypes.string,\n    businessObjective: propTypes.object,\n    dispatch: propTypes.func,\n    isOpen: propTypes.bool,\n    name: propTypes.string,\n    onWizardFinish: propTypes.func,\n    profile: propTypes.string,\n    refId: propTypes.string,\n    selectedRuleRefIds: propTypes.arrayOf(propTypes.string),\n    systemIds: propTypes.arrayOf(propTypes.string)\n};\n\nCreatePolicy.defaultProps = {\n    isOpen: false\n};\n\nconst selector = formValueSelector('policyForm');\nexport default connect(\n    state => ({\n        benchmark: selector(state, 'benchmark'),\n        osMajorVersion: selector(state, 'osMajorVersion'),\n        osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n        businessObjective: selector(state, 'businessObjective'),\n        complianceThreshold: selector(state, 'complianceThreshold') || '100.0',\n        name: selector(state, 'name'),\n        profile: selector(state, 'profile'),\n        refId: selector(state, 'refId'),\n        selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n        systemIds: selector(state, 'systems')\n    })\n)(CreatePolicy);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    FormGroup, TextArea, TextInput\n} from '@patternfly/react-core';\nimport { thresholdValid } from '../CreatePolicy/validate';\n\nexport const useThresholdValidate = () => {\n    const [validThreshold, setValidThreshold] = useState(true);\n    return [validThreshold, (threshold) => {\n        const valid = thresholdValid(threshold);\n        setValidThreshold(valid);\n        return valid;\n    }];\n};\n\nconst EditPolicyDetailsTab = ({ policy, setUpdatedPolicy }) => {\n    const [validThreshold, validateThreshold] = useThresholdValidate();\n\n    return <React.Fragment>\n        <FormGroup label=\"Policy description\" isRequired fieldId=\"description\">\n            <TextArea\n                style={ { width: 800, height: 110 } }\n                isRequired\n                type=\"text\"\n                id=\"description\"\n                name=\"description\"\n                aria-describedby=\"description\"\n                defaultValue={ policy.description }\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) => ({\n                        ...policy,\n                        description: value\n                    }));\n                }} />\n        </FormGroup>\n\n        <FormGroup label=\"Business objective\" fieldId=\"business-objective\">\n            <TextInput\n                type=\"text\"\n                style={ { width: 300 } }\n                id=\"business-objective\"\n                name=\"business-objective\"\n                aria-describedby=\"business-objective\"\n                defaultValue={ policy?.businessObjective?.title }\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) =>({\n                        ...policy,\n                        businessObjective: {\n                            ...policy.businessObjective,\n                            title: value\n                        }\n                    }));\n                }} />\n        </FormGroup>\n\n        <FormGroup\n            validated={ validThreshold ? 'default' : 'error' }\n            label='Compliance threshold (%)'\n            fieldId='policy-threshold'\n            helperTextInvalid='Threshold has to be a number between 0 and 100'\n            helperText='A value of 95% or higher is recommended'>\n            <TextInput\n                type='number'\n                style={ { width: 150 } }\n                name='compliance-threshold'\n                id='compliance-threshold'\n                defaultValue={ policy.complianceThreshold }\n                aria-describedby=\"policy-threshold\"\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) =>({\n                        ...policy,\n                        complianceThreshold: value,\n                        complianceThresholdValid: validateThreshold(value)\n                    }));\n                }} />\n        </FormGroup>\n    </React.Fragment>;\n};\n\nEditPolicyDetailsTab.propTypes = {\n    policy: propTypes.shape({\n        description: propTypes.string,\n        businessObjective: propTypes.object,\n        complianceThreshold: propTypes.oneOfType([\n            propTypes.string,\n            propTypes.number\n        ])\n    }),\n    setUpdatedPolicy: propTypes.func\n};\n\nexport default EditPolicyDetailsTab;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { TabbedRules } from 'PresentationalComponents';\nimport { countOsMinorVersions } from 'Store/Reducers/SystemStore';\n\nconst EditPolicyRulesTab = ({ handleSelect, policy, selectedRuleRefIds }) => {\n    let tabsData = [];\n    const osMinorVersionCounts = policy?.hosts && countOsMinorVersions(policy.hosts);\n    const profiles = policy?.policy?.profiles;\n\n    if (osMinorVersionCounts && profiles) {\n        tabsData = osMinorVersionCounts.map(({ osMinorVersion, count: systemCount }) => {\n            osMinorVersion = `${osMinorVersion}`;\n            let profileSelectedRuleRefIds;\n            const profile = profiles.find((profile) => profile.osMinorVersion === osMinorVersion);\n            if (profile) {\n                profileSelectedRuleRefIds = selectedRuleRefIds?.find(({ id }) => id === profile.id);\n            }\n\n            return {\n                profile,\n                systemCount,\n                newOsMinorVersion: osMinorVersion,\n                selectedRuleRefIds: profileSelectedRuleRefIds?.ruleRefIds\n            };\n        });\n    }\n\n    tabsData = tabsData.filter(({ profile }) => !!profile);\n\n    return <TabbedRules\n        tabsData={ tabsData }\n        remediationsEnabled={ false }\n        selectedFilter\n        level={ 1 }\n        handleSelect={ handleSelect } />;\n};\n\nEditPolicyRulesTab.propTypes = {\n    handleSelect: propTypes.func,\n    policy: propTypes.object,\n    selectedRuleRefIds: propTypes.array\n};\n\nexport default EditPolicyRulesTab;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Button, Form, Modal, Tab, TabTitleText, Spinner } from '@patternfly/react-core';\nimport { RoutedTabs } from 'PresentationalComponents';\nimport { InventoryTable, SystemsTable } from 'SmartComponents';\nimport { useLinkToBackground, useAnchor } from 'Utilities/Router';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport EditPolicyDetailsTab from './EditPolicyDetailsTab';\nimport EditPolicyRulesTab from './EditPolicyRulesTab';\nimport usePolicy from './usePolicy';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport { systemName } from 'Store/Reducers/SystemStore';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\n\nexport const MULTIVERSION_QUERY = gql`\nquery Profile($policyId: String!){\n    profile(id: $policyId) {\n        id\n        name\n        refId\n        external\n        description\n        totalHostCount\n        compliantHostCount\n        complianceThreshold\n        majorOsVersion\n        lastScanned\n        policyType\n        policy {\n            id\n            name\n            refId\n            profiles {\n                id\n                ssgVersion\n                name\n                refId\n                osMinorVersion\n                osMajorVersion\n                benchmark {\n                    id\n                    title\n                    latestSupportedOsMinorVersions\n                    osMajorVersion\n                }\n                rules {\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n        businessObjective {\n            id\n            title\n        }\n        hosts {\n            id\n            osMinorVersion\n            osMajorVersion\n        }\n    }\n}\n`;\n\nexport const EditPolicy = ({ route }) => {\n    const { policy_id: policyId } = useParams();\n    let { data } = useQuery(MULTIVERSION_QUERY, {\n        variables: { policyId }\n    });\n    const policy = data?.profile;\n    const newInventory = useFeature('newInventory');\n    const multiversionRules = useFeature('multiversionTabs');\n    const dispatch = useDispatch();\n    const anchor = useAnchor();\n    const [updatedPolicy, setUpdatedPolicy] = useState(null);\n    const [selectedRuleRefIds, setSelectedRuleRefIds] = useState([]);\n    const updatePolicy = usePolicy();\n    const linkToBackground = useLinkToBackground('/scappolicies');\n    const selectedEntities = useSelector((state) => (state?.entities?.selectedEntities));\n    const saveEnabled = updatedPolicy && !updatedPolicy.complianceThresholdValid;\n\n    const columns = [\n        {\n            key: 'facts.compliance.display_name',\n            title: 'Name',\n            props: {\n                width: 40, isStatic: true\n            },\n            ...newInventory && {\n                key: 'display_name',\n                renderFunc: (displayName, id, extra) => {\n                    return extra?.lastScanned ? systemName(displayName, id, { name: extra?.name }) : displayName;\n                }\n            }\n        },\n        {\n            key: 'facts.compliance.osMinorVersion',\n            title: 'Operating system',\n            props: {\n                width: 40, isStatic: true\n            },\n            ...newInventory && {\n                key: 'osMinorVersion',\n                renderFunc: (osMinorVersion, _id, { osMajorVersion }) => `RHEL ${osMajorVersion}.${osMinorVersion}`\n            }\n        }\n    ];\n\n    const linkToBackgroundWithHash = () => {\n        newInventory && dispatch({\n            type: 'SELECT_ENTITIES',\n            payload: { ids: [] }\n        });\n        linkToBackground({ hash: anchor });\n    };\n\n    const handleRuleSelect = (profile, newSelectedRuleRefIds) => {\n        const newSelection = selectedRuleRefIds.map((selectedProfile) => {\n            if (selectedProfile.id === profile.id) {\n                return {\n                    id: selectedProfile.id,\n                    ruleRefIds: newSelectedRuleRefIds\n                };\n            } else {\n                return selectedProfile;\n            }\n        });\n\n        setSelectedRuleRefIds(newSelection);\n    };\n\n    const actions = [\n        <Button\n            isDisabled={ saveEnabled }\n            key='save'\n            variant='primary'\n            onClick={ () => (\n                updatePolicy(policy, updatedPolicy).then(() => linkToBackgroundWithHash())\n            ) }>\n            Save\n        </Button>,\n        <Button\n            key='cancel'\n            variant='secondary'\n            onClick={ () => linkToBackgroundWithHash() }>\n            Cancel\n        </Button>\n    ];\n\n    useEffect(() => {\n        setUpdatedPolicy({\n            ...updatedPolicy,\n            hosts: selectedEntities ? selectedEntities : []\n        });\n    }, [selectedEntities]);\n\n    useEffect(() => setUpdatedPolicy({ ...updatedPolicy, selectedRuleRefIds }), [selectedRuleRefIds]);\n\n    useEffect(() => {\n\n        if (policy) {\n            const complianceThresholdValid =\n                (policy.complianceThreshold < 101 && policy.complianceThreshold > 0);\n            setUpdatedPolicy({\n                ...policy,\n                complianceThresholdValid\n            });\n            setSelectedRuleRefIds(policy.policy.profiles.map((policyProfile) => ({\n                id: policyProfile.id,\n                ruleRefIds: policyProfile.rules.map((rule) => (rule.refId))\n            })));\n            dispatch({\n                type: 'SELECT_ENTITIES',\n                payload: { ids: policy?.hosts?.map(({ id }) => ({ id })) || [] }\n            });\n        }\n    }, [policy]);\n\n    const InvCmp = newInventory ? InventoryTable : SystemsTable;\n    useTitleEntity(route, policy?.name);\n\n    return <Modal\n        isOpen\n        style={ { height: '400px' } }\n        width={ 1000 }\n        title={ `Edit ${ policy ? policy.name : '' }` }\n        onClose={ () => linkToBackgroundWithHash() }\n        actions={ actions }>\n        { policy ? <Form>\n            <RoutedTabs defaultTab='details'>\n                <Tab eventKey='details' title={<TabTitleText>Details</TabTitleText>}>\n                    <EditPolicyDetailsTab\n                        policy={ policy }\n                        setUpdatedPolicy={ setUpdatedPolicy } />\n                </Tab>\n\n                <Tab eventKey='rules' title={ <TabTitleText>Rules</TabTitleText> }>\n                    { multiversionRules ?\n                        <EditPolicyRulesTab\n                            policy={ policy }\n                            handleSelect={ handleRuleSelect }\n                            selectedRuleRefIds={ selectedRuleRefIds }\n                        /> : 'Rule editing coming soon' }\n                </Tab>\n\n                <Tab eventKey='systems' title={ <TabTitleText>Systems</TabTitleText> }>\n                    <InvCmp\n                        compact\n                        showActions={ false }\n                        enableExport={ false }\n                        remediationsEnabled={ false }\n                        policyId={ policy.id }\n                        defaultFilter={ `os_major_version = ${policy.majorOsVersion}` }\n                        query={GET_SYSTEMS_WITHOUT_FAILED_RULES}\n                        columns={columns}\n                        preselectedSystems={ (policy?.hosts || []).map((h) => ({ id: h.id })) || [] } />\n                </Tab>\n            </RoutedTabs>\n        </Form> : <Spinner /> }\n    </Modal>;\n};\n\nEditPolicy.propTypes = {\n    route: propTypes.object\n};\n\nexport default EditPolicy;\n","import { useMutation } from '@apollo/react-hooks';\nimport {\n    ASSOCIATE_SYSTEMS_TO_PROFILES, CREATE_BUSINESS_OBJECTIVE, UPDATE_PROFILE, CREATE_PROFILE, ASSOCIATE_RULES_TO_PROFILE\n} from 'Utilities/graphql/mutations';\n\nconst useCreateBusinessObjective = () => {\n    const [create] = useMutation(CREATE_BUSINESS_OBJECTIVE);\n\n    return async (policy, newBusinessObjective) => {\n        if (policy?.businessObjective?.title === newBusinessObjective?.title) {\n            return policy?.businessObjective?.id;\n        } else if (newBusinessObjective?.title === '') {\n            return null;\n        } else {\n            const businessObjective = await create({ variables: {\n                input: { title: newBusinessObjective.title }\n            } });\n\n            return businessObjective.data.createBusinessObjective.businessObjective.id;\n        }\n    };\n};\n\nconst usePolicy = () => {\n    const createBusinessObjective = useCreateBusinessObjective();\n    const [updateProfile] = useMutation(UPDATE_PROFILE);\n    const [createProfile] = useMutation(CREATE_PROFILE);\n    const [associateSystems] = useMutation(ASSOCIATE_SYSTEMS_TO_PROFILES);\n    const [associateRules] = useMutation(ASSOCIATE_RULES_TO_PROFILE);\n\n    return async (policy, updatedPolicy) => {\n        const businessObjectiveId = await createBusinessObjective(policy, updatedPolicy?.businessObjective);\n        let policyInput = {\n            name: updatedPolicy.name,\n            description: updatedPolicy.description,\n            complianceThreshold: parseFloat(updatedPolicy.complianceThreshold)\n        };\n\n        if (businessObjectiveId) {\n            policyInput.businessObjectiveId = businessObjectiveId;\n        }\n\n        if (policy === null) {\n            policyInput.cloneFromProfileId = updatedPolicy.cloneFromProfileId;\n            policyInput.refId = updatedPolicy.refId;\n            policyInput.benchmarkId = updatedPolicy.benchmarkId;\n\n            let {\n                data: { createProfile: { profile: { id } } }\n            } = await createProfile({ variables: { input: policyInput } });\n\n            policy = { id };\n        } else {\n            policyInput.id = policy.id;\n\n            await updateProfile({ variables: { input: policyInput } });\n        }\n\n        let { data: { associateSystems: { profile: { policy: { profiles } } } } } = await associateSystems({\n            variables: { input: {\n                id: policy.id,\n                systemIds: updatedPolicy.hosts.map((h) => (h.id))\n            } }\n        });\n\n        updatedPolicy.selectedRuleRefIds.forEach(async ({ id, ruleRefIds }) => {\n            let ruleInput = {\n                id: profiles.find((profile) => (\n                    profile.id === id || profile.parentProfileId === id\n                )).id,\n                ruleRefIds\n            };\n\n            await associateRules({ variables: { input: ruleInput } });\n        });\n    };\n};\n\nexport default usePolicy;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { UnsupportedSSGVersion } from 'PresentationalComponents';\n\nconst SSGVersion = ({ supported, ssgVersion }) => {\n    ssgVersion ||= 'Not available';\n    return supported ? ssgVersion :\n        <UnsupportedSSGVersion messageVariant='singular'>\n            { ssgVersion }\n        </UnsupportedSSGVersion>;\n};\n\nSSGVersion.propTypes = {\n    supported: propTypes.bool,\n    ssgVersion: propTypes.string\n};\n\nexport default {\n    SSGVersion\n};\n","import React, { memo } from 'react';\nimport propTypes from 'prop-types';\nimport { withApollo } from '@apollo/react-hoc';\nimport { connect } from 'react-redux';\nimport gql from 'graphql-tag';\nimport { pickBy } from 'lodash';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport ComplianceRemediationButton\n    from '@redhat-cloud-services/frontend-components-inventory-compliance/ComplianceRemediationButton';\nimport registry from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport {\n    NoSystemsTableBody\n} from 'PresentationalComponents';\n\nimport { exportFromState, selectAll, clearSelection, SELECT_ENTITY } from 'Store/ActionTypes';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport { FilterConfigBuilder } from '@redhat-cloud-services/frontend-components-inventory-compliance/Utilities';\nimport { entitiesReducer } from 'Store/Reducers/SystemStore';\nimport {\n    DEFAULT_SYSTEMS_FILTER_CONFIGURATION, COMPLIANT_SYSTEMS_FILTER_CONFIGURATION,\n    systemsPolicyFilterConfiguration, systemsOsFilterConfiguration\n} from '@/constants';\nimport {\n    ErrorPage,\n    StateView,\n    StateViewPart\n} from 'PresentationalComponents';\nimport { TableVariant } from '@patternfly/react-table';\nimport { Alert } from '@patternfly/react-core';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\n\nexport const GET_SYSTEMS = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    refId\n                    lastScanned\n                    compliant\n                    external\n                    score\n                    supported\n                    ssgVersion\n                    rules {\n                        refId\n                        title\n                        compliant\n                        remediationAvailable\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const GET_SYSTEMS_WITHOUT_FAILED_RULES = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    lastScanned\n                    external\n                    compliant\n                    score\n                    supported\n                    ssgVersion\n                    policy {\n                        id\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nconst initFilterState = (filterConfig) => (\n    pickBy(filterConfig.initialDefaultState(), (value) => (!!value))\n);\n\nconst initialState = {\n    page: 1\n};\n\nconst policyFilter = (policies, osFilter) => ([\n    ...systemsPolicyFilterConfiguration(policies),\n    ...(osFilter ? systemsOsFilterConfiguration(policies) : [])\n]);\n\n@registry()\nclass SystemsTable extends React.Component {\n    inventory = React.createRef();\n    filterConfig = new FilterConfigBuilder([\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(this.props.compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(this.props.policies && this.props.policies.length > 0 ?\n            policyFilter(this.props.policies, this.props.showOsFilter) : [])\n    ]);\n    chipBuilder = this.filterConfig.getChipBuilder();\n    filterBuilder = this.filterConfig.getFilterBuilder();\n\n    state = {\n        ...initialState,\n        policyId: this.props.policyId,\n        perPage: 50,\n        totalCount: 0,\n        activeFilters: initFilterState(this.filterConfig)\n    }\n\n    componentDidMount = () => {\n        const { clearAll, selectedEntities } = this.props;\n        if (selectedEntities && selectedEntities.length > 0) {\n            clearAll();\n        }\n\n        (this.props.preselectedSystems ?\n            Promise.resolve(this.props.selectEntities(this.props.preselectedSystems)) : Promise.resolve())\n        .then(() => {\n            this.updateSystems();\n        });\n    }\n\n    componentDidUpdate = (prevProps) => {\n        if (prevProps.complianceThreshold !== this.props.complianceThreshold) {\n            this.updateSystems();\n        }\n    }\n\n    onRefresh = ({ page, per_page: perPage, ...options }) => {\n        const { showAllSystems } = this.props;\n        if (showAllSystems && this.inventory && this.inventory.current) {\n            this.setState({ page, perPage }, () => { this.inventory.current.onRefreshData({\n                page, perPage, ...options, per_page: perPage // eslint-disable-line camelcase\n            }); }\n            );\n        } else {\n            this.setState({ page, perPage }, () => this.updateSystems().then(() => {\n                if (this.inventory && this.inventory.current) {\n                    this.inventory.current.onRefreshData({\n                        page, perPage, ...options, per_page: perPage // eslint-disable-line camelcase\n                    });\n                }\n            }));\n        }\n    }\n\n    fetchSystems = () => {\n        const { defaultFilter, client, showOnlySystemsWithTestResults, remediationsEnabled } = this.props;\n        const { policyId, perPage, page, activeFilters } = this.state;\n        let filter = [\n            defaultFilter,\n            showOnlySystemsWithTestResults && 'has_test_results = true',\n            this.filterBuilder.buildFilterString(activeFilters)\n        ].filter((e)=>!!e).join(' and ');\n\n        let variables = { filter, perPage, page, policyId };\n\n        return client.query({\n            query: remediationsEnabled ? GET_SYSTEMS : GET_SYSTEMS_WITHOUT_FAILED_RULES,\n            fetchResults: true,\n            fetchPolicy: 'no-cache',\n            variables\n        });\n    }\n\n    updateSystems = () => {\n        const prevSystems = this.props.systems.map((s) => s.node.id).sort();\n        return this.fetchSystems().then((items) => this.props.updateSystems({\n            systems: items.data.systems.edges,\n            systemsCount: items.data.systems.totalCount\n        })\n        ).then(() => {\n            const newSystems = this.props.systems.map((s) => s.node.id).sort();\n            if (JSON.stringify(newSystems) === JSON.stringify(prevSystems)) {\n                this.props.updateRows();\n            }\n        }).catch((error) => {\n            this.setState(prevState => ({ ...prevState, error }));\n        });\n    }\n\n    onExportSelect = (_, format) => (\n        this.props.exportFromState(format)\n    )\n\n    onFilterUpdate = (filter, selectedValues) => {\n        this.props.updateSystems({\n            systems: [],\n            systemsCount: 0\n        });\n        this.setState({\n            ...initialState,\n            activeFilters: {\n                ...this.state.activeFilters,\n                [filter]: selectedValues\n            }\n        }, this.updateSystems);\n    }\n\n    deleteFilter = (chips) => {\n        const activeFilters =  this.filterConfig.removeFilterWithChip(\n            chips, this.state.activeFilters\n        );\n        this.setState({\n            ...initialState,\n            activeFilters\n        }, this.updateSystems);\n    }\n\n    clearAllFilter = () => {\n        this.setState({\n            ...initialState,\n            activeFilters: initFilterState(this.filterConfig)\n        }, this.updateSystems);\n    }\n\n    onFilterDelete = (_event, chips, clearAll = false) => {\n        clearAll ? this.clearAllFilter() : this.deleteFilter(chips[0]);\n    }\n\n    onBulkSelect = () => {\n        const { selectedEntities, selectAll, clearSelection, allSelectedOnPage } = this.props;\n\n        if (selectedEntities.length === 0 ||\n            (selectedEntities.length > 0 && !allSelectedOnPage)) {\n            selectAll();\n        } else {\n            clearSelection();\n        }\n    }\n\n    isExportDisabled = () => {\n        const { total, selectedEntities } = this.props;\n        return (total || 0) === 0 && selectedEntities.length === 0;\n    }\n\n    render() {\n        const {\n            remediationsEnabled, compact, enableExport, showAllSystems, showActions, showComplianceSystemsInfo,\n            selectedEntities, selectedEntitiesIds, systems, total, policyId, systemProps, columns\n        } = this.props;\n        const {\n            page, perPage, activeFilters, error\n        } = this.state;\n        let noError;\n        const filterConfig = this.filterConfig.buildConfiguration(\n            this.onFilterUpdate,\n            activeFilters,\n            { hideLabel: true }\n        );\n        const filterChips = this.chipBuilder.chipsFor(this.state.activeFilters);\n        const exportConfig = enableExport ? {\n            isDisabled: this.isExportDisabled(),\n            onSelect: this.onExportSelect\n        } : {};\n        const inventoryTableProps = {\n            ...systemProps,\n            onRefresh: this.onRefresh,\n            ref: this.inventory,\n            page,\n            perPage,\n            exportConfig,\n            tableProps: {\n                canSelectAll: false\n            },\n            bulkSelect: {\n                checked: selectedEntities.length > 0 ?\n                    (this.props.allSelectedOnPage ? true : null)\n                    : false,\n                onSelect: this.onBulkSelect,\n                count: selectedEntities.length,\n                label: selectedEntities.length > 0 ? `${ selectedEntities.length } Selected` : undefined\n            }\n        };\n\n        if (showActions) {\n            inventoryTableProps.actions = [{\n                title: 'View in inventory',\n                onClick: (_event, _index, { id }) => {\n                    const beta = window.location.pathname.split('/')[1] === 'beta';\n                    window.location.href = `${window.location.origin}${beta ? '/beta' : ''}/insights/inventory/${id}`;\n                }\n            }];\n        }\n\n        if (!showAllSystems) {\n            inventoryTableProps.total = total;\n            inventoryTableProps.items = systems.map((edge) => edge.node.id);\n            inventoryTableProps.filterConfig = filterConfig;\n            inventoryTableProps.activeFiltersConfig = {\n                filters: filterChips,\n                onDelete: this.onFilterDelete\n            };\n        }\n\n        if (compact) {\n            inventoryTableProps.variant = TableVariant.compact;\n        }\n\n        if (error === undefined) {\n            noError = true;\n        }\n\n        if (policyId && total === 0 && Object.keys(activeFilters).length === 0) {\n            inventoryTableProps.tableProps.rows = [{ cells: [{ title: <NoSystemsTableBody /> }] }];\n            inventoryTableProps.tableProps.columns = [];\n            inventoryTableProps.hasItems = false;\n            inventoryTableProps.hasCheckbox = false;\n        }\n\n        if (!showAllSystems && remediationsEnabled) {\n            inventoryTableProps.dedicatedAction = <ComplianceRemediationButton\n                allSystems={ systemsWithRuleObjectsFailed(systems.filter((edge) => (\n                    selectedEntitiesIds.includes(edge.node.id)\n                )).map(edge => edge.node)) }\n                selectedRules={ [] } />;\n        }\n\n        return (\n            <StateView stateValues={{ error, noError }}>\n                <StateViewPart stateKey='error'>\n                    <ErrorPage error={error}/>\n                </StateViewPart>\n                <StateViewPart stateKey='noError'>\n\n                    { showComplianceSystemsInfo && <Alert\n                        isInline\n                        variant=\"info\"\n                        title={ 'The list of systems in this view is different than those that appear in the Inventory. ' +\n                            'Only systems previously or currently associated with compliance policies are displayed.' } /> }\n                    <InventoryTable\n                        { ...inventoryTableProps }\n                        fallback={<SkeletonTable colSize={2} rowSize={15} />}\n                        onLoad={({ INVENTORY_ACTION_TYPES, mergeWithEntities }) => {\n                            this.getRegistry().register({\n                                ...mergeWithEntities(\n                                    entitiesReducer(\n                                        INVENTORY_ACTION_TYPES, columns, showAllSystems\n                                    ))\n                            });\n                        }}\n                    />\n                </StateViewPart>\n            </StateView>\n        );\n    }\n}\n\nSystemsTable.propTypes = {\n    allSelectedOnPage: propTypes.bool,\n    clearAll: propTypes.func,\n    clearInventoryFilter: propTypes.func,\n    clearSelection: propTypes.func,\n    client: propTypes.object,\n    columns: propTypes.array,\n    compact: propTypes.bool,\n    complianceThreshold: propTypes.number,\n    compliantFilter: propTypes.bool,\n    enableExport: propTypes.bool,\n    error: propTypes.object,\n    exportFromState: propTypes.func,\n    policies: propTypes.array,\n    policyId: propTypes.string,\n    defaultFilter: propTypes.string,\n    preselectedSystems: propTypes.array,\n    remediationsEnabled: propTypes.bool,\n    selectAll: propTypes.func,\n    selectEntities: propTypes.func,\n    selectedEntities: propTypes.array,\n    selectedEntitiesIds: propTypes.array,\n    showActions: propTypes.bool,\n    showAllSystems: propTypes.bool,\n    showOnlySystemsWithTestResults: propTypes.bool,\n    showOsFilter: propTypes.bool,\n    systems: propTypes.array,\n    total: propTypes.number,\n    updateRows: propTypes.func,\n    updateSystems: propTypes.func,\n    systemProps: propTypes.shape({\n        isFullView: propTypes.bool\n    }),\n    showComplianceSystemsInfo: propTypes.bool\n};\n\nSystemsTable.defaultProps = {\n    remediationsEnabled: true,\n    compact: false,\n    enableExport: true,\n    showAllSystems: false,\n    complianceThreshold: 0,\n    showOnlySystemsWithTestResults: false,\n    showActions: true,\n    compliantFilter: false,\n    selectedEntities: [],\n    selectedEntitiesIds: [],\n    systems: [],\n    clearAll: () => ({}),\n    exportFromState: () => ({}),\n    systemProps: {},\n    showComplianceSystemsInfo: false\n};\n\nconst mapStateToProps = state => {\n    if (state.entities === undefined || state.entities.rows === undefined) {\n        return { selectedEntities: [], systems: [] };\n    }\n\n    const allSelectedOnPage = state.entities.rows.filter((row) => (\n        !(state.entities.selectedEntities || []).map((e) => e.id).includes(row.id)\n    )).length === 0;\n\n    return {\n        allSelectedOnPage,\n        selectedEntities: state.entities.selectedEntities,\n        selectedEntitiesIds: (state.entities.selectedEntities || []).map((e) => (e.id)),\n        systems: state.entities.systems,\n        total: state.entities.total\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clearInventoryFilter: () => dispatch({ type: 'CLEAR_FILTERS' }),\n        exportFromState: (format) => dispatch(exportFromState(format)),\n        updateSystems: (args) => {\n            dispatch({\n                type: 'UPDATE_SYSTEMS',\n                ...args\n            });\n        },\n        updateRows: () => dispatch({ type: 'UPDATE_ROWS' }),\n        selectAll: () => dispatch(selectAll()),\n        clearSelection: () => dispatch(clearSelection()),\n        clearAll: () => dispatch({\n            type: SELECT_ENTITY,\n            payload: { clearAll: true }\n        }),\n        selectEntities: (ids) => dispatch({\n            type: 'SELECT_ENTITIES',\n            payload: { ids }\n        })\n    };\n};\n\n// eslint-disable-next-line react/display-name\nconst ConnectedSystemsTable = memo((props) => {\n    return <SystemsTable {...props} />;\n});\n\nexport { default as Cells } from './Cells';\nexport { SystemsTable };\nexport const SystemsTableWithApollo = withApollo(ConnectedSystemsTable);\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SystemsTableWithApollo);\n","import gql from 'graphql-tag';\nimport pickBy from 'lodash/pickBy';\nimport { systemsPolicyFilterConfiguration, systemsOsFilterConfiguration } from '@/constants';\n\nexport const GET_SYSTEMS = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    refId\n                    lastScanned\n                    compliant\n                    external\n                    score\n                    supported\n                    ssgVersion\n                    majorOsVersion\n                    rules {\n                        refId\n                        title\n                        compliant\n                        remediationAvailable\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const GET_SYSTEMS_WITHOUT_FAILED_RULES = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    lastScanned\n                    external\n                    compliant\n                    score\n                    supported\n                    ssgVersion\n                    policy {\n                        id\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const policyFilter = (policies, osFilter) => ([\n    ...systemsPolicyFilterConfiguration(policies),\n    ...(osFilter ? systemsOsFilterConfiguration(policies) : [])\n]);\n\nexport const initFilterState = (filterConfig) => (\n    pickBy(filterConfig.initialDefaultState(), (value) => (!!value))\n);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Skeleton, { SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { registryDecorator } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { InventoryDetail, DetailWrapper } from '@redhat-cloud-services/frontend-components/Inventory';\n\n@registryDecorator()\nclass InventoryDetails extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <DetailWrapper onLoad={({ mergeWithDetail }) => this.getRegistry().register({\n                ...mergeWithDetail()\n            })}>\n                <InventoryDetail fallback={<Skeleton size={ SkeletonSize.md } />} hideBack />\n            </DetailWrapper>\n        );\n    }\n}\n\nInventoryDetails.propTypes = {\n    entity: propTypes.object\n};\n\nconst ConnectedInventoryDetails = (props) => {\n    return <InventoryDetails {...props} />;\n};\n\nexport default ConnectedInventoryDetails;\n","import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { withApollo } from '@apollo/react-hoc';\nimport PropTypes from 'prop-types';\nimport { useStore, useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { policyFilter } from './constants';\nimport { systemsReducer } from 'Store/Reducers/SystemStore';\nimport { selectAll, clearSelection } from 'Store/ActionTypes';\nimport { exportFromState } from 'Utilities/Export';\nimport { DEFAULT_SYSTEMS_FILTER_CONFIGURATION, COMPLIANT_SYSTEMS_FILTER_CONFIGURATION } from '@/constants';\nimport debounce from 'lodash/debounce';\nimport {\n    ErrorPage,\n    StateView,\n    StateViewPart\n} from 'PresentationalComponents';\nimport { Alert } from '@patternfly/react-core';\nimport { TableVariant } from '@patternfly/react-table';\n// eslint-disable-next-line max-len\nimport ComplianceRemediationButton from '@redhat-cloud-services/frontend-components-inventory-compliance/ComplianceRemediationButton';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport useFilterConfig from 'Utilities/hooks/useFilterConfig';\nimport { InventoryTable as FECInventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\n\nexport const InventoryTable = ({\n    columns,\n    showAllSystems,\n    policyId,\n    query,\n    client,\n    showActions,\n    enableExport,\n    compliantFilter,\n    policies,\n    showOnlySystemsWithTestResults,\n    showOsFilter,\n    error,\n    showComplianceSystemsInfo,\n    compact,\n    remediationsEnabled,\n    systemProps,\n    defaultFilter,\n    emptyStateComponent,\n    prependComponent\n}) => {\n    const store = useStore();\n    const dispatch = useDispatch();\n    const inventory = useRef(null);\n    const [pagination, setPagination] = useState({\n        perPage: 50,\n        page: 1\n    });\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [isEmpty, setIsEmpty] = useState(false);\n    const { conditionalFilter, activeFilters, buildFilterString } = useFilterConfig([\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(policies?.length > 0 ? policyFilter(policies, showOsFilter) : [])\n    ]);\n    const total = useSelector(({ entities }) => entities?.systemsCount) || 0;\n    const items = useSelector(({ entities } = {}) => (entities?.systems?.map((system) => (\n        system?.node?.id\n    )) || []), shallowEqual);\n    const selectedEntities = useSelector(({ entities } = {}) => (entities?.selectedEntities || []), shallowEqual);\n    const onBulkSelect = (isSelected) => isSelected ? dispatch(selectAll()) : dispatch(clearSelection());\n\n    const fetchSystems = (perPage = 50, page = 1) => {\n        setIsLoaded(false);\n\n        const filterString = buildFilterString();\n        const combindedFilter = [\n            ...showOnlySystemsWithTestResults ? ['has_test_results = true'] : [],\n            ...filterString?.length > 0 ? [filterString] : []\n        ].join(' and ');\n        const filter = defaultFilter ? `(${ defaultFilter }) and (${ combindedFilter })` : combindedFilter;\n\n        dispatch({ type: 'GET_SYSTEMS_PENDING' });\n        return client.query({\n            query,\n            fetchResults: true,\n            fetchPolicy: 'no-cache',\n            variables: {\n                filter,\n                perPage,\n                page,\n                ...policyId && { policyId }\n            }\n        }).then(({ data, loading }) => {\n            dispatch({\n                type: 'GET_SYSTEMS_FULFILLED',\n                systems: data.systems.edges,\n                systemsCount: data.systems.totalCount\n            });\n            setIsLoaded(true);\n            setPagination(() => ({ page, perPage }));\n\n            if (emptyStateComponent && !loading && data.systems.totalCount === 0) {\n                setIsEmpty(true);\n            }\n\n            return { data, loading };\n        });\n    };\n\n    const debounceFetchSystems = useCallback(\n        debounce(fetchSystems, 800),\n        [conditionalFilter.activeFiltersConfig.filters]\n    );\n\n    useEffect(() => {\n        if (conditionalFilter.activeFiltersConfig.filters) {\n            debounceFetchSystems(pagination.perPage, 1);\n        }\n    }, [activeFilters]);\n\n    const onRefresh = (options, callback) => {\n        query && fetchSystems(options.per_page, options.page);\n        if (!callback && inventory && inventory.current) {\n            inventory.current.onRefreshData(options);\n        } else if (callback) {\n            callback(options);\n        }\n    };\n\n    return <StateView stateValues={{ error, noError: error === undefined && !isEmpty, empty: isEmpty }}>\n        <StateViewPart stateKey='error'>\n            { !!prependComponent && prependComponent }\n            <ErrorPage error={error}/>\n        </StateViewPart>\n        <StateViewPart stateKey='empty'>\n            { emptyStateComponent }\n        </StateViewPart>\n        <StateViewPart stateKey='noError'>\n            { !!prependComponent && isLoaded && prependComponent }\n            { showComplianceSystemsInfo && <Alert\n                isInline\n                variant=\"info\"\n                title={ 'The list of systems in this view is different than those that appear in the Inventory. ' +\n                    'Only systems currently associated with or reporting against compliance policies are displayed.' } /> }\n            <FECInventoryTable\n                { ...systemProps }\n                onLoad={({\n                    INVENTORY_ACTION_TYPES,\n                    mergeWithEntities\n                }) => {\n                    getRegistry().register({\n                        ...mergeWithEntities(\n                            systemsReducer(\n                                INVENTORY_ACTION_TYPES, columns, showAllSystems, policyId\n                            ))\n                    });\n                }}\n                fallback={<SkeletonTable colSize={2} rowSize={15} />}\n                tableProps={{\n                    canSelectAll: false\n                }}\n                variant={compact ? TableVariant.compact : ''}\n                ref={inventory}\n                onRefresh={onRefresh}\n                bulkSelect={{\n                    checked: selectedEntities.length > 0 ?\n                        (items?.every(id => selectedEntities?.find((selected) => selected?.id === id)) ? true : null)\n                        : false,\n                    onSelect: onBulkSelect,\n                    count: selectedEntities.length,\n                    label: selectedEntities.length > 0 ? `${ selectedEntities.length } Selected` : undefined\n                }}\n                {...!showAllSystems && {\n                    ...pagination,\n                    isLoaded,\n                    items,\n                    total,\n                    ...conditionalFilter,\n                    ...remediationsEnabled && {\n                        dedicatedAction: <ComplianceRemediationButton\n                            allSystems={ systemsWithRuleObjectsFailed(selectedEntities) }\n                            selectedRules={ [] } />\n                    }\n                }}\n                {...enableExport && {\n                    exportConfig: {\n                        isDisabled: total === 0 && selectedEntities.length === 0,\n                        onSelect: (_, format) => exportFromState(store.getState()?.entities, format)\n                    }\n                }}\n                {...showActions && {\n                    actions: [{\n                        title: 'View in inventory',\n                        onClick: (_event, _index, { id }) => {\n                            const beta = window.location.pathname.split('/')[1] === 'beta';\n                            window.location.href = `${window.location.origin}${beta ? '/beta' : ''}/insights/inventory/${id}`;\n                        }\n                    }]\n                }}\n            />\n        </StateViewPart>\n    </StateView>;\n};\n\nInventoryTable.propTypes = {\n    columns: PropTypes.arrayOf(PropTypes.shape({})),\n    policies: PropTypes.arrayOf(PropTypes.shape({})),\n    client: PropTypes.object,\n    showAllSystems: PropTypes.bool,\n    policyId: PropTypes.string,\n    query: PropTypes.string,\n    showActions: PropTypes.bool,\n    enableExport: PropTypes.bool,\n    compliantFilter: PropTypes.bool,\n    showOnlySystemsWithTestResults: PropTypes.bool,\n    showOsFilter: PropTypes.bool,\n    showComplianceSystemsInfo: PropTypes.bool,\n    error: PropTypes.object,\n    compact: PropTypes.bool,\n    remediationsEnabled: PropTypes.bool,\n    defaultFilter: PropTypes.string,\n    systemProps: PropTypes.shape({\n        isFullView: PropTypes.bool\n    }),\n    emptyStateComponent: PropTypes.node,\n    prependComponent: PropTypes.node\n};\n\nInventoryTable.defaultProps = {\n    policyId: '',\n    showActions: true,\n    enableExport: true,\n    compliantFilter: false,\n    showOnlySystemsWithTestResults: false,\n    showComplianceSystemsInfo: false,\n    compact: false,\n    remediationsEnabled: true\n};\n\nexport default withApollo(InventoryTable);\n","const CSV_FILE_PREFIX = 'compliance-export';\nconst CSV_DELIMITER = ',';\n\nconst linkAndDownload = (data, filename) => {\n    if (!data) {\n        return;\n    }\n\n    let link = document.createElement('a');\n    link.setAttribute('href', data);\n    link.setAttribute('download', filename);\n    link.dispatchEvent(new MouseEvent(`click`, { bubbles: true, cancelable: true, view: window }));\n};\n\nconst getNestedObject = (nestedObj, path) => {\n    return path.split('.').reduce(\n        (obj, key) => (obj && obj[key] !== 'undefined') ? obj[key] : undefined, nestedObj\n    );\n};\n\nconst textCsvCell = (row, key) => {\n    let cell = getNestedObject(row, key);\n\n    if (cell.exportValue) {\n        cell = cell.exportValue;\n    }\n\n    if (typeof(cell) === 'object') {\n        cell = getNestedObject(row, key + '_text');\n    }\n\n    if (typeof(cell) === 'string' && cell.includes(',')) {\n        cell = '\"' + cell + '\"';\n    }\n\n    return cell;\n};\n\nexport const csvFromState = (state) => {\n    const { rows, columns, selectedEntities } = state;\n\n    if (rows) {\n        let csvRows = [columns.map((column) => column.title).join(CSV_DELIMITER)];\n        csvRows = csvRows.concat((selectedEntities || rows).map((row) => (\n            state.columns.map((column) => !column.noExport ? textCsvCell(row, column.key) : '').join(CSV_DELIMITER)\n        )));\n\n        return encodeURI('data:text/csv;charset=utf-8,' + csvRows.join('\\n'));\n    }\n};\n\nexport const jsonFromState = (state) => {\n    const { rows, columns, selectedEntities } = state;\n    let result;\n\n    if (rows) {\n        result = (selectedEntities || rows).map((row) => {\n            let object = {};\n            columns.forEach((column) => {\n                const keys = column.key.split('.');\n                const key = keys[keys.length - 1];\n                object[key] = textCsvCell(row, column.key);\n            });\n\n            return object;\n        });\n\n        return encodeURI('data:application/json;charset=utf-8,' + JSON.stringify(result));\n    }\n};\n\nconst filename = (format) => (\n    CSV_FILE_PREFIX + '-' + (new Date()).toISOString() + '.' + format\n);\n\nexport const exportFromState = (state, format) => {\n    let content;\n\n    if (format === 'csv') {\n        content = csvFromState(state);\n    } else if (format === 'json') {\n        content = jsonFromState(state);\n    }\n\n    linkAndDownload(content, filename(format));\n};\n\n","export const profilesRulesFailed = (profiles) => (\n    profiles.flatMap(profile => profile.rules && profile.rules.filter(rule => !rule.compliant))\n);\n\nexport const profilesRulesPassed = (profiles) => (\n    profiles.flatMap(profile => profile.rules && profile.rules.filter(rule => rule.compliant))\n);\n\nexport const systemRulesPassed = (system) => (\n    system.testResultProfiles ? profilesRulesPassed(system.testResultProfiles) : []\n);\n\nexport const systemRulesFailed = (system) => (\n    system.testResultProfiles ? profilesRulesFailed(system.testResultProfiles) : []\n);\n\nexport const systemsWithRuleObjectsFailed = (systems) => (\n    systems.map(system => (\n        {\n            ...system,\n            ruleObjectsFailed: systemRulesFailed(system),\n            profiles: system.testResultProfiles\n        }\n    ))\n);\n","export const EXPORT = '@@COMPLIANCE/EXPORT';\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\n\nexport const exportFromState = (format) => ({\n    type: EXPORT, payload: { format }\n});\n\nexport const selectAll = () => ({\n    type: SELECT_ENTITY,\n    payload: { id: 0, selected: true }\n});\n\nexport const clearSelection = () => ({\n    type: SELECT_ENTITY,\n    payload: { id: 0, selected: false }\n});\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Link } from 'react-router-dom';\nimport { EXPORT, SELECT_ENTITY } from 'Store/ActionTypes';\nimport { exportFromState } from 'Utilities/Export';\nimport {\n    ComplianceScore as complianceScore,\n    complianceScoreString\n} from 'PresentationalComponents';\nimport {\n    Tooltip,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport {\n    profilesRulesPassed,\n    profilesRulesFailed\n} from 'Utilities/ruleHelpers';\nimport Truncate from 'react-truncate';\nimport { sortingByProp } from 'Utilities/helpers';\n\nconst NEVER = 'Never';\n\nexport const lastScanned = ({ testResultProfiles: profiles = [] }) => {\n    const dates = profiles.map((profile) => new Date(profile.lastScanned));\n    const last = new Date(Math.max.apply(null, dates.filter((date) => isFinite(date))));\n    const result = (last instanceof Date && isFinite(last)) ? last : NEVER;\n\n    return result;\n};\n\nexport const compliant = ({ testResultProfiles: profiles = [] }) => (\n    profiles.every(profile => profile.lastScanned === NEVER || profile.compliant === true)\n);\n\nexport const score = ({ testResultProfiles: profiles = [] }) => {\n    const scoreTotal = profiles.reduce((acc, profile) => acc + profile.score, 0);\n    const numScored = profiles.reduce((acc, profile) => {\n        if (profilesRulesPassed([profile]).length + profilesRulesFailed([profile]).length > 0) { return acc + 1; }\n\n        return acc;\n    }, 0);\n    if (numScored) { return scoreTotal / numScored; }\n\n    return 0;\n};\n\nexport const supported = ({ testResultProfiles: profiles = [] }) => (\n    profiles.reduce((acc, profile) => acc && profile.supported, true)\n);\n\nexport const policyNames = (system) => {\n    if (system === {}) { return ''; }\n\n    let policyNames = system.policies.map(({ name }) => name);\n    return policyNames.join(', ');\n};\n\nexport const policiesCell = ({ policyNames }) => ({\n    title: policyNames ? (\n        <Tooltip content={policyNames}>\n            <Truncate lines={2} width={540}>{policyNames}</Truncate>\n        </Tooltip>\n    ) : <Text className='grey-icon'>No policies</Text>,\n    exportValue: policyNames\n});\n\nexport const detailsLink = (system) => {\n    if (system.testResultProfiles && system.testResultProfiles.length > 0) {\n        return {\n            title: (\n                <Link to={{ pathname: `/systems/${system.id}` }}>\n                    View report\n                </Link>\n            )\n        };\n    }\n};\n\nexport const hasOsInfo = (matchingSystem) => (\n    typeof(matchingSystem.osMajorVersion) !== 'undefined' && typeof(matchingSystem.osMinorVersion) !== 'undefined' &&\n        matchingSystem.osMajorVersion !== null && matchingSystem.osMinorVersion !== null &&\n        !(matchingSystem.osMajorVersion === 0 && matchingSystem.osMinorVersion === 0)\n);\n\nconst displayNameCell = (system, matchingSystem) =>  ({\n    title: <TextContent>\n        { matchingSystem.name ? <Link to={{ pathname: `/systems/${matchingSystem.id}` }}>\n            { matchingSystem.name }\n        </Link> : system.display_name }\n        { hasOsInfo(matchingSystem) &&\n            <Text component={TextVariants.small}>RHEL {matchingSystem.osMajorVersion}.{matchingSystem.osMinorVersion}</Text> }\n    </TextContent>,\n    exportValue: system.display_name || matchingSystem.name\n});\n\nexport const systemName = (displayName, id, { osMajorVersion, osMinorVersion, name }) => (\n    <TextContent>\n        <Link to={{ pathname: `/systems/${id}` }}>\n            { displayName || name }\n        </Link>\n        { hasOsInfo({ osMajorVersion, osMinorVersion }) &&\n            <Text component={TextVariants.small}>RHEL {osMajorVersion}.{osMinorVersion}</Text> }\n    </TextContent>\n);\n\nconst isSelected = (id, selectedEntities) => (\n    !!(selectedEntities || []).find((entity) => (entity.id === id))\n);\n\nconst profilesSsgVersions = ({ testResultProfiles: profiles = [] }) => (\n    profiles.map((p) => (p.ssgVersion)).filter((version) => (!!version)).join(', ')\n);\n\nexport const mapCountOsMinorVersions = (systems) => {\n    if (!systems) { return {}; }\n\n    return systems.reduce((acc, { osMinorVersion }) => {\n        if (osMinorVersion !== undefined && osMinorVersion !== null) {\n            (acc[osMinorVersion] = acc[osMinorVersion] || { osMinorVersion, count: 0 }).count++;\n        }\n\n        return acc;\n    }, {});\n};\n\nexport const countOsMinorVersions = (systems) => (\n    Object.values(mapCountOsMinorVersions(systems)).sort(sortingByProp('osMinorVersion', 'desc'))\n);\n\nexport const systemsToInventoryEntities = (systems, entities, showAllSystems, selectedEntities) => (\n    entities.map(entity => {\n        // This should compare the inventory ID instead with\n        // the ID in compliance\n        if (entity.facts === undefined) { entity.facts = {}; }\n\n        let matchingSystem = systems.map((s) => s.node).find((system) => {\n            return entity.id === system.id;\n        });\n        if (matchingSystem === undefined) {\n            if (!showAllSystems) { return; }\n\n            matchingSystem = { testResultProfiles: [], policies: [] };\n        }\n\n        matchingSystem.policyNames = policyNames(matchingSystem);\n        matchingSystem.rulesPassed = profilesRulesPassed(matchingSystem.testResultProfiles).length;\n        matchingSystem.rulesFailed = profilesRulesFailed(matchingSystem.testResultProfiles).length;\n        matchingSystem.lastScanned = lastScanned(matchingSystem);\n        matchingSystem.compliant = compliant(matchingSystem);\n        matchingSystem.score = score(matchingSystem);\n        matchingSystem.supported = supported(matchingSystem);\n\n        return {\n            /* eslint-disable camelcase */\n            id: entity.id,\n            selected: isSelected(entity.id, selectedEntities),\n            account: entity.account,\n            bios_uuid: entity.bios_uuid,\n            created: entity.created,\n            display_name: entity.display_name || matchingSystem.name,\n            fqdn: entity.fqdn,\n            insights_id: entity.insights_id,\n            ip_addresses: entity.ip_addresses,\n            mac_addresses: entity.mac_addresses,\n            rhel_machine_id: entity.rhel_machine_id,\n            satellite_id: entity.satellite_id,\n            subscription_manager_id: entity.subscription_manager_id,\n            tags: entity.tags,\n            updated: entity.updated,\n            facts: {\n                inventory: {\n                    hostname: (entity.facts.inventory !== undefined) ?\n                        entity.facts.inventory.hostname :\n                        entity.facts.hostname,\n                    machine_id: (entity.facts.inventory !== undefined) ?\n                        entity.facts.inventory.machine_id :\n                        entity.facts.machine_id,\n                    release: (entity.facts.inventory !== undefined) ?\n                        entity.facts.inventory.release :\n                        entity.facts.release\n                },\n                compliance: {\n                    display_name: displayNameCell(entity, matchingSystem),\n                    policies: policiesCell(matchingSystem),\n                    details_link: detailsLink(matchingSystem),\n                    rules_passed: matchingSystem.rulesPassed,\n                    rules_failed: { title: <Link to={{\n                        pathname: `/systems/${matchingSystem.id}`,\n                        query: {\n                            hidePassed: true\n                        }\n                    }}>{matchingSystem.rulesFailed}</Link> },\n                    rules_failed_text: matchingSystem.rulesFailed,\n                    compliance_score: complianceScore(matchingSystem),\n                    compliance_score_text: complianceScoreString(matchingSystem),\n                    last_scanned: (matchingSystem.lastScanned instanceof Date) ?\n                        { title: <DateFormat date={Date.parse(matchingSystem.lastScanned)} type='relative' /> } :\n                        matchingSystem.lastScanned,\n                    last_scanned_text: matchingSystem.lastScanned,\n                    ssg_version: profilesSsgVersions(matchingSystem),\n                    supported: matchingSystem.supported\n                }\n            }\n            /* eslint-enable camelcase */\n        };\n    }).filter((value) => (!!value))\n);\n\nconst systemsToRows = (systems) => (\n    systems.map(({ node }) => ({\n        ...node,\n        policyNames: policyNames({ policies: node?.policies, testResultProfiles: [] }),\n        rulesPassed: profilesRulesPassed(node.testResultProfiles).length,\n        rulesFailed: profilesRulesFailed(node.testResultProfiles).length,\n        lastScanned: lastScanned(node),\n        compliant: compliant(node),\n        display_name: node.name, // eslint-disable-line camelcase\n        score: score(node),\n        supported: supported(node),\n        ssgVersion: profilesSsgVersions(node),\n        detailsLink: detailsLink(node)\n    }))\n);\n\nconst selectRowsByIds = (state, ids) => {\n    const rowsToSelect = state.rows.filter((row) => (\n        ids.includes(row.id) && !(state.selectedEntities || []).map((e) => (e.id)).includes(row.id)\n    ));\n\n    return {\n        ...state,\n        selectedEntities: (state.selectedEntities || []).concat(rowsToSelect)\n    };\n};\n\nconst deselectRowsByIds = (state, ids) => ({\n    ...state,\n    selectedEntities: (state.selectedEntities || []).filter((row) => !ids.includes(row.id))\n});\n\nconst selectAllRows = (state) => (\n    selectRowsByIds(state, state.rows.map((row) => (row.id)))\n);\n\nconst deselectAllRows = (state) => (\n    deselectRowsByIds(state, state.rows.map((row) => (row.id)))\n);\n\nconst selectRow = (state, id) => (\n    selectRowsByIds(state, [id])\n);\n\nconst deselectRow = (state, id) => (\n    deselectRowsByIds(state, [id])\n);\n\nexport const systemsReducer = (INVENTORY_ACTION, columns) => applyReducerHash({\n    ['GET_SYSTEMS_PENDING']: (state) => ({\n        ...state,\n        rows: [],\n        systems: undefined,\n        systemsCount: undefined,\n        columns,\n        loaded: false\n    }),\n    ['GET_SYSTEMS_FULFILLED']: (state, { systems, systemsCount }) => ({\n        ...state,\n        systems,\n        systemsCount,\n        total: systemsCount,\n        rows: systemsToRows(systems).map((row) => ({\n            ...row, selected: isSelected(row.id, state.selectedEntities)\n        })),\n        columns,\n        loaded: true\n    }),\n    [INVENTORY_ACTION.LOAD_ENTITIES_PENDING]: (state) => ({\n        ...state,\n        total: state.systemsCount,\n        rows: state.systems !== undefined ? systemsToRows(state.systems).map((row) => ({\n            ...row, selected: isSelected(row.id, state.selectedEntities)\n        })) : [],\n        columns,\n        loaded: state.systemsCount !== undefined\n    }),\n    [INVENTORY_ACTION.LOAD_ENTITIES_FULFILLED]: (state) => ({\n        ...state,\n        total: state.systemsCount,\n        rows: state.systems !== undefined ? systemsToRows(state.systems).map((row) => ({\n            ...row, selected: isSelected(row.id, state.selectedEntities)\n        })) : [],\n        columns,\n        loaded: state.systemsCount !== undefined\n    }),\n    [SELECT_ENTITY]: (state, { payload: { id, selected, clearAll } }) => {\n        let newState;\n\n        if (id === 0) {\n            newState = selected ? selectAllRows(state) : deselectAllRows(state);\n        } else {\n            newState = selected ? selectRow(state, id) : deselectRow(state, id);\n        }\n\n        if (newState.selectedEntities.length === 0 || clearAll) {\n            newState.selectedEntities = undefined;\n        }\n\n        return newState;\n    },\n    ['SELECT_ENTITIES']: (state, { payload: { ids } }) => ({\n        selectedEntities: ids\n    })\n});\n\nexport const entitiesReducer = (INVENTORY_ACTION, columns, showAllSystems) => applyReducerHash(\n    {\n        ['UPDATE_SYSTEMS']: (state, { systems, systemsCount }) => ({\n            ...state,\n            systems,\n            systemsCount\n        }),\n        ['UPDATE_ROWS']: (state) => ({\n            ...state,\n            loaded: true,\n            rows: systemsToInventoryEntities(\n                state.systems || [],\n                state.rows || [],\n                showAllSystems,\n                state.selectedEntities\n            )\n        }),\n        [INVENTORY_ACTION.LOAD_ENTITIES_FULFILLED]: (state) => ({\n            ...state,\n            rows: systemsToInventoryEntities(\n                state.systems || [],\n                state.rows,\n                showAllSystems,\n                state.selectedEntities\n            ),\n            total: !showAllSystems ? state.systemsCount : state.total,\n            columns: state.total > 0 ? columns : [{ title: '' }]\n        }),\n        [EXPORT]: (state, { payload: { format } }) => {\n            exportFromState(state, format);\n            return state;\n        },\n        [SELECT_ENTITY]: (state, { payload: { id, selected, clearAll } }) => {\n            let newState;\n\n            if (id === 0) {\n                newState = selected ? selectAllRows(state) : deselectAllRows(state);\n            } else {\n                newState = selected ? selectRow(state, id) : deselectRow(state, id);\n            }\n\n            if (newState.selectedEntities.length === 0 || clearAll) {\n                newState.selectedEntities = undefined;\n            }\n\n            return newState;\n        },\n        ['SELECT_ENTITIES']: (state, { payload: { ids } }) => ({\n            selectedEntities: ids\n        })\n    }\n);\n"],"sourceRoot":""}