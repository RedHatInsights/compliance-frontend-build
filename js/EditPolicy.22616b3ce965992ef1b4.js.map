{"version":3,"sources":["webpack://compliance-frontend/./src/SmartComponents/ComplianceSystems/ComplianceSystems.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/EditPolicyRules.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack://compliance-frontend/./src/SmartComponents/EditPolicy/EditPolicyDetailsTab.js","webpack://compliance-frontend/./src/SmartComponents/EditPolicy/EditPolicy.js","webpack://compliance-frontend/./src/SmartComponents/EditPolicy/usePolicyUpdate.js","webpack://compliance-frontend/./src/SmartComponents/SystemsTable/Cells.js","webpack://compliance-frontend/./src/SmartComponents/SystemsTable/SystemsTable.js","webpack://compliance-frontend/./src/SmartComponents/SystemsTable/constants.js","webpack://compliance-frontend/./src/SmartComponents/InventoryDetails/InventoryDetails.js","webpack://compliance-frontend/./src/SmartComponents/SystemsTable/InventoryTable.js","webpack://compliance-frontend/./src/Utilities/Export.js","webpack://compliance-frontend/./src/Utilities/ruleHelpers.js","webpack://compliance-frontend/./src/store/ActionTypes.js","webpack://compliance-frontend/./src/store/Reducers/SystemStore.js"],"names":["QUERY","gql","ComplianceSystems","newInventory","useFeature","useQuery","data","error","loading","dispatch","useDispatch","columns","key","title","props","width","isStatic","renderFunc","systemName","policyNames","policiesCell","id","detailsLink","testResultProfiles","policies","profiles","edges","map","node","useLayoutEffect","type","payload","ids","InvComponent","InventoryTable","SystemsTable","className","stateValues","stateKey","query","GET_SYSTEMS","defaultFilter","systemProps","isFullView","showOsFilter","showComplianceSystemsInfo","enableEditPolicy","remediationsEnabled","BENCHMARKS_AND_PROFILES","CreateSCAPPolicy","change","selectedBenchmarkId","fetchPolicy","Spinner","selectedBenchmark","validProfiles","benchmark","benchmarks","latestBenchmarks","find","userProfileRefIds","filter","profile","refId","disabled","includes","TextContent","Text","component","TextVariants","Form","FormGroup","label","isRequired","fieldId","sort","a","b","localeCompare","osMajorVersion","Button","onClick","setBenchmark","variant","version","Tooltip","position","TooltipPosition","content","propTypes","reduxFormPropTypes","selector","formValueSelector","compose","connect","state","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","EditPolicyRules","ruleIds","filteredRules","profileId","benchmarkId","osMinorVersionCounts","selectedRuleRefIds","multiversionRules","selectRulesTableColumns","variables","useState","defaultSelection","setDefaultSelection","profileRules","name","rules","useEffect","rule","EmptyTable","length","ruleId","isInline","osMinorVersion","count","join","SystemRulesTable","tailoringEnabled","selectedFilter","handleSelect","selectedRefIds","JSON","parse","EditPolicySystems","selectedSystemIds","InvCmp","compact","showActions","GET_SYSTEMS_WITHOUT_FAILED_RULES","enableExport","defaultProps","countOsMinorVersions","entities","selectedEntities","e","EditPolicyDetails","policy","Field","ReduxFormTextInput","aria-describedby","isDisabled","ReduxFormTextArea","defaultValue","businessObjective","showTitle","previousThreshold","complianceThreshold","initialValues","description","REVIEW","ReviewCreatedPolicy","systemsCount","rulesCount","parentProfileName","TextList","TextListVariants","TextListItem","TextListItemVariants","parseFloat","FinishedCreatePolicy","percent","message","errors","failed","cloneFromProfileId","client","input","mutate","mutation","CREATE_BUSINESS_OBJECTIVE","businessObjectiveIdResult","businessObjectiveId","createBusinessObjective","CREATE_PROFILE","systemIds","ASSOCIATE_SYSTEMS_TO_PROFILES","then","setState","prevState","catch","networkError","result","this","createProfile","associateSystems","listErrors","onWizardFinish","Array","isArray","ListItem","Bullseye","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","WrenchIcon","Title","headingLevel","size","EmptyStateBody","List","EmptyStateSecondaryActions","React","withApollo","CreatePolicy","history","useHistory","stepIdReached","setStepIdReached","onClose","push","steps","enableNext","validateBenchmarkPage","canJumpTo","validateDetailsPage","validateRulesPage","nextButtonText","isFinishedStep","Wizard","isOpen","onNext","EditPolicyDetailsTab","setUpdatedPolicy","validThreshold","setValidThreshold","threshold","valid","thresholdValid","useThresholdValidate","validateThreshold","TextArea","style","height","onChange","value","TextInput","validated","helperTextInvalid","helperText","complianceThresholdValid","EditPolicy","create","updateProfile","route","location","useLocation","anchor","useAnchor","updatedPolicy","updatePolicy","useMutation","newBusinessObjective","UPDATE_PROFILE","updatePolicyInput","hosts","h","linkToBackground","useLinkToBackground","useSelector","saveEnabled","linkToBackgroundWithHash","hash","actions","useTitleEntity","Modal","defaultTab","Tab","eventKey","TabTitleText","policyId","majorOsVersion","displayName","extra","lastScanned","preselectedSystems","SSGVersion","supported","ssgVersion","messageVariant","initFilterState","filterConfig","initialDefaultState","initialState","page","policyFilter","osFilter","systemsPolicyFilterConfiguration","systemsOsFilterConfiguration","registry","FilterConfigBuilder","DEFAULT_SYSTEMS_FILTER_CONFIGURATION","compliantFilter","COMPLIANT_SYSTEMS_FILTER_CONFIGURATION","getChipBuilder","getFilterBuilder","perPage","totalCount","activeFilters","clearAll","Promise","resolve","selectEntities","updateSystems","prevProps","per_page","options","showAllSystems","inventory","current","onRefreshData","showOnlySystemsWithTestResults","filterBuilder","buildFilterString","fetchResults","prevSystems","systems","s","fetchSystems","items","newSystems","stringify","updateRows","_","format","exportFromState","selectedValues","chips","removeFilterWithChip","_event","clearAllFilter","deleteFilter","selectAll","clearSelection","allSelectedOnPage","total","noError","selectedEntitiesIds","buildConfiguration","onFilterUpdate","hideLabel","filterChips","chipBuilder","chipsFor","exportConfig","isExportDisabled","onSelect","onExportSelect","inventoryTableProps","onRefresh","ref","tableProps","canSelectAll","bulkSelect","checked","onBulkSelect","undefined","_index","beta","window","pathname","split","href","origin","edge","activeFiltersConfig","filters","onDelete","onFilterDelete","TableVariant","Object","keys","rows","cells","hasItems","hasCheckbox","dedicatedAction","ComplianceRemediationButton","allSystems","systemsWithRuleObjectsFailed","selectedRules","Alert","fallback","SkeletonTable","colSize","rowSize","onLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","getRegistry","register","entitiesReducer","clearInventoryFilter","ConnectedSystemsTable","memo","SystemsTableWithApollo","row","args","SELECT_ENTITY","InventoryDetails","registryDecorator","DetailWrapper","mergeWithDetail","InventoryDetail","Skeleton","SkeletonSize","hideBack","entity","store","useStore","useRef","pagination","setPagination","isLoaded","setIsLoaded","useFilterConfig","conditionalFilter","system","shallowEqual","filterString","combindedFilter","debounceFetchSystems","useCallback","debounce","systemsReducer","callback","every","selected","isSelected","getState","PropTypes","getNestedObject","nestedObj","path","reduce","obj","textCsvCell","cell","exportValue","csvRows","column","concat","noExport","encodeURI","csvFromState","object","forEach","jsonFromState","filename","link","document","createElement","setAttribute","dispatchEvent","MouseEvent","bubbles","cancelable","view","linkAndDownload","CSV_FILE_PREFIX","Date","toISOString","profilesRulesFailed","flatMap","compliant","profilesRulesPassed","systemRulesFailed","ruleObjectsFailed","EXPORT","NEVER","dates","last","Math","max","apply","date","isFinite","score","scoreTotal","acc","numScored","lines","Link","to","hasOsInfo","matchingSystem","displayNameCell","display_name","profilesSsgVersions","p","counted","values","sortingByProp","systemsToInventoryEntities","facts","rulesPassed","rulesFailed","account","bios_uuid","created","fqdn","insights_id","ip_addresses","mac_addresses","rhel_machine_id","satellite_id","subscription_manager_id","tags","updated","hostname","machine_id","release","compliance","details_link","rules_passed","rules_failed","hidePassed","rules_failed_text","compliance_score","complianceScore","compliance_score_text","complianceScoreString","last_scanned","last_scanned_text","ssg_version","systemsToRows","selectRowsByIds","rowsToSelect","deselectRowsByIds","selectAllRows","deselectAllRows","selectRow","deselectRow","INVENTORY_ACTION","applyReducerHash","loaded","LOAD_ENTITIES_PENDING","LOAD_ENTITIES_FULFILLED","newState"],"mappings":"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","file":"js/EditPolicy.22616b3ce965992ef1b4.js","sourcesContent":["/* eslint-disable react/display-name */\nimport React, { useLayoutEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport { InventoryTable, SystemsTable } from 'SmartComponents';\nimport { GET_SYSTEMS } from '../SystemsTable/constants';\nimport { systemName, detailsLink, policiesCell } from 'Store/Reducers/SystemStore';\nimport useFeature from 'Utilities/hooks/useFeature';\n\nconst QUERY = gql`\n{\n    profiles(search: \"external = false and canonical = false\") {\n        edges {\n            node {\n                id\n                name\n                refId\n                majorOsVersion\n            }\n        }\n    }\n}\n`;\n\nconst DEFAULT_FILTER = 'has_test_results = true or has_policy = true';\n\nexport const ComplianceSystems = () => {\n    const newInventory = useFeature('newInventory');\n    const { data, error, loading } = useQuery(QUERY);\n    const dispatch = useDispatch();\n    const columns = [{\n        key: 'facts.compliance.display_name',\n        title: 'Name',\n        props: {\n            width: 40, isStatic: true\n        },\n        ...newInventory && {\n            key: 'display_name',\n            renderFunc: systemName\n        }\n    }, {\n        key: 'facts.compliance.policies',\n        title: 'Policies',\n        props: {\n            width: 40, isStatic: true\n        },\n        ...newInventory && {\n            key: 'policyNames',\n            renderFunc: (policyNames) => {\n                const { title } = policiesCell({ policyNames }) || { title: '' };\n                return title;\n            }\n        }\n    }, {\n        key: 'facts.compliance.details_link',\n        title: '',\n        props: {\n            width: 20, isStatic: true\n        },\n        ...newInventory && {\n            key: 'testResultProfiles',\n            renderFunc: (data, id) => {\n                const { title } = detailsLink({ testResultProfiles: data, id }) || { title: '' };\n                return title;\n            }\n        }\n    }];\n    const policies = data?.profiles?.edges.map(({ node }) => node);\n\n    useLayoutEffect(() => { dispatch({ type: 'SELECT_ENTITIES', payload: { ids: [] } }); }, []);\n\n    const InvComponent = newInventory ? InventoryTable : SystemsTable;\n\n    return (\n        <React.Fragment>\n            <PageHeader className='page-header'>\n                <PageHeaderTitle title=\"Systems\" />\n            </PageHeader>\n            <Main>\n                <StateViewWithError stateValues={ { error, data, loading } }>\n                    <StateViewPart stateKey=\"data\">\n                        { policies && <InvComponent\n                            query={GET_SYSTEMS}\n                            defaultFilter={ DEFAULT_FILTER }\n                            systemProps={{\n                                isFullView: true\n                            }}\n                            showOsFilter\n                            showComplianceSystemsInfo\n                            enableEditPolicy={ false }\n                            remediationsEnabled={ false }\n                            columns={ columns }\n                            policies={ policies } /> }\n                    </StateViewPart>\n                </StateViewWithError>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default ComplianceSystems;\n","import React from 'react';\nimport {\n    Button,\n    Form,\n    FormGroup,\n    Text,\n    TextContent,\n    TextVariants,\n    Tooltip,\n    TooltipPosition\n} from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { ProfileTypeSelect } from 'PresentationalComponents';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { propTypes as reduxFormPropTypes, formValueSelector, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\n\nconst BENCHMARKS_AND_PROFILES = gql`\nquery benchmarksAndProfiles {\n    latestBenchmarks {\n        id\n        title\n        refId\n        version\n        osMajorVersion\n        profiles {\n            id\n            name\n            refId\n            description\n            complianceThreshold\n        }\n    }\n    profiles(search: \"external = false and canonical = false\") {\n        edges {\n            node {\n                id\n                refId\n                benchmark {\n                    refId\n                }\n            }\n        }\n    }\n}\n`;\n\nconst CreateSCAPPolicy = ({ change, selectedBenchmarkId }) => {\n    const { data, error, loading } = useQuery(BENCHMARKS_AND_PROFILES, { fetchPolicy: 'no-cache' });\n\n    const inUseProfileRefIds = (profiles, benchmark) => (\n        profiles.filter(profile => benchmark.refId === profile.node.benchmark.refId).map(profile => profile.node.refId)\n    );\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const benchmarks = data.latestBenchmarks;\n    let selectedBenchmark;\n    let validProfiles;\n    if (selectedBenchmarkId) {\n        selectedBenchmark = benchmarks.find(benchmark => benchmark.id === selectedBenchmarkId);\n        const userProfileRefIds = inUseProfileRefIds(data.profiles.edges, selectedBenchmark);\n        validProfiles = selectedBenchmark.profiles.map((profile) => ({\n            ...profile,\n            disabled: userProfileRefIds.includes(profile.refId)\n        }));\n    }\n\n    const setBenchmark = ({ id, osMajorVersion }) => {\n        change('benchmark', id);\n        change('osMajorVersion', osMajorVersion);\n    };\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Create SCAP policy\n                </Text>\n                <Text component={TextVariants.h4}>\n                    Select the operating system and policy type\n                </Text>\n            </TextContent>\n            <Form>\n                <FormGroup\n                    label=\"Operating system\"\n                    isRequired\n                    fieldId=\"benchmark\">\n                    <br/>\n                    { benchmarks && benchmarks.sort((a, b) => a.refId.localeCompare(b.refId)).map((benchmark) => {\n                        const { id, osMajorVersion } = benchmark;\n                        return (\n                            <Button key={id} onClick={ () => setBenchmark(benchmark) }\n                                className={`wizard-os-button ${selectedBenchmarkId === id ? 'active-wizard-os-button' : ''}`}\n                                variant=\"tertiary\">\n                                { `RHEL ${osMajorVersion}` }\n                            </Button>\n                        );\n                    })}\n                </FormGroup>\n                { selectedBenchmark &&\n                <Text component={TextVariants.small}>\n                    SCAP Security Guide (SSG): { selectedBenchmark.title } - { selectedBenchmark.version }\n                    <Tooltip position={TooltipPosition.right} content={`Policies configured in the Compliance services use\n                                                                        the latest version of the SSG packaged with RHEL.`}\n                    >\n                        <span>&nbsp;<OutlinedQuestionCircleIcon className='grey-icon'/></span>\n                    </Tooltip>\n                </Text>\n                }\n                <FormGroup label=\"Policy type\" isRequired fieldId=\"policy-type\">\n                    <ProfileTypeSelect\n                        profiles={selectedBenchmark && validProfiles }\n                        onClick={ () => {\n                            change('selectedRuleRefIds', null);\n                        }}/>\n                </FormGroup>\n            </Form>\n        </React.Fragment>\n    );\n};\n\nCreateSCAPPolicy.propTypes = {\n    selectedBenchmarkId: propTypes.string,\n    change: reduxFormPropTypes.change\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            selectedBenchmarkId: selector(state, 'benchmark')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(CreateSCAPPolicy);\n","import React, { useEffect, useState } from 'react';\nimport { propTypes as reduxFormPropTypes, formValueSelector, reduxForm } from 'redux-form';\nimport SystemRulesTable, {\n    selectColumns as selectRulesTableColumns\n} from '@redhat-cloud-services/frontend-components-inventory-compliance/SystemRulesTable';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { Button, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport {\n    StateViewWithError, StateViewPart\n} from 'PresentationalComponents';\nimport useFeature from 'Utilities/hooks/useFeature';\n\nconst QUERY = gql`\nquery benchmarkAndProfile($benchmarkId: String!, $profileId: String!){\n    benchmark(id: $benchmarkId) {\n        id\n        rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n        }\n    }\n    profile(id: $profileId) {\n        id\n        name\n        refId\n        rules {\n            id\n            refId\n        }\n    }\n}\n`;\n\nexport const EditPolicyRules = ({ profileId, benchmarkId, osMajorVersion, osMinorVersionCounts, selectedRuleRefIds, change }) => {\n    const multiversionRules = useFeature('multiversionTabs');\n    const columns = selectRulesTableColumns(['Name', 'Severity', 'Ansible']);\n    const { data, error, loading } = useQuery(QUERY, { variables: { profileId, benchmarkId } });\n    const [defaultSelection, setDefaultSelection] = useState(null);\n    const profileRules = data && [{\n        profile: { refId: data.profile.refId, name: data.profile.name },\n        rules: data.benchmark.rules\n    }];\n    const resetToDefaultSelection = () => (\n        change('selectedRuleRefIds', defaultSelection)\n    );\n    const isDefaultSelection = (ruleIds) => {\n        const filteredRules = ruleIds?.filter((ruleId) => (defaultSelection?.includes(ruleId)));\n        return ruleIds && defaultSelection && filteredRules.length === defaultSelection.length;\n    };\n\n    useEffect(() => {\n        if (data) {\n            const ruleIds = data.profile.rules.map((rule) => rule.refId);\n            setDefaultSelection(ruleIds);\n            if (!selectedRuleRefIds) {\n                change('selectedRuleRefIds', ruleIds);\n            }\n        }\n    }, [data, change, selectedRuleRefIds]);\n\n    return <StateViewWithError stateValues={ { error, data, loading } }>\n        <StateViewPart stateKey=\"loading\">\n            <EmptyTable><Spinner/></EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Rules\n                </Text>\n            </TextContent>\n            <TextContent>\n                <Text>\n                    Edit your policy by including and excluding rules.\n                </Text>\n                <Text>\n                    Selected policy type <strong>{ data?.profile.name }</strong> has { defaultSelection?.length } rules.&ensp;\n                    { selectedRuleRefIds && !isDefaultSelection(selectedRuleRefIds) &&\n                        <Button variant=\"link\" isInline onClick={ () => resetToDefaultSelection() }>\n                          Reset to default selection\n                        </Button>\n                    }\n                </Text>\n                { multiversionRules && osMinorVersionCounts && osMinorVersionCounts.length > 0 &&\n                    <Text>\n                        Tailoring for{' '}\n                        { osMinorVersionCounts.map(({ osMinorVersion, count }) =>\n                            `RHEL ${osMajorVersion}.${osMinorVersion} (${count} systems)`).join(', ') }\n                    </Text>\n                }\n            </TextContent>\n            <SystemRulesTable\n                remediationsEnabled={ false }\n                tailoringEnabled\n                selectedFilter\n                columns={ columns }\n                loading={ loading }\n                handleSelect={ (selectedRuleRefIds) => change('selectedRuleRefIds', selectedRuleRefIds) }\n                profileRules={ profileRules }\n                selectedRefIds={ selectedRuleRefIds || [] }\n            />\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nEditPolicyRules.propTypes = {\n    profileId: propTypes.string,\n    benchmarkId: propTypes.string,\n    change: reduxFormPropTypes.change,\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    selectedRuleRefIds: propTypes.array\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            benchmarkId: selector(state, 'benchmark'),\n            profileId: JSON.parse(selector(state, 'profile')).id,\n            osMajorVersion: selector(state, 'osMajorVersion'),\n            osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n            selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyRules);\n","import React, { useEffect } from 'react';\nimport { propTypes as reduxFormPropTypes, reduxForm, formValueSelector } from 'redux-form';\nimport { Form, FormGroup, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { InventoryTable, SystemsTable } from 'SmartComponents';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport { systemName, countOsMinorVersions } from 'Store/Reducers/SystemStore';\n\nconst EditPolicySystems = ({ change, osMajorVersion, osMinorVersionCounts, selectedSystemIds }) => {\n    const newInventory = useFeature('newInventory');\n    const columns = [{\n        key: 'facts.compliance.display_name',\n        title: 'Name',\n        props: {\n            width: 40, isStatic: true\n        },\n        ...newInventory && {\n            key: 'display_name',\n            renderFunc: systemName\n        }\n    }, {\n        key: 'facts.compliance.policies',\n        title: 'Policies',\n        props: {\n            width: 40, isStatic: true\n        },\n        ...newInventory && {\n            key: 'policies'\n        }\n    }];\n\n    useEffect(() => {\n        if (selectedSystemIds) {\n            change('systems', selectedSystemIds);\n        }\n\n        if (osMinorVersionCounts) {\n            change('osMinorVersionCounts', osMinorVersionCounts);\n        }\n    }, [selectedSystemIds, osMinorVersionCounts, change]);\n\n    const InvCmp = newInventory ? InventoryTable : SystemsTable;\n\n    return (\n        <React.Fragment>\n            <TextContent className=\"pf-u-mb-md\">\n                <Text component={TextVariants.h1}>\n                    Systems\n                </Text>\n                <Text>\n                    Select which of your <b>RHEL { osMajorVersion }</b> systems should be included\n                    in this policy.<br />\n                    Systems can be added or removed at any time.\n                </Text>\n            </TextContent>\n            <Form>\n                <FormGroup>\n                    <InvCmp\n                        columns={columns}\n                        remediationsEnabled={false}\n                        compact\n                        showActions={ false }\n                        query={ GET_SYSTEMS_WITHOUT_FAILED_RULES }\n                        defaultFilter={ osMajorVersion && `os_major_version = ${osMajorVersion}` }\n                        enableExport={ false }/>\n                </FormGroup>\n            </Form>\n        </React.Fragment>\n    );\n};\n\nEditPolicySystems.propTypes = {\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    selectedSystemIds: propTypes.array,\n    change: reduxFormPropTypes.change\n};\n\nEditPolicySystems.defaultProps = {\n    selectedSystemIds: [],\n    osMinorVersionCounts: []\n};\n\nconst selector = formValueSelector('policyForm');\nconst mapStateToProps = (state) => ({\n    osMajorVersion: selector(state, 'osMajorVersion'),\n    osMinorVersionCounts: countOsMinorVersions(state.entities?.selectedEntities),\n    selectedSystemIds: (state.entities?.selectedEntities || []).map((e) => (e.id))\n});\n\nexport default compose(\n    connect(mapStateToProps),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicySystems);\n","import React from 'react';\nimport { compose } from 'redux';\nimport { Field, reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Form, FormGroup, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { ReduxFormTextInput, ReduxFormTextArea } from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport { ProfileThresholdField } from 'PresentationalComponents';\n\nconst EditPolicyDetails = ({ profile: policy }) => {\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Details\n                </Text>\n            </TextContent>\n            <br/>\n            <Form id='editpolicydetails'>\n                <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n                    <Field\n                        component={ReduxFormTextInput}\n                        type='text'\n                        isRequired={true}\n                        id=\"name\"\n                        name=\"name\"\n                        aria-describedby=\"name\" />\n                </FormGroup>\n                <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextInput}\n                        isDisabled\n                        id=\"refId\"\n                        name=\"refId\"\n                        aria-describedby=\"refId\" />\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"description\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextArea}\n                        id=\"description\"\n                        name=\"description\"\n                        aria-describedby=\"description\" />\n                </FormGroup>\n                <FormGroup label=\"Business objective\" fieldId=\"businessObjective\">\n                    <Field\n                        type=\"text\"\n                        component={ ReduxFormTextInput }\n                        id=\"businessObjective\"\n                        name=\"businessObjective\"\n                        aria-describedby=\"businessObjective\"\n                        defaultValue={ policy.businessObjective } />\n                </FormGroup>\n                <ProfileThresholdField\n                    showTitle={ false }\n                    previousThreshold={ policy.complianceThreshold } />\n            </Form>\n        </React.Fragment>\n    );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n    profile: propTypes.object,\n    dispatch: propTypes.func\n};\n\nexport default compose(\n    connect(\n        state => ({\n            profile: JSON.parse(selector(state, 'profile')),\n            initialValues: {\n                name: `${JSON.parse(selector(state, 'profile')).name}`,\n                refId: `${JSON.parse(selector(state, 'profile')).refId}`,\n                description: `${JSON.parse(selector(state, 'profile')).description}`,\n                benchmark: selector(state, 'benchmark'),\n                osMajorVersion: selector(state, 'osMajorVersion'),\n                profile: selector(state, 'profile')\n            }\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyDetails);\n\nexport { EditPolicyDetails };\n","import React from 'react';\nimport {\n    Text,\n    TextVariants,\n    TextContent,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useQuery } from '@apollo/react-hooks';\nimport {\n    SystemsCountWarning\n} from 'PresentationalComponents';\n\nconst REVIEW = gql`\nquery review($benchmarkId: String!) {\n    benchmark(id: $benchmarkId) {\n        id\n        title\n        refId\n        osMajorVersion\n        version\n    }\n}\n`;\n\nconst ReviewCreatedPolicy = ({\n    benchmarkId, name, refId, businessObjective, systemsCount, rulesCount, complianceThreshold, parentProfileName\n}) => {\n    const { data, error, loading } = useQuery(REVIEW, { variables: { benchmarkId } });\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const benchmark = data.benchmark;\n\n    return (\n        <TextContent>\n            <Text component={TextVariants.h1}>\n                Review\n            </Text>\n            <Text component={TextVariants.h4}>\n                Review your policy before finishing.\n            </Text>\n            <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>Operating system</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                    { `RHEL ${benchmark.osMajorVersion}` }\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Security guide</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                    {` ${benchmark.title} - ${benchmark.version}`}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Policy type</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ parentProfileName }</TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Policy name</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ name }</TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Reference ID</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ refId }</TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Compliance threshold</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ complianceThreshold }%</TextListItem>\n                { businessObjective &&\n                    <React.Fragment>\n                        <TextListItem component={TextListItemVariants.dt}>Business objective</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{ businessObjective }</TextListItem>\n                    </React.Fragment>\n                }\n                <TextListItem component={TextListItemVariants.dt}>No. of rules</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ rulesCount }</TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>No. of systems</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                    { systemsCount > 0 ? systemsCount : <SystemsCountWarning variant=\"compact\" count={ systemsCount } /> }\n                </TextListItem>\n            </TextList>\n        </TextContent>\n    );\n};\n\nReviewCreatedPolicy.propTypes = {\n    benchmarkId: propTypes.string,\n    refId: propTypes.string,\n    name: propTypes.string,\n    businessObjective: propTypes.string,\n    systemsCount: propTypes.number,\n    rulesCount: propTypes.number,\n    complianceThreshold: propTypes.number,\n    parentProfileName: propTypes.string\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect(\n    state => ({\n        benchmarkId: selector(state, 'benchmark'),\n        refId: selector(state, 'refId'),\n        name: selector(state, 'name'),\n        businessObjective: selector(state, 'businessObjective'),\n        systemsCount: selector(state, 'systems').length,\n        complianceThreshold: parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n        parentProfileName: JSON.parse(selector(state, 'profile')).name,\n        rulesCount: selector(state, 'selectedRuleRefIds').length\n    })\n)(ReviewCreatedPolicy);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Title, Button, Bullseye, EmptyState, EmptyStateBody, EmptyStateSecondaryActions,\n    EmptyStateVariant, EmptyStateIcon, List, ListItem\n} from '@patternfly/react-core';\nimport { ProgressBar } from 'PresentationalComponents';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from '@apollo/react-hoc';\nimport {\n    CREATE_BUSINESS_OBJECTIVE, CREATE_PROFILE, ASSOCIATE_SYSTEMS_TO_PROFILES\n} from 'Utilities/graphql/mutations';\n\nclass FinishedCreatePolicy extends React.Component {\n    state = {\n        percent: 0,\n        message: 'This usually takes a minute or two.',\n        errors: null,\n        failed: false\n    };\n\n    componentDidMount() {\n        this.createProfile().then((result) => {\n            this.setState(prevState => ({\n                percent: prevState.percent + 50,\n                profileId: result.data.createProfile.profile.id\n            }), this.associateSystems);\n        }).catch((error) => {\n            this.setState({\n                message: error.networkError.message,\n                errors: error.networkError.result.errors,\n                failed: true\n            });\n        });\n    }\n\n    createProfile = async () => {\n        const {\n            businessObjective, benchmarkId, cloneFromProfileId, refId, name,\n            description, complianceThreshold, selectedRuleRefIds, client\n        } = this.props;\n        let input = {\n            benchmarkId,\n            cloneFromProfileId,\n            complianceThreshold,\n            description,\n            name,\n            refId,\n            selectedRuleRefIds\n        };\n\n        if (businessObjective) {\n            const businessObjectiveIdResult = await client.mutate({\n                mutation: CREATE_BUSINESS_OBJECTIVE,\n                variables: { input: { title: businessObjective } }\n            });\n            input.businessObjectiveId = businessObjectiveIdResult.data\n            .createBusinessObjective.businessObjective.id;\n        }\n\n        return client.mutate({\n            mutation: CREATE_PROFILE,\n            variables: {\n                input\n            }\n        });\n    }\n\n    associateSystems = () => {\n        const { systemIds, client } = this.props;\n        const { profileId: id } = this.state;\n        return client.mutate({\n            mutation: ASSOCIATE_SYSTEMS_TO_PROFILES,\n            variables: {\n                input: { id, systemIds }\n            }\n        }).then(() => {\n            this.setState(prevState => ({\n                percent: prevState.percent + 50,\n                message: ''\n            }));\n        }).catch((error) => {\n            this.setState({\n                message: error.networkError.message,\n                errors: error.networkError.result.errors,\n                failed: true\n            });\n        });;\n    }\n\n    render() {\n        const { percent, message, failed, errors } = this.state;\n        const { onWizardFinish } = this.props;\n\n        let listErrors;\n        if (errors && Array.isArray(errors) && errors.length > 0) {\n            listErrors = errors.map((error) => (\n                <ListItem key={ error }>{ error }</ListItem>\n            ));\n        }\n\n        return (\n            <Bullseye>\n                <EmptyState variant={EmptyStateVariant.full}>\n                    <EmptyStateIcon icon={WrenchIcon} />\n                    <br/>\n                    <Title headingLevel=\"h1\" size='lg'>\n                        Creating policy\n                    </Title>\n                    <EmptyStateBody>\n                        <ProgressBar percent={percent} failed={failed} />\n                    </EmptyStateBody>\n                    <EmptyStateBody className={failed && 'wizard-failed-message'}>\n                        { message }\n                    </EmptyStateBody>\n                    { listErrors &&\n                        <EmptyStateBody className='wizard-failed-errors'>\n                            <List>{ listErrors }</List>\n                        </EmptyStateBody>\n                    }\n                    <EmptyStateSecondaryActions>\n                        { percent === 100 ?\n                            <Button\n                                variant={'primary'}\n                                onClick={() => { onWizardFinish(); }}\n                            >\n                                Return to application\n                            </Button> :\n                            '' }\n                    </EmptyStateSecondaryActions>\n                </EmptyState>\n            </Bullseye>\n        );\n    }\n}\n\nFinishedCreatePolicy.propTypes = {\n    benchmarkId: propTypes.string.isRequired,\n    client: propTypes.object.isRequired,\n    businessObjective: propTypes.object,\n    cloneFromProfileId: propTypes.string.isRequired,\n    refId: propTypes.string.isRequired,\n    name: propTypes.string.isRequired,\n    description: propTypes.string,\n    systemIds: propTypes.array,\n    complianceThreshold: propTypes.number,\n    onWizardFinish: propTypes.func,\n    selectedRuleRefIds: propTypes.arrayOf(propTypes.string).isRequired\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            benchmarkId: selector(state, 'benchmark'),\n            businessObjective: selector(state, 'businessObjective'),\n            cloneFromProfileId: JSON.parse(selector(state, 'profile')).id,\n            refId: selector(state, 'refId'),\n            name: selector(state, 'name'),\n            description: selector(state, 'description'),\n            complianceThreshold: parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n            systemIds: selector(state, 'systems'),\n            selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: true,\n        forceUnregisterOnUnmount: true\n    }),\n    withApollo\n)(FinishedCreatePolicy);\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport EditPolicyRules from './EditPolicyRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport { validateBenchmarkPage, validateDetailsPage, validateRulesPage } from './validate';\n\nexport const CreatePolicy = ({\n    benchmark, osMajorVersion, complianceThreshold, name, profile, refId, selectedRuleRefIds\n}) => {\n    const history = useHistory();\n    const [stepIdReached, setStepIdReached] = useState(1);\n    const onNext = ({ id }) => {\n        setStepIdReached(stepIdReached < id ? id : stepIdReached);\n    };\n\n    const onClose = () => {\n        history.push('/scappolicies');\n    };\n\n    const steps = [\n        {\n            id: 1,\n            name: 'Create SCAP policy',\n            component: <CreateSCAPPolicy/>,\n            enableNext: validateBenchmarkPage(benchmark, osMajorVersion, profile)\n        },\n        {\n            id: 2,\n            name: 'Details',\n            component: <EditPolicyDetails/>,\n            canJumpTo: stepIdReached >= 2,\n            enableNext: validateDetailsPage(name, refId, complianceThreshold)\n        },\n        {\n            id: 3,\n            name: 'Systems',\n            component: <EditPolicySystems/>,\n            canJumpTo: stepIdReached >= 3\n        },\n        {\n            id: 4,\n            name: 'Rules',\n            component: <EditPolicyRules/>,\n            canJumpTo: stepIdReached >= 4,\n            enableNext: validateRulesPage(selectedRuleRefIds)\n        },\n        {\n            id: 5,\n            name: 'Review',\n            component: <ReviewCreatedPolicy/>,\n            nextButtonText: 'Finish',\n            canJumpTo: stepIdReached >= 5\n        },\n        {\n            id: 6,\n            name: 'Finished',\n            component: <FinishedCreatePolicy onWizardFinish={ onClose } />,\n            isFinishedStep: true,\n            canJumpTo: stepIdReached >= 6\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <Wizard\n                isOpen\n                onClose={ onClose }\n                title=\"Create SCAP policy\"\n                description=\"Create a new policy for managing SCAP compliance\"\n                steps={ steps }\n                onNext={ onNext }\n            />\n        </React.Fragment>\n    );\n};\n\nCreatePolicy.propTypes = {\n    benchmark: propTypes.string,\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    complianceThreshold: propTypes.string,\n    businessObjective: propTypes.object,\n    dispatch: propTypes.func,\n    isOpen: propTypes.bool,\n    name: propTypes.string,\n    onWizardFinish: propTypes.func,\n    profile: propTypes.string,\n    refId: propTypes.string,\n    selectedRuleRefIds: propTypes.arrayOf(propTypes.string)\n};\n\nCreatePolicy.defaultProps = {\n    isOpen: false\n};\n\nconst selector = formValueSelector('policyForm');\nexport default connect(\n    state => ({\n        benchmark: selector(state, 'benchmark'),\n        osMajorVersion: selector(state, 'osMajorVersion'),\n        osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n        businessObjective: selector(state, 'businessObjective'),\n        complianceThreshold: selector(state, 'complianceThreshold') || 100.0,\n        name: selector(state, 'name'),\n        profile: selector(state, 'profile'),\n        refId: selector(state, 'refId'),\n        selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n    })\n)(CreatePolicy);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    FormGroup, TextArea, TextInput\n} from '@patternfly/react-core';\nimport { thresholdValid } from '../CreatePolicy/validate';\n\nexport const useThresholdValidate = () => {\n    const [validThreshold, setValidThreshold] = useState(true);\n    return [validThreshold, (threshold) => {\n        const valid = thresholdValid(threshold);\n        setValidThreshold(valid);\n        return valid;\n    }];\n};\n\nconst EditPolicyDetailsTab = ({ policy, setUpdatedPolicy }) => {\n    const [validThreshold, validateThreshold] = useThresholdValidate();\n\n    return <React.Fragment>\n        <FormGroup label=\"Policy description\" isRequired fieldId=\"description\">\n            <TextArea\n                style={ { width: 800, height: 110 } }\n                isRequired\n                type=\"text\"\n                id=\"description\"\n                name=\"description\"\n                aria-describedby=\"description\"\n                defaultValue={ policy.description }\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) => ({\n                        ...policy,\n                        description: value\n                    }));\n                }} />\n        </FormGroup>\n\n        <FormGroup label=\"Business objective\" fieldId=\"business-objective\">\n            <TextInput\n                type=\"text\"\n                style={ { width: 300 } }\n                id=\"business-objective\"\n                name=\"business-objective\"\n                aria-describedby=\"business-objective\"\n                defaultValue={ policy?.businessObjective?.title }\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) =>({\n                        ...policy,\n                        businessObjective: {\n                            ...policy.businessObjective,\n                            title: value\n                        }\n                    }));\n                }} />\n        </FormGroup>\n\n        <FormGroup\n            validated={ validThreshold ? 'default' : 'error' }\n            label='Compliance threshold (%)'\n            fieldId='policy-threshold'\n            helperTextInvalid='Threshold has to be a number between 0 and 100'\n            helperText='A value of 95% or higher is recommended'>\n            <TextInput\n                type='number'\n                style={ { width: 150 } }\n                name='compliance-threshold'\n                id='compliance-threshold'\n                defaultValue={ policy.complianceThreshold }\n                aria-describedby=\"policy-threshold\"\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) =>({\n                        ...policy,\n                        complianceThreshold: value,\n                        complianceThresholdValid: validateThreshold(value)\n                    }));\n                }} />\n        </FormGroup>\n    </React.Fragment>;\n};\n\nEditPolicyDetailsTab.propTypes = {\n    policy: propTypes.shape({\n        description: propTypes.string,\n        businessObjective: propTypes.object,\n        complianceThreshold: propTypes.oneOfType([\n            propTypes.string,\n            propTypes.number\n        ])\n    }),\n    setUpdatedPolicy: propTypes.func\n};\n\nexport default EditPolicyDetailsTab;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button, Form, Modal, Tab, TabTitleText } from '@patternfly/react-core';\nimport { RoutedTabs } from 'PresentationalComponents';\nimport { InventoryTable, SystemsTable } from 'SmartComponents';\nimport { useLinkToBackground, useAnchor } from 'Utilities/Router';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport EditPolicyDetailsTab from './EditPolicyDetailsTab';\nimport usePolicyUpdate from './usePolicyUpdate';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport { systemName } from 'Store/Reducers/SystemStore';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\n\nexport const EditPolicy = ({ route }) => {\n    const newInventory = useFeature('newInventory');\n    const location = useLocation();\n    const dispatch = useDispatch();\n    const policy = location?.state?.policy;\n    const anchor = useAnchor();\n    const [updatedPolicy, setUpdatedPolicy] = useState(null);\n    const updatePolicy = usePolicyUpdate();\n    const linkToBackground = useLinkToBackground('/scappolicies');\n    const selectedEntities = useSelector((state) => (state?.entities?.selectedEntities));\n    const saveEnabled = updatedPolicy && !updatedPolicy.complianceThresholdValid;\n\n    const linkToBackgroundWithHash = () => {\n        newInventory && dispatch({\n            type: 'SELECT_ENTITIES',\n            payload: { ids: [] }\n        });\n        linkToBackground({ hash: anchor });\n    };\n\n    const actions = [\n        <Button\n            isDisabled={ saveEnabled }\n            key='save'\n            variant='primary'\n            onClick={ () => (\n                updatePolicy(policy, updatedPolicy).then(() => linkToBackgroundWithHash())\n            ) }>\n            Save\n        </Button>,\n        <Button\n            key='cancel'\n            variant='secondary'\n            onClick={ () => linkToBackgroundWithHash() }>\n            Cancel\n        </Button>\n    ];\n\n    useEffect(() => {\n        setUpdatedPolicy({\n            ...updatedPolicy,\n            hosts: selectedEntities ? selectedEntities : []\n        });\n    }, [selectedEntities]);\n\n    useEffect(() => {\n        const complianceThresholdValid =\n            (policy.complianceThreshold < 101 && policy.complianceThreshold > 0);\n        setUpdatedPolicy({\n            ...policy,\n            complianceThresholdValid\n        });\n        dispatch({\n            type: 'SELECT_ENTITIES',\n            payload: { ids: policy?.hosts?.map(({ id }) => ({ id })) || [] }\n        });\n    }, [policy]);\n\n    const InvCmp = newInventory ? InventoryTable : SystemsTable;\n    useTitleEntity(route, policy?.name);\n\n    return policy && <Modal\n        isOpen\n        style={ { height: '400px' } }\n        width={ 1000 }\n        title={ `Edit ${policy.name }` }\n        onClose={ () => linkToBackgroundWithHash() }\n        actions={ actions }>\n        <Form>\n            <RoutedTabs defaultTab='details'>\n                <Tab eventKey='details' title={<TabTitleText>Details</TabTitleText>}>\n                    <EditPolicyDetailsTab\n                        policy={ policy }\n                        setUpdatedPolicy={ setUpdatedPolicy } />\n                </Tab>\n\n                <Tab eventKey='rules' title={ <TabTitleText>Rules</TabTitleText> }>\n                    Rule editing coming soon\n                </Tab>\n\n                <Tab eventKey='systems' title={ <TabTitleText>Systems</TabTitleText> }>\n                    <InvCmp\n                        compact\n                        showActions={ false }\n                        enableExport={ false }\n                        remediationsEnabled={ false }\n                        policyId={ policy.id }\n                        defaultFilter={ `os_major_version = ${policy.majorOsVersion}` }\n                        query={GET_SYSTEMS_WITHOUT_FAILED_RULES}\n                        columns={[{\n                            key: 'facts.compliance.display_name',\n                            title: 'Name',\n                            props: {\n                                width: 40, isStatic: true\n                            },\n                            ...newInventory && {\n                                key: 'display_name',\n                                renderFunc: (displayName, id, extra) => {\n                                    return extra?.lastScanned ? systemName(displayName, id, extra) : displayName;\n                                }\n                            }\n                        }]}\n                        preselectedSystems={ policy?.hosts.map((h) => ({ id: h.id })) || [] } />\n                </Tab>\n            </RoutedTabs>\n        </Form>\n    </Modal>;\n};\n\nEditPolicy.propTypes = {\n    route: propTypes.object\n};\n\nexport default EditPolicy;\n","import { useMutation } from '@apollo/react-hooks';\nimport {\n    ASSOCIATE_SYSTEMS_TO_PROFILES, CREATE_BUSINESS_OBJECTIVE, UPDATE_PROFILE\n} from 'Utilities/graphql/mutations';\n\nconst useCreateBusinessObjective = () => {\n    const [create] = useMutation(CREATE_BUSINESS_OBJECTIVE);\n\n    return async (policy, newBusinessObjective) => {\n        if (policy?.businessObjective?.title === newBusinessObjective?.title) {\n            return policy?.businessObjective?.id;\n        } else if (newBusinessObjective?.title === '') {\n            return null;\n        } else {\n            const businessObjective = await create({ variables: {\n                input: { title: newBusinessObjective.title }\n            } });\n\n            return businessObjective.data.createBusinessObjective.businessObjective.id;\n        }\n    };\n};\n\nconst usePolicyUpdate = () => {\n    const createBusinessObjective = useCreateBusinessObjective();\n    const [updateProfile] = useMutation(UPDATE_PROFILE);\n    const [associateSystems] = useMutation(ASSOCIATE_SYSTEMS_TO_PROFILES);\n\n    return async (policy, updatedPolicy) => {\n        const updatePolicyInput = {\n            id: policy.id,\n            name: updatedPolicy.name,\n            description: updatedPolicy.description,\n            complianceThreshold: parseFloat(updatedPolicy.complianceThreshold),\n            businessObjectiveId: await createBusinessObjective(policy, updatedPolicy?.businessObjective)\n        };\n\n        associateSystems({\n            variables: { input: {\n                id: policy.id,\n                systemIds: updatedPolicy.hosts.map((h) => (h.id))\n            } }\n        });\n\n        return await updateProfile({ variables: { input: updatePolicyInput } });\n    };\n};\n\nexport default usePolicyUpdate;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { UnsupportedSSGVersion } from 'PresentationalComponents';\n\nconst SSGVersion = ({ supported, ssgVersion }) => {\n    ssgVersion ||= 'Not available';\n    return supported ? ssgVersion :\n        <UnsupportedSSGVersion messageVariant='singular'>\n            { ssgVersion }\n        </UnsupportedSSGVersion>;\n};\n\nSSGVersion.propTypes = {\n    supported: propTypes.bool,\n    ssgVersion: propTypes.string\n};\n\nexport default {\n    SSGVersion\n};\n","import React, { memo } from 'react';\nimport propTypes from 'prop-types';\nimport { withApollo } from '@apollo/react-hoc';\nimport { connect } from 'react-redux';\nimport gql from 'graphql-tag';\nimport { pickBy } from 'lodash';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport ComplianceRemediationButton\n    from '@redhat-cloud-services/frontend-components-inventory-compliance/ComplianceRemediationButton';\nimport registry from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport {\n    NoSystemsTableBody\n} from 'PresentationalComponents';\n\nimport { exportFromState, selectAll, clearSelection, SELECT_ENTITY } from 'Store/ActionTypes';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport { FilterConfigBuilder } from '@redhat-cloud-services/frontend-components-inventory-compliance/Utilities';\nimport { entitiesReducer } from 'Store/Reducers/SystemStore';\nimport {\n    DEFAULT_SYSTEMS_FILTER_CONFIGURATION, COMPLIANT_SYSTEMS_FILTER_CONFIGURATION,\n    systemsPolicyFilterConfiguration, systemsOsFilterConfiguration\n} from '@/constants';\nimport {\n    ErrorPage,\n    StateView,\n    StateViewPart\n} from 'PresentationalComponents';\nimport { TableVariant } from '@patternfly/react-table';\nimport { Alert } from '@patternfly/react-core';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\n\nexport const GET_SYSTEMS = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    refId\n                    lastScanned\n                    compliant\n                    external\n                    score\n                    supported\n                    ssgVersion\n                    rules {\n                        refId\n                        title\n                        compliant\n                        remediationAvailable\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const GET_SYSTEMS_WITHOUT_FAILED_RULES = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    lastScanned\n                    external\n                    compliant\n                    score\n                    supported\n                    ssgVersion\n                    policy {\n                        id\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nconst initFilterState = (filterConfig) => (\n    pickBy(filterConfig.initialDefaultState(), (value) => (!!value))\n);\n\nconst initialState = {\n    page: 1\n};\n\nconst policyFilter = (policies, osFilter) => ([\n    ...systemsPolicyFilterConfiguration(policies),\n    ...(osFilter ? systemsOsFilterConfiguration(policies) : [])\n]);\n\n@registry()\nclass SystemsTable extends React.Component {\n    inventory = React.createRef();\n    filterConfig = new FilterConfigBuilder([\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(this.props.compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(this.props.policies && this.props.policies.length > 0 ?\n            policyFilter(this.props.policies, this.props.showOsFilter) : [])\n    ]);\n    chipBuilder = this.filterConfig.getChipBuilder();\n    filterBuilder = this.filterConfig.getFilterBuilder();\n\n    state = {\n        ...initialState,\n        policyId: this.props.policyId,\n        perPage: 50,\n        totalCount: 0,\n        activeFilters: initFilterState(this.filterConfig)\n    }\n\n    componentDidMount = () => {\n        const { clearAll, selectedEntities } = this.props;\n        if (selectedEntities && selectedEntities.length > 0) {\n            clearAll();\n        }\n\n        (this.props.preselectedSystems ?\n            Promise.resolve(this.props.selectEntities(this.props.preselectedSystems)) : Promise.resolve())\n        .then(() => {\n            this.updateSystems();\n        });\n    }\n\n    componentDidUpdate = (prevProps) => {\n        if (prevProps.complianceThreshold !== this.props.complianceThreshold) {\n            this.updateSystems();\n        }\n    }\n\n    onRefresh = ({ page, per_page: perPage, ...options }) => {\n        const { showAllSystems } = this.props;\n        if (showAllSystems && this.inventory && this.inventory.current) {\n            this.setState({ page, perPage }, () => { this.inventory.current.onRefreshData({\n                page, perPage, ...options, per_page: perPage // eslint-disable-line camelcase\n            }); }\n            );\n        } else {\n            this.setState({ page, perPage }, () => this.updateSystems().then(() => {\n                if (this.inventory && this.inventory.current) {\n                    this.inventory.current.onRefreshData({\n                        page, perPage, ...options, per_page: perPage // eslint-disable-line camelcase\n                    });\n                }\n            }));\n        }\n    }\n\n    fetchSystems = () => {\n        const { defaultFilter, client, showOnlySystemsWithTestResults, remediationsEnabled } = this.props;\n        const { policyId, perPage, page, activeFilters } = this.state;\n        let filter = [\n            defaultFilter,\n            showOnlySystemsWithTestResults && 'has_test_results = true',\n            this.filterBuilder.buildFilterString(activeFilters)\n        ].filter((e)=>!!e).join(' and ');\n\n        let variables = { filter, perPage, page, policyId };\n\n        return client.query({\n            query: remediationsEnabled ? GET_SYSTEMS : GET_SYSTEMS_WITHOUT_FAILED_RULES,\n            fetchResults: true,\n            fetchPolicy: 'no-cache',\n            variables\n        });\n    }\n\n    updateSystems = () => {\n        const prevSystems = this.props.systems.map((s) => s.node.id).sort();\n        return this.fetchSystems().then((items) => this.props.updateSystems({\n            systems: items.data.systems.edges,\n            systemsCount: items.data.systems.totalCount\n        })\n        ).then(() => {\n            const newSystems = this.props.systems.map((s) => s.node.id).sort();\n            if (JSON.stringify(newSystems) === JSON.stringify(prevSystems)) {\n                this.props.updateRows();\n            }\n        }).catch((error) => {\n            this.setState(prevState => ({ ...prevState, error }));\n        });\n    }\n\n    onExportSelect = (_, format) => (\n        this.props.exportFromState(format)\n    )\n\n    onFilterUpdate = (filter, selectedValues) => {\n        this.props.updateSystems({\n            systems: [],\n            systemsCount: 0\n        });\n        this.setState({\n            ...initialState,\n            activeFilters: {\n                ...this.state.activeFilters,\n                [filter]: selectedValues\n            }\n        }, this.updateSystems);\n    }\n\n    deleteFilter = (chips) => {\n        const activeFilters =  this.filterConfig.removeFilterWithChip(\n            chips, this.state.activeFilters\n        );\n        this.setState({\n            ...initialState,\n            activeFilters\n        }, this.updateSystems);\n    }\n\n    clearAllFilter = () => {\n        this.setState({\n            ...initialState,\n            activeFilters: initFilterState(this.filterConfig)\n        }, this.updateSystems);\n    }\n\n    onFilterDelete = (_event, chips, clearAll = false) => {\n        clearAll ? this.clearAllFilter() : this.deleteFilter(chips[0]);\n    }\n\n    onBulkSelect = () => {\n        const { selectedEntities, selectAll, clearSelection, allSelectedOnPage } = this.props;\n\n        if (selectedEntities.length === 0 ||\n            (selectedEntities.length > 0 && !allSelectedOnPage)) {\n            selectAll();\n        } else {\n            clearSelection();\n        }\n    }\n\n    isExportDisabled = () => {\n        const { total, selectedEntities } = this.props;\n        return (total || 0) === 0 && selectedEntities.length === 0;\n    }\n\n    render() {\n        const {\n            remediationsEnabled, compact, enableExport, showAllSystems, showActions, showComplianceSystemsInfo,\n            selectedEntities, selectedEntitiesIds, systems, total, policyId, systemProps, columns\n        } = this.props;\n        const {\n            page, perPage, activeFilters, error\n        } = this.state;\n        let noError;\n        const filterConfig = this.filterConfig.buildConfiguration(\n            this.onFilterUpdate,\n            activeFilters,\n            { hideLabel: true }\n        );\n        const filterChips = this.chipBuilder.chipsFor(this.state.activeFilters);\n        const exportConfig = enableExport ? {\n            isDisabled: this.isExportDisabled(),\n            onSelect: this.onExportSelect\n        } : {};\n        const inventoryTableProps = {\n            ...systemProps,\n            onRefresh: this.onRefresh,\n            ref: this.inventory,\n            page,\n            perPage,\n            exportConfig,\n            tableProps: {\n                canSelectAll: false\n            },\n            bulkSelect: {\n                checked: selectedEntities.length > 0 ?\n                    (this.props.allSelectedOnPage ? true : null)\n                    : false,\n                onSelect: this.onBulkSelect,\n                count: selectedEntities.length,\n                label: selectedEntities.length > 0 ? `${ selectedEntities.length } Selected` : undefined\n            }\n        };\n\n        if (showActions) {\n            inventoryTableProps.actions = [{\n                title: 'View in inventory',\n                onClick: (_event, _index, { id }) => {\n                    const beta = window.location.pathname.split('/')[1] === 'beta';\n                    window.location.href = `${window.location.origin}${beta ? '/beta' : ''}/insights/inventory/${id}`;\n                }\n            }];\n        }\n\n        if (!showAllSystems) {\n            inventoryTableProps.total = total;\n            inventoryTableProps.items = systems.map((edge) => edge.node.id);\n            inventoryTableProps.filterConfig = filterConfig;\n            inventoryTableProps.activeFiltersConfig = {\n                filters: filterChips,\n                onDelete: this.onFilterDelete\n            };\n        }\n\n        if (compact) {\n            inventoryTableProps.variant = TableVariant.compact;\n        }\n\n        if (error === undefined) {\n            noError = true;\n        }\n\n        if (policyId && total === 0 && Object.keys(activeFilters).length === 0) {\n            inventoryTableProps.tableProps.rows = [{ cells: [{ title: <NoSystemsTableBody /> }] }];\n            inventoryTableProps.tableProps.columns = [];\n            inventoryTableProps.hasItems = false;\n            inventoryTableProps.hasCheckbox = false;\n        }\n\n        if (!showAllSystems && remediationsEnabled) {\n            inventoryTableProps.dedicatedAction = <ComplianceRemediationButton\n                allSystems={ systemsWithRuleObjectsFailed(systems.filter((edge) => (\n                    selectedEntitiesIds.includes(edge.node.id)\n                )).map(edge => edge.node)) }\n                selectedRules={ [] } />;\n        }\n\n        return (\n            <StateView stateValues={{ error, noError }}>\n                <StateViewPart stateKey='error'>\n                    <ErrorPage error={error}/>\n                </StateViewPart>\n                <StateViewPart stateKey='noError'>\n\n                    { showComplianceSystemsInfo && <Alert\n                        isInline\n                        variant=\"info\"\n                        title={ 'The list of systems in this view is different than those that appear in the Inventory. ' +\n                            'Only systems previously or currently associated with compliance policies are displayed.' } /> }\n                    <InventoryTable\n                        { ...inventoryTableProps }\n                        fallback={<SkeletonTable colSize={2} rowSize={15} />}\n                        onLoad={({ INVENTORY_ACTION_TYPES, mergeWithEntities }) => {\n                            this.getRegistry().register({\n                                ...mergeWithEntities(\n                                    entitiesReducer(\n                                        INVENTORY_ACTION_TYPES, columns, showAllSystems\n                                    ))\n                            });\n                        }}\n                    />\n                </StateViewPart>\n            </StateView>\n        );\n    }\n}\n\nSystemsTable.propTypes = {\n    allSelectedOnPage: propTypes.bool,\n    clearAll: propTypes.func,\n    clearInventoryFilter: propTypes.func,\n    clearSelection: propTypes.func,\n    client: propTypes.object,\n    columns: propTypes.array,\n    compact: propTypes.bool,\n    complianceThreshold: propTypes.number,\n    compliantFilter: propTypes.bool,\n    enableExport: propTypes.bool,\n    error: propTypes.object,\n    exportFromState: propTypes.func,\n    policies: propTypes.array,\n    policyId: propTypes.string,\n    defaultFilter: propTypes.string,\n    preselectedSystems: propTypes.array,\n    remediationsEnabled: propTypes.bool,\n    selectAll: propTypes.func,\n    selectEntities: propTypes.func,\n    selectedEntities: propTypes.array,\n    selectedEntitiesIds: propTypes.array,\n    showActions: propTypes.bool,\n    showAllSystems: propTypes.bool,\n    showOnlySystemsWithTestResults: propTypes.bool,\n    showOsFilter: propTypes.bool,\n    systems: propTypes.array,\n    total: propTypes.number,\n    updateRows: propTypes.func,\n    updateSystems: propTypes.func,\n    systemProps: propTypes.shape({\n        isFullView: propTypes.bool\n    }),\n    showComplianceSystemsInfo: propTypes.bool\n};\n\nSystemsTable.defaultProps = {\n    remediationsEnabled: true,\n    compact: false,\n    enableExport: true,\n    showAllSystems: false,\n    complianceThreshold: 0,\n    showOnlySystemsWithTestResults: false,\n    showActions: true,\n    compliantFilter: false,\n    selectedEntities: [],\n    selectedEntitiesIds: [],\n    systems: [],\n    clearAll: () => ({}),\n    exportFromState: () => ({}),\n    systemProps: {},\n    showComplianceSystemsInfo: false\n};\n\nconst mapStateToProps = state => {\n    if (state.entities === undefined || state.entities.rows === undefined) {\n        return { selectedEntities: [], systems: [] };\n    }\n\n    const allSelectedOnPage = state.entities.rows.filter((row) => (\n        !(state.entities.selectedEntities || []).map((e) => e.id).includes(row.id)\n    )).length === 0;\n\n    return {\n        allSelectedOnPage,\n        selectedEntities: state.entities.selectedEntities,\n        selectedEntitiesIds: (state.entities.selectedEntities || []).map((e) => (e.id)),\n        systems: state.entities.systems,\n        total: state.entities.total\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clearInventoryFilter: () => dispatch({ type: 'CLEAR_FILTERS' }),\n        exportFromState: (format) => dispatch(exportFromState(format)),\n        updateSystems: (args) => {\n            dispatch({\n                type: 'UPDATE_SYSTEMS',\n                ...args\n            });\n        },\n        updateRows: () => dispatch({ type: 'UPDATE_ROWS' }),\n        selectAll: () => dispatch(selectAll()),\n        clearSelection: () => dispatch(clearSelection()),\n        clearAll: () => dispatch({\n            type: SELECT_ENTITY,\n            payload: { clearAll: true }\n        }),\n        selectEntities: (ids) => dispatch({\n            type: 'SELECT_ENTITIES',\n            payload: { ids }\n        })\n    };\n};\n\n// eslint-disable-next-line react/display-name\nconst ConnectedSystemsTable = memo((props) => {\n    return <SystemsTable {...props} />;\n});\n\nexport { default as Cells } from './Cells';\nexport { SystemsTable };\nexport const SystemsTableWithApollo = withApollo(ConnectedSystemsTable);\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SystemsTableWithApollo);\n","import gql from 'graphql-tag';\nimport pickBy from 'lodash/pickBy';\nimport { systemsPolicyFilterConfiguration, systemsOsFilterConfiguration } from '@/constants';\n\nexport const GET_SYSTEMS = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    refId\n                    lastScanned\n                    compliant\n                    external\n                    score\n                    supported\n                    ssgVersion\n                    majorOsVersion\n                    rules {\n                        refId\n                        title\n                        compliant\n                        remediationAvailable\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const GET_SYSTEMS_WITHOUT_FAILED_RULES = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    lastScanned\n                    external\n                    compliant\n                    score\n                    supported\n                    ssgVersion\n                    policy {\n                        id\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const policyFilter = (policies, osFilter) => ([\n    ...systemsPolicyFilterConfiguration(policies),\n    ...(osFilter ? systemsOsFilterConfiguration(policies) : [])\n]);\n\nexport const initFilterState = (filterConfig) => (\n    pickBy(filterConfig.initialDefaultState(), (value) => (!!value))\n);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Skeleton, { SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { registryDecorator } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { InventoryDetail, DetailWrapper } from '@redhat-cloud-services/frontend-components/Inventory';\n\n@registryDecorator()\nclass InventoryDetails extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <DetailWrapper onLoad={({ mergeWithDetail }) => this.getRegistry().register({\n                ...mergeWithDetail()\n            })}>\n                <InventoryDetail fallback={<Skeleton size={ SkeletonSize.md } />} hideBack />\n            </DetailWrapper>\n        );\n    }\n}\n\nInventoryDetails.propTypes = {\n    entity: propTypes.object\n};\n\nconst ConnectedInventoryDetails = (props) => {\n    return <InventoryDetails {...props} />;\n};\n\nexport default ConnectedInventoryDetails;\n","import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { withApollo } from '@apollo/react-hoc';\nimport PropTypes from 'prop-types';\nimport { useStore, useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { policyFilter } from './constants';\nimport { systemsReducer } from 'Store/Reducers/SystemStore';\nimport { selectAll, clearSelection } from 'Store/ActionTypes';\nimport { exportFromState } from 'Utilities/Export';\nimport { DEFAULT_SYSTEMS_FILTER_CONFIGURATION, COMPLIANT_SYSTEMS_FILTER_CONFIGURATION } from '@/constants';\nimport debounce from 'lodash/debounce';\nimport {\n    ErrorPage,\n    StateView,\n    StateViewPart\n} from 'PresentationalComponents';\nimport { Alert } from '@patternfly/react-core';\nimport { TableVariant } from '@patternfly/react-table';\n// eslint-disable-next-line max-len\nimport ComplianceRemediationButton from '@redhat-cloud-services/frontend-components-inventory-compliance/ComplianceRemediationButton';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport useFilterConfig from 'Utilities/hooks/useFilterConfig';\nimport { InventoryTable as FECInventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\n\nconst InventoryTable = ({\n    columns,\n    showAllSystems,\n    policyId,\n    query,\n    client,\n    showActions,\n    enableExport,\n    compliantFilter,\n    policies,\n    showOnlySystemsWithTestResults,\n    showOsFilter,\n    error,\n    showComplianceSystemsInfo,\n    compact,\n    remediationsEnabled,\n    systemProps,\n    defaultFilter\n}) => {\n    const store = useStore();\n    const dispatch = useDispatch();\n    const inventory = useRef(null);\n    const [pagination, setPagination] = useState({\n        perPage: 50,\n        page: 1\n    });\n    const [isLoaded, setIsLoaded] = useState(false);\n    const { conditionalFilter, activeFilters, buildFilterString } = useFilterConfig([\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(policies?.length > 0 ? policyFilter(policies, showOsFilter) : [])\n    ]);\n    const total = useSelector(({ entities }) => entities?.systemsCount) || 0;\n    const items = useSelector(({ entities } = {}) => (entities?.systems?.map((system) => (\n        system?.node?.id\n    )) || []), shallowEqual);\n    const selectedEntities = useSelector(({ entities } = {}) => (entities?.selectedEntities || []), shallowEqual);\n    const onBulkSelect = (isSelected) => isSelected ? dispatch(selectAll()) : dispatch(clearSelection());\n\n    const fetchSystems = (perPage = 50, page = 1) => {\n        setIsLoaded(false);\n\n        const filterString = buildFilterString();\n        const combindedFilter = [\n            ...showOnlySystemsWithTestResults ? ['has_test_results = true'] : [],\n            ...filterString?.length > 0 ? [filterString] : []\n        ].join(' and ');\n        const filter = defaultFilter ? `(${ defaultFilter }) and (${ combindedFilter })` : combindedFilter;\n\n        dispatch({ type: 'GET_SYSTEMS_PENDING' });\n        return client.query({\n            query,\n            fetchResults: true,\n            fetchPolicy: 'no-cache',\n            variables: {\n                filter,\n                perPage,\n                page,\n                ...policyId && { policyId }\n            }\n        }).then(({ data, loading }) => {\n            dispatch({\n                type: 'GET_SYSTEMS_FULFILLED',\n                systems: data.systems.edges,\n                systemsCount: data.systems.totalCount\n            });\n            setIsLoaded(true);\n            setPagination(() => ({ page, perPage }));\n            return { data, loading };\n        });\n    };\n\n    const debounceFetchSystems = useCallback(\n        debounce(fetchSystems, 800),\n        [conditionalFilter.activeFiltersConfig.filters]\n    );\n\n    useEffect(() => {\n        if (conditionalFilter.activeFiltersConfig.filters) {\n            debounceFetchSystems(pagination.perPage, 1);\n        }\n    }, [activeFilters]);\n\n    const onRefresh = (options, callback) => {\n        query && fetchSystems(options.per_page, options.page);\n        if (!callback && inventory && inventory.current) {\n            inventory.current.onRefreshData(options);\n        } else if (callback) {\n            callback(options);\n        }\n    };\n\n    return <StateView stateValues={{ error, noError: error === undefined }}>\n        <StateViewPart stateKey='error'>\n            <ErrorPage error={error}/>\n        </StateViewPart>\n        <StateViewPart stateKey='noError'>\n\n            { showComplianceSystemsInfo && <Alert\n                isInline\n                variant=\"info\"\n                title={ 'The list of systems in this view is different than those that appear in the Inventory. ' +\n                    'Only systems currently associated with or reporting against compliance policies are displayed.' } /> }\n            <FECInventoryTable\n                { ...systemProps }\n                onLoad={({\n                    INVENTORY_ACTION_TYPES,\n                    mergeWithEntities\n                }) => {\n                    getRegistry().register({\n                        ...mergeWithEntities(\n                            systemsReducer(\n                                INVENTORY_ACTION_TYPES, columns, showAllSystems, policyId\n                            ))\n                    });\n                }}\n                fallback={<SkeletonTable colSize={2} rowSize={15} />}\n                tableProps={{\n                    canSelectAll: false\n                }}\n                variant={compact ? TableVariant.compact : ''}\n                ref={inventory}\n                onRefresh={onRefresh}\n                bulkSelect={{\n                    checked: selectedEntities.length > 0 ?\n                        (items?.every(id => selectedEntities?.find((selected) => selected?.id === id)) ? true : null)\n                        : false,\n                    onSelect: onBulkSelect,\n                    count: selectedEntities.length,\n                    label: selectedEntities.length > 0 ? `${ selectedEntities.length } Selected` : undefined\n                }}\n                {...!showAllSystems && {\n                    ...pagination,\n                    isLoaded,\n                    items,\n                    total,\n                    ...conditionalFilter,\n                    ...remediationsEnabled && {\n                        dedicatedAction: <ComplianceRemediationButton\n                            allSystems={ systemsWithRuleObjectsFailed(selectedEntities) }\n                            selectedRules={ [] } />\n                    }\n                }}\n                {...enableExport && {\n                    exportConfig: {\n                        isDisabled: total === 0 && selectedEntities.length === 0,\n                        onSelect: (_, format) => exportFromState(store.getState()?.entities, format)\n                    }\n                }}\n                {...showActions && {\n                    actions: [{\n                        title: 'View in inventory',\n                        onClick: (_event, _index, { id }) => {\n                            const beta = window.location.pathname.split('/')[1] === 'beta';\n                            window.location.href = `${window.location.origin}${beta ? '/beta' : ''}/insights/inventory/${id}`;\n                        }\n                    }]\n                }}\n            />\n        </StateViewPart>\n    </StateView>;\n};\n\nInventoryTable.propTypes = {\n    columns: PropTypes.arrayOf(PropTypes.shape({})),\n    policies: PropTypes.arrayOf(PropTypes.shape({})),\n    client: PropTypes.object,\n    showAllSystems: PropTypes.bool,\n    policyId: PropTypes.string,\n    query: PropTypes.string,\n    showActions: PropTypes.bool,\n    enableExport: PropTypes.bool,\n    compliantFilter: PropTypes.bool,\n    showOnlySystemsWithTestResults: PropTypes.bool,\n    showOsFilter: PropTypes.bool,\n    showComplianceSystemsInfo: PropTypes.bool,\n    error: PropTypes.object,\n    compact: PropTypes.bool,\n    remediationsEnabled: PropTypes.bool,\n    defaultFilter: PropTypes.string,\n    systemProps: PropTypes.shape({\n        isFullView: PropTypes.bool\n    })\n};\n\nInventoryTable.defaultProps = {\n    policyId: '',\n    showActions: true,\n    enableExport: true,\n    compliantFilter: false,\n    showOnlySystemsWithTestResults: false,\n    showComplianceSystemsInfo: false,\n    compact: false,\n    remediationsEnabled: true\n};\n\nexport default withApollo(InventoryTable);\n","const CSV_FILE_PREFIX = 'compliance-export';\nconst CSV_DELIMITER = ',';\n\nconst linkAndDownload = (data, filename) => {\n    if (!data) {\n        return;\n    }\n\n    let link = document.createElement('a');\n    link.setAttribute('href', data);\n    link.setAttribute('download', filename);\n    link.dispatchEvent(new MouseEvent(`click`, { bubbles: true, cancelable: true, view: window }));\n};\n\nconst getNestedObject = (nestedObj, path) => {\n    return path.split('.').reduce(\n        (obj, key) => (obj && obj[key] !== 'undefined') ? obj[key] : undefined, nestedObj\n    );\n};\n\nconst textCsvCell = (row, key) => {\n    let cell = getNestedObject(row, key);\n\n    if (cell.exportValue) {\n        cell = cell.exportValue;\n    }\n\n    if (typeof(cell) === 'object') {\n        cell = getNestedObject(row, key + '_text');\n    }\n\n    if (typeof(cell) === 'string' && cell.includes(',')) {\n        cell = '\"' + cell + '\"';\n    }\n\n    return cell;\n};\n\nexport const csvFromState = (state) => {\n    const { rows, columns, selectedEntities } = state;\n\n    if (rows) {\n        let csvRows = [columns.map((column) => column.title).join(CSV_DELIMITER)];\n        csvRows = csvRows.concat((selectedEntities || rows).map((row) => (\n            state.columns.map((column) => !column.noExport ? textCsvCell(row, column.key) : '').join(CSV_DELIMITER)\n        )));\n\n        return encodeURI('data:text/csv;charset=utf-8,' + csvRows.join('\\n'));\n    }\n};\n\nexport const jsonFromState = (state) => {\n    const { rows, columns, selectedEntities } = state;\n    let result;\n\n    if (rows) {\n        result = (selectedEntities || rows).map((row) => {\n            let object = {};\n            columns.forEach((column) => {\n                const keys = column.key.split('.');\n                const key = keys[keys.length - 1];\n                object[key] = textCsvCell(row, column.key);\n            });\n\n            return object;\n        });\n\n        return encodeURI('data:application/json;charset=utf-8,' + JSON.stringify(result));\n    }\n};\n\nconst filename = (format) => (\n    CSV_FILE_PREFIX + '-' + (new Date()).toISOString() + '.' + format\n);\n\nexport const exportFromState = (state, format) => {\n    let content;\n\n    if (format === 'csv') {\n        content = csvFromState(state);\n    } else if (format === 'json') {\n        content = jsonFromState(state);\n    }\n\n    linkAndDownload(content, filename(format));\n};\n\n","export const profilesRulesFailed = (profiles) => (\n    profiles.flatMap(profile => profile.rules && profile.rules.filter(rule => !rule.compliant))\n);\n\nexport const profilesRulesPassed = (profiles) => (\n    profiles.flatMap(profile => profile.rules && profile.rules.filter(rule => rule.compliant))\n);\n\nexport const systemRulesPassed = (system) => (\n    system.testResultProfiles ? profilesRulesPassed(system.testResultProfiles) : []\n);\n\nexport const systemRulesFailed = (system) => (\n    system.testResultProfiles ? profilesRulesFailed(system.testResultProfiles) : []\n);\n\nexport const systemsWithRuleObjectsFailed = (systems) => (\n    systems.map(system => (\n        {\n            ...system,\n            ruleObjectsFailed: systemRulesFailed(system),\n            profiles: system.testResultProfiles\n        }\n    ))\n);\n","export const EXPORT = '@@COMPLIANCE/EXPORT';\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\n\nexport const exportFromState = (format) => ({\n    type: EXPORT, payload: { format }\n});\n\nexport const selectAll = () => ({\n    type: SELECT_ENTITY,\n    payload: { id: 0, selected: true }\n});\n\nexport const clearSelection = () => ({\n    type: SELECT_ENTITY,\n    payload: { id: 0, selected: false }\n});\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Link } from 'react-router-dom';\nimport { EXPORT, SELECT_ENTITY } from 'Store/ActionTypes';\nimport { exportFromState } from 'Utilities/Export';\nimport {\n    ComplianceScore as complianceScore,\n    complianceScoreString\n} from 'PresentationalComponents';\nimport {\n    Tooltip,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport {\n    profilesRulesPassed,\n    profilesRulesFailed\n} from 'Utilities/ruleHelpers';\nimport Truncate from 'react-truncate';\nimport { sortingByProp } from 'Utilities/helpers';\n\nconst NEVER = 'Never';\n\nexport const lastScanned = ({ testResultProfiles: profiles = [] }) => {\n    const dates = profiles.map((profile) => new Date(profile.lastScanned));\n    const last = new Date(Math.max.apply(null, dates.filter((date) => isFinite(date))));\n    const result = (last instanceof Date && isFinite(last)) ? last : NEVER;\n\n    return result;\n};\n\nexport const compliant = ({ testResultProfiles: profiles = [] }) => (\n    profiles.every(profile => profile.lastScanned === NEVER || profile.compliant === true)\n);\n\nexport const score = ({ testResultProfiles: profiles = [] }) => {\n    const scoreTotal = profiles.reduce((acc, profile) => acc + profile.score, 0);\n    const numScored = profiles.reduce((acc, profile) => {\n        if (profilesRulesPassed([profile]).length + profilesRulesFailed([profile]).length > 0) { return acc + 1; }\n\n        return acc;\n    }, 0);\n    if (numScored) { return scoreTotal / numScored; }\n\n    return 0;\n};\n\nexport const supported = ({ testResultProfiles: profiles = [] }) => (\n    profiles.reduce((acc, profile) => acc && profile.supported, true)\n);\n\nexport const policyNames = (system) => {\n    if (system === {}) { return ''; }\n\n    let policyNames = system.policies.map(({ name }) => name);\n    return policyNames.join(', ');\n};\n\nexport const policiesCell = ({ policyNames }) => ({\n    title: policyNames ? (\n        <Tooltip content={policyNames}>\n            <Truncate lines={2} width={540}>{policyNames}</Truncate>\n        </Tooltip>\n    ) : <Text className='grey-icon'>No policies</Text>,\n    exportValue: policyNames\n});\n\nexport const detailsLink = (system) => {\n    if (system.testResultProfiles && system.testResultProfiles.length > 0) {\n        return {\n            title: (\n                <Link to={{ pathname: `/systems/${system.id}` }}>\n                    View report\n                </Link>\n            )\n        };\n    }\n};\n\nexport const hasOsInfo = (matchingSystem) => (\n    typeof(matchingSystem.osMajorVersion) !== 'undefined' && typeof(matchingSystem.osMinorVersion) !== 'undefined' &&\n        matchingSystem.osMajorVersion !== null && matchingSystem.osMinorVersion !== null &&\n        !(matchingSystem.osMajorVersion === 0 && matchingSystem.osMinorVersion === 0)\n);\n\nconst displayNameCell = (system, matchingSystem) =>  ({\n    title: <TextContent>\n        { matchingSystem.name ? <Link to={{ pathname: `/systems/${matchingSystem.id}` }}>\n            { matchingSystem.name }\n        </Link> : system.display_name }\n        { hasOsInfo(matchingSystem) &&\n            <Text component={TextVariants.small}>RHEL {matchingSystem.osMajorVersion}.{matchingSystem.osMinorVersion}</Text> }\n    </TextContent>,\n    exportValue: system.display_name || matchingSystem.name\n});\n\nexport const systemName = (displayName, id, { osMajorVersion, osMinorVersion, name }) => (\n    <TextContent>\n        <Link to={{ pathname: `/systems/${id}` }}>\n            { displayName || name }\n        </Link>\n        { hasOsInfo({ osMajorVersion, osMinorVersion }) &&\n            <Text component={TextVariants.small}>RHEL {osMajorVersion}.{osMinorVersion}</Text> }\n    </TextContent>\n);\n\nconst isSelected = (id, selectedEntities) => (\n    !!(selectedEntities || []).find((entity) => (entity.id === id))\n);\n\nconst profilesSsgVersions = ({ testResultProfiles: profiles = [] }) => (\n    profiles.map((p) => (p.ssgVersion)).filter((version) => (!!version)).join(', ')\n);\n\nexport const countOsMinorVersions = (systems) => {\n    if (!systems) { return []; }\n\n    const counted = systems.reduce((acc, { osMinorVersion }) => {\n        if (osMinorVersion !== undefined && osMinorVersion !== null) {\n            (acc[osMinorVersion] = acc[osMinorVersion] || { osMinorVersion, count: 0 }).count++;\n        }\n\n        return acc;\n    }, {});\n    return Object.values(counted).sort(sortingByProp('osMinorVersion'));\n};\n\nexport const systemsToInventoryEntities = (systems, entities, showAllSystems, selectedEntities) => (\n    entities.map(entity => {\n        // This should compare the inventory ID instead with\n        // the ID in compliance\n        if (entity.facts === undefined) { entity.facts = {}; }\n\n        let matchingSystem = systems.map((s) => s.node).find((system) => {\n            return entity.id === system.id;\n        });\n        if (matchingSystem === undefined) {\n            if (!showAllSystems) { return; }\n\n            matchingSystem = { testResultProfiles: [], policies: [] };\n        }\n\n        matchingSystem.policyNames = policyNames(matchingSystem);\n        matchingSystem.rulesPassed = profilesRulesPassed(matchingSystem.testResultProfiles).length;\n        matchingSystem.rulesFailed = profilesRulesFailed(matchingSystem.testResultProfiles).length;\n        matchingSystem.lastScanned = lastScanned(matchingSystem);\n        matchingSystem.compliant = compliant(matchingSystem);\n        matchingSystem.score = score(matchingSystem);\n        matchingSystem.supported = supported(matchingSystem);\n\n        return {\n            /* eslint-disable camelcase */\n            id: entity.id,\n            selected: isSelected(entity.id, selectedEntities),\n            account: entity.account,\n            bios_uuid: entity.bios_uuid,\n            created: entity.created,\n            display_name: entity.display_name || matchingSystem.name,\n            fqdn: entity.fqdn,\n            insights_id: entity.insights_id,\n            ip_addresses: entity.ip_addresses,\n            mac_addresses: entity.mac_addresses,\n            rhel_machine_id: entity.rhel_machine_id,\n            satellite_id: entity.satellite_id,\n            subscription_manager_id: entity.subscription_manager_id,\n            tags: entity.tags,\n            updated: entity.updated,\n            facts: {\n                inventory: {\n                    hostname: (entity.facts.inventory !== undefined) ?\n                        entity.facts.inventory.hostname :\n                        entity.facts.hostname,\n                    machine_id: (entity.facts.inventory !== undefined) ?\n                        entity.facts.inventory.machine_id :\n                        entity.facts.machine_id,\n                    release: (entity.facts.inventory !== undefined) ?\n                        entity.facts.inventory.release :\n                        entity.facts.release\n                },\n                compliance: {\n                    display_name: displayNameCell(entity, matchingSystem),\n                    policies: policiesCell(matchingSystem),\n                    details_link: detailsLink(matchingSystem),\n                    rules_passed: matchingSystem.rulesPassed,\n                    rules_failed: { title: <Link to={{\n                        pathname: `/systems/${matchingSystem.id}`,\n                        query: {\n                            hidePassed: true\n                        }\n                    }}>{matchingSystem.rulesFailed}</Link> },\n                    rules_failed_text: matchingSystem.rulesFailed,\n                    compliance_score: complianceScore(matchingSystem),\n                    compliance_score_text: complianceScoreString(matchingSystem),\n                    last_scanned: (matchingSystem.lastScanned instanceof Date) ?\n                        { title: <DateFormat date={Date.parse(matchingSystem.lastScanned)} type='relative' /> } :\n                        matchingSystem.lastScanned,\n                    last_scanned_text: matchingSystem.lastScanned,\n                    ssg_version: profilesSsgVersions(matchingSystem),\n                    supported: matchingSystem.supported\n                }\n            }\n            /* eslint-enable camelcase */\n        };\n    }).filter((value) => (!!value))\n);\n\nconst systemsToRows = (systems) => (\n    systems.map(({ node }) => ({\n        ...node,\n        policyNames: policyNames({ policies: node?.policies, testResultProfiles: [] }),\n        rulesPassed: profilesRulesPassed(node.testResultProfiles).length,\n        rulesFailed: profilesRulesFailed(node.testResultProfiles).length,\n        lastScanned: lastScanned(node),\n        compliant: compliant(node),\n        display_name: node.name, // eslint-disable-line camelcase\n        score: score(node),\n        supported: supported(node),\n        ssgVersion: profilesSsgVersions(node),\n        detailsLink: detailsLink(node)\n    }))\n);\n\nconst selectRowsByIds = (state, ids) => {\n    const rowsToSelect = state.rows.filter((row) => (\n        ids.includes(row.id) && !(state.selectedEntities || []).map((e) => (e.id)).includes(row.id)\n    ));\n\n    return {\n        ...state,\n        selectedEntities: (state.selectedEntities || []).concat(rowsToSelect)\n    };\n};\n\nconst deselectRowsByIds = (state, ids) => ({\n    ...state,\n    selectedEntities: (state.selectedEntities || []).filter((row) => !ids.includes(row.id))\n});\n\nconst selectAllRows = (state) => (\n    selectRowsByIds(state, state.rows.map((row) => (row.id)))\n);\n\nconst deselectAllRows = (state) => (\n    deselectRowsByIds(state, state.rows.map((row) => (row.id)))\n);\n\nconst selectRow = (state, id) => (\n    selectRowsByIds(state, [id])\n);\n\nconst deselectRow = (state, id) => (\n    deselectRowsByIds(state, [id])\n);\n\nexport const systemsReducer = (INVENTORY_ACTION, columns) => applyReducerHash({\n    ['GET_SYSTEMS_PENDING']: (state) => ({\n        ...state,\n        rows: [],\n        systems: undefined,\n        systemsCount: undefined,\n        columns,\n        loaded: false\n    }),\n    ['GET_SYSTEMS_FULFILLED']: (state, { systems, systemsCount }) => ({\n        ...state,\n        systems,\n        systemsCount,\n        total: systemsCount,\n        rows: systemsToRows(systems).map((row) => ({\n            ...row, selected: isSelected(row.id, state.selectedEntities)\n        })),\n        columns,\n        loaded: true\n    }),\n    [INVENTORY_ACTION.LOAD_ENTITIES_PENDING]: (state) => ({\n        ...state,\n        total: state.systemsCount,\n        rows: state.systems !== undefined ? systemsToRows(state.systems).map((row) => ({\n            ...row, selected: isSelected(row.id, state.selectedEntities)\n        })) : [],\n        columns,\n        loaded: state.systemsCount !== undefined\n    }),\n    [INVENTORY_ACTION.LOAD_ENTITIES_FULFILLED]: (state) => ({\n        ...state,\n        total: state.systemsCount,\n        rows: state.systems !== undefined ? systemsToRows(state.systems).map((row) => ({\n            ...row, selected: isSelected(row.id, state.selectedEntities)\n        })) : [],\n        columns,\n        loaded: state.systemsCount !== undefined\n    }),\n    [SELECT_ENTITY]: (state, { payload: { id, selected, clearAll } }) => {\n        let newState;\n\n        if (id === 0) {\n            newState = selected ? selectAllRows(state) : deselectAllRows(state);\n        } else {\n            newState = selected ? selectRow(state, id) : deselectRow(state, id);\n        }\n\n        if (newState.selectedEntities.length === 0 || clearAll) {\n            newState.selectedEntities = undefined;\n        }\n\n        return newState;\n    },\n    ['SELECT_ENTITIES']: (state, { payload: { ids } }) => ({\n        selectedEntities: ids\n    })\n});\n\nexport const entitiesReducer = (INVENTORY_ACTION, columns, showAllSystems) => applyReducerHash(\n    {\n        ['UPDATE_SYSTEMS']: (state, { systems, systemsCount }) => ({\n            ...state,\n            systems,\n            systemsCount\n        }),\n        ['UPDATE_ROWS']: (state) => ({\n            ...state,\n            loaded: true,\n            rows: systemsToInventoryEntities(\n                state.systems || [],\n                state.rows || [],\n                showAllSystems,\n                state.selectedEntities\n            )\n        }),\n        [INVENTORY_ACTION.LOAD_ENTITIES_FULFILLED]: (state) => ({\n            ...state,\n            rows: systemsToInventoryEntities(\n                state.systems || [],\n                state.rows,\n                showAllSystems,\n                state.selectedEntities\n            ),\n            total: !showAllSystems ? state.systemsCount : state.total,\n            columns: state.total > 0 ? columns : [{ title: '' }]\n        }),\n        [EXPORT]: (state, { payload: { format } }) => {\n            exportFromState(state, format);\n            return state;\n        },\n        [SELECT_ENTITY]: (state, { payload: { id, selected, clearAll } }) => {\n            let newState;\n\n            if (id === 0) {\n                newState = selected ? selectAllRows(state) : deselectAllRows(state);\n            } else {\n                newState = selected ? selectRow(state, id) : deselectRow(state, id);\n            }\n\n            if (newState.selectedEntities.length === 0 || clearAll) {\n                newState.selectedEntities = undefined;\n            }\n\n            return newState;\n        },\n        ['SELECT_ENTITIES']: (state, { payload: { ids } }) => ({\n            selectedEntities: ids\n        })\n    }\n);\n"],"sourceRoot":""}