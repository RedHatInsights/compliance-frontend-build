{"version":3,"sources":["webpack://compliance-frontend/./src/Utilities/hooks/useFeature.js"],"names":["LOCAL_STORE_FEATURE_PREFIX","setFeatureFlag","featureValue","feature","value","console","log","localStorage","setItem","removeItem","featureDefault","features","search","path","history","useLocation","pathName","useHistory","URLSearchParams","forEach","push","featureEnabled","getItem","getLocatStateFlag"],"mappings":"qKAEaA,EAA6B,sBAEpCC,EAAiB,SAACC,EAAcC,GAClC,IAAMC,EAAyB,WAAjBF,EAETE,GAIDC,QAAQC,IAAR,oCAAyCH,EAAzC,eAAuDC,IACvDG,aAAaC,QAAb,UAAwBR,EAAxB,YAAsDG,GAAWC,KAJjEC,QAAQC,IAAR,sCAA2CH,IAC3CI,aAAaE,WAAb,UAA2BT,EAA3B,YAAyDG,MA0CjE,QAfmB,SAACA,GAChB,IAAMO,EAAiBC,KAASR,GAChC,GAAKA,EAAL,CArBoB,IAAM,EAClBS,EAAkBC,EACpBC,EADEF,GADkB,GACSG,oBAA3BH,OAAkBC,EADA,EACVG,SACVF,GAAUG,kBACXL,IAIa,IAAIM,gBAAgBN,GAC5BO,QAAQlB,GAElBa,EAAQM,KAAKP,IAiBb,IACMQ,EAdgB,SAAClB,GAAD,QACpBI,aAAae,QAAb,UAAwBtB,EAAxB,YAAsDG,IAYhCoB,CAAkBpB,IACAO,EAG1C,OADAL,QAAQC,IAAR,kBAAuBH,EAAvB,sBAA4CkB,IACrCA","file":"js/564.058adb5231a1e8b124ec.js","sourcesContent":["import { features } from '@/constants';\nimport { useLocation, useHistory } from 'react-router-dom';\nexport const LOCAL_STORE_FEATURE_PREFIX = 'insights:compliance';\n\nconst setFeatureFlag = (featureValue, feature) => {\n    const value = featureValue === 'enable';\n\n    if (!value) {\n        console.log(`Removing feature setting of ${feature}`);\n        localStorage.removeItem(`${LOCAL_STORE_FEATURE_PREFIX}:${feature}`);\n    } else {\n        console.log(`Setting feature value for ${feature} to ${value}`);\n        localStorage.setItem(`${LOCAL_STORE_FEATURE_PREFIX}:${feature}`, value);\n    }\n};\n\n// Allows setting feature flag values via ?feature|(enable/disable)\nconst setFlagsFromUrl = () => {\n    const { search, pathName: path } = useLocation();\n    const history = useHistory();\n    if (!search) {\n        return;\n    }\n\n    const urlParams = new URLSearchParams(search);\n    urlParams.forEach(setFeatureFlag);\n\n    history.push(path);\n};\n\n// Queries the local storage for feature flag values\nconst getLocatStateFlag = (feature) => (\n    !!localStorage.getItem(`${LOCAL_STORE_FEATURE_PREFIX}:${feature}`)\n);\n\n// A hook to query feature values\nconst useFeature = (feature) => {\n    const featureDefault = features[feature];\n    if (!feature) {\n        return;\n    }\n\n    setFlagsFromUrl();\n\n    const localStoreValue = getLocatStateFlag(feature);\n    const featureEnabled = localStoreValue || featureDefault;\n\n    console.log(`Feature ${feature} is set to ${featureEnabled}`);\n    return featureEnabled;\n};\n\nexport default useFeature;\n"],"sourceRoot":""}