{"version":3,"sources":["webpack://compliance-frontend/./src/SmartComponents/ComplianceSystems/ComplianceSystems.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/EditPolicyProfilesRules.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/EditPolicyRules.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack://compliance-frontend/./src/SmartComponents/EditPolicy/EditPolicyDetailsTab.js","webpack://compliance-frontend/./src/SmartComponents/EditPolicy/EditPolicyRulesTab.js","webpack://compliance-frontend/./src/SmartComponents/EditPolicy/EditPolicySystemsTab.js","webpack://compliance-frontend/./src/SmartComponents/EditPolicy/EditPolicy.js","webpack://compliance-frontend/./src/SmartComponents/EditPolicy/usePolicy.js","webpack://compliance-frontend/./src/SmartComponents/SystemsTable/Cells.js","webpack://compliance-frontend/./src/SmartComponents/SystemsTable/SystemsTable.js","webpack://compliance-frontend/./src/SmartComponents/SystemsTable/constants.js","webpack://compliance-frontend/./src/SmartComponents/InventoryDetails/InventoryDetails.js","webpack://compliance-frontend/./src/SmartComponents/SystemsTable/InventoryTable.js","webpack://compliance-frontend/./src/Utilities/Export.js","webpack://compliance-frontend/./src/Utilities/hooks/api/utils/ApiClient.js","webpack://compliance-frontend/./src/Utilities/hooks/api/useApi.js","webpack://compliance-frontend/./src/Utilities/hooks/api/useCollection.js","webpack://compliance-frontend/./src/Utilities/ruleHelpers.js","webpack://compliance-frontend/./src/store/ActionTypes.js","webpack://compliance-frontend/./src/store/Reducers/SystemStore.js"],"names":["QUERY","gql","ComplianceSystems","newInventory","useFeature","useQuery","data","error","loading","dispatch","useDispatch","columns","key","title","props","width","isStatic","renderFunc","systemName","policyNames","policiesCell","id","detailsLink","testResultProfiles","policies","profiles","edges","map","node","useLayoutEffect","type","payload","ids","InvComponent","InventoryTable","SystemsTable","className","stateValues","stateKey","query","GET_SYSTEMS","defaultFilter","systemProps","isFullView","showOsFilter","showComplianceSystemsInfo","enableEditPolicy","remediationsEnabled","BENCHMARKS_AND_PROFILES","PolicyTooltip","Tooltip","position","content","style","opacity","CreateSCAPPolicy","change","selectedBenchmarkId","fetchPolicy","Spinner","selectedBenchmark","validProfiles","benchmark","benchmarks","latestBenchmarks","find","userProfileRefIds","filter","profile","refId","disabled","includes","TextContent","Text","component","TextVariants","Form","FormGroup","label","isRequired","fieldId","sort","a","b","localeCompare","osMajorVersion","Button","onClick","setBenchmark","variant","labelIcon","propTypes","reduxFormPropTypes","selector","formValueSelector","compose","connect","state","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","PROFILES_QUERY","EditPolicyProfilesRules","policy","selectedRuleRefIds","osMinorVersionCounts","selectRulesTableColumns","useCollection","include","params","search","i","osMinorVersion","join","benchmarksLoading","profileIds","tabsData","profileSelectedRuleRefIds","systemCount","count","latestSupportedOsMinorVersions","getBenchmarkBySupportedOsMinor","collection","profileRefId","benchmarkProfile","getBenchmarkProfile","rules","relationships","push","newOsMinorVersion","ruleRefIds","skipProfilesQuery","length","variables","skip","profilesData","dataState","undefined","loadingState","noRuleSets","p","rule","name","EmptyState","Title","headingLevel","size","EmptyStateBody","EmptyTable","selectedFilter","level","handleSelect","newSelectedRuleRefIds","newSelection","JSON","parse","EditPolicyRules","ruleIds","filteredRules","profileId","benchmarkId","multiversionRules","useState","defaultSelection","setDefaultSelection","profileRules","useEffect","ruleId","isInline","SystemRulesTable","tailoringEnabled","remediationAvailableFilter","selectedRefIds","EditPolicyRulesComponent","Component","EditPolicySystems","selectedSystemIds","displayName","_id","emptyStateComponent","WizardContextConsumer","goToStepById","prependComponent","InvCmp","compact","showActions","GET_SYSTEMS_WITHOUT_FAILED_RULES","enableExport","defaultProps","countOsMinorVersions","entities","selectedEntities","e","EditPolicyDetails","description","Field","ReduxFormTextInput","aria-describedby","isDisabled","ReduxFormTextArea","defaultValue","businessObjective","showTitle","previousThreshold","complianceThreshold","initialValues","REVIEW","ReviewCreatedPolicy","parentProfileName","TextList","TextListVariants","TextListItem","TextListItemVariants","parseFloat","rulesCount","FinishedCreatePolicy","listErrors","secondaryActions","onWizardFinish","cloneFromProfileId","systemIds","percent","setPercent","message","setMessage","errors","setErrors","failed","setFailed","updatePolicy","usePolicy","onProgress","progress","newPolicy","hosts","then","catch","networkError","result","Array","isArray","ListItem","Bullseye","EmptyStateVariant","EmptyStateIcon","icon","WrenchIcon","List","EmptyStateSecondaryActions","client","withApollo","CreatePolicy","history","useHistory","stepIdReached","setStepIdReached","resetAnchor","location","hash","onClose","steps","enableNext","validateBenchmarkPage","canJumpTo","validateDetailsPage","validateSystemsPage","validateRulesPage","nextButtonText","isFinishedStep","Wizard","isOpen","onNext","onGoToStep","onBack","EditPolicyDetailsTab","setUpdatedPolicy","validThreshold","setValidThreshold","threshold","valid","thresholdValid","useThresholdValidate","validateThreshold","TextArea","height","onChange","value","TextInput","validated","helperTextInvalid","helperText","complianceThresholdValid","EditPolicyRulesTabEmptyState","EditPolicyRulesTab","osMinorVersions","Object","keys","benchmarkSearch","values","sortingByProp","parentProfileId","forEach","tab","refIds","empty","EditPolicySystemsTab","policyOsMinorVersions","selectedSystemOsMinorVersions","useSelector","entity","systemOsMinorVersion","Alert","actionLinks","AlertActionLink","MULTIVERSION_QUERY","profilesToOsMinorMap","reduce","acc","mapCountOsMinorVersions","EditPolicy","route","policyId","useParams","policy_id","policyProfiles","anchor","useAnchor","updatedPolicy","setSelectedRuleRefIds","setOsMinorVersionCounts","linkToBackground","useLinkToBackground","isSaving","setIsSaving","saveEnabled","linkToBackgroundWithHash","actions","spinnerAriaValueText","isLoading","updateSelectedRuleRefIds","policyProfile","useTitleEntity","Modal","defaultTab","Tab","eventKey","TabTitleText","filteredSelection","selectedProfile","uniq","create","createBusinessObjective","useMutation","CREATE_BUSINESS_OBJECTIVE","newBusinessObjective","input","UPDATE_PROFILE","updateProfile","CREATE_PROFILE","createProfile","associateSystems","ASSOCIATE_SYSTEMS_TO_PROFILES","h","useAssociateSystems","associateRules","ASSOCIATE_RULES_TO_PROFILE","ruleInput","useAssociateRules","expectedUpdates","dispatchProgress","businessObjectiveId","policyInput","SSGVersion","supported","ssgVersion","messageVariant","initFilterState","filterConfig","initialDefaultState","initialState","page","policyFilter","osFilter","systemsPolicyFilterConfiguration","systemsOsFilterConfiguration","registry","React","FilterConfigBuilder","DEFAULT_SYSTEMS_FILTER_CONFIGURATION","compliantFilter","COMPLIANT_SYSTEMS_FILTER_CONFIGURATION","getChipBuilder","getFilterBuilder","perPage","totalCount","activeFilters","clearAll","preselectedSystems","Promise","resolve","selectEntities","updateSystems","prevProps","per_page","options","showAllSystems","inventory","current","setState","onRefreshData","showOnlySystemsWithTestResults","filterBuilder","buildFilterString","fetchResults","prevSystems","systems","s","fetchSystems","items","systemsCount","newSystems","stringify","updateRows","prevState","_","format","exportFromState","selectedValues","chips","removeFilterWithChip","_event","clearAllFilter","deleteFilter","selectAll","clearSelection","allSelectedOnPage","total","noError","this","selectedEntitiesIds","buildConfiguration","onFilterUpdate","hideLabel","filterChips","chipBuilder","chipsFor","exportConfig","isExportDisabled","onSelect","onExportSelect","inventoryTableProps","onRefresh","ref","tableProps","canSelectAll","bulkSelect","checked","onBulkSelect","_index","beta","window","pathname","split","href","origin","edge","activeFiltersConfig","filters","onDelete","onFilterDelete","TableVariant","rows","cells","hasItems","hasCheckbox","dedicatedAction","ComplianceRemediationButton","allSystems","systemsWithRuleObjectsFailed","selectedRules","fallback","SkeletonTable","colSize","rowSize","onLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","getRegistry","register","entitiesReducer","clearInventoryFilter","ConnectedSystemsTable","memo","SystemsTableWithApollo","row","args","SELECT_ENTITY","InventoryDetails","registryDecorator","DetailWrapper","mergeWithDetail","InventoryDetail","Skeleton","SkeletonSize","hideBack","store","useStore","useRef","pagination","setPagination","isLoaded","setIsLoaded","isEmpty","setIsEmpty","useFilterConfig","conditionalFilter","system","shallowEqual","filterString","combindedFilter","debounceFetchSystems","useCallback","debounce","systemsReducer","callback","every","selected","isSelected","getState","PropTypes","getNestedObject","nestedObj","path","obj","textCsvCell","cell","exportValue","csvRows","column","concat","noExport","encodeURI","csvFromState","object","jsonFromState","filename","link","document","createElement","setAttribute","dispatchEvent","MouseEvent","bubbles","cancelable","view","linkAndDownload","CSV_FILE_PREFIX","Date","toISOString","Accept","apiBase","authenticate","onUnauthorised","defaultHeaders","headers","DEFAULT_API_HEADERS","apiProps","method","callAuthenticate","fetch","checkForEmptyResponse","response","checkForErrors","json","finalCatch","promise","reject","credentials","fullPath","url","URL","encodeURIComponent","URLSearchParams","body","status","ignore404","responseCloneJson","clone","request","ApiClient","includeAttributes","prop","attributes","newEntity","includePropAndDelete","normalizeData","jsonNormalized","normalize","normalizedJson","entries","item","relationship","relationshipData","v","includeRelationship","fetchCollection","apiClient","get","normalized","meta","effects","collectionState","setCollectionState","useApi","COMPLIANCE_API_ROOT","profilesRulesFailed","flatMap","compliant","profilesRulesPassed","systemRulesFailed","ruleObjectsFailed","EXPORT","NEVER","lastScanned","dates","last","Math","max","apply","date","isFinite","score","scoreTotal","numScored","lines","Link","to","hasOsInfo","matchingSystem","displayNameCell","display_name","profilesSsgVersions","version","systemsToInventoryEntities","facts","rulesPassed","rulesFailed","account","bios_uuid","created","fqdn","insights_id","ip_addresses","mac_addresses","rhel_machine_id","satellite_id","subscription_manager_id","tags","updated","hostname","machine_id","release","compliance","details_link","rules_passed","rules_failed","hidePassed","rules_failed_text","compliance_score","complianceScore","compliance_score_text","complianceScoreString","last_scanned","last_scanned_text","ssg_version","systemsToRows","selectRowsByIds","rowsToSelect","deselectRowsByIds","selectAllRows","deselectAllRows","selectRow","deselectRow","INVENTORY_ACTION","applyReducerHash","loaded","LOAD_ENTITIES_PENDING","LOAD_ENTITIES_FULFILLED","newState"],"mappings":"o7BAaA,IAAMA,EAAQC,IAAH,mQAiBEC,EAAoB,WAAM,MAC7BC,GAAeC,QAAW,gBADG,GAEFC,cAASL,GAAlCM,EAF2B,EAE3BA,KAAMC,EAFqB,EAErBA,MAAOC,EAFc,EAEdA,QACfC,GAAWC,mBACXC,EAAU,CAAC,EAAD,CACZC,IAAK,gCACLC,MAAO,OACPC,MAAO,CACHC,MAAO,GAAIC,UAAU,IAEtBb,GAAgB,CACfS,IAAK,eACLK,WAAYC,OARJ,GAWZN,IAAK,4BACLC,MAAO,WACPC,MAAO,CACHC,MAAO,GAAIC,UAAU,IAEtBb,GAAgB,CACfS,IAAK,cACLK,WAAY,SAACE,GAET,QADkBC,QAAa,CAAED,iBAAkB,CAAEN,MAAO,KAApDA,SAnBJ,GAwBZD,IAAK,gCACLC,MAAO,GACPC,MAAO,CACHC,MAAO,GAAIC,UAAU,IAEtBb,GAAgB,CACfS,IAAK,qBACLK,WAAY,SAACX,EAAMe,GAEf,QADkBC,QAAY,CAAEC,mBAAoBjB,EAAMe,QAAS,CAAER,MAAO,KAApEA,UAKdW,EAAWlB,SAAH,UAAGA,EAAMmB,gBAAT,aAAG,EAAgBC,MAAMC,KAAI,qBAAGC,SAE9CC,sBAAgB,WAAQpB,EAAS,CAAEqB,KAAM,kBAAmBC,QAAS,CAAEC,IAAK,QAAY,IAExF,IAAMC,EAAe9B,EAAe+B,KAAiBC,KAErD,OACI,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAYC,UAAU,eAClB,kBAAC,IAAD,CAAiBvB,MAAM,aAE3B,kBAAC,IAAD,KACI,kBAAC,KAAD,CAAoBwB,YAAc,CAAE9B,QAAOD,OAAME,YAC7C,kBAAC,KAAD,CAAe8B,SAAS,QAClBd,GAAY,kBAACS,EAAD,CACVM,MAAOC,KACPC,cA3DL,+CA4DKC,YAAa,CACTC,YAAY,GAEhBC,cAAY,EACZC,2BAAyB,EACzBC,kBAAmB,EACnBC,qBAAsB,EACtBpC,QAAUA,EACVa,SAAWA,SAQvC,W,m4BCpFA,IAAMwB,EAA0B/C,IAAH,ojBA8BvBgD,EAAgB,kBAClB,kBAAC,EAAAC,QAAD,CACIC,SAAS,QACTC,QAAQ,4IAER,kBAAC,KAAD,CAA4BC,MAAO,CAAEC,QAAS,QAIzCC,EAAmB,SAAC,GAAoC,IAAlCC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,oBAA0B,GAChCpD,cAAS2C,EAAyB,CAAEU,YAAa,aAA1EpD,EADyD,EACzDA,KAAMC,EADmD,EACnDA,MAAOC,EAD4C,EAC5CA,QAMfC,GAAWC,mBAEjB,GAAIH,EAAS,OAAOA,EAEpB,GAAIC,EAAW,OAAO,kBAACmD,EAAA,EAAD,MAEtB,IACIC,EACAC,EAZwBpC,EAAUqC,EAUhCC,EAAazD,EAAK0D,iBAGxB,GAAIP,EAAqB,CACrBG,EAAoBG,EAAWE,MAAK,SAAAH,GAAS,OAAIA,EAAUzC,KAAOoC,KAClE,IAAMS,GAfkBzC,EAeqBnB,EAAKmB,SAASC,MAfzBoC,EAegCF,EAdlEnC,EAAS0C,QAAO,SAAAC,GAAO,OAAIN,EAAUO,QAAUD,EAAQxC,KAAKkC,UAAUO,SAAO1C,KAAI,SAAAyC,GAAO,OAAIA,EAAQxC,KAAKyC,UAezGR,EAAgBD,EAAkBnC,SAASE,KAAI,SAACyC,GAAD,cACxCA,GADwC,IAE3CE,SAAUJ,EAAkBK,SAASH,EAAQC,YAiBrD,OACI,kBAAC,aAAD,KACI,kBAAC,EAAAG,YAAD,KACI,kBAAC,EAAAC,KAAD,CAAMC,UAAWC,kBAAiBvC,UAAU,cAA5C,sBAGA,kBAAC,EAAAqC,KAAD,CAAMrC,UAAU,cAAhB,iEAIJ,kBAAC,EAAAwC,KAAD,KACI,kBAAC,EAAAC,UAAD,CACIC,MAAM,mBACNC,YAAU,EACVC,QAAQ,aACNjB,GAAcA,EAAWkB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEb,MAAMe,cAAcD,EAAEd,UAAQ1C,KAAI,SAACmC,GAAc,IACjFzC,EAAuByC,EAAvBzC,GAAIgE,EAAmBvB,EAAnBuB,eACZ,OACI,kBAAC,EAAAC,OAAD,CAAQ1E,IAAKS,EAAIkE,QAAU,kBA/B9B,SAAC,GAA2B,MAAzBlE,EAAyB,EAAzBA,GAAIgE,EAAqB,EAArBA,gBACH,QAAjB,EAAAzB,SAAA,eAAmByB,kBAAmBA,IACtC7B,EAAO,UAAW,IAClB/C,EAAS,CACLqB,KAAM,kBACNC,QAAS,CAAEC,IAAK,OAIxBwB,EAAO,YAAanC,GACpBmC,EAAO,iBAAkB6B,GAqB4BG,CAAa1B,IAC1C1B,UAAS,2BAAsBqB,IAAwBpC,EAAK,0BAA4B,IACxFoE,QAAQ,YAFZ,eAGcJ,QAK1B,kBAAC,EAAAR,UAAD,CACIE,YAAU,EACVW,UAAW,kBAACzC,EAAD,MACX6B,MAAM,cACNE,QAAQ,eACR,kBAAC,KAAD,CACIvD,SAAUmC,GAAqBC,EAC/B0B,QAAU,WACN/B,EAAO,qBAAsB,aAQzDD,EAAiBoC,UAAY,CACzBlC,oBAAqBkC,WACrBnC,OAAQoC,aAGZ,IAAMC,GAAWC,OAAkB,cAEnC,SAAeC,cACXC,cACI,SAAAC,GAAK,MAAK,CACNxC,oBAAqBoC,EAASI,EAAO,kBAG7CC,OAAU,CACNC,KAAM,aACNC,kBAAkB,EAClBC,0BAA0B,IATlC,CAWE9C,G,knBC1IF,IAAM+C,EAAiBrG,IAAH,MAAG,u3BAgDVsG,EAA0B,SAAC,GAAiF,IAA/EC,EAA+E,EAA/EA,OAAQC,EAAuE,EAAvEA,mBAAoBjD,EAAmD,EAAnDA,OAAQ6B,EAA2C,EAA3CA,eAAgBqB,EAA2B,EAA3BA,qBACpF/F,GAAUgG,QAAwB,CAAC,OAAQ,WAAY,YADwD,GAiB5DC,OAAc,aAAc,CACjF9E,KAAM,YACN+E,QAAS,CAAC,YACVC,OAAQ,CACJC,OAAQ,6BAAuB1B,EAAvB,wDAC6CqB,EAAqB/E,KAAI,SAACqF,GAAD,OAAQA,EAAEC,kBAAiBC,KAAK,KADtG,QAJFnD,EAjBuG,EAiB7GzD,KAA2B6G,EAjBkF,EAiB3F3G,QAStB4G,EAAa,GACbC,EAAWX,EAAqB/E,KAAI,YAA4C,MAE5EyC,EACAkD,EAHmCL,EAAyC,EAAzCA,eAAuBM,EAAkB,EAAzBC,MAIvD,GAHAP,EAAiB,GAAH,OAAMA,GAGhBlD,EAAY,CACZ,IAGiB,QAHXD,EAtCqB,SAACC,EAAYkD,GAAb,OACnClD,EAAWE,MAAK,SAACH,GAAD,uBACZA,EAAU2D,sCADE,aACZ,EAA0ClD,SAAS0C,MAoC7BS,CAA+B3D,EAAW4D,WAAYV,GACpEnD,IACAM,EA5CY,SAACN,EAAW8D,GAAZ,OACxB9D,EAAUrC,SAASwC,MAAK,SAAC4D,GAAD,OAAuBA,EAAiBxD,QAAUuD,KA2CpDE,CAAoBhE,EAAW0C,EAAOnC,UAE5CD,EAAU,OACHA,GADA,IAEH2D,MAAK,UAAE3D,EAAQ4D,qBAAV,iBAAE,EAAuBD,aAAzB,aAAE,EAA8BzH,KACrCwD,UAAS,UAAEM,EAAQ4D,qBAAV,iBAAE,EAAuBlE,iBAAzB,aAAE,EAAkCxD,OAEjDgH,EAA4Bb,aAAH,EAAGA,EAAoBxC,MAAK,qBAAG5C,KAAgB+C,EAAQ/C,MAChF+F,EAAWa,KAAK7D,EAAQ/C,KAKpC,MAAO,CACH+C,UACAmD,cACAW,kBAAmBjB,EACnBR,mBAAkB,UAAEa,SAAF,aAAE,EAA2Ba,eAGvDd,EAAWA,EAASlD,QAAO,sBAAGC,WAE9B,IAAMD,EAAS,GAAH,QAAQiD,GAAc,IAAIzF,KAAI,SAACqF,GAAD,qBAAiBA,MAAOE,KAAK,SACjEkB,EAAoBjB,GAAuC,IAAlBhD,EAAOkE,OAzD+D,GA0DtEhI,cAASiG,EAAgB,CACpEgC,UAAW,CACPnE,UAEJoE,KAAMH,IAJII,EA1DuG,EA0D7GlI,KAAoBC,EA1DyF,EA0DzFA,MAAOC,EA1DkF,EA0DlFA,QAM7BiI,GAAcrB,aAAA,EAAAA,EAAYiB,QAAS,EAAKG,OAAeE,EACvDC,KAAiBnI,IAAW2G,SAA4BuB,EACxDE,GAAcrI,IAAUoI,GAAuC,KAAvBvB,aAAA,EAAAA,EAAYiB,QACpD5G,EAAW2G,EAAoB,GAAKI,aAAR,EAAQA,EAAc/G,SAASC,MAAMC,KAAI,SAACkH,GAAD,OAAQA,EAAEjH,QAYrF,OAVAC,sBAAgB,WACP8G,GACDnF,EAAO,qBAAsB/B,EAASE,KAAI,SAACyC,GAAD,YAAc,CACpD/C,GAAI+C,EAAQ/C,GACZ8G,YAAY1B,SAAA,UAAAA,EAAoBxC,MAAK,qBAAG5C,KAAgB+C,EAAQ/C,aAApD,eAAyD8G,aACzD/D,EAAQ2D,MAAMpG,KAAI,SAACmH,GAAD,OAAWA,EAAKzE,gBAGvD,CAAC5C,EAAUkH,IAEP,kBAAC,aAAD,KACH,kBAAC,EAAAnE,YAAD,CAAapC,UAAU,cACnB,kBAAC,EAAAqC,KAAD,CAAMC,UAAWC,mBAAjB,SAGA,kBAAC,EAAAF,KAAD,uBACmB,2BAAK+B,EAAOuC,MAD/B,kDAGA,kBAAC,EAAAtE,KAAD,iLAMJ,kBAAC,KAAD,CAAoBpC,YAAc,CAAE9B,QAAOD,KAAMmI,EAAWjI,QAASmI,EAAcC,eAC/E,kBAAC,KAAD,CAAetG,SAAS,cACpB,kBAAC,EAAA0G,WAAD,KACI,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,8BAGA,kBAAC,EAAAC,eAAD,kHAMR,kBAAC,KAAD,CAAe9G,SAAS,WACpB,kBAAC+G,EAAA,EAAD,KAAY,kBAAC1F,EAAA,EAAD,QAEhB,kBAAC,KAAD,CAAerB,SAAS,QACpB,kBAAC,KAAD,CACI+E,SAAWA,EACX1G,QAAUA,EACVoC,qBAAsB,EACtBuG,gBAAc,EACdC,MAAQ,EACRC,aAjHa,SAACpF,EAASqF,GACnC,IAAMC,EAAejD,EAAmB9E,KAAI,SAAC2F,GACzC,OAAIA,EAA0BjG,KAAO+C,EAAQ/C,GAClC,CACHA,GAAIiG,EAA0BjG,GAC9B8G,WAAYsB,GAGTnC,KAIf9D,EAAO,qBAAsBkG,UA2GrCnD,EAAwBZ,UAAY,CAChCa,OAAQb,WACRnC,OAAQoC,YACRP,eAAgBM,WAChBe,qBAAsBf,YAAkBA,UAAgB,CACpDsB,eAAgBtB,WAChB6B,MAAO7B,cAEXc,mBAAoBd,WAGxB,IAAME,GAAWC,OAAkB,cAEnC,SAAeC,cACXC,cACI,SAAAC,GAAK,MAAK,CACNO,OAAQmD,KAAKC,MAAM/D,EAASI,EAAO,YACnCZ,eAAgBQ,EAASI,EAAO,kBAChCS,qBAAsBb,EAASI,EAAO,wBACtCQ,mBAAoBZ,EAASI,EAAO,2BAG5CC,OAAU,CACNC,KAAM,aACNC,kBAAkB,EAClBC,0BAA0B,IAZlC,CAcEE,G,MCtMIvG,EAAQC,IAAH,MAAG,+eA2BD4J,EAAkB,SAAC,GAAiG,IAYjGC,EAClBC,EAboBC,EAA+F,EAA/FA,UAAWC,EAAoF,EAApFA,YAAa5E,EAAuE,EAAvEA,eAAgBqB,EAAuD,EAAvDA,qBAAsBD,EAAiC,EAAjCA,mBAAoBjD,EAAa,EAAbA,OAC1G0G,GAAoB9J,QAAW,oBAC/BO,GAAUgG,QAAwB,CAAC,OAAQ,WAAY,YAFgE,GAG5FtG,cAASL,EAAO,CAAEsI,UAAW,CAAE0B,YAAWC,iBAAnE3J,EAHqH,EAGrHA,KAAMC,EAH+G,EAG/GA,MAAOC,EAHwG,EAGxGA,QAHwG,GAI7E2J,cAAS,MAJoE,WAItHC,EAJsH,KAIpGC,EAJoG,KAKvHC,EAAehK,GAAQ,CAAC,CAC1B8D,QAAS,CAAEC,MAAO/D,EAAK8D,QAAQC,MAAO0E,KAAMzI,EAAK8D,QAAQ2E,MACzDhB,MAAOzH,EAAKwD,UAAUiE,QAoB1B,OAVAwC,gBAAU,WACN,GAAIjK,EAAM,CACN,IAAMwJ,EAAUxJ,EAAK8D,QAAQ2D,MAAMpG,KAAI,SAACmH,GAAD,OAAUA,EAAKzE,SACtDgG,EAAoBP,GACfrD,GACDjD,EAAO,qBAAsBsG,MAGtC,CAACxJ,EAAMkD,EAAQiD,IAEX,kBAAC,KAAD,CAAoBpE,YAAc,CAAE9B,QAAOD,OAAME,YACpD,kBAAC,KAAD,CAAe8B,SAAS,WACpB,kBAAC+G,EAAA,EAAD,KAAY,kBAAC1F,EAAA,EAAD,QAEhB,kBAAC,KAAD,CAAerB,SAAS,QACpB,kBAAC,EAAAkC,YAAD,KACI,kBAAC,EAAAC,KAAD,CAAMC,UAAWC,mBAAjB,UAIJ,kBAAC,EAAAH,YAAD,KACI,kBAAC,EAAAC,KAAD,2DAGA,kBAAC,EAAAA,KAAD,6BACyB,gCAAUnE,aAAV,EAAUA,EAAM8D,QAAQ2E,MADjD,QACuEqB,aADvE,EACuEA,EAAkB/B,OADzF,WAEM5B,IA9BRsD,EAAgBD,OADEA,EA+BgCrD,QA9BrC,EAAGqD,EAAS3F,QAAO,SAACqG,GAAD,OAAaJ,aAAb,EAAaA,EAAkB7F,SAASiG,QACvEV,GAAWM,GAAoBL,EAAc1B,SAAW+B,EAAiB/B,UA8BhE,kBAAC,EAAA/C,OAAD,CAAQG,QAAQ,OAAOgF,UAAQ,EAAClF,QAAU,kBAlC1D/B,EAAO,qBAAsB4G,KAkCb,+BAKNF,GAAqBxD,GAAwBA,EAAqB2B,OAAS,GACzE,kBAAC,EAAA5D,KAAD,qBACkB,IACZiC,EAAqB/E,KAAI,gBAAGsF,EAAH,EAAGA,eAAgBO,EAAnB,EAAmBA,MAAnB,qBACfnC,EADe,YACG4B,EADH,aACsBO,EADtB,gBACwCN,KAAK,QAIpF,kBAACwD,EAAA,GAAD,CACI3H,qBAAsB,EACtB4H,kBAAgB,EAChBrB,gBAAc,EACdsB,4BAA0B,EAC1BjK,QAAUA,EACVH,QAAUA,EACVgJ,aAAe,SAAC/C,GAAD,OAAwBjD,EAAO,qBAAsBiD,IACpE6D,aAAeA,EACfO,eAAiBpE,GAAsB,QAMvDoD,EAAgBlE,UAAY,CACxBqE,UAAWrE,WACXsE,YAAatE,WACbnC,OAAQoC,YACRP,eAAgBM,WAChBe,qBAAsBf,YAAkBA,UAAgB,CACpDsB,eAAgBtB,WAChB6B,MAAO7B,cAEXc,mBAAoBd,WAGxB,IAAME,GAAWC,OAAkB,cAE7BgF,GAA2B/E,cAC7BC,cACI,SAAAC,GAAK,MAAK,CACNgE,YAAapE,EAASI,EAAO,aAC7B7B,QAASuF,KAAKC,MAAM/D,EAASI,EAAO,YACpC+D,UAAWL,KAAKC,MAAM/D,EAASI,EAAO,YAAY5E,GAClDgE,eAAgBQ,EAASI,EAAO,kBAChCS,qBAAsBb,EAASI,EAAO,wBACtCQ,mBAAoBZ,EAASI,EAAO,2BAG5CC,OAAU,CACNC,KAAM,aACNC,kBAAkB,EAClBC,0BAA0B,IAdDN,CAgB/B8D,GASF,QAPuB,WAAc,IACjC,IAAMK,GAAoB9J,QAAW,oBAC/B2K,EAAYb,EAAoB3D,EAA0BuE,EAF/B,mBAAVhK,EAAU,yBAAVA,EAAU,gBAIjC,OAAO,kBAACiK,EAAejK,I,0mBC7I3B,IAAMkK,GAAoB,SAAC,GAAwE,IAAtExH,EAAsE,EAAtEA,OAAQ6B,EAA8D,EAA9DA,eAAgBqB,EAA8C,EAA9CA,qBAAsBuE,EAAwB,EAAxBA,kBACjE9K,GAAeC,QAAW,gBAC1B8J,GAAoB9J,QAAW,oBAE/BO,EAAU,CAAC,IACbC,IAAK,gCACLC,MAAO,OACPC,MAAO,CACHC,MAAO,GAAIC,UAAU,IAEtBb,GAAgB,CACfS,IAAK,eACLK,WAAY,SAACiK,EAAaC,EAAd,OAAqBpC,EAArB,EAAqBA,KAArB,OAAiCmC,GAAenC,KARpD,IAWZnI,IAAK,kCACLC,MAAO,mBACPC,MAAO,CACHC,MAAO,GAAIC,UAAU,IAEtBb,GAAgB,CACfS,IAAK,iBACLK,WAAY,SAACgG,EAAgBkE,EAAjB,OAAwB9F,EAAxB,EAAwBA,eAAxB,qBAAqDA,EAArD,YAAuE4B,QAI3FsD,gBAAU,WACFU,GACAzH,EAAO,UAAWyH,GAGlBvE,GACAlD,EAAO,uBAAwBkD,KAEpC,CAACuE,EAAmBvE,EAAsBlD,IAE7C,IAAM4H,EAAuB,kBAAC,aAAD,KACzB,kBAAC,EAAA5G,YAAD,CAAapC,UAAU,cACnB,kBAAC,EAAAqC,KAAD,4BACwB,mCAAUY,GADlC,6DACgH,6BADhH,uDAKJ,kBAAC,EAAAb,YAAD,CAAapC,UAAU,cACnB,kBAAC,EAAAqC,KAAD,wDACoD,mCAAUY,GAD9D,0BAIJ,kBAAC,EAAAgG,sBAAD,MACM,gBAAGC,EAAH,EAAGA,aAAH,OAAsB,kBAAC,EAAAhG,OAAD,CAAQC,QAAS,kBAAM+F,EAAa,KAApC,2CAI1BC,EAAoB,kBAAC,aAAD,KACtB,kBAAC,EAAA/G,YAAD,CAAapC,UAAU,cACnB,kBAAC,EAAAqC,KAAD,6BACyB,mCAAUY,GADnC,8CAEmB,6BAFnB,kDAQFmG,EAASrL,EAAe+B,KAAiBC,KAE/C,OACI,kBAAC,aAAD,KACI,kBAAC,EAAAqC,YAAD,CAAapC,UAAU,cACnB,kBAAC,EAAAqC,KAAD,CAAMC,UAAWC,mBAAjB,YAIJ,kBAAC,EAAAC,KAAD,KACI,kBAAC,EAAAC,UAAD,KACI,kBAAC2G,EAAD,CACID,iBAAkBA,EAClBH,oBAAqBlB,EAAoBkB,OAAsB1C,EAC/D/H,QAASA,EACToC,qBAAqB,EACrB0I,SAAO,EACPC,aAAc,EACdnJ,MAAQoJ,KACRlJ,cAAgB4C,GAAkB,sBAAJ,OAA0BA,GACxDuG,cAAe,QAOvCZ,GAAkBrF,UAAY,CAC1BN,eAAgBM,WAChBe,qBAAsBf,YAAkBA,UAAgB,CACpDsB,eAAgBtB,WAChB6B,MAAO7B,cAEXsF,kBAAmBtF,UACnBnC,OAAQoC,aAGZoF,GAAkBa,aAAe,CAC7BZ,kBAAmB,GACnBvE,qBAAsB,IAG1B,IAAMb,IAAWC,OAAkB,cAOnC,UAAeC,cACXC,cAPoB,SAACC,GAAD,cAAY,CAChCZ,eAAgBQ,GAASI,EAAO,kBAChCS,sBAAsBoF,QAAoB,UAAC7F,EAAM8F,gBAAP,aAAC,EAAgBC,kBAC3Df,oBAAoB,UAAAhF,EAAM8F,gBAAN,eAAgBC,mBAAoB,IAAIrK,KAAI,SAACsK,GAAD,OAAQA,EAAE5K,WAK1E6E,OAAU,CACNC,KAAM,aACNC,kBAAkB,EAClBC,0BAA0B,IALlC,CAOE2E,I,2BCzHIkB,GAAoB,SAAC,GAA8B,IAA5B1I,EAA4B,EAA5BA,OAAQgD,EAAoB,EAApBA,OAAQnC,EAAY,EAAZA,MAUzC,OARAkG,gBAAU,WACF/D,GAAUA,EAAOnC,QAAUA,IAC3Bb,EAAO,OAAD,UAAYgD,EAAOuC,OACzBvF,EAAO,QAAD,UAAagD,EAAOnC,QAC1Bb,EAAO,cAAD,UAAmBgD,EAAO2F,iBAErC,CAAC3F,IAGA,kBAAC,aAAD,KACI,kBAAC,EAAAhC,YAAD,KACI,kBAAC,EAAAC,KAAD,CAAMC,UAAWC,mBAAjB,YAIJ,6BACA,kBAAC,EAAAC,KAAD,CAAMvD,GAAG,qBACL,kBAAC,EAAAwD,UAAD,CAAWC,MAAM,cAAcC,YAAU,EAACC,QAAQ,QAC9C,kBAACoH,GAAA,EAAD,CACI1H,UAAW2H,MACXvK,KAAK,OACLiD,YAAY,EACZ1D,GAAG,OACH0H,KAAK,OACLuD,mBAAiB,UAEzB,kBAAC,EAAAzH,UAAD,CAAWC,MAAM,eAAeC,YAAU,EAACC,QAAQ,SAC/C,kBAACoH,GAAA,EAAD,CACItK,KAAK,OACL4C,UAAW2H,MACXE,YAAU,EACVlL,GAAG,QACH0H,KAAK,QACLuD,mBAAiB,WAEzB,kBAAC,EAAAzH,UAAD,CAAWC,MAAM,cAAcE,QAAQ,eACnC,kBAACoH,GAAA,EAAD,CACItK,KAAK,OACL4C,UAAW8H,MACXnL,GAAG,cACH0H,KAAK,cACLuD,mBAAiB,iBAEzB,kBAAC,EAAAzH,UAAD,CAAWC,MAAM,qBAAqBE,QAAQ,qBAC1C,kBAACoH,GAAA,EAAD,CACItK,KAAK,OACL4C,UAAY2H,MACZhL,GAAG,oBACH0H,KAAK,oBACLuD,mBAAiB,oBACjBG,aAAejG,EAAOkG,qBAE9B,kBAAC,KAAD,CACIC,WAAY,EACZC,kBAAoBpG,EAAOqG,yBAMzChH,IAAWC,OAAkB,cAEnCoG,GAAkBvG,UAAY,CAC1Ba,OAAQb,WACRtB,MAAOsB,WACPnC,OAAQoC,aAmBZ,UAAeG,cACXC,cAjBoB,SAACC,GACrB,IAAMO,EAASmD,KAAKC,MAAM/D,GAASI,EAAO,YAC1C,MAAO,CACHO,SACAnC,MAAOwB,GAASI,EAAO,SACvB6G,cAAe,CACX/D,KAAM,GAAF,OAAKvC,EAAOuC,MAChB1E,MAAO,GAAF,OAAKmC,EAAOnC,OACjB8H,YAAa,GAAF,OAAK3F,EAAO2F,aACvBrI,UAAW+B,GAASI,EAAO,aAC3BZ,eAAgBQ,GAASI,EAAO,kBAChC7B,QAASyB,GAASI,EAAO,iBAOjCC,OAAU,CACNC,KAAM,aACNC,kBAAkB,EAClBC,0BAA0B,IALlC,CAOE6F,I,OCrFIa,GAAS9M,IAAH,QAAG,sIAST+M,GAAsB,SAAC,GAEvB,IADF/C,EACE,EADFA,YAAalB,EACX,EADWA,KAAM2D,EACjB,EADiBA,kBAAmBG,EACpC,EADoCA,oBAAqBI,EACzD,EADyDA,kBAAmBvG,EAC5E,EAD4EA,qBAC5E,GAC+BrG,cAAS0M,GAAQ,CAAEzE,UAAW,CAAE2B,iBAAzD3J,EADN,EACMA,KAAMC,EADZ,EACYA,MAAOC,EADnB,EACmBA,QAErB,GAAID,EAAS,OAAOA,EAEpB,GAAIC,EAAW,OAAO,kBAACmD,EAAA,EAAD,MALpB,IAOmB0B,EAAqB/E,EAAlCwD,UAAauB,eAErB,OACI,kBAAC,EAAAb,YAAD,KACI,kBAAC,EAAAC,KAAD,CAAMC,UAAWC,mBAAjB,UAGA,kBAAC,EAAAF,KAAD,kDAGA,kBAAC,EAAAA,KAAD,CAAMC,UAAWC,mBAAmBoE,GACpC,kBAAC,EAAAmE,SAAD,CAAUxI,UAAWyI,uBACjB,kBAAC,EAAAC,aAAD,CAAc1I,UAAW2I,2BAAzB,eACA,kBAAC,EAAAD,aAAD,CAAc1I,UAAW2I,2BAA2BJ,GACpD,kBAAC,EAAAG,aAAD,CAAc1I,UAAW2I,2BAAzB,wBACA,kBAAC,EAAAD,aAAD,CAAc1I,UAAW2I,2BAA2BR,EAApD,KACEH,GACE,kBAAC,aAAD,KACI,kBAAC,EAAAU,aAAD,CAAc1I,UAAW2I,2BAAzB,sBACA,kBAAC,EAAAD,aAAD,CAAc1I,UAAW2I,2BAA2BX,IAG5D,kBAAC,EAAAU,aAAD,CAAc1I,UAAW2I,2BAAzB,WACA,kBAAC,EAAAD,aAAD,CAAc1I,UAAW2I,2BACrB,kBAAC,EAAAH,SAAD,CAAUxI,UAAWyI,uBACfzG,EAAqB/E,KAAI,gBAAGsF,EAAH,EAAGA,eAAgBO,EAAnB,EAAmBA,MAAnB,OACvB,kBAAC,aAAD,CAAgB5G,IAAKqG,GACjB,kBAAC,EAAAmG,aAAD,CAAc1I,UAAW2I,0BAAyBhK,MAAO,CAAE,cAAe,WAA1E,QACUgC,EADV,IAC2B4B,GAE3B,kBAAC,EAAAmG,aAAD,CAAc1I,UAAW2I,2BACnB7F,YAWtCwF,GAAoBrH,UAAY,CAC5BsE,YAAatE,WACbtB,MAAOsB,WACPoD,KAAMpD,WACN+G,kBAAmB/G,WACnBkH,oBAAqBlH,WACrBsH,kBAAmBtH,WACnBe,qBAAsBf,YAAkBA,UAAgB,CACpDsB,eAAgBtB,WAChB6B,MAAO7B,eAIf,IAAME,IAAWC,OAAkB,cAEnC,UAAeE,cACX,SAAAC,GAAK,MAAK,CACNgE,YAAapE,GAASI,EAAO,aAC7B5B,MAAOwB,GAASI,EAAO,SACvB8C,KAAMlD,GAASI,EAAO,QACtByG,kBAAmB7G,GAASI,EAAO,qBACnCS,qBAAsBb,GAASI,EAAO,wBACtC4G,oBAAqBS,WAAWzH,GAASI,EAAO,yBAA2B,IAC3EgH,kBAAmBtD,KAAKC,MAAM/D,GAASI,EAAO,YAAY8C,KAC1DwE,WAAY1H,GAASI,EAAO,sBAAsBoC,UAT1D,CAWE2E,I,uCCzFIQ,GAAuB,SAAC,GAWxB,IAkCEC,EAOAC,EAnDJC,EAUE,EAVFA,eACAC,EASE,EATFA,mBACAzB,EAQE,EARFA,YACApD,EAOE,EAPFA,KACA8D,EAME,EANFA,oBACAH,EAKE,EALFA,kBACArI,EAIE,EAJFA,MACA4F,EAGE,EAHFA,YACA4D,EAEE,EAFFA,UACApH,EACE,EADFA,mBACE,GAC4B0D,cAAS,GADrC,WACK2D,EADL,KACcC,EADd,QAE4B5D,cAAS,uCAFrC,WAEK6D,EAFL,KAEcC,EAFd,QAG0B9D,cAAS,MAHnC,WAGK+D,EAHL,KAGaC,EAHb,QAI0BhE,eAAS,GAJnC,WAIKiE,EAJL,KAIaC,EAJb,KAKIC,GAAeC,UAEfC,EAAa,SAACC,GAChBV,EAAsB,IAAXU,IA4Cf,OAzCAlE,gBAAU,WACN,IAAMmE,EAAY,CACdd,qBACAzB,cACApD,OACA8D,sBACAH,kBAAmB,CAAE7L,MAAO6L,GAC5BrI,QACA4F,cACA0E,MAAOd,EAAUlM,KAAI,SAACN,GAAD,MAAS,CAAEA,SAChCoF,sBAGJ6H,EAAa,KAAMI,EAAWF,GAAYI,MAAK,WAC3Cb,EAAW,KACXE,OACDY,OAAM,SAACtO,GAAU,UAChB0N,EAAU,UAAC1N,EAAMuO,oBAAP,aAAC,EAAoBd,SAC/BG,EAAS,UAAC5N,EAAMuO,oBAAP,iBAAC,EAAoBC,cAArB,aAAC,EAA4Bb,QACtCG,GAAU,QAEf,IAGCH,GAAUc,MAAMC,QAAQf,IAAWA,EAAO7F,OAAS,IACnDoF,EAAaS,EAAOvM,KAAI,SAACpB,GAAD,OACpB,kBAAC,EAAA2O,SAAD,CAAUtO,IAAML,GAAUA,QAKlB,MAAZuN,GAAmBM,KACnBV,EACI,kBAAC,EAAApI,OAAD,CACIG,QAAS,UACTF,QAAS,WAAQoI,MACfS,EAAS,OAAS,0BAM5B,kBAAC,EAAAe,SAAD,KACI,kBAAC,EAAAnG,WAAD,CAAYvD,QAAS2J,0BACjB,kBAAC,EAAAC,eAAD,CAAgBC,KAAMC,QACtB,6BACA,kBAAC,EAAAtG,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,mBAGA,kBAAC,EAAAC,eAAD,KACI,kBAAC,KAAD,CAAa0E,QAASA,EAASM,OAAQA,KAE3C,kBAAC,EAAAhF,eAAD,CAAgBhH,UAAWgM,GAAU,yBAC/BJ,GAEJP,GACE,kBAAC,EAAArE,eAAD,CAAgBhH,UAAU,wBACtB,kBAAC,EAAAoN,KAAD,KAAQ/B,IAGhB,kBAAC,EAAAgC,2BAAD,KACM/B,MAOtBF,GAAqB7H,UAAY,CAC7BsE,YAAatE,sBACb+J,OAAQ/J,sBACR+G,kBAAmB/G,WACnBiI,mBAAoBjI,sBACpBtB,MAAOsB,sBACPoD,KAAMpD,sBACNwG,YAAaxG,WACbkI,UAAWlI,UACXkH,oBAAqBlH,WACrBgI,eAAgBhI,SAChBc,mBAAoBd,YAAkBA,YAAkBZ,YAGrD,IAAMc,IAAWC,OAAkB,cAE1C,UAAeC,cACXC,cACI,SAAAC,GAAK,MAAK,CACNgE,YAAapE,GAASI,EAAO,aAC7ByG,kBAAmB7G,GAASI,EAAO,qBACnC2H,mBAAoBjE,KAAKC,MAAM/D,GAASI,EAAO,YAAY5E,GAC3DgD,MAAOwB,GAASI,EAAO,SACvB8C,KAAMlD,GAASI,EAAO,QACtBkG,YAAatG,GAASI,EAAO,eAC7B4G,oBAAqBS,WAAWzH,GAASI,EAAO,yBAA2B,IAC3E4H,UAAWhI,GAASI,EAAO,WAC3BQ,mBAAoBZ,GAASI,EAAO,2BAG5CC,OAAU,CACNC,KAAM,aACNC,kBAAkB,EAClBC,0BAA0B,IAE9BsJ,cAnBJ,CAoBEnC,I,qlBC9HK,IAAMoC,GAAe,SAAC,GAEvB,IADF9L,EACE,EADFA,UAAWuB,EACT,EADSA,eAAgBwH,EACzB,EADyBA,oBAAqB9D,EAC9C,EAD8CA,KAAM3E,EACpD,EADoDA,QAASC,EAC7D,EAD6DA,MAAOoC,EACpE,EADoEA,mBAAoBoH,EACxF,EADwFA,UAEpFgC,GAAUC,kBADd,GAEwC3F,cAAS,GAFjD,WAEK4F,EAFL,KAEoBC,EAFpB,KAIIC,EAAc,WAAM,IACdC,EAAaL,EAAbK,SACJA,EAASC,MACTN,EAAQ5H,KAAR,SAAkBiI,GAAlB,IAA4BC,KAAM,OASpCC,EAAU,WACZP,EAAQ5H,KAAK,kBAGXoI,EAAQ,CACV,CACIhP,GAAI,EACJ0H,KAAM,qBACNrE,UAAW,kBAAC,EAAD,MACX4L,YAAYC,SAAsBzM,EAAWuB,EAAgBjB,IAEjE,CACI/C,GAAI,EACJ0H,KAAM,UACNrE,UAAW,kBAAC,GAAD,MACX8L,UAAWT,GAAiB,EAC5BO,YAAYG,SAAoB1H,EAAM1E,EAAOwI,IAEjD,CACIxL,GAAI,EACJ0H,KAAM,UACNrE,UAAW,kBAAC,GAAD,MACX8L,UAAWT,GAAiB,EAC5BO,YAAYI,SAAoB7C,IAEpC,CACIxM,GAAI,EACJ0H,KAAM,QACNrE,UAAW,kBAAC,EAAD,MACX8L,WAAW3C,aAAA,EAAAA,EAAWxF,QAAS,GAAK0H,GAAiB,EACrDO,YAAYK,SAAkBlK,IAElC,CACIpF,GAAI,EACJ0H,KAAM,SACNrE,UAAW,kBAAC,GAAD,MACXkM,eAAgB,SAChBJ,WACIG,SAAkBlK,KAClBoH,aAAA,EAAAA,EAAWxF,QAAS,GACpB0H,GAAiB,GAGzB,CACI1O,GAAI,EACJ0H,KAAM,WACNrE,UAAW,kBAAC,GAAD,CAAsBiJ,eAAiByC,IAClDS,gBAAgB,EAChBL,WAAW3C,aAAA,EAAAA,EAAWxF,QAAS,GAAK0H,GAAiB,IAI7D,OACI,kBAAC,aAAD,KACI,kBAAC,EAAAe,OAAD,CACIC,QAAM,EACNhQ,MAAQ,KACRiQ,OA9DG,SAAC,GAAW,IAAT3P,EAAS,EAATA,GACd2O,EAAiBD,EAAgB1O,EAAKA,EAAK0O,GAC3CE,KA6DQgB,WAAahB,EACbiB,OAASjB,EACTG,QAAUA,EACVvP,MAAM,qBACNsL,YAAY,mDACZkE,MAAQA,MAKxBT,GAAajK,UAAY,CACrB7B,UAAW6B,WACXN,eAAgBM,WAChBe,qBAAsBf,YAAkBA,UAAgB,CACpDsB,eAAgBtB,WAChB6B,MAAO7B,cAEXkH,oBAAqBlH,WACrB+G,kBAAmB/G,WACnBlF,SAAUkF,SACVoL,OAAQpL,SACRoD,KAAMpD,WACNgI,eAAgBhI,SAChBvB,QAASuB,WACTtB,MAAOsB,WACPc,mBAAoBd,YAAkBA,YACtCkI,UAAWlI,YAAkBA,aAGjCiK,GAAa/D,aAAe,CACxBkF,QAAQ,GAGZ,IAAMlL,IAAWC,OAAkB,cACnC,UAAeE,cACX,SAAAC,GAAK,MAAK,CACNnC,UAAW+B,GAASI,EAAO,aAC3BZ,eAAgBQ,GAASI,EAAO,kBAChCS,qBAAsBb,GAASI,EAAO,wBACtCyG,kBAAmB7G,GAASI,EAAO,qBACnC4G,oBAAqBhH,GAASI,EAAO,wBAA0B,QAC/D8C,KAAMlD,GAASI,EAAO,QACtB7B,QAASyB,GAASI,EAAO,WACzB5B,MAAOwB,GAASI,EAAO,SACvBQ,mBAAoBZ,GAASI,EAAO,sBACpC4H,UAAWhI,GAASI,EAAO,cAXnC,CAaE2J,K,q5BClIK,IASDuB,EAAuB,SAAC,GAAiC,MAA/B3K,EAA+B,EAA/BA,OAAQ4K,EAAuB,EAAvBA,iBAAuB,EAT3B,WAAM,OACMjH,eAAS,GADf,WAC/BkH,EAD+B,KACfC,EADe,KAEtC,MAAO,CAACD,EAAgB,SAACE,GACrB,IAAMC,GAAQC,QAAeF,GAE7B,OADAD,EAAkBE,GACXA,IAKiCE,GADe,WACpDL,EADoD,KACpCM,EADoC,KAG3D,OAAO,kBAAC,aAAD,KACH,kBAAC,EAAA9M,UAAD,CAAWC,MAAM,qBAAqBC,YAAU,EAACC,QAAQ,eACrD,kBAAC,EAAA4M,SAAD,CACIvO,MAAQ,CAAEtC,MAAO,IAAK8Q,OAAQ,KAC9B9M,YAAU,EACVjD,KAAK,OACLT,GAAG,cACH0H,KAAK,cACLuD,mBAAiB,cACjBG,aAAejG,EAAO2F,YACtB2F,SAAW,SAACC,GACRX,GAAiB,SAAC5K,GAAD,cACVA,GADU,IAEb2F,YAAa4F,WAK7B,kBAAC,EAAAlN,UAAD,CAAWC,MAAM,qBAAqBE,QAAQ,sBAC1C,kBAAC,EAAAgN,UAAD,CACIlQ,KAAK,OACLuB,MAAQ,CAAEtC,MAAO,KACjBM,GAAG,qBACH0H,KAAK,qBACLuD,mBAAiB,qBACjBG,aAAejG,SAAH,UAAGA,EAAQkG,yBAAX,aAAG,EAA2B7L,MAC1CiR,SAAW,SAACC,GACRX,GAAiB,SAAC5K,GAAD,cACVA,GADU,IAEbkG,kBAAmB,EAAF,KACVlG,EAAOkG,mBADG,IAEb7L,MAAOkR,aAM3B,kBAAC,EAAAlN,UAAD,CACIoN,UAAYZ,EAAiB,UAAY,QACzCvM,MAAM,2BACNE,QAAQ,mBACRkN,kBAAkB,iDAClBC,WAAW,2CACX,kBAAC,EAAAH,UAAD,CACIlQ,KAAK,SACLuB,MAAQ,CAAEtC,MAAO,KACjBgI,KAAK,uBACL1H,GAAG,uBACHoL,aAAejG,EAAOqG,oBACtBP,mBAAiB,mBACjBwF,SAAW,SAACC,GACRX,GAAiB,SAAC5K,GAAD,cACVA,GADU,IAEbqG,oBAAqBkF,EACrBK,yBAA0BT,EAAkBI,cAOpEZ,EAAqBxL,UAAY,CAC7Ba,OAAQb,UAAgB,CACpBwG,YAAaxG,WACb+G,kBAAmB/G,WACnBkH,oBAAqBlH,cAAoB,CACrCA,WACAA,eAGRyL,iBAAkBzL,UAGtB,U,umBC/EA,IAAMW,EAAiBrG,IAAH,63BAgDdoS,EAA+B,kBAAM,kBAAC,EAAArJ,WAAD,KACvC,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,8BAGA,kBAAC,EAAAC,eAAD,yFAGA,kBAAC,EAAAA,eAAD,sEAKEkJ,EAAqB,SAAC,GAAuE,MAArE9I,EAAqE,EAArEA,aAAchD,EAAuD,EAAvDA,OAAQC,EAA+C,EAA/CA,mBAAoBC,EAA2B,EAA3BA,qBAC9DrB,EAAiBmB,aAAH,EAAGA,EAAQnB,eACzBkN,EAAkBC,OAAOC,KAAK/L,GAAsBzB,OACpDyN,EAAkB,6BAAuBrN,EAAvB,wDACyBkN,EAAgBrL,KAAK,KAD9C,KAHuE,GAMtCN,OAAc,aAAc,CACjF9E,KAAM,YACN+E,QAAS,CAAC,YACVC,OAAQ,CAAEC,OAAQ2L,GAClBnK,KAAiC,IAA3BgK,EAAgBlK,QACvB,CAACqK,IALU3O,EANiF,EAMvFzD,KAA2B6G,EAN4D,EAMrE3G,QAOtB4G,EAAa,GACbC,EAAWmL,OAAOG,OAAOjM,GAAsBzB,MAC/C2N,OAAc,iBAAkB,SAClCjR,KAAI,YAA4C,MAAzCsF,EAAyC,EAAzCA,eAAuBM,EAAkB,EAAzBC,MACrBP,EAAiB,GAAH,OAAMA,GACpB,IAAI7C,EAAUoC,EAAOA,OAAO/E,SAASwC,MAAK,SAACG,GAAD,OAAcA,EAAQ6C,iBAAmBA,KAEnF,IAAK7C,GAAWL,EAAY,CACxB,IAAMD,EA3CqB,SAACC,EAAYkD,GAAb,OACnClD,EAAWE,MAAK,SAACH,GAAD,uBACZA,EAAU2D,sCADE,aACZ,EAA0ClD,SAAS0C,MAyC7BS,CAA+B3D,EAAW4D,WAAYV,GACxE,GAAInD,EAAW,CACX,IACsB,QADhB+D,EAvCM,SAAC/D,EAAW8D,GAAZ,OACxB9D,EAAUrC,SAASwC,MAAK,SAAC4D,GAAD,OAAuBA,EAAiBxD,QAAUuD,KAsCrCE,CAAoBhE,EAAW0C,EAAOnC,OAC3DwD,IACAzD,EAAUoC,EAAOA,OAAO/E,SAASwC,MAAK,SAACG,GAAD,OAAcA,EAAQyO,kBAAoBhL,EAAiBxG,MAEjG+C,EAAU,OACHyD,GADA,IAEH/D,UAAS,UAAE+D,EAAiBG,qBAAnB,iBAAE,EAAgClE,iBAAlC,aAAE,EAA2CxD,KACtDyH,MAAK,UAAEF,EAAiBG,qBAAnB,iBAAE,EAAgCD,aAAlC,aAAE,EAAuCzH,MAC3C8D,KAMnB,MAAO,CACHA,UACAmD,cACAW,kBAAmBjB,EACnBR,mBAAoBA,SAAF,UAAEA,EAAoBxC,MAAK,2BAAG5C,MAAW,UAAK+C,SAAL,aAAK,EAAS/C,cAAvD,aAAE,EAA0D8G,gBAGtFd,EAAWA,EAASlD,QAAO,gBAAGC,EAAH,EAAGA,QAAS8D,EAAZ,EAAYA,kBAAZ,QAAsC9D,GAAW8D,MAEnE4K,SAAQ,SAACC,GAAD,OAAU3L,EAAWa,KAAK8K,EAAI3O,QAAQ/C,OAEvD,IAAM8C,EAAS,GAAH,QAAQiD,GAAc,IAAIzF,KAAI,SAACqF,GAAD,qBAAiBA,MAAOE,KAAK,SAhDwB,GAiDhD7G,cAASiG,EAAgB,CACpEgC,UAAW,CACPnE,UAEJoE,KAAwB,IAAlBpE,EAAOkE,SAJHG,EAjDiF,EAiDvFlI,KAAoBC,EAjDmE,EAiDnEA,MAMtBoI,KAvDyF,EAiD5DnI,UAMD2G,SAA4BuB,EACxDD,GAAeE,IAAwB,QAAR,EAAAtB,SAAA,eAAUgB,QAAS,EAAKG,OAAeE,EAe5E,OAbA7G,sBAAgB,WACR2G,KACiBA,aAAA,EAAAA,EAAc/G,SAASC,MAAMC,KAAI,SAACkH,GAAD,OAAQA,EAAEjH,UAAU,IAC7DkR,SAAQ,SAAC1O,GAEd,KADuBqC,aAAH,EAAGA,EAAoBxC,MAAK,qBAAG5C,MAAgB+C,aAAL,EAAKA,EAAS/C,QACvD,CACjB,IAAM2R,EAAS5O,EAAQ2D,MAAMpG,KAAI,SAACmH,GAAD,OAAWA,EAAKzE,SACjDmF,EAAapF,EAAS4O,SAInC,CAACxK,IAEG,kBAAC,KAAD,CAAoBnG,YAAc,CACrC9B,QAAOD,KAAMmI,EAAWjI,QAASmI,EAAcsK,OAAQtK,IAAiBF,IAExE,kBAAC,KAAD,CAAenG,SAAS,WACpB,kBAAC+G,EAAA,EAAD,KAAY,kBAAC1F,EAAA,EAAD,QAEhB,kBAAC,KAAD,CAAerB,SAAS,QACpB,kBAAC,EAAAkC,YAAD,KACI,kBAAC,EAAAC,KAAD,8KAKJ,kBAAC,KAAD,CACI4C,SAAWA,EACXtE,qBAAsB,EACtBuG,gBAAc,EACdC,MAAQ,EACRC,aAAeA,KAEvB,kBAAC,KAAD,CAAelH,SAAS,SACpB,kBAAC+P,EAAD,SAKZC,EAAmB3M,UAAY,CAC3B6D,aAAc7D,SACda,OAAQb,WACRe,qBAAsBf,UAAgB,CAClCsB,eAAgBtB,UAAgB,CAC5BsB,eAAgBtB,WAChB6B,MAAO7B,eAGfc,mBAAoBd,WAGxB,U,2lBC9KA,IAAMuN,EAAuB,SAAC,GAA8C,IAA5C7N,EAA4C,EAA5CA,eAAgB8N,EAA4B,EAA5BA,sBAA4B,GAC7CrD,kBAAnB7H,EADgE,EAChEA,KAAMiI,EAD0D,EAC1DA,SACRkD,GAAgCC,kBAAY,SAAApN,GAAK,eACnDA,SADmD,UACnDA,EAAO8F,gBAD4C,iBACnD,EAAiBC,wBADkC,aACnD,EAAmCrK,KAAI,SAAA2R,GAAM,gBAAOA,EAAOrM,sBAyBzDmE,EAAuB,kBAAC,aAAD,KACzB,kBAAC,EAAA5G,YAAD,CAAapC,UAAU,cACnB,kBAAC,EAAAqC,KAAD,4BACwB,mCAAUY,GADlC,+DAIJ,kBAAC,EAAAb,YAAD,CAAapC,UAAU,cACnB,kBAAC,EAAAqC,KAAD,qBACmBY,EADnB,2BAMFkG,EAAoB,kBAAC,aAAD,KACtB,kBAAC,EAAA/G,YAAD,CAAapC,UAAU,cACnB,kBAAC,EAAAqC,KAAD,6BACyB,mCAAUY,GADnC,iDAOR,OACI,kBAAC,aAAD,KACI,kBAAC,KAAD,CACIkG,iBAAkBA,EAClBH,oBAAqBA,EACrBzK,QA3CI,CAAC,CACbC,IAAK,eACLC,MAAO,OACPC,MAAO,CACHC,MAAO,GAAIC,UAAU,GAEzBC,WAAY,SAACiK,EAAaC,EAAd,OAAqBpC,EAArB,EAAqBA,KAArB,OAAiCmC,GAAenC,IAC7D,CACCnI,IAAK,iBACLC,MAAO,mBACPC,MAAO,CACHC,MAAO,GAAIC,UAAU,GAEzBC,WAAY,SAACgG,EAAgBkE,EAAjB,OAAwB9F,EAAxB,EAAwBA,eAAxB,qBAAqDA,EAArD,YAAuE4B,MA+B3EwE,SAAO,EACPC,aAAc,EACdnJ,MAAQoJ,KACRlJ,cAAgB4C,GAAkB,sBAAJ,OAA0BA,GACxDuG,cAAe,EACf7I,qBAAsB,KAtD9BqQ,aADuB,EACvBA,EAA+BnP,MAAK,SAACsP,GAAD,OAC/BJ,EAAsB5O,SAASgP,QAuDP,kBAAC,EAAAC,MAAD,CACrB/N,QAAQ,OACRgF,UAAQ,EACR5J,MAAM,2FACN4S,YACI,kBAAC,EAAAC,gBAAD,CAAiBnO,QAAU,kBAAM0C,EAAK,OAAKiI,GAAN,IAAgBC,KAAM,cAA3D,sBAEJ,wIAMhB+C,EAAqBvN,UAAY,CAC7BN,eAAgBM,WAChBwN,sBAAuBxN,YAAkBA,aAG7C,U,wmBCvEO,IAAMgO,EAAqB1T,IAAH,MAAG,+vCAyD5B2T,EAAuB,SAACnS,EAAUkN,GAAX,OACxBlN,GAAY,IAAIoS,QAAO,SAACC,EAAK1P,GACS,MAInC,MAJ+B,KAA3BA,EAAQ6C,iBACR6M,EAAI,EAAA1P,EAAQ6C,kBAAZ6M,EAAI,GAA4B,CAAE7M,eAAgB7C,EAAQ6C,eAAgBO,MAAO,KAG9EsM,KACRC,QAAwBpF,GAAS,MAG3BqF,GAAa,SAAC,GAAc,MAAZC,EAAY,EAAZA,MACNC,GAAaC,iBAAxBC,UACF9T,GAASD,cAASsT,EAAoB,CACxCrL,UAAW,CAAE4L,cADX5T,KAGAkG,EAASlG,aAAH,EAAGA,EAAM8D,QACfiQ,GAAiB7N,SAAA,UAAAA,EAAQA,cAAR,eAAgB/E,WAAY,GAC7CtB,GAAeC,QAAW,gBAC1BK,GAAWC,mBACX4T,GAASC,UATsB,GAUKpK,cAAS,MAVd,WAU9BqK,EAV8B,KAUfpD,EAVe,QAWejH,cAAS,IAXxB,WAW9B1D,EAX8B,KAWVgO,EAXU,QAYmBtK,cAAS,IAZ5B,WAY9BzD,EAZ8B,KAYRgO,EAZQ,KAa/BpG,GAAeC,SACfoG,GAAmBC,QAAoB,iBAdR,GAeLzK,gBAfK,WAe9B0K,EAf8B,KAepBC,EAfoB,KAgB/B9I,GAAmBqH,kBAAY,SAACpN,GAAD,aAAYA,SAAZ,UAAYA,EAAO8F,gBAAnB,aAAY,EAAiBC,oBAC5D+I,EAAcP,IAAkBA,EAAcpC,yBAE9C4C,EAA2B,WAC7B7U,GAAgBM,EAAS,CACrBqB,KAAM,kBACNC,QAAS,CAAEC,IAAK,MAEpB2S,EAAiB,CAAExE,KAAMmE,KA2BvBW,EAAU,CACZ,kBAAC,EAAA3P,OAAD,CACIiH,WAAawI,EACbnU,IAAI,OACJ6E,QAAQ,UACRyP,qBAAqB,SACrBC,UAAYN,EACZtP,QArBO,WACPsP,IAEJC,GAAY,GACZxG,EAAa9H,EAAQgO,GAAe5F,MAAK,WACrCkG,GAAY,GACZE,OACDnG,OAAM,WAELiG,GAAY,GACZE,UAKJ,QASA,kBAAC,EAAA1P,OAAD,CACI1E,IAAI,SACJ6E,QAAQ,YACRF,QAAU,kBAAMyP,MAHpB,WAQEI,EAA2B,WACzB5O,GACAiO,EAAsBJ,EAAe1S,KAAI,SAAC0T,GAAD,MAAoB,CACzDhU,GAAIgU,EAAchU,GAClB8G,WAAYkN,EAActN,MAAMpG,KAAI,SAACmH,GAAD,OAAWA,EAAKzE,eAyChE,OApCAkG,gBAAU,WACN6G,EAAiB,OACVoD,GADS,IAEZ7F,MAAO3C,GAAsC,MAEjDoJ,IAEAV,EACId,EAAqBS,EAAgBrI,MAE1C,CAACA,KAEJzB,gBAAU,kBAAM6G,EAAiB,OAAKoD,GAAN,IAAqB/N,0BAAuB,CAACA,KAE7E8D,gBAAU,WACN,GAAI/D,EAAQ,CACR,IAAM4L,EACD5L,EAAOqG,oBAAsB,KAAOrG,EAAOqG,oBAAsB,EACtEuE,EAAiB,OACV5K,GADS,IAEZ4L,8BAEJgD,IAEA3U,EAAS,CACLqB,KAAM,kBACNC,QAAS,CAAEC,KAAKwE,aAAA,EAAAA,EAAQmI,QAAS,MAErC+F,EACId,EAAqBS,EAAgB7N,EAAOmI,WAGrD,CAACnI,KAEJ8O,OAAerB,EAAOzN,aAAR,EAAQA,EAAQuC,MAEvB,kBAAC,EAAAwM,MAAD,CACHxE,QAAM,EACN1N,MAAQ,CAAEwO,OAAQ,SAClB9Q,MAAQ,KACRF,MAAK,eAAY2F,EAASA,EAAOuC,KAAO,IACxCqH,QAAU,kBAAM4E,KAChBC,QAAUA,GACRzO,EAAS,kBAAC,EAAA5B,KAAD,KACP,kBAAC,KAAD,CAAY4Q,WAAW,WACnB,kBAAC,EAAAC,IAAD,CAAKC,SAAS,UAAU7U,MAAO,kBAAC,EAAA8U,aAAD,iBAC3B,kBAAC,EAAD,CACInP,OAASA,EACT4K,iBAAmBA,KAG3B,kBAAC,EAAAqE,IAAD,CAAKC,SAAS,QAAQ7U,MAAQ,kBAAC,EAAA8U,aAAD,eAC1B,kBAAC,EAAD,CACInP,OAASA,EACTgD,aAzGK,SAACpF,EAASqF,GAC/B,IAAMmM,EAAoBnP,EAAmBtC,QAAO,SAAC0R,GAAD,OAChDA,EAAgBxU,KAAO+C,EAAQ/C,MAEnCoT,EAAsB,CAClB,CAAEpT,GAAI+C,EAAQ/C,GAAI8G,WAAYsB,IADb,WAEdmM,MAoGSnP,mBAAqBA,EACrBC,qBAAuBA,KAI/B,kBAAC,EAAA+O,IAAD,CAAKC,SAAS,UAAU7U,MAAQ,kBAAC,EAAA8U,aAAD,iBAC5B,kBAAC,EAAD,CACItQ,eAAiBmB,EAAOnB,eACxB8N,uBAAwB2C,OAAKzB,EAAe1S,KAAI,SAAAyC,GAAO,OAAIA,EAAQ6C,wBAIzE,kBAAC,EAAAtD,QAAD,QAIlBqQ,GAAWrO,UAAY,CACnBsO,MAAOtO,YAGX,a,woCCnHA,QAhEkB,WACd,IAvDqC,EAC9BoQ,EAsDDC,GAvD+B,GACpBC,iBAAYC,MAAtBH,EAD8B,YAGrC,+BAAO,WAAOvP,EAAQ2P,GAAf,mFACC3P,SAAA,UAAAA,EAAQkG,yBAAR,eAA2B7L,UAAUsV,aAArC,EAAqCA,EAAsBtV,OAD5D,yCAEQ2F,SAFR,UAEQA,EAAQkG,yBAFhB,aAEQ,EAA2BrL,IAFnC,UAGwC,MAAhC8U,aAAA,EAAAA,EAAsBtV,OAH9B,yCAIQ,MAJR,wBAM+BkV,EAAO,CAAEzN,UAAW,CAC9C8N,MAAO,CAAEvV,MAAOsV,EAAqBtV,UAP1C,oBAMSP,EANT,EAMSA,OAAMC,EANf,EAMeA,OANf,uBAUoBA,EAVpB,iCAYQD,EAAK0V,wBAAwBtJ,kBAAkBrL,IAZvD,4CAAP,yDAmDoB,GAEI4U,iBAAYI,MAA7BC,EAFa,eAGIL,iBAAYM,MAA7BC,EAHa,YAIdC,EAtCkB,WAAM,OACHR,iBAAYS,MAAhCD,EADuB,YAG9B,sCAAO,aAAe9H,GAAf,sFAAStN,EAAT,EAASA,GAAT,SAC2BoV,EAAiB,CAC3CnO,UAAW,CAAE8N,MAAO,CAChB/U,KACAwM,UAAWc,EAAMhN,KAAI,SAACgV,GAAD,OAAQA,EAAEtV,UAJpC,mBACKf,EADL,EACKA,OAAMC,EADX,EACWA,OADX,sBAQgBA,EARhB,gCAUID,SAVJ,UAUIA,EAAMmW,wBAVV,aAUI,EAAwBrS,SAV5B,2CAAP,wDAmCyBwS,GACnBC,EAtBgB,WAAM,OACHZ,iBAAYa,MAA9BD,EADqB,YAG5B,sCAAO,aAA2BpV,GAA3B,wFAASJ,EAAT,EAASA,GAAI8G,EAAb,EAAaA,WACV/D,EAAU3C,EAASwC,MAAK,SAACG,GAAD,OAC1BA,EAAQ/C,KAAOA,GAAM+C,EAAQyO,kBAAoBxR,KAE/C0V,EAAY,CACd1V,GAAI+C,aAAF,EAAEA,EAAS/C,GACb8G,cAND,SASqB0O,EAAe,CAAEvO,UAAW,CAAE8N,MAAOW,KAT1D,qBASKxW,EATL,EASKA,OATL,sBAUgBA,EAVhB,2CAAP,wDAmBuByW,GAEvB,sCAAO,WAAOxQ,EAAQgO,EAAehG,GAA9B,4GACG/H,GAAqB+N,aAAA,EAAAA,EAAe/N,qBAAsB,GAE1DwQ,EAAkB,EAAIxQ,EAAmB4B,OAC3CoG,EAAW,EACTyI,EAAmB,WACjB1I,GACAA,IAAcC,EAAYwI,IAP/B,SAW+BjB,EAAwBxP,EAAQgO,aAAT,EAASA,EAAe9H,mBAX9E,UAWGyK,EAXH,OAYHD,IAEIE,EAAc,CACdrO,KAAMyL,EAAczL,KACpBoD,YAAaqI,EAAcrI,YAC3BU,oBAAqBS,WAAWkH,EAAc3H,sBAG9CsK,IACAC,EAAYD,oBAAsBA,GAGvB,OAAX3Q,EAxBD,wBAyBC4Q,EAAYxJ,mBAAqB4G,EAAc5G,mBAC/CwJ,EAAY/S,MAAQmQ,EAAcnQ,MAClC+S,EAAYnN,YAAcuK,EAAcvK,YA3BzC,UAgCWuM,EAAc,CAAElO,UAAW,CAAE8N,MAAOgB,KAhC/C,oBA8ByC/V,EA9BzC,EA8BKf,KAAQkW,cAAiBpS,QAAW/C,KACpCd,EA/BL,EA+BKA,OA/BL,uBAkCoBA,EAlCpB,QAoCC2W,IACA1Q,EAAS,CAAEnF,MArCZ,+BAuCC+V,EAAY/V,GAAKmF,EAAOnF,GAvCzB,UAyCuBiV,EAAc,CAAEhO,UAAW,CAAE8N,MAAOgB,KAzC3D,sBAyCO7W,EAzCP,EAyCOA,OAzCP,uBA0CoBA,EA1CpB,QA4CC2W,IA5CD,yBA+CoCT,EAAiBjQ,EAAQgO,EAAc7F,OA/C3E,iBA+CelN,EA/Cf,EA+CK+E,OAAU/E,SAClByV,IAhDG,IAkDqCzQ,GAlDrC,kEAkDQa,EAlDR,kBAmDOuP,EAAevP,EAA2B7F,GAnDjD,QAoDCyV,IApDD,0MAAP,4D,6fC9DEG,EAAa,SAAC,GAA8B,IAA5BC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,WAE7B,OADAA,MAAe,iBACRD,EAAYC,EACf,kBAAC,KAAD,CAAuBC,eAAe,YAChCD,IAIdF,EAAW1R,UAAY,CACnB2R,UAAW3R,SACX4R,WAAY5R,YAGhB,SACI0R,c,2kBCaG,IAAM7U,GAAcvC,IAAH,u/BAqCX0L,GAAmC1L,IAAH,02BAiCvCwX,GAAkB,SAACC,GAAD,OACpB,IAAOA,EAAaC,uBAAuB,SAAC5F,GAAD,QAAcA,MAGvD6F,GAAe,CACjBC,KAAM,GAGJC,GAAe,SAACtW,EAAUuW,GAAX,qBACdC,QAAiCxW,IADnB,IAEbuW,GAAWE,QAA6BzW,GAAY,MAItDW,IADL+V,S,+lBAEeC,iB,0BACG,IAAIC,KAAJ,cACRC,MADQ,IAEP,EAAKvX,MAAMwX,gBAAkBC,KAAyC,IAF/D,IAGP,EAAKzX,MAAMU,UAAY,EAAKV,MAAMU,SAAS6G,OAAS,EACpDyP,GAAa,EAAKhX,MAAMU,SAAU,EAAKV,MAAM8B,cAAgB,O,yBAEvD,EAAK8U,aAAac,kB,2BAChB,EAAKd,aAAae,oB,0BAG3Bb,I,IACH1D,SAAU,EAAKpT,MAAMoT,SACrBwE,QAAS,GACTC,WAAY,EACZC,cAAenB,GAAgB,EAAKC,iB,gCAGpB,WAAM,MACiB,EAAK5W,MAApC+X,EADc,EACdA,SAAU7M,EADI,EACJA,iBACdA,GAAoBA,EAAiB3D,OAAS,GAC9CwQ,KAGH,EAAK/X,MAAMgY,mBACRC,QAAQC,QAAQ,EAAKlY,MAAMmY,eAAe,EAAKnY,MAAMgY,qBAAuBC,QAAQC,WACvFpK,MAAK,WACF,EAAKsK,sB,iCAIQ,SAACC,GACdA,EAAUtM,sBAAwB,EAAK/L,MAAM+L,qBAC7C,EAAKqM,mB,wBAID,YAA6C,IAA1CrB,EAA0C,EAA1CA,KAAgBa,EAA0B,EAApCU,SAAsBC,EAAc,2BAC1B,EAAKvY,MAAxBwY,gBACc,EAAKC,WAAa,EAAKA,UAAUC,QACnD,EAAKC,SAAS,CAAE5B,OAAMa,YAAW,WAAQ,EAAKa,UAAUC,QAAQE,cAAvB,KACrC7B,OAAMa,WAAYW,GADmB,IACVD,SAAUV,QAIzC,EAAKe,SAAS,CAAE5B,OAAMa,YAAW,kBAAM,EAAKQ,gBAAgBtK,MAAK,WACzD,EAAK2K,WAAa,EAAKA,UAAUC,SACjC,EAAKD,UAAUC,QAAQE,cAAvB,KACI7B,OAAMa,WAAYW,GADtB,IAC+BD,SAAUV,c,2BAO1C,WAAM,MACsE,EAAK5X,MAApF2B,EADS,EACTA,cAAeiN,EADN,EACMA,OAAQiK,EADd,EACcA,+BAAgC5W,EAD9C,EAC8CA,oBAD9C,EAEkC,EAAKkD,MAAhDiO,EAFS,EAETA,SAAUwE,EAFD,EAECA,QAASb,EAFV,EAEUA,KAAMe,EAFhB,EAEgBA,cAO7BtQ,EAAY,CAAEnE,OANL,CACT1B,EACAkX,GAAkC,0BAClC,EAAKC,cAAcC,kBAAkBjB,IACvCzU,QAAO,SAAC8H,GAAD,QAAOA,KAAG/E,KAAK,SAEEwR,UAASb,OAAM3D,YAEzC,OAAOxE,EAAOnN,MAAM,CAChBA,MAAOQ,EAAsBP,GAAcmJ,GAC3CmO,cAAc,EACdpW,YAAa,WACb4E,iB,4BAIQ,WACZ,IAAMyR,EAAc,EAAKjZ,MAAMkZ,QAAQrY,KAAI,SAACsY,GAAD,OAAOA,EAAErY,KAAKP,MAAI4D,OAC7D,OAAO,EAAKiV,eAAetL,MAAK,SAACuL,GAAD,OAAW,EAAKrZ,MAAMoY,cAAc,CAChEc,QAASG,EAAM7Z,KAAK0Z,QAAQtY,MAC5B0Y,aAAcD,EAAM7Z,KAAK0Z,QAAQrB,gBAEnC/J,MAAK,WACH,IAAMyL,EAAa,EAAKvZ,MAAMkZ,QAAQrY,KAAI,SAACsY,GAAD,OAAOA,EAAErY,KAAKP,MAAI4D,OACxD0E,KAAK2Q,UAAUD,KAAgB1Q,KAAK2Q,UAAUP,IAC9C,EAAKjZ,MAAMyZ,gBAEhB1L,OAAM,SAACtO,GACN,EAAKkZ,UAAS,SAAAe,GAAS,cAAUA,GAAV,IAAqBja,mB,6BAInC,SAACka,EAAGC,GAAJ,OACb,EAAK5Z,MAAM6Z,gBAAgBD,M,6BAGd,SAACvW,EAAQyW,GACtB,EAAK9Z,MAAMoY,cAAc,CACrBc,QAAS,GACTI,aAAc,IAElB,EAAKX,SAAL,OACO7B,IADP,IAEIgB,cAAe,EAAF,KACN,EAAK3S,MAAM2S,eADL,UAERzU,EAASyW,MAEf,EAAK1B,kB,2BAGG,SAAC2B,GACZ,IAAMjC,EAAiB,EAAKlB,aAAaoD,qBACrCD,EAAO,EAAK5U,MAAM2S,eAEtB,EAAKa,SAAL,OACO7B,IADP,IAEIgB,kBACD,EAAKM,kB,6BAGK,WACb,EAAKO,SAAL,OACO7B,IADP,IAEIgB,cAAenB,GAAgB,EAAKC,gBACrC,EAAKwB,kB,6BAGK,SAAC6B,EAAQF,GAA4B,IAArBhC,EAAqB,wDAClDA,EAAW,EAAKmC,iBAAmB,EAAKC,aAAaJ,EAAM,O,2BAGhD,WAAM,MAC0D,EAAK/Z,MAAxEkL,EADS,EACTA,iBAAkBkP,EADT,EACSA,UAAWC,EADpB,EACoBA,eAAgBC,EADpC,EACoCA,kBAErB,IAA5BpP,EAAiB3D,QAChB2D,EAAiB3D,OAAS,IAAM+S,EACjCF,IAEAC,O,+BAIW,WAAM,MACe,EAAKra,MAAjCua,EADa,EACbA,MAAOrP,EADM,EACNA,iBACf,OAAwB,KAAhBqP,GAAS,IAAwC,IAA5BrP,EAAiB3D,U,oCAGlD,WAAS,IAQDiT,EARC,SAIDC,KAAKza,MAFLiC,EAFC,EAEDA,oBAAqB0I,EAFpB,EAEoBA,QAASG,EAF7B,EAE6BA,aAAc0N,EAF3C,EAE2CA,eAAgB5N,EAF3D,EAE2DA,YAAa7I,EAFxE,EAEwEA,0BACzEmJ,EAHC,EAGDA,iBAAkBwP,EAHjB,EAGiBA,oBAAqBxB,EAHtC,EAGsCA,QAASqB,EAH/C,EAG+CA,MAAOnH,EAHtD,EAGsDA,SAAUxR,EAHhE,EAGgEA,YAAa/B,EAH7E,EAG6EA,QAH7E,EAOD4a,KAAKtV,MADL4R,EANC,EAMDA,KAAMa,EANL,EAMKA,QAASE,EANd,EAMcA,cAAerY,EAN7B,EAM6BA,MAG5BmX,EAAe6D,KAAK7D,aAAa+D,mBACnCF,KAAKG,eACL9C,EACA,CAAE+C,WAAW,IAEXC,EAAcL,KAAKM,YAAYC,SAASP,KAAKtV,MAAM2S,eACnDmD,EAAenQ,EAAe,CAChCW,WAAYgP,KAAKS,mBACjBC,SAAUV,KAAKW,gBACf,GACEC,EAAsB,EAAH,KAClBzZ,GADkB,IAErB0Z,UAAWb,KAAKa,UAChBC,IAAKd,KAAKhC,UACV1B,OACAa,UACAqD,eACAO,WAAY,CACRC,cAAc,GAElBC,WAAY,CACRC,QAASzQ,EAAiB3D,OAAS,MAC9BkT,KAAKza,MAAMsa,mBAA2B,MAE3Ca,SAAUV,KAAKmB,aACflV,MAAOwE,EAAiB3D,OACxBvD,MAAOkH,EAAiB3D,OAAS,EAA1B,UAAkC2D,EAAiB3D,OAAnD,kBAAwEK,KA+CvF,OA3CIgD,IACAyQ,EAAoBlH,QAAU,CAAC,CAC3BpU,MAAO,oBACP0E,QAAS,SAACwV,EAAQ4B,EAAT,GAA4B,IAATtb,EAAS,EAATA,GAClBub,EAAkD,SAA3CC,OAAO3M,SAAS4M,SAASC,MAAM,KAAK,GACjDF,OAAO3M,SAAS8M,KAAhB,UAA0BH,OAAO3M,SAAS+M,QAA1C,OAAmDL,EAAO,QAAU,GAApE,+BAA6Fvb,OAKpGiY,IACD6C,EAAoBd,MAAQA,EAC5Bc,EAAoBhC,MAAQH,EAAQrY,KAAI,SAACub,GAAD,OAAUA,EAAKtb,KAAKP,MAC5D8a,EAAoBzE,aAAeA,EACnCyE,EAAoBgB,oBAAsB,CACtCC,QAASxB,EACTyB,SAAU9B,KAAK+B,iBAInB7R,IACA0Q,EAAoB1W,QAAU8X,6BAGpB7U,IAAVnI,IACA+a,GAAU,GAGVpH,GAAsB,IAAVmH,GAAqD,IAAtC7I,OAAOC,KAAKmG,GAAevQ,SACtD8T,EAAoBG,WAAWkB,KAAO,CAAC,CAAEC,MAAO,CAAC,CAAE5c,MAAO,kBAAC,KAAD,UAC1Dsb,EAAoBG,WAAW3b,QAAU,GACzCwb,EAAoBuB,UAAW,EAC/BvB,EAAoBwB,aAAc,IAGjCrE,GAAkBvW,IACnBoZ,EAAoByB,gBAAkB,kBAACC,EAAA,EAAD,CAClCC,YAAaC,QAA6B/D,EAAQ7V,QAAO,SAAC+Y,GAAD,OACrD1B,EAAoBjX,SAAS2Y,EAAKtb,KAAKP,OACxCM,KAAI,SAAAub,GAAI,OAAIA,EAAKtb,SACpBoc,cAAgB,MAIpB,kBAAC,KAAD,CAAW3b,YAAa,CAAE9B,QAAO+a,YAC7B,kBAAC,KAAD,CAAehZ,SAAS,SACpB,kBAAC,KAAD,CAAW/B,MAAOA,KAEtB,kBAAC,KAAD,CAAe+B,SAAS,WAElBO,GAA6B,kBAAC,EAAA2Q,MAAD,CAC3B/I,UAAQ,EACRhF,QAAQ,OACR5E,MAAQ,mLAEZ,kBAACqB,EAAA,EAAD,OACSia,EADT,CAEI8B,SAAU,kBAACC,EAAA,EAAD,CAAeC,QAAS,EAAGC,QAAS,KAC9CC,OAAQ,YAAmD,IAAhDC,EAAgD,EAAhDA,uBAAwBC,EAAwB,EAAxBA,kBAC/B,EAAKC,cAAcC,SAAnB,KACOF,GACCG,QACIJ,EAAwB3d,EAAS2Y,gB,GAvP9CnB,iB,EAkQ3BhW,GAAawD,UAAY,CACrByV,kBAAmBzV,SACnBkT,SAAUlT,SACVgZ,qBAAsBhZ,SACtBwV,eAAgBxV,SAChB+J,OAAQ/J,WACRhF,QAASgF,UACT8F,QAAS9F,SACTkH,oBAAqBlH,WACrB2S,gBAAiB3S,SACjBiG,aAAcjG,SACdpF,MAAOoF,WACPgV,gBAAiBhV,SACjBnE,SAAUmE,UACVuO,SAAUvO,WACVlD,cAAekD,WACfmT,mBAAoBnT,UACpB5C,oBAAqB4C,SACrBuV,UAAWvV,SACXsT,eAAgBtT,SAChBqG,iBAAkBrG,UAClB6V,oBAAqB7V,UACrB+F,YAAa/F,SACb2T,eAAgB3T,SAChBgU,+BAAgChU,SAChC/C,aAAc+C,SACdqU,QAASrU,UACT0V,MAAO1V,WACP4U,WAAY5U,SACZuT,cAAevT,SACfjD,YAAaiD,UAAgB,CACzBhD,WAAYgD,WAEhB9C,0BAA2B8C,UAG/BxD,GAAa0J,aAAe,CACxB9I,qBAAqB,EACrB0I,SAAS,EACTG,cAAc,EACd0N,gBAAgB,EAChBzM,oBAAqB,EACrB8M,gCAAgC,EAChCjO,aAAa,EACb4M,iBAAiB,EACjBtM,iBAAkB,GAClBwP,oBAAqB,GACrBxB,QAAS,GACTnB,SAAU,iBAAO,IACjB8B,gBAAiB,iBAAO,IACxBjY,YAAa,GACbG,2BAA2B,GAG/B,IA2CM+b,IAAwBC,WAAK,SAAC/d,GAChC,OAAO,kBAACqB,GAAiBrB,MAKhBge,IAAyBnP,gBAAWiP,IACjD,UAAe5Y,cAlDS,SAAAC,GACpB,YAAuByC,IAAnBzC,EAAM8F,eAAkDrD,IAAxBzC,EAAM8F,SAASyR,KACxC,CAAExR,iBAAkB,GAAIgO,QAAS,IAOrC,CACHoB,kBAHU,IAFYnV,EAAM8F,SAASyR,KAAKrZ,QAAO,SAAC4a,GAAD,QAC/C9Y,EAAM8F,SAASC,kBAAoB,IAAIrK,KAAI,SAACsK,GAAD,OAAOA,EAAE5K,MAAIkD,SAASwa,EAAI1d,OACxEgH,OAIC2D,iBAAkB/F,EAAM8F,SAASC,iBACjCwP,qBAAsBvV,EAAM8F,SAASC,kBAAoB,IAAIrK,KAAI,SAACsK,GAAD,OAAQA,EAAE5K,MAC3E2Y,QAAS/T,EAAM8F,SAASiO,QACxBqB,MAAOpV,EAAM8F,SAASsP,UAIH,SAAA5a,GACvB,MAAO,CACHke,qBAAsB,kBAAMle,EAAS,CAAEqB,KAAM,mBAC7C6Y,gBAAiB,SAACD,GAAD,OAAYja,GAASka,QAAgBD,KACtDxB,cAAe,SAAC8F,GACZve,EAAS,EAAD,CACJqB,KAAM,kBACHkd,KAGXzE,WAAY,kBAAM9Z,EAAS,CAAEqB,KAAM,iBACnCoZ,UAAW,kBAAMza,GAASya,YAC1BC,eAAgB,kBAAM1a,GAAS0a,YAC/BtC,SAAU,kBAAMpY,EAAS,CACrBqB,KAAMmd,KACNld,QAAS,CAAE8W,UAAU,MAEzBI,eAAgB,SAACjX,GAAD,OAASvB,EAAS,CAC9BqB,KAAM,kBACNC,QAAS,CAAEC,aAavB,CAGE8c,K,yJC5dWtc,EAAcvC,IAAH,2hCAsCX0L,EAAmC1L,IAAH,02BAiChC6X,EAAe,SAACtW,EAAUuW,GAAX,qBACrBC,QAAiCxW,IADZ,IAEpBuW,GAAWE,QAA6BzW,GAAY,O,ggBCtEtD0d,GADLC,S,ubAEG,WAAYre,GAAO,+BACTA,G,kCAGV,WAAS,WACL,OACI,kBAACse,EAAA,EAAD,CAAef,OAAQ,gBAAGgB,EAAH,EAAGA,gBAAH,OAAyB,EAAKb,cAAcC,S,iWAAnB,IACzCY,QAEH,kBAACC,EAAA,EAAD,CAAiBrB,SAAU,kBAACsB,EAAA,EAAD,CAAUpW,KAAOqW,SAAsBC,UAAQ,S,GAV3DtH,iB,EAgB/B+G,EAAiBvZ,UAAY,CACzB2N,OAAQ3N,YAOZ,QAJkC,SAAC7E,GAC/B,OAAO,kBAACoe,EAAqBpe,I,s2BCH1B,IAAMoB,EAAiB,SAAC,GAoBzB,IAnBFvB,EAmBE,EAnBFA,QACA2Y,EAkBE,EAlBFA,eACApF,EAiBE,EAjBFA,SACA3R,EAgBE,EAhBFA,MACAmN,EAeE,EAfFA,OACAhE,EAcE,EAdFA,YACAE,EAaE,EAbFA,aACA0M,EAYE,EAZFA,gBACA9W,EAWE,EAXFA,SACAmY,EAUE,EAVFA,+BACA/W,EASE,EATFA,aACArC,EAQE,EARFA,MACAsC,EAOE,EAPFA,0BACA4I,EAME,EANFA,QACA1I,EAKE,EALFA,oBACAL,EAIE,EAJFA,YACAD,EAGE,EAHFA,cACA2I,EAEE,EAFFA,oBACAG,EACE,EADFA,iBAEMmU,GAAQC,gBACRlf,GAAWC,mBACX6Y,GAAYqG,YAAO,MAHvB,GAIkCzV,cAAS,CACzCuO,QAAS,GACTb,KAAM,IANR,WAIKgI,EAJL,KAIiBC,EAJjB,QAQ8B3V,eAAS,GARvC,WAQK4V,EARL,KAQeC,EARf,QAS4B7V,eAAS,GATrC,YASK8V,GATL,MAScC,GATd,UAU8DC,OAAgB,GAAD,WACxE9H,MADwE,IAEvEC,EAAkBC,KAAyC,IAFY,KAGvE/W,aAAA,EAAAA,EAAU6G,QAAS,GAAIyP,QAAatW,EAAUoB,GAAgB,MAH9Dwd,GAVN,GAUMA,kBAAmBxH,GAVzB,GAUyBA,cAAeiB,GAVxC,GAUwCA,kBAKpCwB,IAAQhI,kBAAY,gBAAGtH,EAAH,EAAGA,SAAH,OAAkBA,aAAlB,EAAkBA,EAAUqO,iBAAiB,EACjED,IAAQ9G,kBAAY,0EAAgB,GAAbtH,EAAH,EAAGA,SAAH,OAAwBA,SAAA,UAAAA,EAAUiO,eAAV,eAAmBrY,KAAI,SAAC0e,GAAD,aACrEA,SADqE,UACrEA,EAAQze,YAD6D,aACrE,EAAcP,QACZ,KAAKif,gBACLtU,IAAmBqH,kBAAY,wEAAgB,GAAbtH,EAAH,EAAGA,SAAH,OAAwBA,aAAA,EAAAA,EAAUC,mBAAoB,KAAKsU,gBAG1FpG,GAAe,WAA4B,IAA3BxB,EAA2B,uDAAjB,GAAIb,EAAa,uDAAN,EACvCmI,GAAY,GAEZ,IAAMO,EAAe1G,KACf2G,EAAkB,cACjB7G,EAAiC,CAAC,2BAA6B,IAD9C,KAEjB4G,aAAA,EAAAA,EAAclY,QAAS,EAAI,CAACkY,GAAgB,KACjDrZ,KAAK,SACD/C,EAAS1B,EAAgB,IAAH,OAAQA,EAAR,kBAAiC+d,EAAjC,KAAuDA,EAGnF,OADA/f,EAAS,CAAEqB,KAAM,wBACV4N,EAAOnN,MAAM,CAChBA,QACAuX,cAAc,EACdpW,YAAa,WACb4E,UAAW,GACPnE,SACAuU,UACAb,QACG3D,GAAY,CAAEA,eAEtBtF,MAAK,YAAuB,IAApBtO,EAAoB,EAApBA,KAAME,EAAc,EAAdA,QAab,OAZAC,EAAS,CACLqB,KAAM,wBACNkY,QAAS1Z,EAAK0Z,QAAQtY,MACtB0Y,aAAc9Z,EAAK0Z,QAAQrB,aAE/BqH,GAAY,GACZF,GAAc,iBAAO,CAAEjI,OAAMa,cAEzBtN,IAAwB5K,GAAuC,IAA5BF,EAAK0Z,QAAQrB,YAA+C,IAA3B6H,EAAgBnY,QACpF6X,IAAW,GAGR,CAAE5f,OAAME,eAIjBigB,IAAuBC,iBACzBC,IAASzG,GAAc,KACvB,CAACkG,GAAkBjD,oBAAoBC,UAkB3C,OAfA7S,gBAAU,WACF6V,GAAkBjD,oBAAoBC,SACtCqD,GAAqBZ,EAAWnH,QAAS,KAE9C,CAACE,KAWG,kBAAC,KAAD,CAAWvW,YAAa,CAAE9B,QAAO+a,aAAmB5S,IAAVnI,IAAwB0f,GAAShN,MAAOgN,KACrF,kBAAC,KAAD,CAAe3d,SAAS,WAChBiJ,GAAoBA,EACxB,kBAAC,KAAD,CAAWhL,MAAOA,KAEtB,kBAAC,KAAD,CAAe+B,SAAS,SAClB8I,GAEN,kBAAC,KAAD,CAAe9I,SAAS,aAChBiJ,GAAoBwU,GAAYxU,EAClC1I,GAA6B,kBAAC,EAAA2Q,MAAD,CAC3B/I,UAAQ,EACRhF,QAAQ,OACR5E,MAAQ,0LAEZ,kBAAC,IAAD,OACS6B,EADT,CAEI2b,OAAQ,YAGF,IAFFC,EAEE,EAFFA,uBACAC,EACE,EADFA,mBAEAC,UAAcC,SAAd,KACOF,GACCqC,QACItC,EAAwB3d,EAAS2Y,EAAgBpF,OAIjE+J,SAAU,kBAACC,EAAA,EAAD,CAAeC,QAAS,EAAGC,QAAS,KAC9C9B,WAAY,CACRC,cAAc,GAElB9W,QAASgG,EAAU8R,uBAAuB,GAC1ClB,IAAK9C,EACL6C,UA3CM,SAAC/C,EAASwH,GACxBte,GAAS2X,GAAab,EAAQD,SAAUC,EAAQxB,OAC3CgJ,GAAYtH,GAAaA,EAAUC,QACpCD,EAAUC,QAAQE,cAAcL,GACzBwH,GACPA,EAASxH,IAuCLmD,WAAY,CACRC,QAASzQ,GAAiB3D,OAAS,MAC9B8R,cAAO2G,OAAM,SAAAzf,GAAE,OAAI2K,cAAJ,EAAIA,GAAkB/H,MAAK,SAAC8c,GAAD,OAAcA,aAAA,EAAAA,EAAU1f,MAAOA,UAAc,MAE5F4a,SAnGK,SAAC+E,GAAD,OAA6BvgB,EAAbugB,GAAsB9F,WAAwBC,YAoGnE3T,MAAOwE,GAAiB3D,OACxBvD,MAAOkH,GAAiB3D,OAAS,EAA1B,UAAkC2D,GAAiB3D,OAAnD,kBAAwEK,KAE9E4Q,GAAD,SACGuG,GADH,IAEAE,WACA5F,SACAkB,UACG+E,IACArd,GAAuB,CACtB6a,gBAAiB,kBAACC,EAAA,EAAD,CACbC,YAAaC,QAA6B/R,IAC1CgS,cAAgB,OAGxBpS,GAAgB,CAChBmQ,aAAc,CACVxP,WAAsB,IAAV8O,IAA2C,IAA5BrP,GAAiB3D,OAC5C4T,SAAU,SAACxB,EAAGC,GAAJ,aAAeC,QAAe,UAAC+E,EAAMuB,kBAAP,aAAC,EAAkBlV,SAAU2O,MAGzEhP,GAAe,CACfuJ,QAAS,CAAC,CACNpU,MAAO,oBACP0E,QAAS,SAACwV,EAAQ4B,EAAT,GAA4B,IAATtb,EAAS,EAATA,GAClBub,EAAkD,SAA3CC,OAAO3M,SAAS4M,SAASC,MAAM,KAAK,GACjDF,OAAO3M,SAAS8M,KAAhB,UAA0BH,OAAO3M,SAAS+M,QAA1C,OAAmDL,EAAO,QAAU,GAApE,+BAA6Fvb,YASzHa,EAAeyD,UAAY,CACvBhF,QAASugB,YAAkBA,UAAgB,KAC3C1f,SAAU0f,YAAkBA,UAAgB,KAC5CxR,OAAQwR,WACR5H,eAAgB4H,SAChBhN,SAAUgN,WACV3e,MAAO2e,WACPxV,YAAawV,SACbtV,aAAcsV,SACd5I,gBAAiB4I,SACjBvH,+BAAgCuH,SAChCte,aAAcse,SACdre,0BAA2Bqe,SAC3B3gB,MAAO2gB,WACPzV,QAASyV,SACTne,oBAAqBme,SACrBze,cAAeye,WACfxe,YAAawe,UAAgB,CACzBve,WAAYue,WAEhB9V,oBAAqB8V,SACrB3V,iBAAkB2V,UAGtBhf,EAAe2J,aAAe,CAC1BqI,SAAU,GACVxI,aAAa,EACbE,cAAc,EACd0M,iBAAiB,EACjBqB,gCAAgC,EAChC9W,2BAA2B,EAC3B4I,SAAS,EACT1I,qBAAqB,GAGzB,UAAe4M,gBAAWzN,I,uEC7NpBif,EAAkB,SAACC,EAAWC,GAChC,OAAOA,EAAKtE,MAAM,KAAKlJ,QACnB,SAACyN,EAAK1gB,GAAN,OAAe0gB,GAAoB,cAAbA,EAAI1gB,GAAwB0gB,EAAI1gB,QAAO8H,IAAW0Y,IAI1EG,EAAc,SAACxC,EAAKne,GACtB,IAAI4gB,EAAOL,EAAgBpC,EAAKne,GAchC,OAZI4gB,EAAKC,cACLD,EAAOA,EAAKC,aAGK,WAAjB,IAAOD,KACPA,EAAOL,EAAgBpC,EAAKne,EAAM,UAGjB,iBAAV4gB,GAAsBA,EAAKjd,SAAS,OAC3Cid,EAAO,IAAMA,EAAO,KAGjBA,GAwCE7G,EAAkB,SAAC1U,EAAOyU,GACnC,IAAItX,EAEW,QAAXsX,EACAtX,EAzCoB,SAAC6C,GAAU,IAC3BuX,EAAoCvX,EAApCuX,KAAM7c,EAA8BsF,EAA9BtF,QAASqL,EAAqB/F,EAArB+F,iBAEvB,GAAIwR,EAAM,CACN,IAAIkE,EAAU,CAAC/gB,EAAQgB,KAAI,SAACggB,GAAD,OAAYA,EAAO9gB,SAAOqG,KAzCvC,MA8Cd,OAJAwa,EAAUA,EAAQE,QAAQ5V,GAAoBwR,GAAM7b,KAAI,SAACod,GAAD,OACpD9Y,EAAMtF,QAAQgB,KAAI,SAACggB,GAAD,OAAaA,EAAOE,SAA0C,GAA/BN,EAAYxC,EAAK4C,EAAO/gB,QAAWsG,KA3C1E,SA8CP4a,UAAU,+BAAiCJ,EAAQxa,KAAK,QAgCrD6a,CAAa9b,GACL,SAAXyU,IACPtX,EA9BqB,SAAC6C,GAAU,IAEhC8I,EADIyO,EAAoCvX,EAApCuX,KAAM7c,EAA8BsF,EAA9BtF,QAASqL,EAAqB/F,EAArB+F,iBAGvB,GAAIwR,EAYA,OAXAzO,GAAU/C,GAAoBwR,GAAM7b,KAAI,SAACod,GACrC,IAAIiD,EAAS,GAOb,OANArhB,EAAQmS,SAAQ,SAAC6O,GACb,IAAMlP,EAAOkP,EAAO/gB,IAAImc,MAAM,KACxBnc,EAAM6R,EAAKA,EAAKpK,OAAS,GAC/B2Z,EAAOphB,GAAO2gB,EAAYxC,EAAK4C,EAAO/gB,QAGnCohB,KAGJF,UAAU,uCAAyCnY,KAAK2Q,UAAUvL,IAc/DkT,CAAchc,IA9ER,SAAC3F,EAAM4hB,GAC3B,GAAK5hB,EAAL,CAIA,IAAI6hB,EAAOC,SAASC,cAAc,KAClCF,EAAKG,aAAa,OAAQhiB,GAC1B6hB,EAAKG,aAAa,WAAYJ,GAC9BC,EAAKI,cAAc,IAAIC,WAAJ,QAAwB,CAAEC,SAAS,EAAMC,YAAY,EAAMC,KAAM9F,WAyEpF+F,CAAgBxf,EAbH,SAACsX,GAAD,MACbmI,sBAAyB,IAAIC,MAAQC,cAAgB,IAAMrI,EAYlCwH,CAASxH,M,uyBCsBtC,Q,WApGI,aAA0B,IAAdrB,EAAc,uDAAJ,GAAI,2CALJ,CAClB,eAAgB,2BAChB2J,OAAQ,qBAIRzH,KAAK0H,QAAU5J,EAAQ4J,SAAW,OAClC1H,KAAK8F,KAAOhI,EAAQgI,MAAQ,GAC5B9F,KAAK2H,aAAe7J,EAAQ6J,cAAiB,kBAAMnK,QAAQC,QAAQ,KACnEuC,KAAK4H,eAAiB9J,EAAQ8J,gBAAmB,kBAAMpK,QAAQC,QAAQ,KACvEuC,KAAK6H,eAAiB/J,EAAQgK,SAAW9H,KAAK+H,oB,0DAGlD,WAAcjC,EAAMkC,EAAUC,GAA9B,iGAAsCnK,EAAtC,+BAAgD,GAAhD,SACiBkC,KAAKkI,mBACjB7U,MAAK,kBAAM,EAAK8U,MAAMrC,EAAMkC,EAAUC,EAAQnK,MAC9CzK,KAAK2M,KAAKoI,uBACV/U,MAAK,SAACgV,GAAD,OAAc,EAAKC,eAAeD,EAAUvK,MACjDzK,MAAK,SAACgV,GAAD,OAAcA,EAASE,UAC5BjV,MAAM0M,KAAKwI,YANhB,wF,0EASA,SAAWC,GACP,YAAuBtb,IAAnBsb,EAAQ9V,OACD6K,QAAQkL,OAAO,CAAEpjB,MAAO,kBAExBkY,QAAQkL,OAAR,KAAoBD,M,wIAInC,SAAM3C,EAAMkC,EAAUC,EAAQnK,GAC1B,IAAIvS,EAAS,CACT0c,OAAQA,GAAU,MAClBH,QAAS9H,KAAK6H,eACdc,YAAa,WAEXC,EAAW,GAAH,OAAO5I,KAAK0H,SAAZ,OAAwB1H,KAAK8F,KAAO9F,KAAK8F,KAAO,IAAhD,OAAuDA,GAAc,IAC/E+C,EAAM,IAAIC,IAAIF,EAAUtH,OAAO3M,SAAS+M,QAC5C,GAAI5D,EAAQvS,OAAQ,CAChB,IAAMA,EAAS0L,OAAOC,KAAK4G,EAAQvS,QAAQnF,KAAI,SAACf,GAAD,OAC3C0jB,mBAAmB1jB,GAAO,IAAM0jB,mBAAmBjL,EAAQvS,OAAOlG,OACnEsG,KAAK,KACRkd,EAAIrd,OAAS,IAAIwd,gBAAgBzd,GAOrC,OAJIyc,IACAzc,EAAO0d,KAAO7a,KAAK2Q,UAAUiJ,IAG1BG,MACHU,EAAKtd,O,mCAIb,SAAsB8c,GAClB,OAA2B,MAApBA,EAASa,OAAiB,CAAEX,KAAM,iBAAO,KAAQF,I,4BAG5D,SAAeA,GAAwB,IAAdvK,EAAc,uDAAJ,GAC/B,GAAwB,MAApBuK,EAASa,QAAkBpL,EAAQqL,UACnC,MAAO,CAAEZ,KAAM,iBAAO,KAG1B,GAAwB,MAApBF,EAASa,OACT,OAAOlJ,KAAK4H,iBAGhB,IAAMwB,EAAoBf,EAASgB,MAAQhB,EAASgB,QAAQd,OAASF,EAErE,OAAwB,MAApBA,EAASa,OACFE,EAAkB/V,MAAK,SAACkV,GAAD,OAC1B/K,QAAQkL,OAAR,OAAoBH,GAApB,IAA0BjjB,MAAO,yBAIrC+iB,EAASa,QAAU,KAAOb,EAASa,QAAU,IACtCE,EAAkB/V,MAAK,SAACkV,GAAD,OAC1B/K,QAAQkL,OAAOH,EAAK5V,OAAO,OAI5B0V,I,8BAGX,WACI,OAAO7K,QAAQC,QAAQuC,KAAK2H,iBAAkB,K,oBAGlD,SAAO7B,EAAMkC,GACT,OAAOhI,KAAKsJ,QAAQxD,EAAMkC,EAAU,U,oBAGxC,SAAOlC,EAAMkC,GACT,OAAOhI,KAAKsJ,QAAQxD,EAAMkC,EAAU,S,iBAGxC,SAAIlC,GAAoB,IAAdhI,EAAc,uDAAJ,GAChB,OAAOkC,KAAKsJ,QAAQxD,EAAM,KAAM,MAAOhI,K,qBAG3C,SAAQgI,GACJ,OAAO9F,KAAKsJ,QAAQxD,EAAM,KAAM,c,mOC5FxC,QARe,SAAChI,GAKZ,OAJkB,IAAIyL,E,iWAAJ,IACXzL,K,ikBCCX,IAOM0L,EAAoB,SAACzR,GAAD,OACtBA,GARyB,SAACA,EAAQ0R,GAClC,IAAMC,EAAa3R,EAAO0R,GACtBE,EAAY5R,EAEhB,cADO4R,EAAUF,GACjB,OAAYE,GAAcD,GAIhBE,CAAqB7R,EAAQ,eAerC8R,EAAgB,SAACtB,EAAMhiB,GAAS,MAC5BujB,EAAiBC,IAAUxB,GACjC,iBAAOtR,OAAOG,OAAO0S,EAAevjB,IAAS,WAA7C,aAAO,EAA2CH,KAAI,SAAC2R,GAAD,OAd9B,SAACA,EAAQiS,GACjC,IAAIvd,EAAgB,GAQpB,OAPAwK,OAAOgT,SAAQlS,aAAA,EAAAA,EAAQtL,gBAAiB,IAAI8K,SAAQ,SAAC2S,GAAS,UACjBA,EADiB,GACnDC,EADmD,KACrCC,EADqC,KAE1D3d,EAAc0d,GAAgBC,aAA9B,EAA8BA,EAAkBrlB,KAAKqB,KAAI,SAAC2R,GAAD,aACrDyR,EAAkBQ,SAAD,UAACA,EAAiBjS,EAAOxR,aAAzB,aAAC,EAAgCwR,EAAOjS,QAC1D8C,QAAO,SAACyhB,GAAD,QAAUA,eAEjBtS,EAAOtL,cACd,OAAYsL,GAAWtL,GAMnB6d,CAAoBd,EAAkBzR,GAAS+R,OAIjDS,EAAe,+BAAG,WAAOC,EAAWpe,GAAlB,gGAA8Bb,EAA9B,+BAAuC,GAAIuS,EAA3C,+BAAqD,GAArD,SACD0M,EAAUC,IAAV,WAAmBre,GAAe,CAAEb,WADnC,cACdgd,EADc,gBAEKsB,EAActB,GAAMzK,aAAA,EAAAA,EAASvX,OAAQ6F,GAF1C,cAEdse,EAFc,yBAIb,CACHte,WAAYse,EACZC,KAAMpC,EAAKoC,KACX7K,MAAOyI,EAAKoC,KAAK7K,MACjByI,SARgB,2CAAH,wDAuDrB,QA3CsB,SAACnc,GAA2C,IAA/B0R,EAA+B,uDAArB,GAAI8M,EAAiB,uDAAP,GAAO,GAChBhc,cAAS,CACnD7J,UAAMoI,EACNlI,UAAU6Y,WAAS9Q,MACnBhI,WAAOmI,IAJmD,WACvD0d,EADuD,KACtCC,EADsC,KAMxDN,EAAYO,EAAO,CACrBrD,QAASsD,OAEPzf,EAAS,QACPuS,aAAA,EAAAA,EAASvS,SAAU,IADf,IAERD,SAAUwS,aAAA,EAAAA,EAASxS,UAAW,KA6BlC,OA1BA0D,gBAAU,WACF8O,WAAS9Q,KACT8d,EAAmB,CACf/lB,UAAMoI,EACNlI,SAAS,EACTD,WAAOmI,KAMf2d,EAAmB,CACf/lB,UAAMoI,EACNlI,SAAS,EACTD,WAAOmI,IAGXod,EAAgBC,EAAWpe,EAAYb,EAAQuS,GAASzK,MAAK,SAACtO,GAC1D+lB,EAAmB,CACf/lB,OACAE,SAAS,EACTD,WAAOmI,UArBV,cAwBFyd,GAxBE,CAwBO9M,aAxBP,EAwBOA,EAAS9Q,QAElB6d,I,0pBCvFJ,IAAMI,EAAsB,SAAC/kB,GAAD,OAC/BA,EAASglB,SAAQ,SAAAriB,GAAO,OAAIA,EAAQ2D,OAAS3D,EAAQ2D,MAAM5D,QAAO,SAAA2E,GAAI,OAAKA,EAAK4d,iBAGvEC,EAAsB,SAACllB,GAAD,OAC/BA,EAASglB,SAAQ,SAAAriB,GAAO,OAAIA,EAAQ2D,OAAS3D,EAAQ2D,MAAM5D,QAAO,SAAA2E,GAAI,OAAIA,EAAK4d,iBAOtEE,EAAoB,SAACvG,GAAD,OAC7BA,EAAO9e,mBAAqBilB,EAAoBnG,EAAO9e,oBAAsB,IAGpEwc,EAA+B,SAAC/D,GAAD,OACxCA,EAAQrY,KAAI,SAAA0e,GAAM,cAEPA,GAFO,IAGVwG,kBAAmBD,EAAkBvG,GACrC5e,SAAU4e,EAAO9e,0B,mFCrBtB,IAAMulB,EAAS,sBACT7H,EAAgB,gBAEhBtE,EAAkB,SAACD,GAAD,MAAa,CACxC5Y,KAAMglB,EAAQ/kB,QAAS,CAAE2Y,YAGhBQ,EAAY,iBAAO,CAC5BpZ,KAAMmd,EACNld,QAAS,CAAEV,GAAI,EAAG0f,UAAU,KAGnB5F,EAAiB,iBAAO,CACjCrZ,KAAMmd,EACNld,QAAS,CAAEV,GAAI,EAAG0f,UAAU,M,4zBCShC,IAAMgG,EAAQ,QAEDC,EAAc,SAAC,GAA0C,QAAxCzlB,mBACpB0lB,QAD4D,MAAT,GAAS,GAC3CtlB,KAAI,SAACyC,GAAD,OAAa,IAAI0e,KAAK1e,EAAQ4iB,gBACnDE,EAAO,IAAIpE,KAAKqE,KAAKC,IAAIC,MAAM,KAAMJ,EAAM9iB,QAAO,SAACmjB,GAAD,OAAUC,SAASD,QAG3E,OAFgBJ,aAAgBpE,MAAQyE,SAASL,GAASA,EAAOH,GAKxDL,EAAY,SAAC,GAAD,QAAGnlB,mBAAH,kBAAkC,GAAlC,GACZuf,OAAM,SAAA1c,GAAO,OAAIA,EAAQ4iB,cAAgBD,IAA+B,IAAtB3iB,EAAQsiB,cAG1Dc,EAAQ,SAAC,GAA0C,QAAxCjmB,mBAAoBE,OAAoB,MAAT,GAAS,EACtDgmB,EAAahmB,EAASoS,QAAO,SAACC,EAAK1P,GAAN,OAAkB0P,EAAM1P,EAAQojB,QAAO,GACpEE,EAAYjmB,EAASoS,QAAO,SAACC,EAAK1P,GACpC,OAAIuiB,QAAoB,CAACviB,IAAUiE,QAASme,QAAoB,CAACpiB,IAAUiE,OAAS,EAAYyL,EAAM,EAE/FA,IACR,GACH,OAAI4T,EAAoBD,EAAaC,EAE9B,GAGEpQ,EAAY,SAAC,GAAD,QAAG/V,mBAAH,kBAAkC,GAAlC,GACZsS,QAAO,SAACC,EAAK1P,GAAN,OAAkB0P,GAAO1P,EAAQkT,aAAW,IAGnDnW,EAAc,SAACkf,GACxB,OAAIA,IAAW,GAAa,GAEVA,EAAO7e,SAASG,KAAI,qBAAGoH,QACtB7B,KAAK,OAGf9F,EAAe,SAAC,GAAD,IAAGD,EAAH,EAAGA,YAAH,MAAsB,CAC9CN,MAAOM,EACH,kBAAC,EAAA+B,QAAD,CAASE,QAASjC,GACd,kBAAC,IAAD,CAAUwmB,MAAO,EAAG5mB,MAAO,KAAMI,IAErC,kBAAC,EAAAsD,KAAD,CAAMrC,UAAU,aAAhB,eACJqf,YAAatgB,IAGJG,EAAc,SAAC+e,GACxB,GAAIA,EAAO9e,oBAAsB8e,EAAO9e,mBAAmB8G,OAAS,EAChE,MAAO,CACHxH,MACI,kBAAC,EAAA+mB,KAAD,CAAMC,GAAI,CAAE/K,SAAU,YAAF,OAAcuD,EAAOhf,MAAzC,iBAQHymB,EAAY,SAACC,GAAD,YACqB,IAAnCA,EAAe1iB,qBAA6E,IAAnC0iB,EAAe9gB,gBACzC,OAAlC8gB,EAAe1iB,gBAA6D,OAAlC0iB,EAAe9gB,kBACrB,IAAlC8gB,EAAe1iB,gBAA0D,IAAlC0iB,EAAe9gB,iBAG1D+gB,EAAkB,SAAC3H,EAAQ0H,GAAT,MAA8B,CAClDlnB,MAAO,kBAAC,EAAA2D,YAAD,KACDujB,EAAehf,KAAO,kBAAC,EAAA6e,KAAD,CAAMC,GAAI,CAAE/K,SAAU,YAAF,OAAciL,EAAe1mB,MACnE0mB,EAAehf,MACXsX,EAAO4H,aACfH,EAAUC,IACR,kBAAC,EAAAtjB,KAAD,CAAMC,UAAWC,sBAAjB,QAA2CojB,EAAe1iB,eAA1D,IAA2E0iB,EAAe9gB,iBAElGwa,YAAapB,EAAO4H,cAAgBF,EAAehf,OAG1C7H,EAAa,SAACgK,EAAa7J,EAAd,OAAoBgE,EAApB,EAAoBA,eAAgB4B,EAApC,EAAoCA,eAAgB8B,EAApD,EAAoDA,KAApD,OACtB,kBAAC,EAAAvE,YAAD,KACI,kBAAC,EAAAojB,KAAD,CAAMC,GAAI,CAAE/K,SAAU,YAAF,OAAczb,KAC5B6J,GAAenC,GAEnB+e,EAAU,CAAEziB,iBAAgB4B,oBAC1B,kBAAC,EAAAxC,KAAD,CAAMC,UAAWC,sBAAjB,QAA2CU,EAA3C,IAA4D4B,KAIlE+Z,EAAa,SAAC3f,EAAI2K,GAAL,SACZA,GAAoB,IAAI/H,MAAK,SAACqP,GAAD,OAAaA,EAAOjS,KAAOA,MAGzD6mB,EAAsB,SAAC,GAAD,QAAG3mB,mBAAH,kBAAkC,GAAlC,GACfI,KAAI,SAACkH,GAAD,OAAQA,EAAE0O,cAAapT,QAAO,SAACgkB,GAAD,QAAgBA,KAAUjhB,KAAK,OAGjE6M,EAA0B,SAACiG,GACpC,OAAKA,EAEEA,EAAQnG,QAAO,SAACC,EAAD,GAA6B,IAArB7M,EAAqB,EAArBA,eAK1B,OAJIA,UACC6M,EAAI7M,GAAkB6M,EAAI7M,IAAmB,CAAEA,iBAAgBO,MAAO,IAAKA,QAGzEsM,IACR,IARoB,IAWdhI,EAAuB,SAACkO,GAAD,OAChCxH,OAAOG,OAAOoB,EAAwBiG,IAAU/U,MAAK2N,OAAc,iBAAkB,UAG5EwV,EAA6B,SAACpO,EAASjO,EAAUuN,EAAgBtN,GAApC,OACtCD,EAASpK,KAAI,SAAA2R,QAGY5K,IAAjB4K,EAAO+U,QAAuB/U,EAAO+U,MAAQ,IAEjD,IAAIN,EAAiB/N,EAAQrY,KAAI,SAACsY,GAAD,OAAOA,EAAErY,QAAMqC,MAAK,SAACoc,GAClD,OAAO/M,EAAOjS,KAAOgf,EAAOhf,MAEhC,QAAuBqH,IAAnBqf,EAA8B,CAC9B,IAAKzO,EAAkB,OAEvByO,EAAiB,CAAExmB,mBAAoB,GAAIC,SAAU,IAWzD,OARAumB,EAAe5mB,YAAcA,EAAY4mB,GACzCA,EAAeO,aAAc3B,QAAoBoB,EAAexmB,oBAAoB8G,OACpF0f,EAAeQ,aAAc/B,QAAoBuB,EAAexmB,oBAAoB8G,OACpF0f,EAAef,YAAcA,EAAYe,GACzCA,EAAerB,UAAYA,EAAUqB,GACrCA,EAAeP,MAAQA,EAAMO,GAC7BA,EAAezQ,UAAYA,EAAUyQ,GAE9B,CAEH1mB,GAAIiS,EAAOjS,GACX0f,SAAUC,EAAW1N,EAAOjS,GAAI2K,GAChCwc,QAASlV,EAAOkV,QAChBC,UAAWnV,EAAOmV,UAClBC,QAASpV,EAAOoV,QAChBT,aAAc3U,EAAO2U,cAAgBF,EAAehf,KACpD4f,KAAMrV,EAAOqV,KACbC,YAAatV,EAAOsV,YACpBC,aAAcvV,EAAOuV,aACrBC,cAAexV,EAAOwV,cACtBC,gBAAiBzV,EAAOyV,gBACxBC,aAAc1V,EAAO0V,aACrBC,wBAAyB3V,EAAO2V,wBAChCC,KAAM5V,EAAO4V,KACbC,QAAS7V,EAAO6V,QAChBd,MAAO,CACH9O,UAAW,CACP6P,cAAsC1gB,IAA3B4K,EAAO+U,MAAM9O,UACpBjG,EAAO+U,MAAM9O,UAAU6P,SACvB9V,EAAO+U,MAAMe,SACjBC,gBAAwC3gB,IAA3B4K,EAAO+U,MAAM9O,UACtBjG,EAAO+U,MAAM9O,UAAU8P,WACvB/V,EAAO+U,MAAMgB,WACjBC,aAAqC5gB,IAA3B4K,EAAO+U,MAAM9O,UACnBjG,EAAO+U,MAAM9O,UAAU+P,QACvBhW,EAAO+U,MAAMiB,SAErBC,WAAY,CACRtB,aAAcD,EAAgB1U,EAAQyU,GACtCvmB,SAAUJ,EAAa2mB,GACvByB,aAAcloB,EAAYymB,GAC1B0B,aAAc1B,EAAeO,YAC7BoB,aAAc,CAAE7oB,MAAO,kBAAC,EAAA+mB,KAAD,CAAMC,GAAI,CAC7B/K,SAAU,YAAF,OAAciL,EAAe1mB,IACrCkB,MAAO,CACHonB,YAAY,KAEhB5B,EAAeQ,cACnBqB,kBAAmB7B,EAAeQ,YAClCsB,kBAAkBC,QAAgB/B,GAClCgC,uBAAuBC,QAAsBjC,GAC7CkC,aAAelC,EAAef,uBAAuBlE,KACjD,CAAEjiB,MAAO,kBAAC,IAAD,CAAYymB,KAAMxE,KAAKlZ,MAAMme,EAAef,aAAcllB,KAAK,cACxEimB,EAAef,YACnBkD,kBAAmBnC,EAAef,YAClCmD,YAAajC,EAAoBH,GACjCzQ,UAAWyQ,EAAezQ,gBAKvCnT,QAAO,SAAC4N,GAAD,QAAcA,MAGtBqY,EAAgB,SAACpQ,GAAD,OAClBA,EAAQrY,KAAI,gBAAGC,EAAH,EAAGA,KAAH,cACLA,GADK,IAERT,YAAaA,EAAY,CAAEK,SAAUI,aAAF,EAAEA,EAAMJ,SAAUD,mBAAoB,KACzE+mB,aAAa3B,QAAoB/kB,EAAKL,oBAAoB8G,OAC1DkgB,aAAa/B,QAAoB5kB,EAAKL,oBAAoB8G,OAC1D2e,YAAaA,EAAYplB,GACzB8kB,UAAWA,EAAU9kB,GACrBqmB,aAAcrmB,EAAKmH,KACnBye,MAAOA,EAAM5lB,GACb0V,UAAWA,EAAU1V,GACrB2V,WAAY2Q,EAAoBtmB,GAChCN,YAAaA,EAAYM,SAI3ByoB,EAAkB,SAACpkB,EAAOjE,GAC5B,IAAMsoB,EAAerkB,EAAMuX,KAAKrZ,QAAO,SAAC4a,GAAD,OACnC/c,EAAIuC,SAASwa,EAAI1d,OAAS4E,EAAM+F,kBAAoB,IAAIrK,KAAI,SAACsK,GAAD,OAAQA,EAAE5K,MAAKkD,SAASwa,EAAI1d,OAG5F,cACO4E,GADP,IAEI+F,kBAAmB/F,EAAM+F,kBAAoB,IAAI4V,OAAO0I,MAI1DC,EAAoB,SAACtkB,EAAOjE,GAAR,cACnBiE,GADmB,IAEtB+F,kBAAmB/F,EAAM+F,kBAAoB,IAAI7H,QAAO,SAAC4a,GAAD,OAAU/c,EAAIuC,SAASwa,EAAI1d,UAGjFmpB,EAAgB,SAACvkB,GAAD,OAClBokB,EAAgBpkB,EAAOA,EAAMuX,KAAK7b,KAAI,SAACod,GAAD,OAAUA,EAAI1d,QAGlDopB,EAAkB,SAACxkB,GAAD,OACpBskB,EAAkBtkB,EAAOA,EAAMuX,KAAK7b,KAAI,SAACod,GAAD,OAAUA,EAAI1d,QAGpDqpB,EAAY,SAACzkB,EAAO5E,GAAR,OACdgpB,EAAgBpkB,EAAO,CAAC5E,KAGtBspB,EAAc,SAAC1kB,EAAO5E,GAAR,OAChBkpB,EAAkBtkB,EAAO,CAAC5E,KAGjBuf,EAAiB,SAACgK,EAAkBjqB,GAAnB,aAA+BkqB,SAAgB,WACxE,uBAAwB,SAAC5kB,GAAD,cAClBA,GADkB,IAErBuX,KAAM,GACNxD,aAAStR,EACT0R,kBAAc1R,EACd/H,UACAmqB,QAAQ,OAP6D,MASxE,yBAA0B,SAAC7kB,EAAD,OAAU+T,EAAV,EAAUA,QAASI,EAAnB,EAAmBA,aAAnB,cACpBnU,GADoB,IAEvB+T,UACAI,eACAiB,MAAOjB,EACPoD,KAAM4M,EAAcpQ,GAASrY,KAAI,SAACod,GAAD,cAC1BA,GAD0B,IACrBgC,SAAUC,EAAWjC,EAAI1d,GAAI4E,EAAM+F,uBAE/CrL,UACAmqB,QAAQ,OAlB6D,MAoBxEF,EAAiBG,uBAAwB,SAAC9kB,GAAD,cACnCA,GADmC,IAEtCoV,MAAOpV,EAAMmU,aACboD,UAAwB9U,IAAlBzC,EAAM+T,QAAwBoQ,EAAcnkB,EAAM+T,SAASrY,KAAI,SAACod,GAAD,cAC9DA,GAD8D,IACzDgC,SAAUC,EAAWjC,EAAI1d,GAAI4E,EAAM+F,uBACzC,GACNrL,UACAmqB,YAA+BpiB,IAAvBzC,EAAMmU,kBA3BuD,MA6BxEwQ,EAAiBI,yBAA0B,SAAC/kB,GAAD,cACrCA,GADqC,IAExCoV,MAAOpV,EAAMmU,aACboD,UAAwB9U,IAAlBzC,EAAM+T,QAAwBoQ,EAAcnkB,EAAM+T,SAASrY,KAAI,SAACod,GAAD,cAC9DA,GAD8D,IACzDgC,SAAUC,EAAWjC,EAAI1d,GAAI4E,EAAM+F,uBACzC,GACNrL,UACAmqB,YAA+BpiB,IAAvBzC,EAAMmU,kBApCuD,MAsCxE6E,MAAgB,SAAChZ,EAAD,GAAoD,IAC7DglB,EAD6D,IAA1ClpB,QAAWV,EAA+B,EAA/BA,GAAI0f,EAA2B,EAA3BA,SAAUlI,EAAiB,EAAjBA,SAahD,OAJyC,KALrCoS,EADO,IAAP5pB,EACW0f,EAAWyJ,EAAcvkB,GAASwkB,EAAgBxkB,GAElD8a,EAAW2J,EAAUzkB,EAAO5E,GAAMspB,EAAY1kB,EAAO5E,IAGvD2K,iBAAiB3D,QAAgBwQ,KAC1CoS,EAASjf,sBAAmBtD,GAGzBuiB,KAnD8D,MAqDxE,mBAAoB,SAAChlB,EAAD,SAAkC,CACnD+F,iBADiB,EAAUjK,QAAWC,QArD+B,KA0DhE0c,EAAkB,SAACkM,EAAkBjqB,EAAS2Y,GAA5B,aAA+CuR,SAAgB,WAErF,kBAAmB,SAAC5kB,EAAD,OAAU+T,EAAV,EAAUA,QAASI,EAAnB,EAAmBA,aAAnB,cACbnU,GADa,IAEhB+T,UACAI,oBALkF,MAOrF,eAAgB,SAACnU,GAAD,cACVA,GADU,IAEb6kB,QAAQ,EACRtN,KAAM4K,EACFniB,EAAM+T,SAAW,GACjB/T,EAAMuX,MAAQ,GACdlE,EACArT,EAAM+F,uBAdwE,MAiBrF4e,EAAiBI,yBAA0B,SAAC/kB,GAAD,cACrCA,GADqC,IAExCuX,KAAM4K,EACFniB,EAAM+T,SAAW,GACjB/T,EAAMuX,KACNlE,EACArT,EAAM+F,kBAEVqP,MAAQ/B,EAAsCrT,EAAMoV,MAA3BpV,EAAMmU,aAC/BzZ,QAASsF,EAAMoV,MAAQ,EAAI1a,EAAU,CAAC,CAAEE,MAAO,UA1BmC,MA4BrFimB,MAAS,SAAC7gB,EAAD,GAAoC,IAAfyU,EAAe,EAA1B3Y,QAAW2Y,OAE3B,OADAC,QAAgB1U,EAAOyU,GAChBzU,KA9B2E,MAgCrFgZ,MAAgB,SAAChZ,EAAD,GAAoD,IAC7DglB,EAD6D,IAA1ClpB,QAAWV,EAA+B,EAA/BA,GAAI0f,EAA2B,EAA3BA,SAAUlI,EAAiB,EAAjBA,SAahD,OAJyC,KALrCoS,EADO,IAAP5pB,EACW0f,EAAWyJ,EAAcvkB,GAASwkB,EAAgBxkB,GAElD8a,EAAW2J,EAAUzkB,EAAO5E,GAAMspB,EAAY1kB,EAAO5E,IAGvD2K,iBAAiB3D,QAAgBwQ,KAC1CoS,EAASjf,sBAAmBtD,GAGzBuiB,KA7C2E,MA+CrF,mBAAoB,SAAChlB,EAAD,SAAkC,CACnD+F,iBADiB,EAAUjK,QAAWC,QA/C4C","file":"js/EditPolicy.9ef9a39d16d310ba30da.js","sourcesContent":["/* eslint-disable react/display-name */\nimport React, { useLayoutEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport { InventoryTable, SystemsTable } from 'SmartComponents';\nimport { GET_SYSTEMS } from '../SystemsTable/constants';\nimport { systemName, detailsLink, policiesCell } from 'Store/Reducers/SystemStore';\nimport useFeature from 'Utilities/hooks/useFeature';\n\nconst QUERY = gql`\n{\n    profiles(search: \"external = false and canonical = false\") {\n        edges {\n            node {\n                id\n                name\n                refId\n                majorOsVersion\n            }\n        }\n    }\n}\n`;\n\nconst DEFAULT_FILTER = 'has_test_results = true or has_policy = true';\n\nexport const ComplianceSystems = () => {\n    const newInventory = useFeature('newInventory');\n    const { data, error, loading } = useQuery(QUERY);\n    const dispatch = useDispatch();\n    const columns = [{\n        key: 'facts.compliance.display_name',\n        title: 'Name',\n        props: {\n            width: 40, isStatic: true\n        },\n        ...newInventory && {\n            key: 'display_name',\n            renderFunc: systemName\n        }\n    }, {\n        key: 'facts.compliance.policies',\n        title: 'Policies',\n        props: {\n            width: 40, isStatic: true\n        },\n        ...newInventory && {\n            key: 'policyNames',\n            renderFunc: (policyNames) => {\n                const { title } = policiesCell({ policyNames }) || { title: '' };\n                return title;\n            }\n        }\n    }, {\n        key: 'facts.compliance.details_link',\n        title: '',\n        props: {\n            width: 20, isStatic: true\n        },\n        ...newInventory && {\n            key: 'testResultProfiles',\n            renderFunc: (data, id) => {\n                const { title } = detailsLink({ testResultProfiles: data, id }) || { title: '' };\n                return title;\n            }\n        }\n    }];\n    const policies = data?.profiles?.edges.map(({ node }) => node);\n\n    useLayoutEffect(() => { dispatch({ type: 'SELECT_ENTITIES', payload: { ids: [] } }); }, []);\n\n    const InvComponent = newInventory ? InventoryTable : SystemsTable;\n\n    return (\n        <React.Fragment>\n            <PageHeader className='page-header'>\n                <PageHeaderTitle title=\"Systems\" />\n            </PageHeader>\n            <Main>\n                <StateViewWithError stateValues={ { error, data, loading } }>\n                    <StateViewPart stateKey=\"data\">\n                        { policies && <InvComponent\n                            query={GET_SYSTEMS}\n                            defaultFilter={ DEFAULT_FILTER }\n                            systemProps={{\n                                isFullView: true\n                            }}\n                            showOsFilter\n                            showComplianceSystemsInfo\n                            enableEditPolicy={ false }\n                            remediationsEnabled={ false }\n                            columns={ columns }\n                            policies={ policies } /> }\n                    </StateViewPart>\n                </StateViewWithError>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default ComplianceSystems;\n","import React from 'react';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport {\n    Button,\n    Form,\n    FormGroup,\n    Text,\n    TextContent,\n    TextVariants,\n    Tooltip\n} from '@patternfly/react-core';\nimport { ProfileTypeSelect } from 'PresentationalComponents';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { propTypes as reduxFormPropTypes, formValueSelector, reduxForm } from 'redux-form';\nimport { connect, useDispatch } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\n\nconst BENCHMARKS_AND_PROFILES = gql`\nquery benchmarksAndProfiles {\n    latestBenchmarks {\n        id\n        title\n        refId\n        version\n        osMajorVersion\n        profiles {\n            id\n            name\n            refId\n            description\n            complianceThreshold\n        }\n    }\n    profiles(search: \"external = false and canonical = false\") {\n        edges {\n            node {\n                id\n                refId\n                benchmark {\n                    refId\n                }\n            }\n        }\n    }\n}\n`;\n\nconst PolicyTooltip = () => (\n    <Tooltip\n        position=\"right\"\n        content=\"Policy types are OpenSCAP policies that are supported by RHEL.\n        For each major version of RHEL, users can create one policy of each type.\">\n        <OutlinedQuestionCircleIcon style={{ opacity: 0.5 }}/>\n    </Tooltip>\n);\n\nexport const CreateSCAPPolicy = ({ change, selectedBenchmarkId }) => {\n    const { data, error, loading } = useQuery(BENCHMARKS_AND_PROFILES, { fetchPolicy: 'no-cache' });\n\n    const inUseProfileRefIds = (profiles, benchmark) => (\n        profiles.filter(profile => benchmark.refId === profile.node.benchmark.refId).map(profile => profile.node.refId)\n    );\n\n    const dispatch = useDispatch();\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const benchmarks = data.latestBenchmarks;\n    let selectedBenchmark;\n    let validProfiles;\n    if (selectedBenchmarkId) {\n        selectedBenchmark = benchmarks.find(benchmark => benchmark.id === selectedBenchmarkId);\n        const userProfileRefIds = inUseProfileRefIds(data.profiles.edges, selectedBenchmark);\n        validProfiles = selectedBenchmark.profiles.map((profile) => ({\n            ...profile,\n            disabled: userProfileRefIds.includes(profile.refId)\n        }));\n    }\n\n    const setBenchmark = ({ id, osMajorVersion }) => {\n        if (selectedBenchmark?.osMajorVersion !== osMajorVersion) {\n            change('systems', []);\n            dispatch({\n                type: 'SELECT_ENTITIES',\n                payload: { ids: [] }\n            });\n        }\n\n        change('benchmark', id);\n        change('osMajorVersion', osMajorVersion);\n    };\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1} className=\"pf-u-mb-md\">\n                    Create SCAP policy\n                </Text>\n                <Text className=\"pf-u-mb-md\">\n                    Select the operating system and policy type for this policy.\n                </Text>\n            </TextContent>\n            <Form>\n                <FormGroup\n                    label=\"Operating system\"\n                    isRequired\n                    fieldId=\"benchmark\">\n                    { benchmarks && benchmarks.sort((a, b) => a.refId.localeCompare(b.refId)).map((benchmark) => {\n                        const { id, osMajorVersion } = benchmark;\n                        return (\n                            <Button key={id} onClick={ () => setBenchmark(benchmark) }\n                                className={`wizard-os-button ${selectedBenchmarkId === id ? 'active-wizard-os-button' : ''}`}\n                                variant=\"tertiary\">\n                                { `RHEL ${osMajorVersion}` }\n                            </Button>\n                        );\n                    })}\n                </FormGroup>\n                <FormGroup\n                    isRequired\n                    labelIcon={<PolicyTooltip/>}\n                    label=\"Policy type\"\n                    fieldId=\"policy-type\">\n                    <ProfileTypeSelect\n                        profiles={selectedBenchmark && validProfiles }\n                        onClick={ () => {\n                            change('selectedRuleRefIds', null);\n                        }}/>\n                </FormGroup>\n            </Form>\n        </React.Fragment>\n    );\n};\n\nCreateSCAPPolicy.propTypes = {\n    selectedBenchmarkId: propTypes.string,\n    change: reduxFormPropTypes.change\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            selectedBenchmarkId: selector(state, 'benchmark')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(CreateSCAPPolicy);\n","import React, { useLayoutEffect } from 'react';\nimport { propTypes as reduxFormPropTypes, formValueSelector, reduxForm } from 'redux-form';\nimport {\n    selectColumns as selectRulesTableColumns\n} from '@redhat-cloud-services/frontend-components-inventory-compliance/SystemRulesTable';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport {\n    Title, Text, TextContent, TextVariants,\n    EmptyState, EmptyStateBody\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport { StateViewWithError, StateViewPart, TabbedRules } from 'PresentationalComponents';\nimport useCollection from 'Utilities/hooks/api/useCollection';\n\nconst PROFILES_QUERY = gql`\nquery Profiles($filter: String!){\n    profiles(search: $filter){\n        edges {\n            node {\n                id\n                name\n                refId\n                osMinorVersion\n                osMajorVersion\n                policy {\n                    id\n\n                }\n                policyType\n                benchmark {\n                    id\n                    refId\n                    latestSupportedOsMinorVersions\n                    osMajorVersion\n                }\n                ssgVersion\n                rules {\n                    id\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n    }\n}\n`;\n\nconst getBenchmarkProfile = (benchmark, profileRefId) => (\n    benchmark.profiles.find((benchmarkProfile) => (benchmarkProfile.refId === profileRefId))\n);\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) => (\n    benchmarks.find((benchmark) =>\n        benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n    )\n);\n\nexport const EditPolicyProfilesRules = ({ policy, selectedRuleRefIds, change, osMajorVersion, osMinorVersionCounts }) => {\n    const columns = selectRulesTableColumns(['Name', 'Severity', 'Ansible']);\n    const handleSelectCallback = (profile, newSelectedRuleRefIds) => {\n        const newSelection = selectedRuleRefIds.map((profileSelectedRuleRefIds) => {\n            if (profileSelectedRuleRefIds.id === profile.id) {\n                return {\n                    id: profileSelectedRuleRefIds.id,\n                    ruleRefIds: newSelectedRuleRefIds\n                };\n            } else {\n                return profileSelectedRuleRefIds;\n            }\n        });\n\n        change('selectedRuleRefIds', newSelection);\n    };\n\n    const { data: benchmarks, loading: benchmarksLoading } = useCollection('benchmarks', {\n        type: 'benchmark',\n        include: ['profiles'],\n        params: {\n            search: `os_major_version = ${ osMajorVersion } ` +\n                    `and latest_supported_os_minor_version ^ \"${ osMinorVersionCounts.map((i) => (i.osMinorVersion)).join(',') }\"`\n        }\n    });\n\n    let profileIds = [];\n    let tabsData = osMinorVersionCounts.map(({ osMinorVersion, count: systemCount }) => {\n        osMinorVersion = `${osMinorVersion}`;\n        let profile;\n        let profileSelectedRuleRefIds;\n        if (benchmarks) {\n            const benchmark = getBenchmarkBySupportedOsMinor(benchmarks.collection, osMinorVersion);\n            if (benchmark) {\n                profile = getBenchmarkProfile(benchmark, policy.refId);\n                if (profile) {\n                    profile = {\n                        ...profile,\n                        rules: profile.relationships?.rules?.data,\n                        benchmark: profile.relationships?.benchmark?.data\n                    };\n                    profileSelectedRuleRefIds = selectedRuleRefIds?.find(({ id }) => id === profile.id);\n                    profileIds.push(profile.id);\n                }\n            }\n        }\n\n        return {\n            profile,\n            systemCount,\n            newOsMinorVersion: osMinorVersion,\n            selectedRuleRefIds: profileSelectedRuleRefIds?.ruleRefIds\n        };\n    });\n    tabsData = tabsData.filter(({ profile }) => !!profile);\n\n    const filter = `${ (profileIds || []).map((i) => (`id = ${ i }`)).join(' OR ') }`;\n    const skipProfilesQuery = benchmarksLoading || filter.length === 0;\n    const { data: profilesData, error, loading } = useQuery(PROFILES_QUERY, {\n        variables: {\n            filter\n        },\n        skip: skipProfilesQuery\n    });\n    const dataState = ((profileIds?.length > 0) ? profilesData : undefined);\n    const loadingState = ((loading || benchmarksLoading) ? true : undefined);\n    const noRuleSets = !error && !loadingState && profileIds?.length === 0;\n    const profiles = skipProfilesQuery ? [] : profilesData?.profiles.edges.map((p) => (p.node));\n\n    useLayoutEffect(() => {\n        if (!loadingState) {\n            change('selectedRuleRefIds', profiles.map((profile) => ({\n                id: profile.id,\n                ruleRefIds: selectedRuleRefIds?.find(({ id }) => id === profile.id)?.ruleRefIds ||\n                            profile.rules.map((rule) => (rule.refId))\n            })));\n        }\n    }, [profiles, loadingState]);\n\n    return <React.Fragment>\n        <TextContent className='pf-u-pb-md'>\n            <Text component={TextVariants.h1}>\n                Rules\n            </Text>\n            <Text>\n                Customize your <b>{ policy.name }</b> SCAP policy by including and excluding rules.\n            </Text>\n            <Text>\n                Each release of RHEL is supported with a unique and specific version of the SCAP Security\n                Guide (SSG). You must customize each version of SSG for each release of RHEL.\n            </Text>\n        </TextContent>\n\n        <StateViewWithError stateValues={ { error, data: dataState, loading: loadingState, noRuleSets } }>\n            <StateViewPart stateKey=\"noRuleSets\">\n                <EmptyState>\n                    <Title headingLevel=\"h1\" size=\"xl\">\n                        No rules can be configured\n                    </Title>\n                    <EmptyStateBody>\n                        The policy type selected does not exist for the systems and\n                        OS versions selected in the previous steps.\n                    </EmptyStateBody>\n                </EmptyState>\n            </StateViewPart>\n            <StateViewPart stateKey=\"loading\">\n                <EmptyTable><Spinner/></EmptyTable>\n            </StateViewPart>\n            <StateViewPart stateKey=\"data\">\n                <TabbedRules\n                    tabsData={ tabsData }\n                    columns={ columns }\n                    remediationsEnabled={ false }\n                    selectedFilter\n                    level={ 1 }\n                    handleSelect={ handleSelectCallback } />\n            </StateViewPart>\n        </StateViewWithError>\n    </React.Fragment>;\n};\n\nEditPolicyProfilesRules.propTypes = {\n    policy: propTypes.object,\n    change: reduxFormPropTypes.change,\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    selectedRuleRefIds: propTypes.array\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            policy: JSON.parse(selector(state, 'profile')),\n            osMajorVersion: selector(state, 'osMajorVersion'),\n            osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n            selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyProfilesRules);\n","import React, { useEffect, useState } from 'react';\nimport { propTypes as reduxFormPropTypes, formValueSelector, reduxForm } from 'redux-form';\nimport SystemRulesTable, {\n    selectColumns as selectRulesTableColumns\n} from '@redhat-cloud-services/frontend-components-inventory-compliance/SystemRulesTable';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { Button, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport EditPolicyProfilesRules from './EditPolicyProfilesRules';\n\nconst QUERY = gql`\nquery benchmarkAndProfile($benchmarkId: String!, $profileId: String!){\n    benchmark(id: $benchmarkId) {\n        id\n        rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n        }\n    }\n    profile(id: $profileId) {\n        id\n        name\n        refId\n        rules {\n            id\n            refId\n        }\n    }\n}\n`;\n\nexport const EditPolicyRules = ({ profileId, benchmarkId, osMajorVersion, osMinorVersionCounts, selectedRuleRefIds, change }) => {\n    const multiversionRules = useFeature('multiversionTabs');\n    const columns = selectRulesTableColumns(['Name', 'Severity', 'Ansible']);\n    const { data, error, loading } = useQuery(QUERY, { variables: { profileId, benchmarkId } });\n    const [defaultSelection, setDefaultSelection] = useState(null);\n    const profileRules = data && [{\n        profile: { refId: data.profile.refId, name: data.profile.name },\n        rules: data.benchmark.rules\n    }];\n    const resetToDefaultSelection = () => (\n        change('selectedRuleRefIds', defaultSelection)\n    );\n    const isDefaultSelection = (ruleIds) => {\n        const filteredRules = ruleIds?.filter((ruleId) => (defaultSelection?.includes(ruleId)));\n        return ruleIds && defaultSelection && filteredRules.length === defaultSelection.length;\n    };\n\n    useEffect(() => {\n        if (data) {\n            const ruleIds = data.profile.rules.map((rule) => rule.refId);\n            setDefaultSelection(ruleIds);\n            if (!selectedRuleRefIds) {\n                change('selectedRuleRefIds', ruleIds);\n            }\n        }\n    }, [data, change, selectedRuleRefIds]);\n\n    return <StateViewWithError stateValues={ { error, data, loading } }>\n        <StateViewPart stateKey=\"loading\">\n            <EmptyTable><Spinner/></EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Rules\n                </Text>\n            </TextContent>\n            <TextContent>\n                <Text>\n                    Edit your policy by including and excluding rules.\n                </Text>\n                <Text>\n                    Selected policy type <strong>{ data?.profile.name }</strong> has { defaultSelection?.length } rules.&ensp;\n                    { selectedRuleRefIds && !isDefaultSelection(selectedRuleRefIds) &&\n                        <Button variant=\"link\" isInline onClick={ () => resetToDefaultSelection() }>\n                          Reset to default selection\n                        </Button>\n                    }\n                </Text>\n                { multiversionRules && osMinorVersionCounts && osMinorVersionCounts.length > 0 &&\n                    <Text>\n                        Tailoring for{' '}\n                        { osMinorVersionCounts.map(({ osMinorVersion, count }) =>\n                            `RHEL ${osMajorVersion}.${osMinorVersion} (${count} systems)`).join(', ') }\n                    </Text>\n                }\n            </TextContent>\n            <SystemRulesTable\n                remediationsEnabled={ false }\n                tailoringEnabled\n                selectedFilter\n                remediationAvailableFilter\n                columns={ columns }\n                loading={ loading }\n                handleSelect={ (selectedRuleRefIds) => change('selectedRuleRefIds', selectedRuleRefIds) }\n                profileRules={ profileRules }\n                selectedRefIds={ selectedRuleRefIds || [] }\n            />\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nEditPolicyRules.propTypes = {\n    profileId: propTypes.string,\n    benchmarkId: propTypes.string,\n    change: reduxFormPropTypes.change,\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    selectedRuleRefIds: propTypes.array\n};\n\nconst selector = formValueSelector('policyForm');\n\nconst EditPolicyRulesComponent = compose(\n    connect(\n        state => ({\n            benchmarkId: selector(state, 'benchmark'),\n            profile: JSON.parse(selector(state, 'profile')),\n            profileId: JSON.parse(selector(state, 'profile')).id,\n            osMajorVersion: selector(state, 'osMajorVersion'),\n            osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n            selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyRules);\n\nconst FeatureWrapper = (...props) => {\n    const multiversionRules = useFeature('multiversionTabs');\n    const Component = multiversionRules ? EditPolicyProfilesRules : EditPolicyRulesComponent;\n\n    return <Component { ...props } />;\n};\n\nexport default FeatureWrapper;\n","import React, { useEffect } from 'react';\nimport { propTypes as reduxFormPropTypes, reduxForm, formValueSelector } from 'redux-form';\nimport { Button, Form, FormGroup, Text, TextContent, TextVariants, WizardContextConsumer } from '@patternfly/react-core';\nimport { InventoryTable, SystemsTable } from 'SmartComponents';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport { countOsMinorVersions } from 'Store/Reducers/SystemStore';\n\nconst EditPolicySystems = ({ change, osMajorVersion, osMinorVersionCounts, selectedSystemIds }) => {\n    const newInventory = useFeature('newInventory');\n    const multiversionRules = useFeature('multiversionTabs');\n\n    const columns = [{\n        key: 'facts.compliance.display_name',\n        title: 'Name',\n        props: {\n            width: 40, isStatic: true\n        },\n        ...newInventory && {\n            key: 'display_name',\n            renderFunc: (displayName, _id, { name }) => (displayName || name)\n        }\n    }, {\n        key: 'facts.compliance.osMinorVersion',\n        title: 'Operating system',\n        props: {\n            width: 40, isStatic: true\n        },\n        ...newInventory && {\n            key: 'osMinorVersion',\n            renderFunc: (osMinorVersion, _id, { osMajorVersion }) => `RHEL ${osMajorVersion}.${osMinorVersion}`\n        }\n    }];\n\n    useEffect(() => {\n        if (selectedSystemIds) {\n            change('systems', selectedSystemIds);\n        }\n\n        if (osMinorVersionCounts) {\n            change('osMinorVersionCounts', osMinorVersionCounts);\n        }\n    }, [selectedSystemIds, osMinorVersionCounts, change]);\n\n    const emptyStateComponent = (<React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                You do not have any <b>RHEL { osMajorVersion }</b> systems connected to Insights and enabled for Compliance.<br/>\n                Policies must be created with at least one system.\n            </Text>\n        </TextContent>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Choose a different operating system, or connect <b>RHEL { osMajorVersion }</b> systems to Insights.\n            </Text>\n        </TextContent>\n        <WizardContextConsumer>\n            { ({ goToStepById }) => <Button onClick={() => goToStepById(1)}>Choose a different operating system</Button> }\n        </WizardContextConsumer>\n    </React.Fragment>);\n\n    const prependComponent = (<React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Select which of your <b>RHEL { osMajorVersion }</b> systems should be included\n                in this policy.<br />\n                Systems can be added or removed at any time.\n            </Text>\n        </TextContent>\n    </React.Fragment>);\n\n    const InvCmp = newInventory ? InventoryTable : SystemsTable;\n\n    return (\n        <React.Fragment>\n            <TextContent className=\"pf-u-mb-md\">\n                <Text component={TextVariants.h1}>\n                    Systems\n                </Text>\n            </TextContent>\n            <Form>\n                <FormGroup>\n                    <InvCmp\n                        prependComponent={prependComponent}\n                        emptyStateComponent={multiversionRules ? emptyStateComponent : undefined}\n                        columns={columns}\n                        remediationsEnabled={false}\n                        compact\n                        showActions={ false }\n                        query={ GET_SYSTEMS_WITHOUT_FAILED_RULES }\n                        defaultFilter={ osMajorVersion && `os_major_version = ${osMajorVersion}` }\n                        enableExport={ false }/>\n                </FormGroup>\n            </Form>\n        </React.Fragment>\n    );\n};\n\nEditPolicySystems.propTypes = {\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    selectedSystemIds: propTypes.array,\n    change: reduxFormPropTypes.change\n};\n\nEditPolicySystems.defaultProps = {\n    selectedSystemIds: [],\n    osMinorVersionCounts: []\n};\n\nconst selector = formValueSelector('policyForm');\nconst mapStateToProps = (state) => ({\n    osMajorVersion: selector(state, 'osMajorVersion'),\n    osMinorVersionCounts: countOsMinorVersions(state.entities?.selectedEntities),\n    selectedSystemIds: (state.entities?.selectedEntities || []).map((e) => (e.id))\n});\n\nexport default compose(\n    connect(mapStateToProps),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicySystems);\n","import React, { useEffect } from 'react';\nimport { compose } from 'redux';\nimport { Field, reduxForm, formValueSelector, propTypes as reduxFormPropTypes } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Form, FormGroup, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { ReduxFormTextInput, ReduxFormTextArea } from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport { ProfileThresholdField } from 'PresentationalComponents';\n\nconst EditPolicyDetails = ({ change, policy, refId }) => {\n\n    useEffect(() => {\n        if (policy && policy.refId !== refId) {\n            change('name', `${policy.name}`);\n            change('refId', `${policy.refId}`);\n            change('description', `${policy.description}`);\n        }\n    }, [policy]);\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Details\n                </Text>\n            </TextContent>\n            <br/>\n            <Form id='editpolicydetails'>\n                <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n                    <Field\n                        component={ReduxFormTextInput}\n                        type='text'\n                        isRequired={true}\n                        id=\"name\"\n                        name=\"name\"\n                        aria-describedby=\"name\" />\n                </FormGroup>\n                <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextInput}\n                        isDisabled\n                        id=\"refId\"\n                        name=\"refId\"\n                        aria-describedby=\"refId\" />\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"description\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextArea}\n                        id=\"description\"\n                        name=\"description\"\n                        aria-describedby=\"description\" />\n                </FormGroup>\n                <FormGroup label=\"Business objective\" fieldId=\"businessObjective\">\n                    <Field\n                        type=\"text\"\n                        component={ ReduxFormTextInput }\n                        id=\"businessObjective\"\n                        name=\"businessObjective\"\n                        aria-describedby=\"businessObjective\"\n                        defaultValue={ policy.businessObjective } />\n                </FormGroup>\n                <ProfileThresholdField\n                    showTitle={ false }\n                    previousThreshold={ policy.complianceThreshold } />\n            </Form>\n        </React.Fragment>\n    );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n    policy: propTypes.object,\n    refId: propTypes.string,\n    change: reduxFormPropTypes.change\n};\n\nconst mapStateToProps = (state) => {\n    const policy = JSON.parse(selector(state, 'profile'));\n    return {\n        policy,\n        refId: selector(state, 'refId'),\n        initialValues: {\n            name: `${policy.name}`,\n            refId: `${policy.refId}`,\n            description: `${policy.description}`,\n            benchmark: selector(state, 'benchmark'),\n            osMajorVersion: selector(state, 'osMajorVersion'),\n            profile: selector(state, 'profile')\n        }\n    };\n};\n\nexport default compose(\n    connect(mapStateToProps),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyDetails);\n\nexport { EditPolicyDetails };\n","import React from 'react';\nimport {\n    Text,\n    TextVariants,\n    TextContent,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst REVIEW = gql`\nquery review($benchmarkId: String!) {\n    benchmark(id: $benchmarkId) {\n        id\n        osMajorVersion\n    }\n}\n`;\n\nconst ReviewCreatedPolicy = ({\n    benchmarkId, name, businessObjective, complianceThreshold, parentProfileName, osMinorVersionCounts\n}) => {\n    const { data, error, loading } = useQuery(REVIEW, { variables: { benchmarkId } });\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const { benchmark: { osMajorVersion } } = data;\n\n    return (\n        <TextContent>\n            <Text component={TextVariants.h1}>\n                Review\n            </Text>\n            <Text>\n                Review your SCAP policy before finishing.\n            </Text>\n            <Text component={TextVariants.h3}>{ name }</Text>\n            <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>Policy type</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ parentProfileName }</TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Compliance threshold</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ complianceThreshold }%</TextListItem>\n                { businessObjective &&\n                    <React.Fragment>\n                        <TextListItem component={TextListItemVariants.dt}>Business objective</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{ businessObjective }</TextListItem>\n                    </React.Fragment>\n                }\n                <TextListItem component={TextListItemVariants.dt}>Systems</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                    <TextList component={TextListVariants.dl}>\n                        { osMinorVersionCounts.map(({ osMinorVersion, count }) => (\n                            <React.Fragment key={osMinorVersion}>\n                                <TextListItem component={TextListItemVariants.dt} style={{ 'font-weight': 'normal' }}>\n                                    RHEL {osMajorVersion}.{osMinorVersion}\n                                </TextListItem>\n                                <TextListItem component={TextListItemVariants.dd}>\n                                    { count }\n                                </TextListItem>\n                            </React.Fragment>\n                        )) }\n                    </TextList>\n                </TextListItem>\n            </TextList>\n        </TextContent>\n    );\n};\n\nReviewCreatedPolicy.propTypes = {\n    benchmarkId: propTypes.string,\n    refId: propTypes.string,\n    name: propTypes.string,\n    businessObjective: propTypes.string,\n    complianceThreshold: propTypes.number,\n    parentProfileName: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    }))\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect(\n    state => ({\n        benchmarkId: selector(state, 'benchmark'),\n        refId: selector(state, 'refId'),\n        name: selector(state, 'name'),\n        businessObjective: selector(state, 'businessObjective'),\n        osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n        complianceThreshold: parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n        parentProfileName: JSON.parse(selector(state, 'profile')).name,\n        rulesCount: selector(state, 'selectedRuleRefIds').length\n    })\n)(ReviewCreatedPolicy);\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Title, Button, Bullseye, EmptyState, EmptyStateBody, EmptyStateSecondaryActions,\n    EmptyStateVariant, EmptyStateIcon, List, ListItem\n} from '@patternfly/react-core';\nimport { ProgressBar } from 'PresentationalComponents';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from '@apollo/react-hoc';\nimport usePolicy from 'SmartComponents/EditPolicy/usePolicy';\n\nconst FinishedCreatePolicy = ({\n    onWizardFinish,\n    cloneFromProfileId,\n    description,\n    name,\n    complianceThreshold,\n    businessObjective,\n    refId,\n    benchmarkId,\n    systemIds,\n    selectedRuleRefIds\n}) => {\n    const [percent, setPercent] = useState(0);\n    const [message, setMessage] = useState('This usually takes a minute or two.');\n    const [errors, setErrors] = useState(null);\n    const [failed, setFailed] = useState(false);\n    const updatePolicy = usePolicy();\n\n    const onProgress = (progress) => {\n        setPercent(progress * 100);\n    };\n\n    useEffect(() => {\n        const newPolicy = {\n            cloneFromProfileId,\n            description,\n            name,\n            complianceThreshold,\n            businessObjective: { title: businessObjective },\n            refId,\n            benchmarkId,\n            hosts: systemIds.map((id) => ({ id })),\n            selectedRuleRefIds\n        };\n\n        updatePolicy(null, newPolicy, onProgress).then(() => {\n            setPercent(100);\n            setMessage();\n        }).catch((error) => {\n            setMessage(error.networkError?.message);\n            setErrors(error.networkError?.result?.errors);\n            setFailed(true);\n        });\n    }, []);\n\n    let listErrors;\n    if (errors && Array.isArray(errors) && errors.length > 0) {\n        listErrors = errors.map((error) => (\n            <ListItem key={ error }>{ error }</ListItem>\n        ));\n    }\n\n    let secondaryActions;\n    if (percent === 100 || failed) {\n        secondaryActions = (\n            <Button\n                variant={'primary'}\n                onClick={() => { onWizardFinish(); }}>\n                { failed ? 'Back' : 'Return to application' }\n            </Button>\n        );\n    }\n\n    return (\n        <Bullseye>\n            <EmptyState variant={EmptyStateVariant.full}>\n                <EmptyStateIcon icon={WrenchIcon} />\n                <br/>\n                <Title headingLevel=\"h1\" size='lg'>\n                    Creating policy\n                </Title>\n                <EmptyStateBody>\n                    <ProgressBar percent={percent} failed={failed} />\n                </EmptyStateBody>\n                <EmptyStateBody className={failed && 'wizard-failed-message'}>\n                    { message }\n                </EmptyStateBody>\n                { listErrors &&\n                    <EmptyStateBody className='wizard-failed-errors'>\n                        <List>{ listErrors }</List>\n                    </EmptyStateBody>\n                }\n                <EmptyStateSecondaryActions>\n                    { secondaryActions }\n                </EmptyStateSecondaryActions>\n            </EmptyState>\n        </Bullseye>\n    );\n};\n\nFinishedCreatePolicy.propTypes = {\n    benchmarkId: propTypes.string.isRequired,\n    client: propTypes.object.isRequired,\n    businessObjective: propTypes.object,\n    cloneFromProfileId: propTypes.string.isRequired,\n    refId: propTypes.string.isRequired,\n    name: propTypes.string.isRequired,\n    description: propTypes.string,\n    systemIds: propTypes.array,\n    complianceThreshold: propTypes.number,\n    onWizardFinish: propTypes.func,\n    selectedRuleRefIds: propTypes.arrayOf(propTypes.string).isRequired\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            benchmarkId: selector(state, 'benchmark'),\n            businessObjective: selector(state, 'businessObjective'),\n            cloneFromProfileId: JSON.parse(selector(state, 'profile')).id,\n            refId: selector(state, 'refId'),\n            name: selector(state, 'name'),\n            description: selector(state, 'description'),\n            complianceThreshold: parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n            systemIds: selector(state, 'systems'),\n            selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: true,\n        forceUnregisterOnUnmount: true\n    }),\n    withApollo\n)(FinishedCreatePolicy);\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport EditPolicyRules from './EditPolicyRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport { validateBenchmarkPage, validateDetailsPage, validateRulesPage, validateSystemsPage } from './validate';\n\nexport const CreatePolicy = ({\n    benchmark, osMajorVersion, complianceThreshold, name, profile, refId, selectedRuleRefIds, systemIds\n}) => {\n    const history = useHistory();\n    const [stepIdReached, setStepIdReached] = useState(1);\n\n    const resetAnchor = () => {\n        const { location } = history;\n        if (location.hash) {\n            history.push({ ...location, hash: '' });\n        }\n    };\n\n    const onNext = ({ id }) => {\n        setStepIdReached(stepIdReached < id ? id : stepIdReached);\n        resetAnchor();\n    };\n\n    const onClose = () => {\n        history.push('/scappolicies');\n    };\n\n    const steps = [\n        {\n            id: 1,\n            name: 'Create SCAP policy',\n            component: <CreateSCAPPolicy/>,\n            enableNext: validateBenchmarkPage(benchmark, osMajorVersion, profile)\n        },\n        {\n            id: 2,\n            name: 'Details',\n            component: <EditPolicyDetails/>,\n            canJumpTo: stepIdReached >= 2,\n            enableNext: validateDetailsPage(name, refId, complianceThreshold)\n        },\n        {\n            id: 3,\n            name: 'Systems',\n            component: <EditPolicySystems/>,\n            canJumpTo: stepIdReached >= 3,\n            enableNext: validateSystemsPage(systemIds)\n        },\n        {\n            id: 4,\n            name: 'Rules',\n            component: <EditPolicyRules/>,\n            canJumpTo: systemIds?.length > 0 && stepIdReached >= 4,\n            enableNext: validateRulesPage(selectedRuleRefIds)\n        },\n        {\n            id: 5,\n            name: 'Review',\n            component: <ReviewCreatedPolicy/>,\n            nextButtonText: 'Finish',\n            canJumpTo: (\n                validateRulesPage(selectedRuleRefIds) &&\n                systemIds?.length > 0 &&\n                stepIdReached >= 5\n            )\n        },\n        {\n            id: 6,\n            name: 'Finished',\n            component: <FinishedCreatePolicy onWizardFinish={ onClose } />,\n            isFinishedStep: true,\n            canJumpTo: systemIds?.length > 0 && stepIdReached >= 6\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <Wizard\n                isOpen\n                width={ 1220 }\n                onNext={ onNext }\n                onGoToStep={ resetAnchor }\n                onBack={ resetAnchor }\n                onClose={ onClose }\n                title=\"Create SCAP policy\"\n                description=\"Create a new policy for managing SCAP compliance\"\n                steps={ steps } />\n        </React.Fragment>\n    );\n};\n\nCreatePolicy.propTypes = {\n    benchmark: propTypes.string,\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    complianceThreshold: propTypes.string,\n    businessObjective: propTypes.object,\n    dispatch: propTypes.func,\n    isOpen: propTypes.bool,\n    name: propTypes.string,\n    onWizardFinish: propTypes.func,\n    profile: propTypes.string,\n    refId: propTypes.string,\n    selectedRuleRefIds: propTypes.arrayOf(propTypes.string),\n    systemIds: propTypes.arrayOf(propTypes.string)\n};\n\nCreatePolicy.defaultProps = {\n    isOpen: false\n};\n\nconst selector = formValueSelector('policyForm');\nexport default connect(\n    state => ({\n        benchmark: selector(state, 'benchmark'),\n        osMajorVersion: selector(state, 'osMajorVersion'),\n        osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n        businessObjective: selector(state, 'businessObjective'),\n        complianceThreshold: selector(state, 'complianceThreshold') || '100.0',\n        name: selector(state, 'name'),\n        profile: selector(state, 'profile'),\n        refId: selector(state, 'refId'),\n        selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n        systemIds: selector(state, 'systems')\n    })\n)(CreatePolicy);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    FormGroup, TextArea, TextInput\n} from '@patternfly/react-core';\nimport { thresholdValid } from '../CreatePolicy/validate';\n\nexport const useThresholdValidate = () => {\n    const [validThreshold, setValidThreshold] = useState(true);\n    return [validThreshold, (threshold) => {\n        const valid = thresholdValid(threshold);\n        setValidThreshold(valid);\n        return valid;\n    }];\n};\n\nconst EditPolicyDetailsTab = ({ policy, setUpdatedPolicy }) => {\n    const [validThreshold, validateThreshold] = useThresholdValidate();\n\n    return <React.Fragment>\n        <FormGroup label=\"Policy description\" isRequired fieldId=\"description\">\n            <TextArea\n                style={ { width: 800, height: 110 } }\n                isRequired\n                type=\"text\"\n                id=\"description\"\n                name=\"description\"\n                aria-describedby=\"description\"\n                defaultValue={ policy.description }\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) => ({\n                        ...policy,\n                        description: value\n                    }));\n                }} />\n        </FormGroup>\n\n        <FormGroup label=\"Business objective\" fieldId=\"business-objective\">\n            <TextInput\n                type=\"text\"\n                style={ { width: 300 } }\n                id=\"business-objective\"\n                name=\"business-objective\"\n                aria-describedby=\"business-objective\"\n                defaultValue={ policy?.businessObjective?.title }\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) =>({\n                        ...policy,\n                        businessObjective: {\n                            ...policy.businessObjective,\n                            title: value\n                        }\n                    }));\n                }} />\n        </FormGroup>\n\n        <FormGroup\n            validated={ validThreshold ? 'default' : 'error' }\n            label='Compliance threshold (%)'\n            fieldId='policy-threshold'\n            helperTextInvalid='Threshold has to be a number between 0 and 100'\n            helperText='A value of 95% or higher is recommended'>\n            <TextInput\n                type='number'\n                style={ { width: 150 } }\n                name='compliance-threshold'\n                id='compliance-threshold'\n                defaultValue={ policy.complianceThreshold }\n                aria-describedby=\"policy-threshold\"\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) =>({\n                        ...policy,\n                        complianceThreshold: value,\n                        complianceThresholdValid: validateThreshold(value)\n                    }));\n                }} />\n        </FormGroup>\n    </React.Fragment>;\n};\n\nEditPolicyDetailsTab.propTypes = {\n    policy: propTypes.shape({\n        description: propTypes.string,\n        businessObjective: propTypes.object,\n        complianceThreshold: propTypes.oneOfType([\n            propTypes.string,\n            propTypes.number\n        ])\n    }),\n    setUpdatedPolicy: propTypes.func\n};\n\nexport default EditPolicyDetailsTab;\n","import React, { useLayoutEffect } from 'react';\nimport {\n    EmptyState, EmptyStateBody, Text, TextContent, Title\n} from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { StateViewWithError, StateViewPart, TabbedRules } from 'PresentationalComponents';\nimport useCollection from 'Utilities/hooks/api/useCollection';\nimport { sortingByProp } from 'Utilities/helpers';\n\nconst PROFILES_QUERY = gql`\nquery Profiles($filter: String!){\n    profiles(search: $filter){\n        edges {\n            node {\n                id\n                name\n                refId\n                osMinorVersion\n                osMajorVersion\n                policy {\n                    id\n\n                }\n                policyType\n                benchmark {\n                    id\n                    refId\n                    latestSupportedOsMinorVersions\n                    osMajorVersion\n                }\n                ssgVersion\n                rules {\n                    id\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n    }\n}\n`;\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) => (\n    benchmarks.find((benchmark) =>\n        benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n    )\n);\n\nconst getBenchmarkProfile = (benchmark, profileRefId) => (\n    benchmark.profiles.find((benchmarkProfile) => (benchmarkProfile.refId === profileRefId))\n);\n\nconst EditPolicyRulesTabEmptyState = () => <EmptyState>\n    <Title headingLevel=\"h5\" size=\"lg\">\n        No rules can be configured\n    </Title>\n    <EmptyStateBody>\n        This policy has no associated systems, and therefore no rules can be configured.\n    </EmptyStateBody>\n    <EmptyStateBody>\n        Add at least one system to configure rules for this policy.\n    </EmptyStateBody>\n</EmptyState>;\n\nconst EditPolicyRulesTab = ({ handleSelect, policy, selectedRuleRefIds, osMinorVersionCounts }) => {\n    const osMajorVersion = policy?.osMajorVersion;\n    const osMinorVersions = Object.keys(osMinorVersionCounts).sort();\n    const benchmarkSearch = `os_major_version = ${ osMajorVersion } ` +\n        `and latest_supported_os_minor_version ^ \"${ osMinorVersions.join(',') }\"`;\n\n    const { data: benchmarks, loading: benchmarksLoading } = useCollection('benchmarks', {\n        type: 'benchmark',\n        include: ['profiles'],\n        params: { search: benchmarkSearch },\n        skip: osMinorVersions.length === 0\n    }, [benchmarkSearch]);\n\n    let profileIds = [];\n    let tabsData = Object.values(osMinorVersionCounts).sort(\n        sortingByProp('osMinorVersion', 'desc')\n    ).map(({ osMinorVersion, count: systemCount }) => {\n        osMinorVersion = `${osMinorVersion}`;\n        let profile = policy.policy.profiles.find((profile) => (profile.osMinorVersion === osMinorVersion));\n\n        if (!profile && benchmarks) {\n            const benchmark = getBenchmarkBySupportedOsMinor(benchmarks.collection, osMinorVersion);\n            if (benchmark) {\n                const benchmarkProfile = getBenchmarkProfile(benchmark, policy.refId);\n                if (benchmarkProfile) {\n                    profile = policy.policy.profiles.find((profile) => (profile.parentProfileId === benchmarkProfile.id));\n\n                    profile = {\n                        ...benchmarkProfile,\n                        benchmark: benchmarkProfile.relationships?.benchmark?.data,\n                        rules: benchmarkProfile.relationships?.rules?.data,\n                        ...profile\n                    };\n                }\n            }\n        }\n\n        return {\n            profile,\n            systemCount,\n            newOsMinorVersion: osMinorVersion,\n            selectedRuleRefIds: selectedRuleRefIds?.find(({ id }) => id === profile?.id)?.ruleRefIds\n        };\n    });\n    tabsData = tabsData.filter(({ profile, newOsMinorVersion }) => !!profile && newOsMinorVersion);\n\n    tabsData.forEach((tab) => (profileIds.push(tab.profile.id)));\n\n    const filter = `${ (profileIds || []).map((i) => (`id = ${ i }`)).join(' OR ') }`;\n    const { data: profilesData, error, loading } = useQuery(PROFILES_QUERY, {\n        variables: {\n            filter\n        },\n        skip: filter.length === 0\n    });\n    const loadingState = ((loading || benchmarksLoading) ? true : undefined);\n    const dataState = ((!loadingState && tabsData?.length > 0) ? profilesData : undefined);\n\n    useLayoutEffect(() => {\n        if (profilesData) {\n            const profiles = profilesData?.profiles.edges.map((p) => (p.node)) || [];\n            profiles.forEach((profile) => {\n                const foundSelection = selectedRuleRefIds?.find(({ id }) => id === profile?.id);\n                if (!foundSelection) {\n                    const refIds = profile.rules.map((rule) => (rule.refId));\n                    handleSelect(profile, refIds);\n                }\n            });\n        }\n    }, [profilesData]);\n\n    return <StateViewWithError stateValues={ {\n        error, data: dataState, loading: loadingState, empty: !loadingState && !dataState\n    } }>\n        <StateViewPart stateKey=\"loading\">\n            <EmptyTable><Spinner/></EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n            <TextContent>\n                <Text>\n                    Different release versions of RHEL are associated with different versions of\n                    the SCAP Security Guide (SSG), therefore each release must be customized independently.\n                </Text>\n            </TextContent>\n            <TabbedRules\n                tabsData={ tabsData }\n                remediationsEnabled={ false }\n                selectedFilter\n                level={ 1 }\n                handleSelect={ handleSelect } />\n        </StateViewPart>\n        <StateViewPart stateKey=\"empty\">\n            <EditPolicyRulesTabEmptyState />\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nEditPolicyRulesTab.propTypes = {\n    handleSelect: propTypes.func,\n    policy: propTypes.object,\n    osMinorVersionCounts: propTypes.shape({\n        osMinorVersion: propTypes.shape({\n            osMinorVersion: propTypes.number,\n            count: propTypes.number\n        })\n    }),\n    selectedRuleRefIds: propTypes.array\n};\n\nexport default EditPolicyRulesTab;\n","import React from 'react';\nimport { Alert, AlertActionLink, Text, TextContent } from '@patternfly/react-core';\nimport { useSelector } from 'react-redux';\nimport { InventoryTable } from 'SmartComponents';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\nimport propTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\n\nconst EditPolicySystemsTab = ({ osMajorVersion, policyOsMinorVersions }) => {\n    const { push, location } = useHistory();\n    const selectedSystemOsMinorVersions = useSelector(state => (\n        state?.entities?.selectedEntities?.map(entity => `${entity.osMinorVersion}`)\n    ));\n\n    const newOsMinorVersions = () => (\n        selectedSystemOsMinorVersions?.find((systemOsMinorVersion) => (\n            !policyOsMinorVersions.includes(systemOsMinorVersion)\n        ))\n    );\n\n    const columns = [{\n        key: 'display_name',\n        title: 'Name',\n        props: {\n            width: 40, isStatic: true\n        },\n        renderFunc: (displayName, _id, { name }) => (displayName || name)\n    }, {\n        key: 'osMinorVersion',\n        title: 'Operating system',\n        props: {\n            width: 40, isStatic: true\n        },\n        renderFunc: (osMinorVersion, _id, { osMajorVersion }) => `RHEL ${osMajorVersion}.${osMinorVersion}`\n    }];\n\n    const emptyStateComponent = (<React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                You do not have any <b>RHEL { osMajorVersion }</b> systems connected to Insights and enabled for Compliance.\n            </Text>\n        </TextContent>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Connect RHEL { osMajorVersion } systems to Insights.\n            </Text>\n        </TextContent>\n    </React.Fragment>);\n\n    const prependComponent = (<React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Select which of your <b>RHEL { osMajorVersion }</b> systems should be included\n                in this policy.\n            </Text>\n        </TextContent>\n    </React.Fragment>);\n\n    return (\n        <React.Fragment>\n            <InventoryTable\n                prependComponent={prependComponent}\n                emptyStateComponent={emptyStateComponent}\n                columns={columns}\n                compact\n                showActions={ false }\n                query={ GET_SYSTEMS_WITHOUT_FAILED_RULES }\n                defaultFilter={ osMajorVersion && `os_major_version = ${osMajorVersion}` }\n                enableExport={ false }\n                remediationsEnabled={ false }\n            />\n            {newOsMinorVersions() && <Alert\n                variant=\"info\"\n                isInline\n                title=\"You selected a system that has a release version previously not included in this policy.\"\n                actionLinks={\n                    <AlertActionLink onClick={ () => push({ ...location, hash: '#rules' }) }>Open rule editing</AlertActionLink>\n                }>\n                <p>If you have edited any rules for this policy, you will need to do so for this release version as well.</p>\n            </Alert>}\n        </React.Fragment>\n    );\n};\n\nEditPolicySystemsTab.propTypes = {\n    osMajorVersion: propTypes.string,\n    policyOsMinorVersions: propTypes.arrayOf(propTypes.number)\n};\n\nexport default EditPolicySystemsTab;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Button, Form, Modal, Tab, TabTitleText, Spinner } from '@patternfly/react-core';\nimport { RoutedTabs } from 'PresentationalComponents';\nimport { uniq } from 'Utilities/helpers';\nimport { useLinkToBackground, useAnchor } from 'Utilities/Router';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport EditPolicyDetailsTab from './EditPolicyDetailsTab';\nimport EditPolicyRulesTab from './EditPolicyRulesTab';\nimport EditPolicySystemsTab from './EditPolicySystemsTab';\nimport usePolicy from './usePolicy';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport { mapCountOsMinorVersions } from 'Store/Reducers/SystemStore';\n\nexport const MULTIVERSION_QUERY = gql`\nquery Profile($policyId: String!){\n    profile(id: $policyId) {\n        id\n        name\n        refId\n        external\n        description\n        totalHostCount\n        compliantHostCount\n        complianceThreshold\n        majorOsVersion\n        osMajorVersion\n        lastScanned\n        policyType\n        policy {\n            id\n            name\n            refId\n            profiles {\n                id\n                ssgVersion\n                parentProfileId\n                name\n                refId\n                osMinorVersion\n                osMajorVersion\n                benchmark {\n                    id\n                    title\n                    latestSupportedOsMinorVersions\n                    osMajorVersion\n                }\n                rules {\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n        businessObjective {\n            id\n            title\n        }\n        hosts {\n            id\n            osMinorVersion\n            osMajorVersion\n        }\n    }\n}\n`;\n\nconst profilesToOsMinorMap = (profiles, hosts) => (\n    (profiles || []).reduce((acc, profile) => {\n        if (profile.osMinorVersion !== '') {\n            acc[profile.osMinorVersion] ||= { osMinorVersion: profile.osMinorVersion, count: 0 };\n        }\n\n        return acc;\n    }, mapCountOsMinorVersions(hosts || []))\n);\n\nexport const EditPolicy = ({ route }) => {\n    const { policy_id: policyId } = useParams();\n    let { data } = useQuery(MULTIVERSION_QUERY, {\n        variables: { policyId }\n    });\n    const policy = data?.profile;\n    const policyProfiles = policy?.policy?.profiles || [];\n    const newInventory = useFeature('newInventory');\n    const dispatch = useDispatch();\n    const anchor = useAnchor();\n    const [updatedPolicy, setUpdatedPolicy] = useState(null);\n    const [selectedRuleRefIds, setSelectedRuleRefIds] = useState([]);\n    const [osMinorVersionCounts, setOsMinorVersionCounts] = useState({});\n    const updatePolicy = usePolicy();\n    const linkToBackground = useLinkToBackground('/scappolicies');\n    const [isSaving, setIsSaving] = useState();\n    const selectedEntities = useSelector((state) => (state?.entities?.selectedEntities));\n    const saveEnabled = updatedPolicy && !updatedPolicy.complianceThresholdValid;\n\n    const linkToBackgroundWithHash = () => {\n        newInventory && dispatch({\n            type: 'SELECT_ENTITIES',\n            payload: { ids: [] }\n        });\n        linkToBackground({ hash: anchor });\n    };\n\n    const handleRuleSelect = (profile, newSelectedRuleRefIds) => {\n        const filteredSelection = selectedRuleRefIds.filter((selectedProfile) =>\n            selectedProfile.id !== profile.id\n        );\n        setSelectedRuleRefIds([\n            { id: profile.id, ruleRefIds: newSelectedRuleRefIds },\n            ...filteredSelection\n        ]);\n    };\n\n    const onSave = () => {\n        if (isSaving) { return; }\n\n        setIsSaving(true);\n        updatePolicy(policy, updatedPolicy).then(() => {\n            setIsSaving(false);\n            linkToBackgroundWithHash();\n        }).catch(() => {\n            // TODO report error\n            setIsSaving(false);\n            linkToBackgroundWithHash();\n        });\n    };\n\n    const actions = [\n        <Button\n            isDisabled={ saveEnabled }\n            key='save'\n            variant='primary'\n            spinnerAriaValueText='Saving'\n            isLoading={ isSaving }\n            onClick={ onSave }>\n            Save\n        </Button>,\n        <Button\n            key='cancel'\n            variant='secondary'\n            onClick={ () => linkToBackgroundWithHash() }>\n            Cancel\n        </Button>\n    ];\n\n    const updateSelectedRuleRefIds = () => {\n        if (policy) {\n            setSelectedRuleRefIds(policyProfiles.map((policyProfile) => ({\n                id: policyProfile.id,\n                ruleRefIds: policyProfile.rules.map((rule) => (rule.refId))\n            })));\n        }\n    };\n\n    useEffect(() => {\n        setUpdatedPolicy({\n            ...updatedPolicy,\n            hosts: selectedEntities ? selectedEntities : []\n        });\n        updateSelectedRuleRefIds();\n\n        setOsMinorVersionCounts(\n            profilesToOsMinorMap(policyProfiles, selectedEntities)\n        );\n    }, [selectedEntities]);\n\n    useEffect(() => setUpdatedPolicy({ ...updatedPolicy, selectedRuleRefIds }), [selectedRuleRefIds]);\n\n    useEffect(() => {\n        if (policy) {\n            const complianceThresholdValid =\n                (policy.complianceThreshold < 101 && policy.complianceThreshold > 0);\n            setUpdatedPolicy({\n                ...policy,\n                complianceThresholdValid\n            });\n            updateSelectedRuleRefIds();\n\n            dispatch({\n                type: 'SELECT_ENTITIES',\n                payload: { ids: policy?.hosts || [] }\n            });\n            setOsMinorVersionCounts(\n                profilesToOsMinorMap(policyProfiles, policy.hosts)\n            );\n        }\n    }, [policy]);\n\n    useTitleEntity(route, policy?.name);\n\n    return <Modal\n        isOpen\n        style={ { height: '768px' } }\n        width={ 1220 }\n        title={ `Edit ${ policy ? policy.name : '' }` }\n        onClose={ () => linkToBackgroundWithHash() }\n        actions={ actions }>\n        { policy ? <Form>\n            <RoutedTabs defaultTab='details'>\n                <Tab eventKey='details' title={<TabTitleText>Details</TabTitleText>}>\n                    <EditPolicyDetailsTab\n                        policy={ policy }\n                        setUpdatedPolicy={ setUpdatedPolicy } />\n                </Tab>\n\n                <Tab eventKey='rules' title={ <TabTitleText>Rules</TabTitleText> }>\n                    <EditPolicyRulesTab\n                        policy={ policy }\n                        handleSelect={ handleRuleSelect }\n                        selectedRuleRefIds={ selectedRuleRefIds }\n                        osMinorVersionCounts={ osMinorVersionCounts }\n                    />\n                </Tab>\n\n                <Tab eventKey='systems' title={ <TabTitleText>Systems</TabTitleText> }>\n                    <EditPolicySystemsTab\n                        osMajorVersion={ policy.osMajorVersion }\n                        policyOsMinorVersions={ uniq(policyProfiles.map(profile => profile.osMinorVersion)) }\n                    />\n                </Tab>\n            </RoutedTabs>\n        </Form> : <Spinner /> }\n    </Modal>;\n};\n\nEditPolicy.propTypes = {\n    route: propTypes.object\n};\n\nexport default EditPolicy;\n","import { useMutation } from '@apollo/react-hooks';\nimport {\n    ASSOCIATE_SYSTEMS_TO_PROFILES, CREATE_BUSINESS_OBJECTIVE, UPDATE_PROFILE, CREATE_PROFILE, ASSOCIATE_RULES_TO_PROFILE\n} from 'Utilities/graphql/mutations';\n\nconst useCreateBusinessObjective = () => {\n    const [create] = useMutation(CREATE_BUSINESS_OBJECTIVE);\n\n    return async (policy, newBusinessObjective) => {\n        if (policy?.businessObjective?.title === newBusinessObjective?.title) {\n            return policy?.businessObjective?.id;\n        } else if (newBusinessObjective?.title === '') {\n            return null;\n        } else {\n            const { data, error } = await create({ variables: {\n                input: { title: newBusinessObjective.title }\n            } });\n\n            if (error) { throw error; }\n\n            return data.createBusinessObjective.businessObjective.id;\n        }\n    };\n};\n\nconst useAssociateSystems = () => {\n    const [associateSystems] = useMutation(ASSOCIATE_SYSTEMS_TO_PROFILES);\n\n    return async ({ id }, hosts) => {\n        const { data, error } = await associateSystems({\n            variables: { input: {\n                id,\n                systemIds: hosts.map((h) => (h.id))\n            } }\n        });\n\n        if (error) { throw error; }\n\n        return data?.associateSystems?.profile;\n    };\n};\n\nconst useAssociateRules = () => {\n    const [associateRules] = useMutation(ASSOCIATE_RULES_TO_PROFILE);\n\n    return async ({ id, ruleRefIds }, profiles) => {\n        const profile = profiles.find((profile) => (\n            profile.id === id || profile.parentProfileId === id\n        ));\n        const ruleInput = {\n            id: profile?.id,\n            ruleRefIds\n        };\n\n        const { error } = await associateRules({ variables: { input: ruleInput } });\n        if (error) { throw error; }\n    };\n};\n\nconst usePolicy = () => {\n    const createBusinessObjective = useCreateBusinessObjective();\n    const [updateProfile] = useMutation(UPDATE_PROFILE);\n    const [createProfile] = useMutation(CREATE_PROFILE);\n    const associateSystems = useAssociateSystems();\n    const associateRules = useAssociateRules();\n\n    return async (policy, updatedPolicy, onProgress) => {\n        const selectedRuleRefIds = updatedPolicy?.selectedRuleRefIds || [];\n\n        const expectedUpdates = 3 + selectedRuleRefIds.length;\n        let progress = 0;\n        const dispatchProgress = () => {\n            if (onProgress) {\n                onProgress((++progress) / expectedUpdates);\n            }\n        };\n\n        const businessObjectiveId = await createBusinessObjective(policy, updatedPolicy?.businessObjective);\n        dispatchProgress();\n\n        let policyInput = {\n            name: updatedPolicy.name,\n            description: updatedPolicy.description,\n            complianceThreshold: parseFloat(updatedPolicy.complianceThreshold)\n        };\n\n        if (businessObjectiveId) {\n            policyInput.businessObjectiveId = businessObjectiveId;\n        }\n\n        if (policy === null) {\n            policyInput.cloneFromProfileId = updatedPolicy.cloneFromProfileId;\n            policyInput.refId = updatedPolicy.refId;\n            policyInput.benchmarkId = updatedPolicy.benchmarkId;\n\n            let {\n                data: { createProfile: { profile: { id } } },\n                error\n            } = await createProfile({ variables: { input: policyInput } });\n\n            if (error) { throw error; }\n\n            dispatchProgress();\n            policy = { id };\n        } else {\n            policyInput.id = policy.id;\n\n            let { error } = await updateProfile({ variables: { input: policyInput } });\n            if (error) { throw error; }\n\n            dispatchProgress();\n        }\n\n        const { policy: { profiles } } = await associateSystems(policy, updatedPolicy.hosts);\n        dispatchProgress();\n\n        for (const profileSelectedRuleRefIds of selectedRuleRefIds) {\n            await associateRules(profileSelectedRuleRefIds, profiles);\n            dispatchProgress();\n        }\n    };\n};\n\nexport default usePolicy;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { UnsupportedSSGVersion } from 'PresentationalComponents';\n\nconst SSGVersion = ({ supported, ssgVersion }) => {\n    ssgVersion ||= 'Not available';\n    return supported ? ssgVersion :\n        <UnsupportedSSGVersion messageVariant='singular'>\n            { ssgVersion }\n        </UnsupportedSSGVersion>;\n};\n\nSSGVersion.propTypes = {\n    supported: propTypes.bool,\n    ssgVersion: propTypes.string\n};\n\nexport default {\n    SSGVersion\n};\n","import React, { memo } from 'react';\nimport propTypes from 'prop-types';\nimport { withApollo } from '@apollo/react-hoc';\nimport { connect } from 'react-redux';\nimport gql from 'graphql-tag';\nimport { pickBy } from 'lodash';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport ComplianceRemediationButton\n    from '@redhat-cloud-services/frontend-components-inventory-compliance/ComplianceRemediationButton';\nimport registry from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport {\n    NoSystemsTableBody\n} from 'PresentationalComponents';\n\nimport { exportFromState, selectAll, clearSelection, SELECT_ENTITY } from 'Store/ActionTypes';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport { FilterConfigBuilder } from '@redhat-cloud-services/frontend-components-inventory-compliance/Utilities';\nimport { entitiesReducer } from 'Store/Reducers/SystemStore';\nimport {\n    DEFAULT_SYSTEMS_FILTER_CONFIGURATION, COMPLIANT_SYSTEMS_FILTER_CONFIGURATION,\n    systemsPolicyFilterConfiguration, systemsOsFilterConfiguration\n} from '@/constants';\nimport {\n    ErrorPage,\n    StateView,\n    StateViewPart\n} from 'PresentationalComponents';\nimport { TableVariant } from '@patternfly/react-table';\nimport { Alert } from '@patternfly/react-core';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\n\nexport const GET_SYSTEMS = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    refId\n                    lastScanned\n                    compliant\n                    external\n                    score\n                    supported\n                    ssgVersion\n                    rules {\n                        refId\n                        title\n                        compliant\n                        remediationAvailable\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const GET_SYSTEMS_WITHOUT_FAILED_RULES = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    lastScanned\n                    external\n                    compliant\n                    score\n                    supported\n                    ssgVersion\n                    policy {\n                        id\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nconst initFilterState = (filterConfig) => (\n    pickBy(filterConfig.initialDefaultState(), (value) => (!!value))\n);\n\nconst initialState = {\n    page: 1\n};\n\nconst policyFilter = (policies, osFilter) => ([\n    ...systemsPolicyFilterConfiguration(policies),\n    ...(osFilter ? systemsOsFilterConfiguration(policies) : [])\n]);\n\n@registry()\nclass SystemsTable extends React.Component {\n    inventory = React.createRef();\n    filterConfig = new FilterConfigBuilder([\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(this.props.compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(this.props.policies && this.props.policies.length > 0 ?\n            policyFilter(this.props.policies, this.props.showOsFilter) : [])\n    ]);\n    chipBuilder = this.filterConfig.getChipBuilder();\n    filterBuilder = this.filterConfig.getFilterBuilder();\n\n    state = {\n        ...initialState,\n        policyId: this.props.policyId,\n        perPage: 50,\n        totalCount: 0,\n        activeFilters: initFilterState(this.filterConfig)\n    }\n\n    componentDidMount = () => {\n        const { clearAll, selectedEntities } = this.props;\n        if (selectedEntities && selectedEntities.length > 0) {\n            clearAll();\n        }\n\n        (this.props.preselectedSystems ?\n            Promise.resolve(this.props.selectEntities(this.props.preselectedSystems)) : Promise.resolve())\n        .then(() => {\n            this.updateSystems();\n        });\n    }\n\n    componentDidUpdate = (prevProps) => {\n        if (prevProps.complianceThreshold !== this.props.complianceThreshold) {\n            this.updateSystems();\n        }\n    }\n\n    onRefresh = ({ page, per_page: perPage, ...options }) => {\n        const { showAllSystems } = this.props;\n        if (showAllSystems && this.inventory && this.inventory.current) {\n            this.setState({ page, perPage }, () => { this.inventory.current.onRefreshData({\n                page, perPage, ...options, per_page: perPage // eslint-disable-line camelcase\n            }); }\n            );\n        } else {\n            this.setState({ page, perPage }, () => this.updateSystems().then(() => {\n                if (this.inventory && this.inventory.current) {\n                    this.inventory.current.onRefreshData({\n                        page, perPage, ...options, per_page: perPage // eslint-disable-line camelcase\n                    });\n                }\n            }));\n        }\n    }\n\n    fetchSystems = () => {\n        const { defaultFilter, client, showOnlySystemsWithTestResults, remediationsEnabled } = this.props;\n        const { policyId, perPage, page, activeFilters } = this.state;\n        let filter = [\n            defaultFilter,\n            showOnlySystemsWithTestResults && 'has_test_results = true',\n            this.filterBuilder.buildFilterString(activeFilters)\n        ].filter((e)=>!!e).join(' and ');\n\n        let variables = { filter, perPage, page, policyId };\n\n        return client.query({\n            query: remediationsEnabled ? GET_SYSTEMS : GET_SYSTEMS_WITHOUT_FAILED_RULES,\n            fetchResults: true,\n            fetchPolicy: 'no-cache',\n            variables\n        });\n    }\n\n    updateSystems = () => {\n        const prevSystems = this.props.systems.map((s) => s.node.id).sort();\n        return this.fetchSystems().then((items) => this.props.updateSystems({\n            systems: items.data.systems.edges,\n            systemsCount: items.data.systems.totalCount\n        })\n        ).then(() => {\n            const newSystems = this.props.systems.map((s) => s.node.id).sort();\n            if (JSON.stringify(newSystems) === JSON.stringify(prevSystems)) {\n                this.props.updateRows();\n            }\n        }).catch((error) => {\n            this.setState(prevState => ({ ...prevState, error }));\n        });\n    }\n\n    onExportSelect = (_, format) => (\n        this.props.exportFromState(format)\n    )\n\n    onFilterUpdate = (filter, selectedValues) => {\n        this.props.updateSystems({\n            systems: [],\n            systemsCount: 0\n        });\n        this.setState({\n            ...initialState,\n            activeFilters: {\n                ...this.state.activeFilters,\n                [filter]: selectedValues\n            }\n        }, this.updateSystems);\n    }\n\n    deleteFilter = (chips) => {\n        const activeFilters =  this.filterConfig.removeFilterWithChip(\n            chips, this.state.activeFilters\n        );\n        this.setState({\n            ...initialState,\n            activeFilters\n        }, this.updateSystems);\n    }\n\n    clearAllFilter = () => {\n        this.setState({\n            ...initialState,\n            activeFilters: initFilterState(this.filterConfig)\n        }, this.updateSystems);\n    }\n\n    onFilterDelete = (_event, chips, clearAll = false) => {\n        clearAll ? this.clearAllFilter() : this.deleteFilter(chips[0]);\n    }\n\n    onBulkSelect = () => {\n        const { selectedEntities, selectAll, clearSelection, allSelectedOnPage } = this.props;\n\n        if (selectedEntities.length === 0 ||\n            (selectedEntities.length > 0 && !allSelectedOnPage)) {\n            selectAll();\n        } else {\n            clearSelection();\n        }\n    }\n\n    isExportDisabled = () => {\n        const { total, selectedEntities } = this.props;\n        return (total || 0) === 0 && selectedEntities.length === 0;\n    }\n\n    render() {\n        const {\n            remediationsEnabled, compact, enableExport, showAllSystems, showActions, showComplianceSystemsInfo,\n            selectedEntities, selectedEntitiesIds, systems, total, policyId, systemProps, columns\n        } = this.props;\n        const {\n            page, perPage, activeFilters, error\n        } = this.state;\n        let noError;\n        const filterConfig = this.filterConfig.buildConfiguration(\n            this.onFilterUpdate,\n            activeFilters,\n            { hideLabel: true }\n        );\n        const filterChips = this.chipBuilder.chipsFor(this.state.activeFilters);\n        const exportConfig = enableExport ? {\n            isDisabled: this.isExportDisabled(),\n            onSelect: this.onExportSelect\n        } : {};\n        const inventoryTableProps = {\n            ...systemProps,\n            onRefresh: this.onRefresh,\n            ref: this.inventory,\n            page,\n            perPage,\n            exportConfig,\n            tableProps: {\n                canSelectAll: false\n            },\n            bulkSelect: {\n                checked: selectedEntities.length > 0 ?\n                    (this.props.allSelectedOnPage ? true : null)\n                    : false,\n                onSelect: this.onBulkSelect,\n                count: selectedEntities.length,\n                label: selectedEntities.length > 0 ? `${ selectedEntities.length } Selected` : undefined\n            }\n        };\n\n        if (showActions) {\n            inventoryTableProps.actions = [{\n                title: 'View in inventory',\n                onClick: (_event, _index, { id }) => {\n                    const beta = window.location.pathname.split('/')[1] === 'beta';\n                    window.location.href = `${window.location.origin}${beta ? '/beta' : ''}/insights/inventory/${id}`;\n                }\n            }];\n        }\n\n        if (!showAllSystems) {\n            inventoryTableProps.total = total;\n            inventoryTableProps.items = systems.map((edge) => edge.node.id);\n            inventoryTableProps.filterConfig = filterConfig;\n            inventoryTableProps.activeFiltersConfig = {\n                filters: filterChips,\n                onDelete: this.onFilterDelete\n            };\n        }\n\n        if (compact) {\n            inventoryTableProps.variant = TableVariant.compact;\n        }\n\n        if (error === undefined) {\n            noError = true;\n        }\n\n        if (policyId && total === 0 && Object.keys(activeFilters).length === 0) {\n            inventoryTableProps.tableProps.rows = [{ cells: [{ title: <NoSystemsTableBody /> }] }];\n            inventoryTableProps.tableProps.columns = [];\n            inventoryTableProps.hasItems = false;\n            inventoryTableProps.hasCheckbox = false;\n        }\n\n        if (!showAllSystems && remediationsEnabled) {\n            inventoryTableProps.dedicatedAction = <ComplianceRemediationButton\n                allSystems={ systemsWithRuleObjectsFailed(systems.filter((edge) => (\n                    selectedEntitiesIds.includes(edge.node.id)\n                )).map(edge => edge.node)) }\n                selectedRules={ [] } />;\n        }\n\n        return (\n            <StateView stateValues={{ error, noError }}>\n                <StateViewPart stateKey='error'>\n                    <ErrorPage error={error}/>\n                </StateViewPart>\n                <StateViewPart stateKey='noError'>\n\n                    { showComplianceSystemsInfo && <Alert\n                        isInline\n                        variant=\"info\"\n                        title={ 'The list of systems in this view is different than those that appear in the Inventory. ' +\n                            'Only systems previously or currently associated with compliance policies are displayed.' } /> }\n                    <InventoryTable\n                        { ...inventoryTableProps }\n                        fallback={<SkeletonTable colSize={2} rowSize={15} />}\n                        onLoad={({ INVENTORY_ACTION_TYPES, mergeWithEntities }) => {\n                            this.getRegistry().register({\n                                ...mergeWithEntities(\n                                    entitiesReducer(\n                                        INVENTORY_ACTION_TYPES, columns, showAllSystems\n                                    ))\n                            });\n                        }}\n                    />\n                </StateViewPart>\n            </StateView>\n        );\n    }\n}\n\nSystemsTable.propTypes = {\n    allSelectedOnPage: propTypes.bool,\n    clearAll: propTypes.func,\n    clearInventoryFilter: propTypes.func,\n    clearSelection: propTypes.func,\n    client: propTypes.object,\n    columns: propTypes.array,\n    compact: propTypes.bool,\n    complianceThreshold: propTypes.number,\n    compliantFilter: propTypes.bool,\n    enableExport: propTypes.bool,\n    error: propTypes.object,\n    exportFromState: propTypes.func,\n    policies: propTypes.array,\n    policyId: propTypes.string,\n    defaultFilter: propTypes.string,\n    preselectedSystems: propTypes.array,\n    remediationsEnabled: propTypes.bool,\n    selectAll: propTypes.func,\n    selectEntities: propTypes.func,\n    selectedEntities: propTypes.array,\n    selectedEntitiesIds: propTypes.array,\n    showActions: propTypes.bool,\n    showAllSystems: propTypes.bool,\n    showOnlySystemsWithTestResults: propTypes.bool,\n    showOsFilter: propTypes.bool,\n    systems: propTypes.array,\n    total: propTypes.number,\n    updateRows: propTypes.func,\n    updateSystems: propTypes.func,\n    systemProps: propTypes.shape({\n        isFullView: propTypes.bool\n    }),\n    showComplianceSystemsInfo: propTypes.bool\n};\n\nSystemsTable.defaultProps = {\n    remediationsEnabled: true,\n    compact: false,\n    enableExport: true,\n    showAllSystems: false,\n    complianceThreshold: 0,\n    showOnlySystemsWithTestResults: false,\n    showActions: true,\n    compliantFilter: false,\n    selectedEntities: [],\n    selectedEntitiesIds: [],\n    systems: [],\n    clearAll: () => ({}),\n    exportFromState: () => ({}),\n    systemProps: {},\n    showComplianceSystemsInfo: false\n};\n\nconst mapStateToProps = state => {\n    if (state.entities === undefined || state.entities.rows === undefined) {\n        return { selectedEntities: [], systems: [] };\n    }\n\n    const allSelectedOnPage = state.entities.rows.filter((row) => (\n        !(state.entities.selectedEntities || []).map((e) => e.id).includes(row.id)\n    )).length === 0;\n\n    return {\n        allSelectedOnPage,\n        selectedEntities: state.entities.selectedEntities,\n        selectedEntitiesIds: (state.entities.selectedEntities || []).map((e) => (e.id)),\n        systems: state.entities.systems,\n        total: state.entities.total\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clearInventoryFilter: () => dispatch({ type: 'CLEAR_FILTERS' }),\n        exportFromState: (format) => dispatch(exportFromState(format)),\n        updateSystems: (args) => {\n            dispatch({\n                type: 'UPDATE_SYSTEMS',\n                ...args\n            });\n        },\n        updateRows: () => dispatch({ type: 'UPDATE_ROWS' }),\n        selectAll: () => dispatch(selectAll()),\n        clearSelection: () => dispatch(clearSelection()),\n        clearAll: () => dispatch({\n            type: SELECT_ENTITY,\n            payload: { clearAll: true }\n        }),\n        selectEntities: (ids) => dispatch({\n            type: 'SELECT_ENTITIES',\n            payload: { ids }\n        })\n    };\n};\n\n// eslint-disable-next-line react/display-name\nconst ConnectedSystemsTable = memo((props) => {\n    return <SystemsTable {...props} />;\n});\n\nexport { default as Cells } from './Cells';\nexport { SystemsTable };\nexport const SystemsTableWithApollo = withApollo(ConnectedSystemsTable);\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SystemsTableWithApollo);\n","import gql from 'graphql-tag';\nimport pickBy from 'lodash/pickBy';\nimport { systemsPolicyFilterConfiguration, systemsOsFilterConfiguration } from '@/constants';\n\nexport const GET_SYSTEMS = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    refId\n                    lastScanned\n                    compliant\n                    external\n                    score\n                    supported\n                    ssgVersion\n                    majorOsVersion\n                    rules {\n                        refId\n                        title\n                        compliant\n                        remediationAvailable\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const GET_SYSTEMS_WITHOUT_FAILED_RULES = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    lastScanned\n                    external\n                    compliant\n                    score\n                    supported\n                    ssgVersion\n                    policy {\n                        id\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const policyFilter = (policies, osFilter) => ([\n    ...systemsPolicyFilterConfiguration(policies),\n    ...(osFilter ? systemsOsFilterConfiguration(policies) : [])\n]);\n\nexport const initFilterState = (filterConfig) => (\n    pickBy(filterConfig.initialDefaultState(), (value) => (!!value))\n);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Skeleton, { SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { registryDecorator } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { InventoryDetail, DetailWrapper } from '@redhat-cloud-services/frontend-components/Inventory';\n\n@registryDecorator()\nclass InventoryDetails extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <DetailWrapper onLoad={({ mergeWithDetail }) => this.getRegistry().register({\n                ...mergeWithDetail()\n            })}>\n                <InventoryDetail fallback={<Skeleton size={ SkeletonSize.md } />} hideBack />\n            </DetailWrapper>\n        );\n    }\n}\n\nInventoryDetails.propTypes = {\n    entity: propTypes.object\n};\n\nconst ConnectedInventoryDetails = (props) => {\n    return <InventoryDetails {...props} />;\n};\n\nexport default ConnectedInventoryDetails;\n","import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { withApollo } from '@apollo/react-hoc';\nimport PropTypes from 'prop-types';\nimport { useStore, useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { policyFilter } from './constants';\nimport { systemsReducer } from 'Store/Reducers/SystemStore';\nimport { selectAll, clearSelection } from 'Store/ActionTypes';\nimport { exportFromState } from 'Utilities/Export';\nimport { DEFAULT_SYSTEMS_FILTER_CONFIGURATION, COMPLIANT_SYSTEMS_FILTER_CONFIGURATION } from '@/constants';\nimport debounce from 'lodash/debounce';\nimport {\n    ErrorPage,\n    StateView,\n    StateViewPart\n} from 'PresentationalComponents';\nimport { Alert } from '@patternfly/react-core';\nimport { TableVariant } from '@patternfly/react-table';\n// eslint-disable-next-line max-len\nimport ComplianceRemediationButton from '@redhat-cloud-services/frontend-components-inventory-compliance/ComplianceRemediationButton';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport useFilterConfig from 'Utilities/hooks/useFilterConfig';\nimport { InventoryTable as FECInventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\n\nexport const InventoryTable = ({\n    columns,\n    showAllSystems,\n    policyId,\n    query,\n    client,\n    showActions,\n    enableExport,\n    compliantFilter,\n    policies,\n    showOnlySystemsWithTestResults,\n    showOsFilter,\n    error,\n    showComplianceSystemsInfo,\n    compact,\n    remediationsEnabled,\n    systemProps,\n    defaultFilter,\n    emptyStateComponent,\n    prependComponent\n}) => {\n    const store = useStore();\n    const dispatch = useDispatch();\n    const inventory = useRef(null);\n    const [pagination, setPagination] = useState({\n        perPage: 50,\n        page: 1\n    });\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [isEmpty, setIsEmpty] = useState(false);\n    const { conditionalFilter, activeFilters, buildFilterString } = useFilterConfig([\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(policies?.length > 0 ? policyFilter(policies, showOsFilter) : [])\n    ]);\n    const total = useSelector(({ entities }) => entities?.systemsCount) || 0;\n    const items = useSelector(({ entities } = {}) => (entities?.systems?.map((system) => (\n        system?.node?.id\n    )) || []), shallowEqual);\n    const selectedEntities = useSelector(({ entities } = {}) => (entities?.selectedEntities || []), shallowEqual);\n    const onBulkSelect = (isSelected) => isSelected ? dispatch(selectAll()) : dispatch(clearSelection());\n\n    const fetchSystems = (perPage = 50, page = 1) => {\n        setIsLoaded(false);\n\n        const filterString = buildFilterString();\n        const combindedFilter = [\n            ...showOnlySystemsWithTestResults ? ['has_test_results = true'] : [],\n            ...filterString?.length > 0 ? [filterString] : []\n        ].join(' and ');\n        const filter = defaultFilter ? `(${ defaultFilter }) and (${ combindedFilter })` : combindedFilter;\n\n        dispatch({ type: 'GET_SYSTEMS_PENDING' });\n        return client.query({\n            query,\n            fetchResults: true,\n            fetchPolicy: 'no-cache',\n            variables: {\n                filter,\n                perPage,\n                page,\n                ...policyId && { policyId }\n            }\n        }).then(({ data, loading }) => {\n            dispatch({\n                type: 'GET_SYSTEMS_FULFILLED',\n                systems: data.systems.edges,\n                systemsCount: data.systems.totalCount\n            });\n            setIsLoaded(true);\n            setPagination(() => ({ page, perPage }));\n\n            if (emptyStateComponent && !loading && data.systems.totalCount === 0 && combindedFilter.length === 0) {\n                setIsEmpty(true);\n            }\n\n            return { data, loading };\n        });\n    };\n\n    const debounceFetchSystems = useCallback(\n        debounce(fetchSystems, 800),\n        [conditionalFilter.activeFiltersConfig.filters]\n    );\n\n    useEffect(() => {\n        if (conditionalFilter.activeFiltersConfig.filters) {\n            debounceFetchSystems(pagination.perPage, 1);\n        }\n    }, [activeFilters]);\n\n    const onRefresh = (options, callback) => {\n        query && fetchSystems(options.per_page, options.page);\n        if (!callback && inventory && inventory.current) {\n            inventory.current.onRefreshData(options);\n        } else if (callback) {\n            callback(options);\n        }\n    };\n\n    return <StateView stateValues={{ error, noError: error === undefined && !isEmpty, empty: isEmpty }}>\n        <StateViewPart stateKey='error'>\n            { !!prependComponent && prependComponent }\n            <ErrorPage error={error}/>\n        </StateViewPart>\n        <StateViewPart stateKey='empty'>\n            { emptyStateComponent }\n        </StateViewPart>\n        <StateViewPart stateKey='noError'>\n            { !!prependComponent && isLoaded && prependComponent }\n            { showComplianceSystemsInfo && <Alert\n                isInline\n                variant=\"info\"\n                title={ 'The list of systems in this view is different than those that appear in the Inventory. ' +\n                    'Only systems currently associated with or reporting against compliance policies are displayed.' } /> }\n            <FECInventoryTable\n                { ...systemProps }\n                onLoad={({\n                    INVENTORY_ACTION_TYPES,\n                    mergeWithEntities\n                }) => {\n                    getRegistry().register({\n                        ...mergeWithEntities(\n                            systemsReducer(\n                                INVENTORY_ACTION_TYPES, columns, showAllSystems, policyId\n                            ))\n                    });\n                }}\n                fallback={<SkeletonTable colSize={2} rowSize={15} />}\n                tableProps={{\n                    canSelectAll: false\n                }}\n                variant={compact ? TableVariant.compact : ''}\n                ref={inventory}\n                onRefresh={onRefresh}\n                bulkSelect={{\n                    checked: selectedEntities.length > 0 ?\n                        (items?.every(id => selectedEntities?.find((selected) => selected?.id === id)) ? true : null)\n                        : false,\n                    onSelect: onBulkSelect,\n                    count: selectedEntities.length,\n                    label: selectedEntities.length > 0 ? `${ selectedEntities.length } Selected` : undefined\n                }}\n                {...!showAllSystems && {\n                    ...pagination,\n                    isLoaded,\n                    items,\n                    total,\n                    ...conditionalFilter,\n                    ...remediationsEnabled && {\n                        dedicatedAction: <ComplianceRemediationButton\n                            allSystems={ systemsWithRuleObjectsFailed(selectedEntities) }\n                            selectedRules={ [] } />\n                    }\n                }}\n                {...enableExport && {\n                    exportConfig: {\n                        isDisabled: total === 0 && selectedEntities.length === 0,\n                        onSelect: (_, format) => exportFromState(store.getState()?.entities, format)\n                    }\n                }}\n                {...showActions && {\n                    actions: [{\n                        title: 'View in inventory',\n                        onClick: (_event, _index, { id }) => {\n                            const beta = window.location.pathname.split('/')[1] === 'beta';\n                            window.location.href = `${window.location.origin}${beta ? '/beta' : ''}/insights/inventory/${id}`;\n                        }\n                    }]\n                }}\n            />\n        </StateViewPart>\n    </StateView>;\n};\n\nInventoryTable.propTypes = {\n    columns: PropTypes.arrayOf(PropTypes.shape({})),\n    policies: PropTypes.arrayOf(PropTypes.shape({})),\n    client: PropTypes.object,\n    showAllSystems: PropTypes.bool,\n    policyId: PropTypes.string,\n    query: PropTypes.string,\n    showActions: PropTypes.bool,\n    enableExport: PropTypes.bool,\n    compliantFilter: PropTypes.bool,\n    showOnlySystemsWithTestResults: PropTypes.bool,\n    showOsFilter: PropTypes.bool,\n    showComplianceSystemsInfo: PropTypes.bool,\n    error: PropTypes.object,\n    compact: PropTypes.bool,\n    remediationsEnabled: PropTypes.bool,\n    defaultFilter: PropTypes.string,\n    systemProps: PropTypes.shape({\n        isFullView: PropTypes.bool\n    }),\n    emptyStateComponent: PropTypes.node,\n    prependComponent: PropTypes.node\n};\n\nInventoryTable.defaultProps = {\n    policyId: '',\n    showActions: true,\n    enableExport: true,\n    compliantFilter: false,\n    showOnlySystemsWithTestResults: false,\n    showComplianceSystemsInfo: false,\n    compact: false,\n    remediationsEnabled: true\n};\n\nexport default withApollo(InventoryTable);\n","const CSV_FILE_PREFIX = 'compliance-export';\nconst CSV_DELIMITER = ',';\n\nconst linkAndDownload = (data, filename) => {\n    if (!data) {\n        return;\n    }\n\n    let link = document.createElement('a');\n    link.setAttribute('href', data);\n    link.setAttribute('download', filename);\n    link.dispatchEvent(new MouseEvent(`click`, { bubbles: true, cancelable: true, view: window }));\n};\n\nconst getNestedObject = (nestedObj, path) => {\n    return path.split('.').reduce(\n        (obj, key) => (obj && obj[key] !== 'undefined') ? obj[key] : undefined, nestedObj\n    );\n};\n\nconst textCsvCell = (row, key) => {\n    let cell = getNestedObject(row, key);\n\n    if (cell.exportValue) {\n        cell = cell.exportValue;\n    }\n\n    if (typeof(cell) === 'object') {\n        cell = getNestedObject(row, key + '_text');\n    }\n\n    if (typeof(cell) === 'string' && cell.includes(',')) {\n        cell = '\"' + cell + '\"';\n    }\n\n    return cell;\n};\n\nexport const csvFromState = (state) => {\n    const { rows, columns, selectedEntities } = state;\n\n    if (rows) {\n        let csvRows = [columns.map((column) => column.title).join(CSV_DELIMITER)];\n        csvRows = csvRows.concat((selectedEntities || rows).map((row) => (\n            state.columns.map((column) => !column.noExport ? textCsvCell(row, column.key) : '').join(CSV_DELIMITER)\n        )));\n\n        return encodeURI('data:text/csv;charset=utf-8,' + csvRows.join('\\n'));\n    }\n};\n\nexport const jsonFromState = (state) => {\n    const { rows, columns, selectedEntities } = state;\n    let result;\n\n    if (rows) {\n        result = (selectedEntities || rows).map((row) => {\n            let object = {};\n            columns.forEach((column) => {\n                const keys = column.key.split('.');\n                const key = keys[keys.length - 1];\n                object[key] = textCsvCell(row, column.key);\n            });\n\n            return object;\n        });\n\n        return encodeURI('data:application/json;charset=utf-8,' + JSON.stringify(result));\n    }\n};\n\nconst filename = (format) => (\n    CSV_FILE_PREFIX + '-' + (new Date()).toISOString() + '.' + format\n);\n\nexport const exportFromState = (state, format) => {\n    let content;\n\n    if (format === 'csv') {\n        content = csvFromState(state);\n    } else if (format === 'json') {\n        content = jsonFromState(state);\n    }\n\n    linkAndDownload(content, filename(format));\n};\n\n","class ApiClient {\n    DEFAULT_API_HEADERS = {\n        'Content-Type': 'application/vnd.api+json',\n        Accept: 'application/json'\n    }\n\n    constructor(options = {}) {\n        this.apiBase = options.apiBase || '/api';\n        this.path = options.path || '';\n        this.authenticate = options.authenticate || (() => Promise.resolve({}));\n        this.onUnauthorised = options.onUnauthorised || (() => Promise.resolve({}));\n        this.defaultHeaders = options.headers || this.DEFAULT_API_HEADERS;\n    }\n\n    async request(path, apiProps, method, options = {}) {\n        return await this.callAuthenticate()\n        .then(() => this.fetch(path, apiProps, method, options))\n        .then(this.checkForEmptyResponse)\n        .then((response) => this.checkForErrors(response, options))\n        .then((response) => response.json())\n        .catch(this.finalCatch);\n    }\n\n    finalCatch(promise) {\n        if (promise.errors === undefined) {\n            return Promise.reject({ title: 'Error parsing' });\n        } else {\n            return Promise.reject({ ...promise });\n        }\n    }\n\n    fetch(path, apiProps, method, options) {\n        let params = {\n            method: method || 'get',\n            headers: this.defaultHeaders,\n            credentials: 'include'\n        };\n        const fullPath = `${ this.apiBase }${ this.path ? this.path : '' }${ path ? path : '' }`;\n        let url = new URL(fullPath, window.location.origin);\n        if (options.params) {\n            const params = Object.keys(options.params).map((key) => (\n                encodeURIComponent(key) + '=' + encodeURIComponent(options.params[key])\n            )).join('&');\n            url.search = new URLSearchParams(params);\n        }\n\n        if (apiProps) {\n            params.body = JSON.stringify(apiProps);\n        }\n\n        return fetch(\n            url, params\n        );\n    }\n\n    checkForEmptyResponse(response) {\n        return response.status === 204 ? { json: () => ({}) } : response;\n    }\n\n    checkForErrors(response, options = {}) {\n        if (response.status === 404 && options.ignore404) {\n            return { json: () => ({}) };\n        }\n\n        if (response.status === 401) {\n            return this.onUnauthorised();\n        }\n\n        const responseCloneJson = response.clone ? response.clone().json() : response;\n\n        if (response.status === 422) {\n            return responseCloneJson.then((json) =>\n                Promise.reject({ ...json, title: 'Validation error' })\n            );\n        }\n\n        if (response.status >= 400 && response.status <= 600) {\n            return responseCloneJson.then((json) =>\n                Promise.reject(json.errors[0])\n            );\n        }\n\n        return response;\n    }\n\n    callAuthenticate() {\n        return Promise.resolve(this.authenticate() || true);\n    }\n\n    create(path, apiProps) {\n        return this.request(path, apiProps, 'post');\n    }\n\n    update(path, apiProps) {\n        return this.request(path, apiProps, 'put');\n    }\n\n    get(path, options = {}) {\n        return this.request(path, null, 'get', options);\n    }\n\n    destroy(path) {\n        return this.request(path, null, 'delete');\n    }\n}\n\nexport default ApiClient;\n","import ApiClient from './utils/ApiClient';\n\nconst useApi = (options) => {\n    const apiClient = new ApiClient({\n        ...options\n    });\n\n    return apiClient;\n};\n\nexport default useApi;\n","import { useEffect, useState } from 'react';\nimport { COMPLIANCE_API_ROOT } from '@/constants';\nimport normalize from 'json-api-normalizer';\nimport useApi from './useApi';\n\nconst includePropAndDelete = (entity, prop) => {\n    const attributes = entity[prop];\n    let newEntity = entity;\n    delete newEntity[prop];\n    return { ...newEntity, ...attributes };\n};\n\nconst includeAttributes = (entity) => (\n    entity && includePropAndDelete(entity, 'attributes')\n);\n\nconst includeRelationship = (entity, normalizedJson) => {\n    let relationships = {};\n    Object.entries(entity?.relationships || []).forEach((item) => {\n        const [relationship, relationshipData] = item;\n        relationships[relationship] = relationshipData?.data.map((entity) => (\n            includeAttributes(normalizedJson?.[entity.type]?.[entity.id])\n        )).filter((v) => (!!v));\n    });\n    delete entity.relationships;\n    return { ...entity, ...relationships };\n};\n\nconst normalizeData = (json, type) => {\n    const jsonNormalized = normalize(json);\n    return Object.values(jsonNormalized[type] || {})?.map((entity) => (\n        includeRelationship(includeAttributes(entity), jsonNormalized)\n    ));\n};\n\nconst fetchCollection = async (apiClient, collection, params = {}, options = {}) => {\n    const json = await apiClient.get(`/${ collection }`, { params });\n    const normalized = await normalizeData(json, options?.type || collection);\n\n    return {\n        collection: normalized,\n        meta: json.meta,\n        total: json.meta.total,\n        json\n    };\n};\n\nconst useCollection = (collection, options = {}, effects = []) => {\n    const [collectionState, setCollectionState] = useState({\n        data: undefined,\n        loading: !options?.skip,\n        error: undefined\n    });\n    const apiClient = useApi({\n        apiBase: COMPLIANCE_API_ROOT\n    });\n    const params = {\n        ...(options?.params || {}),\n        include: (options?.include || [])\n    };\n\n    useEffect(() => {\n        if (options?.skip) {\n            setCollectionState({\n                data: undefined,\n                loading: false,\n                error: undefined\n            });\n\n            return;\n        }\n\n        setCollectionState({\n            data: undefined,\n            loading: true,\n            error: undefined\n        });\n\n        fetchCollection(apiClient, collection, params, options).then((data) => {\n            setCollectionState({\n                data,\n                loading: false,\n                error: undefined\n            });\n        });\n    }, [...effects, options?.skip]);\n\n    return collectionState;\n};\n\nexport default useCollection;\n","export const profilesRulesFailed = (profiles) => (\n    profiles.flatMap(profile => profile.rules && profile.rules.filter(rule => !rule.compliant))\n);\n\nexport const profilesRulesPassed = (profiles) => (\n    profiles.flatMap(profile => profile.rules && profile.rules.filter(rule => rule.compliant))\n);\n\nexport const systemRulesPassed = (system) => (\n    system.testResultProfiles ? profilesRulesPassed(system.testResultProfiles) : []\n);\n\nexport const systemRulesFailed = (system) => (\n    system.testResultProfiles ? profilesRulesFailed(system.testResultProfiles) : []\n);\n\nexport const systemsWithRuleObjectsFailed = (systems) => (\n    systems.map(system => (\n        {\n            ...system,\n            ruleObjectsFailed: systemRulesFailed(system),\n            profiles: system.testResultProfiles\n        }\n    ))\n);\n","export const EXPORT = '@@COMPLIANCE/EXPORT';\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\n\nexport const exportFromState = (format) => ({\n    type: EXPORT, payload: { format }\n});\n\nexport const selectAll = () => ({\n    type: SELECT_ENTITY,\n    payload: { id: 0, selected: true }\n});\n\nexport const clearSelection = () => ({\n    type: SELECT_ENTITY,\n    payload: { id: 0, selected: false }\n});\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Link } from 'react-router-dom';\nimport { EXPORT, SELECT_ENTITY } from 'Store/ActionTypes';\nimport { exportFromState } from 'Utilities/Export';\nimport {\n    ComplianceScore as complianceScore,\n    complianceScoreString\n} from 'PresentationalComponents';\nimport {\n    Tooltip,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport {\n    profilesRulesPassed,\n    profilesRulesFailed\n} from 'Utilities/ruleHelpers';\nimport Truncate from 'react-truncate';\nimport { sortingByProp } from 'Utilities/helpers';\n\nconst NEVER = 'Never';\n\nexport const lastScanned = ({ testResultProfiles: profiles = [] }) => {\n    const dates = profiles.map((profile) => new Date(profile.lastScanned));\n    const last = new Date(Math.max.apply(null, dates.filter((date) => isFinite(date))));\n    const result = (last instanceof Date && isFinite(last)) ? last : NEVER;\n\n    return result;\n};\n\nexport const compliant = ({ testResultProfiles: profiles = [] }) => (\n    profiles.every(profile => profile.lastScanned === NEVER || profile.compliant === true)\n);\n\nexport const score = ({ testResultProfiles: profiles = [] }) => {\n    const scoreTotal = profiles.reduce((acc, profile) => acc + profile.score, 0);\n    const numScored = profiles.reduce((acc, profile) => {\n        if (profilesRulesPassed([profile]).length + profilesRulesFailed([profile]).length > 0) { return acc + 1; }\n\n        return acc;\n    }, 0);\n    if (numScored) { return scoreTotal / numScored; }\n\n    return 0;\n};\n\nexport const supported = ({ testResultProfiles: profiles = [] }) => (\n    profiles.reduce((acc, profile) => acc && profile.supported, true)\n);\n\nexport const policyNames = (system) => {\n    if (system === {}) { return ''; }\n\n    let policyNames = system.policies.map(({ name }) => name);\n    return policyNames.join(', ');\n};\n\nexport const policiesCell = ({ policyNames }) => ({\n    title: policyNames ? (\n        <Tooltip content={policyNames}>\n            <Truncate lines={2} width={540}>{policyNames}</Truncate>\n        </Tooltip>\n    ) : <Text className='grey-icon'>No policies</Text>,\n    exportValue: policyNames\n});\n\nexport const detailsLink = (system) => {\n    if (system.testResultProfiles && system.testResultProfiles.length > 0) {\n        return {\n            title: (\n                <Link to={{ pathname: `/systems/${system.id}` }}>\n                    View report\n                </Link>\n            )\n        };\n    }\n};\n\nexport const hasOsInfo = (matchingSystem) => (\n    typeof(matchingSystem.osMajorVersion) !== 'undefined' && typeof(matchingSystem.osMinorVersion) !== 'undefined' &&\n        matchingSystem.osMajorVersion !== null && matchingSystem.osMinorVersion !== null &&\n        !(matchingSystem.osMajorVersion === 0 && matchingSystem.osMinorVersion === 0)\n);\n\nconst displayNameCell = (system, matchingSystem) =>  ({\n    title: <TextContent>\n        { matchingSystem.name ? <Link to={{ pathname: `/systems/${matchingSystem.id}` }}>\n            { matchingSystem.name }\n        </Link> : system.display_name }\n        { hasOsInfo(matchingSystem) &&\n            <Text component={TextVariants.small}>RHEL {matchingSystem.osMajorVersion}.{matchingSystem.osMinorVersion}</Text> }\n    </TextContent>,\n    exportValue: system.display_name || matchingSystem.name\n});\n\nexport const systemName = (displayName, id, { osMajorVersion, osMinorVersion, name }) => (\n    <TextContent>\n        <Link to={{ pathname: `/systems/${id}` }}>\n            { displayName || name }\n        </Link>\n        { hasOsInfo({ osMajorVersion, osMinorVersion }) &&\n            <Text component={TextVariants.small}>RHEL {osMajorVersion}.{osMinorVersion}</Text> }\n    </TextContent>\n);\n\nconst isSelected = (id, selectedEntities) => (\n    !!(selectedEntities || []).find((entity) => (entity.id === id))\n);\n\nconst profilesSsgVersions = ({ testResultProfiles: profiles = [] }) => (\n    profiles.map((p) => (p.ssgVersion)).filter((version) => (!!version)).join(', ')\n);\n\nexport const mapCountOsMinorVersions = (systems) => {\n    if (!systems) { return {}; }\n\n    return systems.reduce((acc, { osMinorVersion }) => {\n        if (osMinorVersion !== undefined && osMinorVersion !== null) {\n            (acc[osMinorVersion] = acc[osMinorVersion] || { osMinorVersion, count: 0 }).count++;\n        }\n\n        return acc;\n    }, {});\n};\n\nexport const countOsMinorVersions = (systems) => (\n    Object.values(mapCountOsMinorVersions(systems)).sort(sortingByProp('osMinorVersion', 'desc'))\n);\n\nexport const systemsToInventoryEntities = (systems, entities, showAllSystems, selectedEntities) => (\n    entities.map(entity => {\n        // This should compare the inventory ID instead with\n        // the ID in compliance\n        if (entity.facts === undefined) { entity.facts = {}; }\n\n        let matchingSystem = systems.map((s) => s.node).find((system) => {\n            return entity.id === system.id;\n        });\n        if (matchingSystem === undefined) {\n            if (!showAllSystems) { return; }\n\n            matchingSystem = { testResultProfiles: [], policies: [] };\n        }\n\n        matchingSystem.policyNames = policyNames(matchingSystem);\n        matchingSystem.rulesPassed = profilesRulesPassed(matchingSystem.testResultProfiles).length;\n        matchingSystem.rulesFailed = profilesRulesFailed(matchingSystem.testResultProfiles).length;\n        matchingSystem.lastScanned = lastScanned(matchingSystem);\n        matchingSystem.compliant = compliant(matchingSystem);\n        matchingSystem.score = score(matchingSystem);\n        matchingSystem.supported = supported(matchingSystem);\n\n        return {\n            /* eslint-disable camelcase */\n            id: entity.id,\n            selected: isSelected(entity.id, selectedEntities),\n            account: entity.account,\n            bios_uuid: entity.bios_uuid,\n            created: entity.created,\n            display_name: entity.display_name || matchingSystem.name,\n            fqdn: entity.fqdn,\n            insights_id: entity.insights_id,\n            ip_addresses: entity.ip_addresses,\n            mac_addresses: entity.mac_addresses,\n            rhel_machine_id: entity.rhel_machine_id,\n            satellite_id: entity.satellite_id,\n            subscription_manager_id: entity.subscription_manager_id,\n            tags: entity.tags,\n            updated: entity.updated,\n            facts: {\n                inventory: {\n                    hostname: (entity.facts.inventory !== undefined) ?\n                        entity.facts.inventory.hostname :\n                        entity.facts.hostname,\n                    machine_id: (entity.facts.inventory !== undefined) ?\n                        entity.facts.inventory.machine_id :\n                        entity.facts.machine_id,\n                    release: (entity.facts.inventory !== undefined) ?\n                        entity.facts.inventory.release :\n                        entity.facts.release\n                },\n                compliance: {\n                    display_name: displayNameCell(entity, matchingSystem),\n                    policies: policiesCell(matchingSystem),\n                    details_link: detailsLink(matchingSystem),\n                    rules_passed: matchingSystem.rulesPassed,\n                    rules_failed: { title: <Link to={{\n                        pathname: `/systems/${matchingSystem.id}`,\n                        query: {\n                            hidePassed: true\n                        }\n                    }}>{matchingSystem.rulesFailed}</Link> },\n                    rules_failed_text: matchingSystem.rulesFailed,\n                    compliance_score: complianceScore(matchingSystem),\n                    compliance_score_text: complianceScoreString(matchingSystem),\n                    last_scanned: (matchingSystem.lastScanned instanceof Date) ?\n                        { title: <DateFormat date={Date.parse(matchingSystem.lastScanned)} type='relative' /> } :\n                        matchingSystem.lastScanned,\n                    last_scanned_text: matchingSystem.lastScanned,\n                    ssg_version: profilesSsgVersions(matchingSystem),\n                    supported: matchingSystem.supported\n                }\n            }\n            /* eslint-enable camelcase */\n        };\n    }).filter((value) => (!!value))\n);\n\nconst systemsToRows = (systems) => (\n    systems.map(({ node }) => ({\n        ...node,\n        policyNames: policyNames({ policies: node?.policies, testResultProfiles: [] }),\n        rulesPassed: profilesRulesPassed(node.testResultProfiles).length,\n        rulesFailed: profilesRulesFailed(node.testResultProfiles).length,\n        lastScanned: lastScanned(node),\n        compliant: compliant(node),\n        display_name: node.name, // eslint-disable-line camelcase\n        score: score(node),\n        supported: supported(node),\n        ssgVersion: profilesSsgVersions(node),\n        detailsLink: detailsLink(node)\n    }))\n);\n\nconst selectRowsByIds = (state, ids) => {\n    const rowsToSelect = state.rows.filter((row) => (\n        ids.includes(row.id) && !(state.selectedEntities || []).map((e) => (e.id)).includes(row.id)\n    ));\n\n    return {\n        ...state,\n        selectedEntities: (state.selectedEntities || []).concat(rowsToSelect)\n    };\n};\n\nconst deselectRowsByIds = (state, ids) => ({\n    ...state,\n    selectedEntities: (state.selectedEntities || []).filter((row) => !ids.includes(row.id))\n});\n\nconst selectAllRows = (state) => (\n    selectRowsByIds(state, state.rows.map((row) => (row.id)))\n);\n\nconst deselectAllRows = (state) => (\n    deselectRowsByIds(state, state.rows.map((row) => (row.id)))\n);\n\nconst selectRow = (state, id) => (\n    selectRowsByIds(state, [id])\n);\n\nconst deselectRow = (state, id) => (\n    deselectRowsByIds(state, [id])\n);\n\nexport const systemsReducer = (INVENTORY_ACTION, columns) => applyReducerHash({\n    ['GET_SYSTEMS_PENDING']: (state) => ({\n        ...state,\n        rows: [],\n        systems: undefined,\n        systemsCount: undefined,\n        columns,\n        loaded: false\n    }),\n    ['GET_SYSTEMS_FULFILLED']: (state, { systems, systemsCount }) => ({\n        ...state,\n        systems,\n        systemsCount,\n        total: systemsCount,\n        rows: systemsToRows(systems).map((row) => ({\n            ...row, selected: isSelected(row.id, state.selectedEntities)\n        })),\n        columns,\n        loaded: true\n    }),\n    [INVENTORY_ACTION.LOAD_ENTITIES_PENDING]: (state) => ({\n        ...state,\n        total: state.systemsCount,\n        rows: state.systems !== undefined ? systemsToRows(state.systems).map((row) => ({\n            ...row, selected: isSelected(row.id, state.selectedEntities)\n        })) : [],\n        columns,\n        loaded: state.systemsCount !== undefined\n    }),\n    [INVENTORY_ACTION.LOAD_ENTITIES_FULFILLED]: (state) => ({\n        ...state,\n        total: state.systemsCount,\n        rows: state.systems !== undefined ? systemsToRows(state.systems).map((row) => ({\n            ...row, selected: isSelected(row.id, state.selectedEntities)\n        })) : [],\n        columns,\n        loaded: state.systemsCount !== undefined\n    }),\n    [SELECT_ENTITY]: (state, { payload: { id, selected, clearAll } }) => {\n        let newState;\n\n        if (id === 0) {\n            newState = selected ? selectAllRows(state) : deselectAllRows(state);\n        } else {\n            newState = selected ? selectRow(state, id) : deselectRow(state, id);\n        }\n\n        if (newState.selectedEntities.length === 0 || clearAll) {\n            newState.selectedEntities = undefined;\n        }\n\n        return newState;\n    },\n    ['SELECT_ENTITIES']: (state, { payload: { ids } }) => ({\n        selectedEntities: ids\n    })\n});\n\nexport const entitiesReducer = (INVENTORY_ACTION, columns, showAllSystems) => applyReducerHash(\n    {\n        ['UPDATE_SYSTEMS']: (state, { systems, systemsCount }) => ({\n            ...state,\n            systems,\n            systemsCount\n        }),\n        ['UPDATE_ROWS']: (state) => ({\n            ...state,\n            loaded: true,\n            rows: systemsToInventoryEntities(\n                state.systems || [],\n                state.rows || [],\n                showAllSystems,\n                state.selectedEntities\n            )\n        }),\n        [INVENTORY_ACTION.LOAD_ENTITIES_FULFILLED]: (state) => ({\n            ...state,\n            rows: systemsToInventoryEntities(\n                state.systems || [],\n                state.rows,\n                showAllSystems,\n                state.selectedEntities\n            ),\n            total: !showAllSystems ? state.systemsCount : state.total,\n            columns: state.total > 0 ? columns : [{ title: '' }]\n        }),\n        [EXPORT]: (state, { payload: { format } }) => {\n            exportFromState(state, format);\n            return state;\n        },\n        [SELECT_ENTITY]: (state, { payload: { id, selected, clearAll } }) => {\n            let newState;\n\n            if (id === 0) {\n                newState = selected ? selectAllRows(state) : deselectAllRows(state);\n            } else {\n                newState = selected ? selectRow(state, id) : deselectRow(state, id);\n            }\n\n            if (newState.selectedEntities.length === 0 || clearAll) {\n                newState.selectedEntities = undefined;\n            }\n\n            return newState;\n        },\n        ['SELECT_ENTITIES']: (state, { payload: { ids } }) => ({\n            selectedEntities: ids\n        })\n    }\n);\n"],"sourceRoot":""}