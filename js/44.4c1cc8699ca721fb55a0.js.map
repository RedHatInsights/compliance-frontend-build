{"version":3,"sources":["webpack://compliance-frontend/./node_modules/react-intl/lib/src/components/createFormattedComponent.js","webpack://compliance-frontend/./node_modules/react-intl/lib/index.js","webpack://compliance-frontend/./node_modules/react-intl/lib/src/components/relative.js"],"names":["DisplayName","DisplayNameParts","createFormattedDateTimePartsComponent","name","ComponentParts","props","intl","value","children","formatProps","date","Date","formatDateToParts","formatTimeToParts","displayName","createFormattedComponent","Component","formattedValue","Text","textComponent","HOUR","selectUnit","seconds","absValue","Math","abs","getDurationInSeconds","unit","valueToSeconds","INCREMENTABLE_UNITS","canIncrement","includes","_super","FormattedRelativeTime","_this","call","this","_updateTimer","state","prevUnit","prevValue","currentValueInSeconds","updateIntervalInSeconds","prototype","scheduleNextUpdate","_a","_b","clearTimeout","nextValueInSeconds","nextUnit","unitDuration","prevInterestingValueInSeconds","nextInterestingValueInSeconds","delayInSeconds","setTimeout","setState","componentDidMount","componentDidUpdate","componentWillUnmount","getDerivedStateFromProps","render","formatRelativeTime","currentValue","currentUnit","round","formattedRelativeTime","defaultProps"],"mappings":"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","file":"js/44.4c1cc8699ca721fb55a0.js","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { invariantIntlContext } from '../utils';\nimport { Context } from './injectIntl';\nvar DisplayName;\n(function (DisplayName) {\n    DisplayName[\"formatDate\"] = \"FormattedDate\";\n    DisplayName[\"formatTime\"] = \"FormattedTime\";\n    DisplayName[\"formatNumber\"] = \"FormattedNumber\";\n    DisplayName[\"formatList\"] = \"FormattedList\";\n    // Note that this DisplayName is the locale display name, not to be confused with\n    // the name of the enum, which is for React component display name in dev tools.\n    DisplayName[\"formatDisplayName\"] = \"FormattedDisplayName\";\n})(DisplayName || (DisplayName = {}));\nvar DisplayNameParts;\n(function (DisplayNameParts) {\n    DisplayNameParts[\"formatDate\"] = \"FormattedDateParts\";\n    DisplayNameParts[\"formatTime\"] = \"FormattedTimeParts\";\n    DisplayNameParts[\"formatNumber\"] = \"FormattedNumberParts\";\n    DisplayNameParts[\"formatList\"] = \"FormattedListParts\";\n})(DisplayNameParts || (DisplayNameParts = {}));\nexport var FormattedNumberParts = function (props) { return (React.createElement(Context.Consumer, null, function (intl) {\n    invariantIntlContext(intl);\n    var value = props.value, children = props.children, formatProps = __rest(props, [\"value\", \"children\"]);\n    return children(intl.formatNumberToParts(value, formatProps));\n})); };\nFormattedNumberParts.displayName = 'FormattedNumberParts';\nexport function createFormattedDateTimePartsComponent(name) {\n    var ComponentParts = function (props) { return (React.createElement(Context.Consumer, null, function (intl) {\n        invariantIntlContext(intl);\n        var value = props.value, children = props.children, formatProps = __rest(props, [\"value\", \"children\"]);\n        var date = typeof value === 'string' ? new Date(value || 0) : value;\n        var formattedParts = name === 'formatDate'\n            ? intl.formatDateToParts(date, formatProps)\n            : intl.formatTimeToParts(date, formatProps);\n        return children(formattedParts);\n    })); };\n    ComponentParts.displayName = DisplayNameParts[name];\n    return ComponentParts;\n}\nexport function createFormattedComponent(name) {\n    var Component = function (props) { return (React.createElement(Context.Consumer, null, function (intl) {\n        invariantIntlContext(intl);\n        var value = props.value, children = props.children, formatProps = __rest(props, [\"value\", \"children\"]);\n        // TODO: fix TS type definition for localeMatcher upstream\n        var formattedValue = intl[name](value, formatProps);\n        if (typeof children === 'function') {\n            return children(formattedValue);\n        }\n        var Text = intl.textComponent || React.Fragment;\n        return React.createElement(Text, null, formattedValue);\n    })); };\n    Component.displayName = DisplayName[name];\n    return Component;\n}\n","import { createFormattedComponent, createFormattedDateTimePartsComponent, } from './src/components/createFormattedComponent';\nexport { createIntlCache, UnsupportedFormatterError, InvalidConfigError, MissingDataError, MessageFormatError, MissingTranslationError, IntlErrorCode as ReactIntlErrorCode, IntlError as ReactIntlError, } from '@formatjs/intl';\nexport function defineMessages(msgs) {\n    return msgs;\n}\nexport function defineMessage(msg) {\n    return msg;\n}\nexport { default as injectIntl, Provider as RawIntlProvider, Context as IntlContext, } from './src/components/injectIntl';\nexport { default as useIntl } from './src/components/useIntl';\nexport { default as IntlProvider, createIntl } from './src/components/provider';\n// IMPORTANT: Explicit here to prevent api-extractor from outputing `import('./src/types').CustomFormatConfig`\nexport var FormattedDate = createFormattedComponent('formatDate');\nexport var FormattedTime = createFormattedComponent('formatTime');\nexport var FormattedNumber = createFormattedComponent('formatNumber');\nexport var FormattedList = createFormattedComponent('formatList');\nexport var FormattedDisplayName = createFormattedComponent('formatDisplayName');\nexport var FormattedDateParts = createFormattedDateTimePartsComponent('formatDate');\nexport var FormattedTimeParts = createFormattedDateTimePartsComponent('formatTime');\nexport { FormattedNumberParts } from './src/components/createFormattedComponent';\nexport { default as FormattedRelativeTime } from './src/components/relative';\nexport { default as FormattedPlural } from './src/components/plural';\nexport { default as FormattedMessage } from './src/components/message';\nexport { default as FormattedDateTimeRange } from './src/components/dateTimeRange';\n","import { __assign, __extends } from \"tslib\";\n/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nimport { invariant } from '@formatjs/ecma402-abstract';\nvar MINUTE = 60;\nvar HOUR = 60 * 60;\nvar DAY = 60 * 60 * 24;\nfunction selectUnit(seconds) {\n    var absValue = Math.abs(seconds);\n    if (absValue < MINUTE) {\n        return 'second';\n    }\n    if (absValue < HOUR) {\n        return 'minute';\n    }\n    if (absValue < DAY) {\n        return 'hour';\n    }\n    return 'day';\n}\nfunction getDurationInSeconds(unit) {\n    switch (unit) {\n        case 'second':\n            return 1;\n        case 'minute':\n            return MINUTE;\n        case 'hour':\n            return HOUR;\n        default:\n            return DAY;\n    }\n}\nfunction valueToSeconds(value, unit) {\n    if (!value) {\n        return 0;\n    }\n    switch (unit) {\n        case 'second':\n            return value;\n        case 'minute':\n            return value * MINUTE;\n        default:\n            return value * HOUR;\n    }\n}\nvar INCREMENTABLE_UNITS = ['second', 'minute', 'hour'];\nfunction canIncrement(unit) {\n    if (unit === void 0) { unit = 'second'; }\n    return INCREMENTABLE_UNITS.includes(unit);\n}\nvar FormattedRelativeTime = /** @class */ (function (_super) {\n    __extends(FormattedRelativeTime, _super);\n    function FormattedRelativeTime(props) {\n        var _this = _super.call(this, props) || this;\n        // Public for testing\n        _this._updateTimer = null;\n        _this.state = {\n            prevUnit: _this.props.unit,\n            prevValue: _this.props.value,\n            currentValueInSeconds: canIncrement(_this.props.unit)\n                ? valueToSeconds(_this.props.value, _this.props.unit)\n                : 0,\n        };\n        invariant(!props.updateIntervalInSeconds ||\n            !!(props.updateIntervalInSeconds && canIncrement(props.unit)), 'Cannot schedule update with unit longer than hour');\n        return _this;\n    }\n    FormattedRelativeTime.prototype.scheduleNextUpdate = function (_a, _b) {\n        var _this = this;\n        var updateIntervalInSeconds = _a.updateIntervalInSeconds, unit = _a.unit;\n        var currentValueInSeconds = _b.currentValueInSeconds;\n        clearTimeout(this._updateTimer);\n        this._updateTimer = null;\n        // If there's no interval and we cannot increment this unit, do nothing\n        if (!updateIntervalInSeconds || !canIncrement(unit)) {\n            return;\n        }\n        // Figure out the next interesting time\n        var nextValueInSeconds = currentValueInSeconds - updateIntervalInSeconds;\n        var nextUnit = selectUnit(nextValueInSeconds);\n        // We've reached the max auto incrementable unit, don't schedule another update\n        if (nextUnit === 'day') {\n            return;\n        }\n        var unitDuration = getDurationInSeconds(nextUnit);\n        var remainder = nextValueInSeconds % unitDuration;\n        var prevInterestingValueInSeconds = nextValueInSeconds - remainder;\n        var nextInterestingValueInSeconds = prevInterestingValueInSeconds >= currentValueInSeconds\n            ? prevInterestingValueInSeconds - unitDuration\n            : prevInterestingValueInSeconds;\n        var delayInSeconds = Math.abs(nextInterestingValueInSeconds - currentValueInSeconds);\n        this._updateTimer = setTimeout(function () {\n            return _this.setState({\n                currentValueInSeconds: nextInterestingValueInSeconds,\n            });\n        }, delayInSeconds * 1e3);\n    };\n    FormattedRelativeTime.prototype.componentDidMount = function () {\n        this.scheduleNextUpdate(this.props, this.state);\n    };\n    FormattedRelativeTime.prototype.componentDidUpdate = function () {\n        this.scheduleNextUpdate(this.props, this.state);\n    };\n    FormattedRelativeTime.prototype.componentWillUnmount = function () {\n        clearTimeout(this._updateTimer);\n        this._updateTimer = null;\n    };\n    FormattedRelativeTime.getDerivedStateFromProps = function (props, state) {\n        if (props.unit !== state.prevUnit || props.value !== state.prevValue) {\n            return {\n                prevValue: props.value,\n                prevUnit: props.unit,\n                currentValueInSeconds: canIncrement(props.unit)\n                    ? valueToSeconds(props.value, props.unit)\n                    : 0,\n            };\n        }\n        return null;\n    };\n    FormattedRelativeTime.prototype.render = function () {\n        var _this = this;\n        return (React.createElement(Context.Consumer, null, function (intl) {\n            invariantIntlContext(intl);\n            var formatRelativeTime = intl.formatRelativeTime, Text = intl.textComponent;\n            var _a = _this.props, children = _a.children, value = _a.value, unit = _a.unit, updateIntervalInSeconds = _a.updateIntervalInSeconds;\n            var currentValueInSeconds = _this.state.currentValueInSeconds;\n            var currentValue = value || 0;\n            var currentUnit = unit;\n            if (canIncrement(unit) &&\n                typeof currentValueInSeconds === 'number' &&\n                updateIntervalInSeconds) {\n                currentUnit = selectUnit(currentValueInSeconds);\n                var unitDuration = getDurationInSeconds(currentUnit);\n                currentValue = Math.round(currentValueInSeconds / unitDuration);\n            }\n            var formattedRelativeTime = formatRelativeTime(currentValue, currentUnit, __assign({}, _this.props));\n            if (typeof children === 'function') {\n                return children(formattedRelativeTime);\n            }\n            if (Text) {\n                return React.createElement(Text, null, formattedRelativeTime);\n            }\n            return formattedRelativeTime;\n        }));\n    };\n    FormattedRelativeTime.displayName = 'FormattedRelativeTime';\n    FormattedRelativeTime.defaultProps = {\n        value: 0,\n        unit: 'second',\n    };\n    return FormattedRelativeTime;\n}(React.PureComponent));\nexport { FormattedRelativeTime };\nexport default FormattedRelativeTime;\n"],"sourceRoot":""}