{"version":3,"sources":["webpack://compliance-frontend/./src/SmartComponents/ComplianceSystems/ComplianceSystems.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/CreateSCAPPolicy.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/EditPolicyProfilesRules.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/EditPolicyRules.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/EditPolicySystems.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/EditPolicyDetails.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/ReviewCreatedPolicy.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/FinishedCreatePolicy.js","webpack://compliance-frontend/./src/SmartComponents/CreatePolicy/CreatePolicy.js","webpack://compliance-frontend/./src/SmartComponents/EditPolicy/EditPolicyDetailsTab.js","webpack://compliance-frontend/./src/SmartComponents/EditPolicy/EditPolicyRulesTab.js","webpack://compliance-frontend/./src/SmartComponents/EditPolicy/EditPolicySystemsTab.js","webpack://compliance-frontend/./src/SmartComponents/EditPolicy/EditPolicy.js","webpack://compliance-frontend/./src/SmartComponents/EditPolicy/usePolicy.js","webpack://compliance-frontend/./src/SmartComponents/SystemsTable/Cells.js","webpack://compliance-frontend/./src/SmartComponents/SystemsTable/SystemsTable.js","webpack://compliance-frontend/./src/SmartComponents/SystemsTable/constants.js","webpack://compliance-frontend/./src/SmartComponents/InventoryDetails/InventoryDetails.js","webpack://compliance-frontend/./src/SmartComponents/SystemsTable/InventoryTable.js","webpack://compliance-frontend/./src/Utilities/Export.js","webpack://compliance-frontend/./src/Utilities/hooks/api/utils/ApiClient.js","webpack://compliance-frontend/./src/Utilities/hooks/api/useApi.js","webpack://compliance-frontend/./src/Utilities/hooks/api/useCollection.js","webpack://compliance-frontend/./src/Utilities/ruleHelpers.js","webpack://compliance-frontend/./src/store/ActionTypes.js","webpack://compliance-frontend/./src/store/Reducers/SystemStore.js"],"names":["QUERY","gql","ComplianceSystems","newInventory","useFeature","useQuery","data","error","loading","dispatch","useDispatch","columns","key","title","props","width","isStatic","renderFunc","systemName","policyNames","policiesCell","id","detailsLink","testResultProfiles","policies","profiles","edges","map","node","useLayoutEffect","type","payload","ids","InvComponent","InventoryTable","SystemsTable","className","stateValues","stateKey","query","GET_SYSTEMS","defaultFilter","systemProps","isFullView","showOsFilter","showComplianceSystemsInfo","enableEditPolicy","remediationsEnabled","BENCHMARKS_AND_PROFILES","CreateSCAPPolicy","change","selectedBenchmarkId","fetchPolicy","Spinner","selectedBenchmark","validProfiles","benchmark","benchmarks","latestBenchmarks","find","userProfileRefIds","filter","profile","refId","disabled","includes","TextContent","Text","component","TextVariants","Form","FormGroup","label","isRequired","fieldId","sort","a","b","localeCompare","osMajorVersion","Button","onClick","setBenchmark","variant","propTypes","reduxFormPropTypes","selector","formValueSelector","compose","connect","state","reduxForm","form","destroyOnUnmount","forceUnregisterOnUnmount","PROFILES_QUERY","EditPolicyProfilesRules","policy","selectedRuleRefIds","osMinorVersionCounts","selectRulesTableColumns","useCollection","include","params","search","i","osMinorVersion","join","benchmarksLoading","profileIds","tabsData","profileSelectedRuleRefIds","systemCount","count","latestSupportedOsMinorVersions","getBenchmarkBySupportedOsMinor","collection","profileRefId","benchmarkProfile","getBenchmarkProfile","rules","relationships","push","newOsMinorVersion","ruleRefIds","variables","skip","length","profilesData","dataState","undefined","loadingState","p","rule","name","EmptyTable","selectedFilter","level","handleSelect","newSelectedRuleRefIds","newSelection","JSON","parse","EditPolicyRules","ruleIds","filteredRules","profileId","benchmarkId","multiversionRules","useState","defaultSelection","setDefaultSelection","profileRules","useEffect","ruleId","isInline","SystemRulesTable","tailoringEnabled","remediationAvailableFilter","selectedRefIds","EditPolicyRulesComponent","Component","EditPolicySystems","selectedSystemIds","displayName","_id","emptyStateComponent","WizardContextConsumer","goToStepById","prependComponent","InvCmp","compact","showActions","GET_SYSTEMS_WITHOUT_FAILED_RULES","enableExport","defaultProps","countOsMinorVersions","entities","selectedEntities","e","EditPolicyDetails","description","Field","ReduxFormTextInput","aria-describedby","isDisabled","ReduxFormTextArea","defaultValue","businessObjective","showTitle","previousThreshold","complianceThreshold","initialValues","REVIEW","ReviewCreatedPolicy","parentProfileName","TextList","TextListVariants","TextListItem","TextListItemVariants","style","parseFloat","rulesCount","FinishedCreatePolicy","listErrors","secondaryActions","onWizardFinish","cloneFromProfileId","systemIds","percent","setPercent","message","setMessage","errors","setErrors","failed","setFailed","updatePolicy","usePolicy","onProgress","progress","newPolicy","hosts","then","catch","networkError","result","Array","isArray","ListItem","Bullseye","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","WrenchIcon","Title","headingLevel","size","EmptyStateBody","List","EmptyStateSecondaryActions","client","withApollo","CreatePolicy","history","useHistory","stepIdReached","setStepIdReached","onClose","steps","enableNext","validateBenchmarkPage","canJumpTo","validateDetailsPage","validateSystemsPage","validateRulesPage","nextButtonText","isFinishedStep","Wizard","isOpen","onNext","EditPolicyDetailsTab","setUpdatedPolicy","validThreshold","setValidThreshold","threshold","valid","thresholdValid","useThresholdValidate","validateThreshold","TextArea","height","onChange","value","TextInput","validated","helperTextInvalid","helperText","complianceThresholdValid","EditPolicyRulesTab","benchmarkSearch","Object","keys","values","sortingByProp","parentProfileId","forEach","tab","refIds","EditPolicySystemsTab","policyOsMinorVersions","location","selectedSystemOsMinorVersions","useSelector","entity","systemOsMinorVersion","Alert","actionLinks","AlertActionLink","hash","MULTIVERSION_QUERY","profilesToOsMinorMap","reduce","acc","mapCountOsMinorVersions","EditPolicy","route","policyId","useParams","policy_id","policyProfiles","anchor","useAnchor","updatedPolicy","setSelectedRuleRefIds","setOsMinorVersionCounts","linkToBackground","useLinkToBackground","isSaving","setIsSaving","saveEnabled","linkToBackgroundWithHash","actions","spinnerAriaValueText","isLoading","updateSelectedRuleRefIds","policyProfile","useTitleEntity","Modal","defaultTab","Tab","eventKey","TabTitleText","filteredSelection","selectedProfile","uniq","create","createBusinessObjective","useMutation","CREATE_BUSINESS_OBJECTIVE","newBusinessObjective","input","UPDATE_PROFILE","updateProfile","CREATE_PROFILE","createProfile","associateSystems","ASSOCIATE_SYSTEMS_TO_PROFILES","h","useAssociateSystems","associateRules","ASSOCIATE_RULES_TO_PROFILE","ruleInput","useAssociateRules","expectedUpdates","dispatchProgress","businessObjectiveId","policyInput","SSGVersion","supported","ssgVersion","messageVariant","initFilterState","filterConfig","initialDefaultState","initialState","page","policyFilter","osFilter","systemsPolicyFilterConfiguration","systemsOsFilterConfiguration","registry","React","FilterConfigBuilder","DEFAULT_SYSTEMS_FILTER_CONFIGURATION","compliantFilter","COMPLIANT_SYSTEMS_FILTER_CONFIGURATION","getChipBuilder","getFilterBuilder","perPage","totalCount","activeFilters","clearAll","preselectedSystems","Promise","resolve","selectEntities","updateSystems","prevProps","per_page","options","showAllSystems","inventory","current","setState","onRefreshData","showOnlySystemsWithTestResults","filterBuilder","buildFilterString","fetchResults","prevSystems","systems","s","fetchSystems","items","systemsCount","newSystems","stringify","updateRows","prevState","_","format","exportFromState","selectedValues","chips","removeFilterWithChip","_event","clearAllFilter","deleteFilter","selectAll","clearSelection","allSelectedOnPage","total","noError","this","selectedEntitiesIds","buildConfiguration","onFilterUpdate","hideLabel","filterChips","chipBuilder","chipsFor","exportConfig","isExportDisabled","onSelect","onExportSelect","inventoryTableProps","onRefresh","ref","tableProps","canSelectAll","bulkSelect","checked","onBulkSelect","_index","beta","window","pathname","split","href","origin","edge","activeFiltersConfig","filters","onDelete","onFilterDelete","TableVariant","rows","cells","hasItems","hasCheckbox","dedicatedAction","ComplianceRemediationButton","allSystems","systemsWithRuleObjectsFailed","selectedRules","fallback","SkeletonTable","colSize","rowSize","onLoad","INVENTORY_ACTION_TYPES","mergeWithEntities","getRegistry","register","entitiesReducer","clearInventoryFilter","ConnectedSystemsTable","memo","SystemsTableWithApollo","row","args","SELECT_ENTITY","InventoryDetails","registryDecorator","DetailWrapper","mergeWithDetail","InventoryDetail","Skeleton","SkeletonSize","hideBack","store","useStore","useRef","pagination","setPagination","isLoaded","setIsLoaded","isEmpty","setIsEmpty","useFilterConfig","conditionalFilter","system","shallowEqual","filterString","combindedFilter","debounceFetchSystems","useCallback","debounce","empty","systemsReducer","callback","every","selected","isSelected","getState","PropTypes","getNestedObject","nestedObj","path","obj","textCsvCell","cell","exportValue","content","csvRows","column","concat","noExport","encodeURI","csvFromState","object","jsonFromState","filename","link","document","createElement","setAttribute","dispatchEvent","MouseEvent","bubbles","cancelable","view","linkAndDownload","CSV_FILE_PREFIX","Date","toISOString","Accept","apiBase","authenticate","onUnauthorised","defaultHeaders","headers","DEFAULT_API_HEADERS","apiProps","method","callAuthenticate","fetch","checkForEmptyResponse","response","checkForErrors","json","finalCatch","promise","reject","credentials","fullPath","url","URL","encodeURIComponent","URLSearchParams","body","status","ignore404","responseCloneJson","clone","request","ApiClient","includeAttributes","prop","attributes","newEntity","includePropAndDelete","normalizeData","jsonNormalized","normalize","normalizedJson","entries","item","relationship","relationshipData","v","includeRelationship","fetchCollection","apiClient","get","normalized","meta","effects","collectionState","setCollectionState","useApi","COMPLIANCE_API_ROOT","profilesRulesFailed","flatMap","compliant","profilesRulesPassed","systemRulesFailed","ruleObjectsFailed","EXPORT","NEVER","lastScanned","dates","last","Math","max","apply","date","isFinite","score","scoreTotal","numScored","Tooltip","lines","Link","to","hasOsInfo","matchingSystem","displayNameCell","display_name","profilesSsgVersions","version","systemsToInventoryEntities","facts","rulesPassed","rulesFailed","account","bios_uuid","created","fqdn","insights_id","ip_addresses","mac_addresses","rhel_machine_id","satellite_id","subscription_manager_id","tags","updated","hostname","machine_id","release","compliance","details_link","rules_passed","rules_failed","hidePassed","rules_failed_text","compliance_score","complianceScore","compliance_score_text","complianceScoreString","last_scanned","last_scanned_text","ssg_version","systemsToRows","selectRowsByIds","rowsToSelect","deselectRowsByIds","selectAllRows","deselectAllRows","selectRow","deselectRow","INVENTORY_ACTION","applyReducerHash","loaded","LOAD_ENTITIES_PENDING","LOAD_ENTITIES_FULFILLED","newState"],"mappings":"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","file":"js/EditPolicy.da348941f323a1602bee.js","sourcesContent":["/* eslint-disable react/display-name */\nimport React, { useLayoutEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport PageHeader, { PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { StateViewPart, StateViewWithError } from 'PresentationalComponents';\nimport { InventoryTable, SystemsTable } from 'SmartComponents';\nimport { GET_SYSTEMS } from '../SystemsTable/constants';\nimport { systemName, detailsLink, policiesCell } from 'Store/Reducers/SystemStore';\nimport useFeature from 'Utilities/hooks/useFeature';\n\nconst QUERY = gql`\n{\n    profiles(search: \"external = false and canonical = false\") {\n        edges {\n            node {\n                id\n                name\n                refId\n                majorOsVersion\n            }\n        }\n    }\n}\n`;\n\nconst DEFAULT_FILTER = 'has_test_results = true or has_policy = true';\n\nexport const ComplianceSystems = () => {\n    const newInventory = useFeature('newInventory');\n    const { data, error, loading } = useQuery(QUERY);\n    const dispatch = useDispatch();\n    const columns = [{\n        key: 'facts.compliance.display_name',\n        title: 'Name',\n        props: {\n            width: 40, isStatic: true\n        },\n        ...newInventory && {\n            key: 'display_name',\n            renderFunc: systemName\n        }\n    }, {\n        key: 'facts.compliance.policies',\n        title: 'Policies',\n        props: {\n            width: 40, isStatic: true\n        },\n        ...newInventory && {\n            key: 'policyNames',\n            renderFunc: (policyNames) => {\n                const { title } = policiesCell({ policyNames }) || { title: '' };\n                return title;\n            }\n        }\n    }, {\n        key: 'facts.compliance.details_link',\n        title: '',\n        props: {\n            width: 20, isStatic: true\n        },\n        ...newInventory && {\n            key: 'testResultProfiles',\n            renderFunc: (data, id) => {\n                const { title } = detailsLink({ testResultProfiles: data, id }) || { title: '' };\n                return title;\n            }\n        }\n    }];\n    const policies = data?.profiles?.edges.map(({ node }) => node);\n\n    useLayoutEffect(() => { dispatch({ type: 'SELECT_ENTITIES', payload: { ids: [] } }); }, []);\n\n    const InvComponent = newInventory ? InventoryTable : SystemsTable;\n\n    return (\n        <React.Fragment>\n            <PageHeader className='page-header'>\n                <PageHeaderTitle title=\"Systems\" />\n            </PageHeader>\n            <Main>\n                <StateViewWithError stateValues={ { error, data, loading } }>\n                    <StateViewPart stateKey=\"data\">\n                        { policies && <InvComponent\n                            query={GET_SYSTEMS}\n                            defaultFilter={ DEFAULT_FILTER }\n                            systemProps={{\n                                isFullView: true\n                            }}\n                            showOsFilter\n                            showComplianceSystemsInfo\n                            enableEditPolicy={ false }\n                            remediationsEnabled={ false }\n                            columns={ columns }\n                            policies={ policies } /> }\n                    </StateViewPart>\n                </StateViewWithError>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default ComplianceSystems;\n","import React from 'react';\nimport {\n    Button,\n    Form,\n    FormGroup,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport { ProfileTypeSelect } from 'PresentationalComponents';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { propTypes as reduxFormPropTypes, formValueSelector, reduxForm } from 'redux-form';\nimport { connect, useDispatch } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\n\nconst BENCHMARKS_AND_PROFILES = gql`\nquery benchmarksAndProfiles {\n    latestBenchmarks {\n        id\n        title\n        refId\n        version\n        osMajorVersion\n        profiles {\n            id\n            name\n            refId\n            description\n            complianceThreshold\n        }\n    }\n    profiles(search: \"external = false and canonical = false\") {\n        edges {\n            node {\n                id\n                refId\n                benchmark {\n                    refId\n                }\n            }\n        }\n    }\n}\n`;\n\nconst CreateSCAPPolicy = ({ change, selectedBenchmarkId }) => {\n    const { data, error, loading } = useQuery(BENCHMARKS_AND_PROFILES, { fetchPolicy: 'no-cache' });\n\n    const inUseProfileRefIds = (profiles, benchmark) => (\n        profiles.filter(profile => benchmark.refId === profile.node.benchmark.refId).map(profile => profile.node.refId)\n    );\n\n    const dispatch = useDispatch();\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const benchmarks = data.latestBenchmarks;\n    let selectedBenchmark;\n    let validProfiles;\n    if (selectedBenchmarkId) {\n        selectedBenchmark = benchmarks.find(benchmark => benchmark.id === selectedBenchmarkId);\n        const userProfileRefIds = inUseProfileRefIds(data.profiles.edges, selectedBenchmark);\n        validProfiles = selectedBenchmark.profiles.map((profile) => ({\n            ...profile,\n            disabled: userProfileRefIds.includes(profile.refId)\n        }));\n    }\n\n    const setBenchmark = ({ id, osMajorVersion }) => {\n        if (selectedBenchmark?.osMajorVersion !== osMajorVersion) {\n            change('systems', []);\n            dispatch({\n                type: 'SELECT_ENTITIES',\n                payload: { ids: [] }\n            });\n        }\n\n        change('benchmark', id);\n        change('osMajorVersion', osMajorVersion);\n    };\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1} className=\"pf-u-mb-md\">\n                    Create SCAP policy\n                </Text>\n                <Text className=\"pf-u-mb-md\">\n                    Select the operating system and policy type for this policy.\n                </Text>\n            </TextContent>\n            <Form>\n                <FormGroup\n                    label=\"Operating system\"\n                    isRequired\n                    fieldId=\"benchmark\">\n                    { benchmarks && benchmarks.sort((a, b) => a.refId.localeCompare(b.refId)).map((benchmark) => {\n                        const { id, osMajorVersion } = benchmark;\n                        return (\n                            <Button key={id} onClick={ () => setBenchmark(benchmark) }\n                                className={`wizard-os-button ${selectedBenchmarkId === id ? 'active-wizard-os-button' : ''}`}\n                                variant=\"tertiary\">\n                                { `RHEL ${osMajorVersion}` }\n                            </Button>\n                        );\n                    })}\n                </FormGroup>\n                <FormGroup label=\"Policy type\" isRequired fieldId=\"policy-type\">\n                    <ProfileTypeSelect\n                        profiles={selectedBenchmark && validProfiles }\n                        onClick={ () => {\n                            change('selectedRuleRefIds', null);\n                        }}/>\n                </FormGroup>\n            </Form>\n        </React.Fragment>\n    );\n};\n\nCreateSCAPPolicy.propTypes = {\n    selectedBenchmarkId: propTypes.string,\n    change: reduxFormPropTypes.change\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            selectedBenchmarkId: selector(state, 'benchmark')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(CreateSCAPPolicy);\n","import React, { useLayoutEffect } from 'react';\nimport { propTypes as reduxFormPropTypes, formValueSelector, reduxForm } from 'redux-form';\nimport {\n    selectColumns as selectRulesTableColumns\n} from '@redhat-cloud-services/frontend-components-inventory-compliance/SystemRulesTable';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport { StateViewWithError, StateViewPart, TabbedRules } from 'PresentationalComponents';\nimport useCollection from 'Utilities/hooks/api/useCollection';\n\nconst PROFILES_QUERY = gql`\nquery Profiles($filter: String!){\n    profiles(search: $filter){\n        edges {\n            node {\n                id\n                name\n                refId\n                osMinorVersion\n                osMajorVersion\n                policy {\n                    id\n\n                }\n                policyType\n                benchmark {\n                    id\n                    refId\n                    latestSupportedOsMinorVersions\n                    osMajorVersion\n                }\n                ssgVersion\n                rules {\n                    id\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n    }\n}\n`;\n\nconst getBenchmarkProfile = (benchmark, profileRefId) => (\n    benchmark.profiles.find((benchmarkProfile) => (benchmarkProfile.refId === profileRefId))\n);\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) => (\n    benchmarks.find((benchmark) =>\n        benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n    )\n);\n\nexport const EditPolicyProfilesRules = ({ policy, selectedRuleRefIds, change, osMajorVersion, osMinorVersionCounts }) => {\n    const columns = selectRulesTableColumns(['Name', 'Severity', 'Ansible']);\n    const handleSelectCallback = (profile, newSelectedRuleRefIds) => {\n        const newSelection = selectedRuleRefIds.map((profileSelectedRuleRefIds) => {\n            if (profileSelectedRuleRefIds.id === profile.id) {\n                return {\n                    id: profileSelectedRuleRefIds.id,\n                    ruleRefIds: newSelectedRuleRefIds\n                };\n            } else {\n                return profileSelectedRuleRefIds;\n            }\n        });\n\n        change('selectedRuleRefIds', newSelection);\n    };\n\n    const { data: benchmarks, loading: benchmarksLoading } = useCollection('benchmarks', {\n        type: 'benchmark',\n        include: ['profiles'],\n        params: {\n            search: `os_major_version = ${ osMajorVersion } ` +\n                    `and latest_supported_os_minor_version ^ (${ osMinorVersionCounts.map((i) => (i.osMinorVersion)).join(',') })`\n        }\n    });\n\n    let profileIds = [];\n    let tabsData = osMinorVersionCounts.map(({ osMinorVersion, count: systemCount }) => {\n        osMinorVersion = `${osMinorVersion}`;\n        let profile;\n        let profileSelectedRuleRefIds;\n        if (benchmarks) {\n            const benchmark = getBenchmarkBySupportedOsMinor(benchmarks.collection, osMinorVersion);\n            if (benchmark) {\n                profile = getBenchmarkProfile(benchmark, policy.refId);\n                if (profile) {\n                    profile = {\n                        ...profile,\n                        rules: profile.relationships?.rules?.data,\n                        benchmark: profile.relationships?.benchmark?.data\n                    };\n                    profileSelectedRuleRefIds = selectedRuleRefIds?.find(({ id }) => id === profile.id);\n                    profileIds.push(profile.id);\n                }\n            }\n        }\n\n        return {\n            profile,\n            systemCount,\n            newOsMinorVersion: osMinorVersion,\n            selectedRuleRefIds: profileSelectedRuleRefIds?.ruleRefIds\n        };\n    });\n    tabsData = tabsData.filter(({ profile }) => !!profile);\n\n    const filter = `${ (profileIds || []).map((i) => (`id = ${ i }`)).join(' OR ') }`;\n    const { data: profilesData, error, loading } = useQuery(PROFILES_QUERY, {\n        variables: {\n            filter\n        },\n        skip: filter.length === 0\n    });\n    const dataState = ((profileIds?.length > 0) ? profilesData : undefined);\n    const loadingState = ((loading || benchmarksLoading) ? true : undefined);\n\n    useLayoutEffect(() => {\n        if (profilesData) {\n            const profiles = profilesData?.profiles.edges.map((p) => (p.node));\n\n            change('selectedRuleRefIds', profiles.map((profile) => ({\n                id: profile.id,\n                ruleRefIds: selectedRuleRefIds?.find(({ id }) => id === profile.id)?.ruleRefIds ||\n                            profile.rules.map((rule) => (rule.refId))\n            })));\n        }\n    }, [profilesData]);\n\n    return <React.Fragment>\n        <TextContent className='pf-u-pb-md'>\n            <Text component={TextVariants.h1}>\n                Rules\n            </Text>\n            <Text>\n                Customize your <b>{ policy.name }</b> SCAP policy by including and excluding rules.\n            </Text>\n            <Text>\n                Each release of RHEL is supported with a unique and specific version of the SCAP Security\n                Guide (SSG). You must customize each version of SSG for each release of RHEL.\n            </Text>\n        </TextContent>\n\n        <StateViewWithError stateValues={ { error, data: dataState, loading: loadingState } }>\n            <StateViewPart stateKey=\"loading\">\n                <EmptyTable><Spinner/></EmptyTable>\n            </StateViewPart>\n            <StateViewPart stateKey=\"data\">\n                <TabbedRules\n                    tabsData={ tabsData }\n                    columns={ columns }\n                    remediationsEnabled={ false }\n                    selectedFilter\n                    level={ 1 }\n                    handleSelect={ handleSelectCallback } />\n            </StateViewPart>\n        </StateViewWithError>\n    </React.Fragment>;\n};\n\nEditPolicyProfilesRules.propTypes = {\n    policy: propTypes.object,\n    change: reduxFormPropTypes.change,\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    selectedRuleRefIds: propTypes.array\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            policy: JSON.parse(selector(state, 'profile')),\n            osMajorVersion: selector(state, 'osMajorVersion'),\n            osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n            selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyProfilesRules);\n","import React, { useEffect, useState } from 'react';\nimport { propTypes as reduxFormPropTypes, formValueSelector, reduxForm } from 'redux-form';\nimport SystemRulesTable, {\n    selectColumns as selectRulesTableColumns\n} from '@redhat-cloud-services/frontend-components-inventory-compliance/SystemRulesTable';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { Button, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport { StateViewWithError, StateViewPart } from 'PresentationalComponents';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport EditPolicyProfilesRules from './EditPolicyProfilesRules';\n\nconst QUERY = gql`\nquery benchmarkAndProfile($benchmarkId: String!, $profileId: String!){\n    benchmark(id: $benchmarkId) {\n        id\n        rules {\n            id\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n        }\n    }\n    profile(id: $profileId) {\n        id\n        name\n        refId\n        rules {\n            id\n            refId\n        }\n    }\n}\n`;\n\nexport const EditPolicyRules = ({ profileId, benchmarkId, osMajorVersion, osMinorVersionCounts, selectedRuleRefIds, change }) => {\n    const multiversionRules = useFeature('multiversionTabs');\n    const columns = selectRulesTableColumns(['Name', 'Severity', 'Ansible']);\n    const { data, error, loading } = useQuery(QUERY, { variables: { profileId, benchmarkId } });\n    const [defaultSelection, setDefaultSelection] = useState(null);\n    const profileRules = data && [{\n        profile: { refId: data.profile.refId, name: data.profile.name },\n        rules: data.benchmark.rules\n    }];\n    const resetToDefaultSelection = () => (\n        change('selectedRuleRefIds', defaultSelection)\n    );\n    const isDefaultSelection = (ruleIds) => {\n        const filteredRules = ruleIds?.filter((ruleId) => (defaultSelection?.includes(ruleId)));\n        return ruleIds && defaultSelection && filteredRules.length === defaultSelection.length;\n    };\n\n    useEffect(() => {\n        if (data) {\n            const ruleIds = data.profile.rules.map((rule) => rule.refId);\n            setDefaultSelection(ruleIds);\n            if (!selectedRuleRefIds) {\n                change('selectedRuleRefIds', ruleIds);\n            }\n        }\n    }, [data, change, selectedRuleRefIds]);\n\n    return <StateViewWithError stateValues={ { error, data, loading } }>\n        <StateViewPart stateKey=\"loading\">\n            <EmptyTable><Spinner/></EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Rules\n                </Text>\n            </TextContent>\n            <TextContent>\n                <Text>\n                    Edit your policy by including and excluding rules.\n                </Text>\n                <Text>\n                    Selected policy type <strong>{ data?.profile.name }</strong> has { defaultSelection?.length } rules.&ensp;\n                    { selectedRuleRefIds && !isDefaultSelection(selectedRuleRefIds) &&\n                        <Button variant=\"link\" isInline onClick={ () => resetToDefaultSelection() }>\n                          Reset to default selection\n                        </Button>\n                    }\n                </Text>\n                { multiversionRules && osMinorVersionCounts && osMinorVersionCounts.length > 0 &&\n                    <Text>\n                        Tailoring for{' '}\n                        { osMinorVersionCounts.map(({ osMinorVersion, count }) =>\n                            `RHEL ${osMajorVersion}.${osMinorVersion} (${count} systems)`).join(', ') }\n                    </Text>\n                }\n            </TextContent>\n            <SystemRulesTable\n                remediationsEnabled={ false }\n                tailoringEnabled\n                selectedFilter\n                remediationAvailableFilter\n                columns={ columns }\n                loading={ loading }\n                handleSelect={ (selectedRuleRefIds) => change('selectedRuleRefIds', selectedRuleRefIds) }\n                profileRules={ profileRules }\n                selectedRefIds={ selectedRuleRefIds || [] }\n            />\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nEditPolicyRules.propTypes = {\n    profileId: propTypes.string,\n    benchmarkId: propTypes.string,\n    change: reduxFormPropTypes.change,\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    selectedRuleRefIds: propTypes.array\n};\n\nconst selector = formValueSelector('policyForm');\n\nconst EditPolicyRulesComponent = compose(\n    connect(\n        state => ({\n            benchmarkId: selector(state, 'benchmark'),\n            profile: JSON.parse(selector(state, 'profile')),\n            profileId: JSON.parse(selector(state, 'profile')).id,\n            osMajorVersion: selector(state, 'osMajorVersion'),\n            osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n            selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyRules);\n\nconst FeatureWrapper = (...props) => {\n    const multiversionRules = useFeature('multiversionTabs');\n    const Component = multiversionRules ? EditPolicyProfilesRules : EditPolicyRulesComponent;\n\n    return <Component { ...props } />;\n};\n\nexport default FeatureWrapper;\n","import React, { useEffect } from 'react';\nimport { propTypes as reduxFormPropTypes, reduxForm, formValueSelector } from 'redux-form';\nimport { Button, Form, FormGroup, Text, TextContent, TextVariants, WizardContextConsumer } from '@patternfly/react-core';\nimport { InventoryTable, SystemsTable } from 'SmartComponents';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\nimport { compose } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport { countOsMinorVersions } from 'Store/Reducers/SystemStore';\n\nconst EditPolicySystems = ({ change, osMajorVersion, osMinorVersionCounts, selectedSystemIds }) => {\n    const newInventory = useFeature('newInventory');\n    const multiversionRules = useFeature('multiversionTabs');\n\n    const columns = [{\n        key: 'facts.compliance.display_name',\n        title: 'Name',\n        props: {\n            width: 40, isStatic: true\n        },\n        ...newInventory && {\n            key: 'display_name',\n            renderFunc: (displayName, _id, { name }) => (displayName || name)\n        }\n    }, {\n        key: 'facts.compliance.osMinorVersion',\n        title: 'Operating system',\n        props: {\n            width: 40, isStatic: true\n        },\n        ...newInventory && {\n            key: 'osMinorVersion',\n            renderFunc: (osMinorVersion, _id, { osMajorVersion }) => `RHEL ${osMajorVersion}.${osMinorVersion}`\n        }\n    }];\n\n    useEffect(() => {\n        if (selectedSystemIds) {\n            change('systems', selectedSystemIds);\n        }\n\n        if (osMinorVersionCounts) {\n            change('osMinorVersionCounts', osMinorVersionCounts);\n        }\n    }, [selectedSystemIds, osMinorVersionCounts, change]);\n\n    const emptyStateComponent = (<React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                You do not have any <b>RHEL { osMajorVersion }</b> systems connected to Insights and enabled for Compliance.<br/>\n                Policies must be created with at least one system.\n            </Text>\n        </TextContent>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Choose a different operating system, or connect <b>RHEL { osMajorVersion }</b> systems to Insights.\n            </Text>\n        </TextContent>\n        <WizardContextConsumer>\n            { ({ goToStepById }) => <Button onClick={() => goToStepById(1)}>Choose a different operating system</Button> }\n        </WizardContextConsumer>\n    </React.Fragment>);\n\n    const prependComponent = (<React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Select which of your <b>RHEL { osMajorVersion }</b> systems should be included\n                in this policy.<br />\n                Systems can be added or removed at any time.\n            </Text>\n        </TextContent>\n    </React.Fragment>);\n\n    const InvCmp = newInventory ? InventoryTable : SystemsTable;\n\n    return (\n        <React.Fragment>\n            <TextContent className=\"pf-u-mb-md\">\n                <Text component={TextVariants.h1}>\n                    Systems\n                </Text>\n            </TextContent>\n            <Form>\n                <FormGroup>\n                    <InvCmp\n                        prependComponent={prependComponent}\n                        emptyStateComponent={multiversionRules ? emptyStateComponent : undefined}\n                        columns={columns}\n                        remediationsEnabled={false}\n                        compact\n                        showActions={ false }\n                        query={ GET_SYSTEMS_WITHOUT_FAILED_RULES }\n                        defaultFilter={ osMajorVersion && `os_major_version = ${osMajorVersion}` }\n                        enableExport={ false }/>\n                </FormGroup>\n            </Form>\n        </React.Fragment>\n    );\n};\n\nEditPolicySystems.propTypes = {\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    selectedSystemIds: propTypes.array,\n    change: reduxFormPropTypes.change\n};\n\nEditPolicySystems.defaultProps = {\n    selectedSystemIds: [],\n    osMinorVersionCounts: []\n};\n\nconst selector = formValueSelector('policyForm');\nconst mapStateToProps = (state) => ({\n    osMajorVersion: selector(state, 'osMajorVersion'),\n    osMinorVersionCounts: countOsMinorVersions(state.entities?.selectedEntities),\n    selectedSystemIds: (state.entities?.selectedEntities || []).map((e) => (e.id))\n});\n\nexport default compose(\n    connect(mapStateToProps),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicySystems);\n","import React, { useEffect } from 'react';\nimport { compose } from 'redux';\nimport { Field, reduxForm, formValueSelector, propTypes as reduxFormPropTypes } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Form, FormGroup, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { ReduxFormTextInput, ReduxFormTextArea } from 'PresentationalComponents/ReduxFormWrappers/ReduxFormWrappers';\nimport { ProfileThresholdField } from 'PresentationalComponents';\n\nconst EditPolicyDetails = ({ change, policy, refId }) => {\n\n    useEffect(() => {\n        if (policy && policy.refId !== refId) {\n            change('name', `${policy.name}`);\n            change('refId', `${policy.refId}`);\n            change('description', `${policy.description}`);\n        }\n    }, [policy]);\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h1}>\n                    Details\n                </Text>\n            </TextContent>\n            <br/>\n            <Form id='editpolicydetails'>\n                <FormGroup label=\"Policy name\" isRequired fieldId=\"name\">\n                    <Field\n                        component={ReduxFormTextInput}\n                        type='text'\n                        isRequired={true}\n                        id=\"name\"\n                        name=\"name\"\n                        aria-describedby=\"name\" />\n                </FormGroup>\n                <FormGroup label=\"Reference ID\" isRequired fieldId=\"refId\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextInput}\n                        isDisabled\n                        id=\"refId\"\n                        name=\"refId\"\n                        aria-describedby=\"refId\" />\n                </FormGroup>\n                <FormGroup label=\"Description\" fieldId=\"description\">\n                    <Field\n                        type=\"text\"\n                        component={ReduxFormTextArea}\n                        id=\"description\"\n                        name=\"description\"\n                        aria-describedby=\"description\" />\n                </FormGroup>\n                <FormGroup label=\"Business objective\" fieldId=\"businessObjective\">\n                    <Field\n                        type=\"text\"\n                        component={ ReduxFormTextInput }\n                        id=\"businessObjective\"\n                        name=\"businessObjective\"\n                        aria-describedby=\"businessObjective\"\n                        defaultValue={ policy.businessObjective } />\n                </FormGroup>\n                <ProfileThresholdField\n                    showTitle={ false }\n                    previousThreshold={ policy.complianceThreshold } />\n            </Form>\n        </React.Fragment>\n    );\n};\n\nconst selector = formValueSelector('policyForm');\n\nEditPolicyDetails.propTypes = {\n    policy: propTypes.object,\n    refId: propTypes.string,\n    change: reduxFormPropTypes.change\n};\n\nconst mapStateToProps = (state) => {\n    const policy = JSON.parse(selector(state, 'profile'));\n    return {\n        policy,\n        refId: selector(state, 'refId'),\n        initialValues: {\n            name: `${policy.name}`,\n            refId: `${policy.refId}`,\n            description: `${policy.description}`,\n            benchmark: selector(state, 'benchmark'),\n            osMajorVersion: selector(state, 'osMajorVersion'),\n            profile: selector(state, 'profile')\n        }\n    };\n};\n\nexport default compose(\n    connect(mapStateToProps),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: false,\n        forceUnregisterOnUnmount: true\n    })\n)(EditPolicyDetails);\n\nexport { EditPolicyDetails };\n","import React from 'react';\nimport {\n    Text,\n    TextVariants,\n    TextContent,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst REVIEW = gql`\nquery review($benchmarkId: String!) {\n    benchmark(id: $benchmarkId) {\n        id\n        osMajorVersion\n    }\n}\n`;\n\nconst ReviewCreatedPolicy = ({\n    benchmarkId, name, businessObjective, complianceThreshold, parentProfileName, osMinorVersionCounts\n}) => {\n    const { data, error, loading } = useQuery(REVIEW, { variables: { benchmarkId } });\n\n    if (error) { return error; }\n\n    if (loading) { return <Spinner/>; }\n\n    const { benchmark: { osMajorVersion } } = data;\n\n    return (\n        <TextContent>\n            <Text component={TextVariants.h1}>\n                Review\n            </Text>\n            <Text>\n                Review your SCAP policy before finishing.\n            </Text>\n            <Text component={TextVariants.h3}>{ name }</Text>\n            <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>Policy type</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ parentProfileName }</TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>Compliance threshold</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>{ complianceThreshold }%</TextListItem>\n                { businessObjective &&\n                    <React.Fragment>\n                        <TextListItem component={TextListItemVariants.dt}>Business objective</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{ businessObjective }</TextListItem>\n                    </React.Fragment>\n                }\n                <TextListItem component={TextListItemVariants.dt}>Systems</TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                    <TextList component={TextListVariants.dl}>\n                        { osMinorVersionCounts.map(({ osMinorVersion, count }) => (\n                            <React.Fragment key={osMinorVersion}>\n                                <TextListItem component={TextListItemVariants.dt} style={{ 'font-weight': 'normal' }}>\n                                    RHEL {osMajorVersion}.{osMinorVersion}\n                                </TextListItem>\n                                <TextListItem component={TextListItemVariants.dd}>\n                                    { count }\n                                </TextListItem>\n                            </React.Fragment>\n                        )) }\n                    </TextList>\n                </TextListItem>\n            </TextList>\n        </TextContent>\n    );\n};\n\nReviewCreatedPolicy.propTypes = {\n    benchmarkId: propTypes.string,\n    refId: propTypes.string,\n    name: propTypes.string,\n    businessObjective: propTypes.string,\n    complianceThreshold: propTypes.number,\n    parentProfileName: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    }))\n};\n\nconst selector = formValueSelector('policyForm');\n\nexport default connect(\n    state => ({\n        benchmarkId: selector(state, 'benchmark'),\n        refId: selector(state, 'refId'),\n        name: selector(state, 'name'),\n        businessObjective: selector(state, 'businessObjective'),\n        osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n        complianceThreshold: parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n        parentProfileName: JSON.parse(selector(state, 'profile')).name,\n        rulesCount: selector(state, 'selectedRuleRefIds').length\n    })\n)(ReviewCreatedPolicy);\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Title, Button, Bullseye, EmptyState, EmptyStateBody, EmptyStateSecondaryActions,\n    EmptyStateVariant, EmptyStateIcon, List, ListItem\n} from '@patternfly/react-core';\nimport { ProgressBar } from 'PresentationalComponents';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport { reduxForm, formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withApollo } from '@apollo/react-hoc';\nimport usePolicy from 'SmartComponents/EditPolicy/usePolicy';\n\nconst FinishedCreatePolicy = ({\n    onWizardFinish,\n    cloneFromProfileId,\n    description,\n    name,\n    complianceThreshold,\n    businessObjective,\n    refId,\n    benchmarkId,\n    systemIds,\n    selectedRuleRefIds\n}) => {\n    const [percent, setPercent] = useState(0);\n    const [message, setMessage] = useState('This usually takes a minute or two.');\n    const [errors, setErrors] = useState(null);\n    const [failed, setFailed] = useState(false);\n    const updatePolicy = usePolicy();\n\n    const onProgress = (progress) => {\n        setPercent(progress * 100);\n    };\n\n    useEffect(() => {\n        const newPolicy = {\n            cloneFromProfileId,\n            description,\n            name,\n            complianceThreshold,\n            businessObjective: { title: businessObjective },\n            refId,\n            benchmarkId,\n            hosts: systemIds.map((id) => ({ id })),\n            selectedRuleRefIds\n        };\n\n        updatePolicy(null, newPolicy, onProgress).then(() => {\n            setPercent(100);\n            setMessage();\n        }).catch((error) => {\n            setMessage(error.networkError?.message);\n            setErrors(error.networkError?.result?.errors);\n            setFailed(true);\n        });\n    }, []);\n\n    let listErrors;\n    if (errors && Array.isArray(errors) && errors.length > 0) {\n        listErrors = errors.map((error) => (\n            <ListItem key={ error }>{ error }</ListItem>\n        ));\n    }\n\n    let secondaryActions;\n    if (percent === 100 || failed) {\n        secondaryActions = (\n            <Button\n                variant={'primary'}\n                onClick={() => { onWizardFinish(); }}>\n                { failed ? 'Back' : 'Return to application' }\n            </Button>\n        );\n    }\n\n    return (\n        <Bullseye>\n            <EmptyState variant={EmptyStateVariant.full}>\n                <EmptyStateIcon icon={WrenchIcon} />\n                <br/>\n                <Title headingLevel=\"h1\" size='lg'>\n                    Creating policy\n                </Title>\n                <EmptyStateBody>\n                    <ProgressBar percent={percent} failed={failed} />\n                </EmptyStateBody>\n                <EmptyStateBody className={failed && 'wizard-failed-message'}>\n                    { message }\n                </EmptyStateBody>\n                { listErrors &&\n                    <EmptyStateBody className='wizard-failed-errors'>\n                        <List>{ listErrors }</List>\n                    </EmptyStateBody>\n                }\n                <EmptyStateSecondaryActions>\n                    { secondaryActions }\n                </EmptyStateSecondaryActions>\n            </EmptyState>\n        </Bullseye>\n    );\n};\n\nFinishedCreatePolicy.propTypes = {\n    benchmarkId: propTypes.string.isRequired,\n    client: propTypes.object.isRequired,\n    businessObjective: propTypes.object,\n    cloneFromProfileId: propTypes.string.isRequired,\n    refId: propTypes.string.isRequired,\n    name: propTypes.string.isRequired,\n    description: propTypes.string,\n    systemIds: propTypes.array,\n    complianceThreshold: propTypes.number,\n    onWizardFinish: propTypes.func,\n    selectedRuleRefIds: propTypes.arrayOf(propTypes.string).isRequired\n};\n\nexport const selector = formValueSelector('policyForm');\n\nexport default compose(\n    connect(\n        state => ({\n            benchmarkId: selector(state, 'benchmark'),\n            businessObjective: selector(state, 'businessObjective'),\n            cloneFromProfileId: JSON.parse(selector(state, 'profile')).id,\n            refId: selector(state, 'refId'),\n            name: selector(state, 'name'),\n            description: selector(state, 'description'),\n            complianceThreshold: parseFloat(selector(state, 'complianceThreshold')) || 100.0,\n            systemIds: selector(state, 'systems'),\n            selectedRuleRefIds: selector(state, 'selectedRuleRefIds')\n        })\n    ),\n    reduxForm({\n        form: 'policyForm',\n        destroyOnUnmount: true,\n        forceUnregisterOnUnmount: true\n    }),\n    withApollo\n)(FinishedCreatePolicy);\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { formValueSelector } from 'redux-form';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { Wizard } from '@patternfly/react-core';\nimport CreateSCAPPolicy from './CreateSCAPPolicy';\nimport EditPolicyRules from './EditPolicyRules';\nimport EditPolicySystems from './EditPolicySystems';\nimport EditPolicyDetails from './EditPolicyDetails';\nimport ReviewCreatedPolicy from './ReviewCreatedPolicy';\nimport FinishedCreatePolicy from './FinishedCreatePolicy';\nimport { validateBenchmarkPage, validateDetailsPage, validateRulesPage, validateSystemsPage } from './validate';\n\nexport const CreatePolicy = ({\n    benchmark, osMajorVersion, complianceThreshold, name, profile, refId, selectedRuleRefIds, systemIds\n}) => {\n    const history = useHistory();\n    const [stepIdReached, setStepIdReached] = useState(1);\n    const onNext = ({ id }) => {\n        setStepIdReached(stepIdReached < id ? id : stepIdReached);\n    };\n\n    const onClose = () => {\n        history.push('/scappolicies');\n    };\n\n    const steps = [\n        {\n            id: 1,\n            name: 'Create SCAP policy',\n            component: <CreateSCAPPolicy/>,\n            enableNext: validateBenchmarkPage(benchmark, osMajorVersion, profile)\n        },\n        {\n            id: 2,\n            name: 'Details',\n            component: <EditPolicyDetails/>,\n            canJumpTo: stepIdReached >= 2,\n            enableNext: validateDetailsPage(name, refId, complianceThreshold)\n        },\n        {\n            id: 3,\n            name: 'Systems',\n            component: <EditPolicySystems/>,\n            canJumpTo: stepIdReached >= 3,\n            enableNext: validateSystemsPage(systemIds)\n        },\n        {\n            id: 4,\n            name: 'Rules',\n            component: <EditPolicyRules/>,\n            canJumpTo: systemIds?.length > 0 && stepIdReached >= 4,\n            enableNext: validateRulesPage(selectedRuleRefIds)\n        },\n        {\n            id: 5,\n            name: 'Review',\n            component: <ReviewCreatedPolicy/>,\n            nextButtonText: 'Finish',\n            canJumpTo: systemIds?.length > 0 && stepIdReached >= 5\n        },\n        {\n            id: 6,\n            name: 'Finished',\n            component: <FinishedCreatePolicy onWizardFinish={ onClose } />,\n            isFinishedStep: true,\n            canJumpTo: systemIds?.length > 0 && stepIdReached >= 6\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <Wizard\n                isOpen\n                width={ 1220 }\n                onClose={ onClose }\n                title=\"Create SCAP policy\"\n                description=\"Create a new policy for managing SCAP compliance\"\n                steps={ steps }\n                onNext={ onNext } />\n        </React.Fragment>\n    );\n};\n\nCreatePolicy.propTypes = {\n    benchmark: propTypes.string,\n    osMajorVersion: propTypes.string,\n    osMinorVersionCounts: propTypes.arrayOf(propTypes.shape({\n        osMinorVersion: propTypes.number,\n        count: propTypes.number\n    })),\n    complianceThreshold: propTypes.string,\n    businessObjective: propTypes.object,\n    dispatch: propTypes.func,\n    isOpen: propTypes.bool,\n    name: propTypes.string,\n    onWizardFinish: propTypes.func,\n    profile: propTypes.string,\n    refId: propTypes.string,\n    selectedRuleRefIds: propTypes.arrayOf(propTypes.string),\n    systemIds: propTypes.arrayOf(propTypes.string)\n};\n\nCreatePolicy.defaultProps = {\n    isOpen: false\n};\n\nconst selector = formValueSelector('policyForm');\nexport default connect(\n    state => ({\n        benchmark: selector(state, 'benchmark'),\n        osMajorVersion: selector(state, 'osMajorVersion'),\n        osMinorVersionCounts: selector(state, 'osMinorVersionCounts'),\n        businessObjective: selector(state, 'businessObjective'),\n        complianceThreshold: selector(state, 'complianceThreshold') || '100.0',\n        name: selector(state, 'name'),\n        profile: selector(state, 'profile'),\n        refId: selector(state, 'refId'),\n        selectedRuleRefIds: selector(state, 'selectedRuleRefIds'),\n        systemIds: selector(state, 'systems')\n    })\n)(CreatePolicy);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    FormGroup, TextArea, TextInput\n} from '@patternfly/react-core';\nimport { thresholdValid } from '../CreatePolicy/validate';\n\nexport const useThresholdValidate = () => {\n    const [validThreshold, setValidThreshold] = useState(true);\n    return [validThreshold, (threshold) => {\n        const valid = thresholdValid(threshold);\n        setValidThreshold(valid);\n        return valid;\n    }];\n};\n\nconst EditPolicyDetailsTab = ({ policy, setUpdatedPolicy }) => {\n    const [validThreshold, validateThreshold] = useThresholdValidate();\n\n    return <React.Fragment>\n        <FormGroup label=\"Policy description\" isRequired fieldId=\"description\">\n            <TextArea\n                style={ { width: 800, height: 110 } }\n                isRequired\n                type=\"text\"\n                id=\"description\"\n                name=\"description\"\n                aria-describedby=\"description\"\n                defaultValue={ policy.description }\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) => ({\n                        ...policy,\n                        description: value\n                    }));\n                }} />\n        </FormGroup>\n\n        <FormGroup label=\"Business objective\" fieldId=\"business-objective\">\n            <TextInput\n                type=\"text\"\n                style={ { width: 300 } }\n                id=\"business-objective\"\n                name=\"business-objective\"\n                aria-describedby=\"business-objective\"\n                defaultValue={ policy?.businessObjective?.title }\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) =>({\n                        ...policy,\n                        businessObjective: {\n                            ...policy.businessObjective,\n                            title: value\n                        }\n                    }));\n                }} />\n        </FormGroup>\n\n        <FormGroup\n            validated={ validThreshold ? 'default' : 'error' }\n            label='Compliance threshold (%)'\n            fieldId='policy-threshold'\n            helperTextInvalid='Threshold has to be a number between 0 and 100'\n            helperText='A value of 95% or higher is recommended'>\n            <TextInput\n                type='number'\n                style={ { width: 150 } }\n                name='compliance-threshold'\n                id='compliance-threshold'\n                defaultValue={ policy.complianceThreshold }\n                aria-describedby=\"policy-threshold\"\n                onChange={ (value) => {\n                    setUpdatedPolicy((policy) =>({\n                        ...policy,\n                        complianceThreshold: value,\n                        complianceThresholdValid: validateThreshold(value)\n                    }));\n                }} />\n        </FormGroup>\n    </React.Fragment>;\n};\n\nEditPolicyDetailsTab.propTypes = {\n    policy: propTypes.shape({\n        description: propTypes.string,\n        businessObjective: propTypes.object,\n        complianceThreshold: propTypes.oneOfType([\n            propTypes.string,\n            propTypes.number\n        ])\n    }),\n    setUpdatedPolicy: propTypes.func\n};\n\nexport default EditPolicyDetailsTab;\n","import React, { useLayoutEffect } from 'react';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport gql from 'graphql-tag';\nimport propTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport EmptyTable from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { StateViewWithError, StateViewPart, TabbedRules } from 'PresentationalComponents';\nimport useCollection from 'Utilities/hooks/api/useCollection';\nimport { sortingByProp } from 'Utilities/helpers';\n\nconst PROFILES_QUERY = gql`\nquery Profiles($filter: String!){\n    profiles(search: $filter){\n        edges {\n            node {\n                id\n                name\n                refId\n                osMinorVersion\n                osMajorVersion\n                policy {\n                    id\n\n                }\n                policyType\n                benchmark {\n                    id\n                    refId\n                    latestSupportedOsMinorVersions\n                    osMajorVersion\n                }\n                ssgVersion\n                rules {\n                    id\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n    }\n}\n`;\n\nconst getBenchmarkBySupportedOsMinor = (benchmarks, osMinorVersion) => (\n    benchmarks.find((benchmark) =>\n        benchmark.latestSupportedOsMinorVersions?.includes(osMinorVersion)\n    )\n);\n\nconst getBenchmarkProfile = (benchmark, profileRefId) => (\n    benchmark.profiles.find((benchmarkProfile) => (benchmarkProfile.refId === profileRefId))\n);\n\nconst EditPolicyRulesTab = ({ handleSelect, policy, selectedRuleRefIds, osMinorVersionCounts }) => {\n    const osMajorVersion = policy?.osMajorVersion;\n    const benchmarkSearch = `os_major_version = ${ osMajorVersion } ` +\n        `and latest_supported_os_minor_version ^ (${ Object.keys(osMinorVersionCounts).sort().join(',') })`;\n\n    const { data: benchmarks, loading: benchmarksLoading } = useCollection('benchmarks', {\n        type: 'benchmark',\n        include: ['profiles'],\n        params: { search: benchmarkSearch }\n    }, [benchmarkSearch]);\n\n    let profileIds = [];\n    let tabsData = Object.values(osMinorVersionCounts).sort(\n        sortingByProp('osMinorVersion', 'desc')\n    ).map(({ osMinorVersion, count: systemCount }) => {\n        osMinorVersion = `${osMinorVersion}`;\n        let profile = policy.policy.profiles.find((profile) => (profile.osMinorVersion === osMinorVersion));\n\n        if (!profile && benchmarks) {\n            const benchmark = getBenchmarkBySupportedOsMinor(benchmarks.collection, osMinorVersion);\n            if (benchmark) {\n                const benchmarkProfile = getBenchmarkProfile(benchmark, policy.refId);\n                profile = policy.policy.profiles.find((profile) => (profile.parentProfileId === benchmarkProfile.id));\n\n                profile = {\n                    ...benchmarkProfile,\n                    benchmark: benchmarkProfile.relationships?.benchmark?.data,\n                    rules: benchmarkProfile.relationships?.rules?.data,\n                    ...profile\n                };\n            }\n        }\n\n        return {\n            profile,\n            systemCount,\n            newOsMinorVersion: osMinorVersion,\n            selectedRuleRefIds: selectedRuleRefIds?.find(({ id }) => id === profile?.id)?.ruleRefIds\n        };\n    });\n    tabsData = tabsData.filter(({ profile, newOsMinorVersion }) => !!profile && newOsMinorVersion);\n\n    tabsData.forEach((tab) => (profileIds.push(tab.profile.id)));\n\n    const filter = `${ (profileIds || []).map((i) => (`id = ${ i }`)).join(' OR ') }`;\n    const { data: profilesData, error, loading } = useQuery(PROFILES_QUERY, {\n        variables: {\n            filter\n        },\n        skip: filter.length === 0\n    });\n    const dataState = ((tabsData?.length > 0) ? profilesData : undefined);\n    const loadingState = ((loading || benchmarksLoading) ? true : undefined);\n\n    useLayoutEffect(() => {\n        if (profilesData) {\n            const profiles = profilesData?.profiles.edges.map((p) => (p.node)) || [];\n            profiles.forEach((profile) => {\n                const foundSelection = selectedRuleRefIds?.find(({ id }) => id === profile?.id);\n                if (!foundSelection) {\n                    const refIds = profile.rules.map((rule) => (rule.refId));\n                    handleSelect(profile, refIds);\n                }\n            });\n        }\n    }, [profilesData]);\n\n    return <StateViewWithError stateValues={ { error, data: dataState, loading: loadingState } }>\n        <StateViewPart stateKey=\"loading\">\n            <EmptyTable><Spinner/></EmptyTable>\n        </StateViewPart>\n        <StateViewPart stateKey=\"data\">\n            <TextContent>\n                <Text>\n                    Different release versions of RHEL are associated with different versions of\n                    the SCAP Security Guide (SSG), therefore each release must be customized independently.\n                </Text>\n            </TextContent>\n            <TabbedRules\n                tabsData={ tabsData }\n                remediationsEnabled={ false }\n                selectedFilter\n                level={ 1 }\n                handleSelect={ handleSelect } />\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nEditPolicyRulesTab.propTypes = {\n    handleSelect: propTypes.func,\n    policy: propTypes.object,\n    osMinorVersionCounts: propTypes.shape({\n        osMinorVersion: propTypes.shape({\n            osMinorVersion: propTypes.number,\n            count: propTypes.number\n        })\n    }),\n    selectedRuleRefIds: propTypes.array\n};\n\nexport default EditPolicyRulesTab;\n","import React from 'react';\nimport { Alert, AlertActionLink, Text, TextContent } from '@patternfly/react-core';\nimport { useSelector } from 'react-redux';\nimport { InventoryTable } from 'SmartComponents';\nimport { GET_SYSTEMS_WITHOUT_FAILED_RULES } from '../SystemsTable/constants';\nimport propTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\n\nconst EditPolicySystemsTab = ({ osMajorVersion, policyOsMinorVersions }) => {\n    const { push, location } = useHistory();\n    const selectedSystemOsMinorVersions = useSelector(state => (\n        state?.entities?.selectedEntities?.map(entity => `${entity.osMinorVersion}`)\n    ));\n\n    const newOsMinorVersions = () => (\n        selectedSystemOsMinorVersions?.find((systemOsMinorVersion) => (\n            !policyOsMinorVersions.includes(systemOsMinorVersion)\n        ))\n    );\n\n    const columns = [{\n        key: 'display_name',\n        title: 'Name',\n        props: {\n            width: 40, isStatic: true\n        },\n        renderFunc: (displayName, _id, { name }) => (displayName || name)\n    }, {\n        key: 'osMinorVersion',\n        title: 'Operating system',\n        props: {\n            width: 40, isStatic: true\n        },\n        renderFunc: (osMinorVersion, _id, { osMajorVersion }) => `RHEL ${osMajorVersion}.${osMinorVersion}`\n    }];\n\n    const emptyStateComponent = (<React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                You do not have any <b>RHEL { osMajorVersion }</b> systems connected to Insights and enabled for Compliance.\n            </Text>\n        </TextContent>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Connect RHEL { osMajorVersion } systems to Insights.\n            </Text>\n        </TextContent>\n    </React.Fragment>);\n\n    const prependComponent = (<React.Fragment>\n        <TextContent className=\"pf-u-mb-md\">\n            <Text>\n                Select which of your <b>RHEL { osMajorVersion }</b> systems should be included\n                in this policy.\n            </Text>\n        </TextContent>\n    </React.Fragment>);\n\n    return (\n        <React.Fragment>\n            <InventoryTable\n                prependComponent={prependComponent}\n                emptyStateComponent={emptyStateComponent}\n                columns={columns}\n                compact\n                showActions={ false }\n                query={ GET_SYSTEMS_WITHOUT_FAILED_RULES }\n                defaultFilter={ osMajorVersion && `os_major_version = ${osMajorVersion}` }\n                enableExport={ false }\n                remediationsEnabled={ false }\n            />\n            {newOsMinorVersions() && <Alert\n                variant=\"info\"\n                isInline\n                title=\"You selected a system that has a release version previously not included in this policy.\"\n                actionLinks={\n                    <AlertActionLink onClick={ () => push({ ...location, hash: '#rules' }) }>Open rule editing</AlertActionLink>\n                }>\n                <p>If you have edited any rules for this policy, you will need to do so for this release version as well.</p>\n            </Alert>}\n        </React.Fragment>\n    );\n};\n\nEditPolicySystemsTab.propTypes = {\n    osMajorVersion: propTypes.string,\n    policyOsMinorVersions: propTypes.arrayOf(propTypes.number)\n};\n\nexport default EditPolicySystemsTab;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Button, Form, Modal, Tab, TabTitleText, Spinner } from '@patternfly/react-core';\nimport { RoutedTabs } from 'PresentationalComponents';\nimport { uniq } from 'Utilities/helpers';\nimport { useLinkToBackground, useAnchor } from 'Utilities/Router';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport EditPolicyDetailsTab from './EditPolicyDetailsTab';\nimport EditPolicyRulesTab from './EditPolicyRulesTab';\nimport EditPolicySystemsTab from './EditPolicySystemsTab';\nimport usePolicy from './usePolicy';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport { mapCountOsMinorVersions } from 'Store/Reducers/SystemStore';\n\nexport const MULTIVERSION_QUERY = gql`\nquery Profile($policyId: String!){\n    profile(id: $policyId) {\n        id\n        name\n        refId\n        external\n        description\n        totalHostCount\n        compliantHostCount\n        complianceThreshold\n        majorOsVersion\n        osMajorVersion\n        lastScanned\n        policyType\n        policy {\n            id\n            name\n            refId\n            profiles {\n                id\n                ssgVersion\n                parentProfileId\n                name\n                refId\n                osMinorVersion\n                osMajorVersion\n                benchmark {\n                    id\n                    title\n                    latestSupportedOsMinorVersions\n                    osMajorVersion\n                }\n                rules {\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n        businessObjective {\n            id\n            title\n        }\n        hosts {\n            id\n            osMinorVersion\n            osMajorVersion\n        }\n    }\n}\n`;\n\nconst profilesToOsMinorMap = (profiles, hosts) => (\n    (profiles || []).reduce((acc, profile) => {\n        if (profile.osMinorVersion !== '') {\n            acc[profile.osMinorVersion] ||= { osMinorVersion: profile.osMinorVersion, count: 0 };\n        }\n\n        return acc;\n    }, mapCountOsMinorVersions(hosts || []))\n);\n\nexport const EditPolicy = ({ route }) => {\n    const { policy_id: policyId } = useParams();\n    let { data } = useQuery(MULTIVERSION_QUERY, {\n        variables: { policyId }\n    });\n    const policy = data?.profile;\n    const policyProfiles = policy?.policy?.profiles || [];\n    const newInventory = useFeature('newInventory');\n    const dispatch = useDispatch();\n    const anchor = useAnchor();\n    const [updatedPolicy, setUpdatedPolicy] = useState(null);\n    const [selectedRuleRefIds, setSelectedRuleRefIds] = useState([]);\n    const [osMinorVersionCounts, setOsMinorVersionCounts] = useState({});\n    const updatePolicy = usePolicy();\n    const linkToBackground = useLinkToBackground('/scappolicies');\n    const [isSaving, setIsSaving] = useState();\n    const selectedEntities = useSelector((state) => (state?.entities?.selectedEntities));\n    const saveEnabled = updatedPolicy && !updatedPolicy.complianceThresholdValid;\n\n    const linkToBackgroundWithHash = () => {\n        newInventory && dispatch({\n            type: 'SELECT_ENTITIES',\n            payload: { ids: [] }\n        });\n        linkToBackground({ hash: anchor });\n    };\n\n    const handleRuleSelect = (profile, newSelectedRuleRefIds) => {\n        const filteredSelection = selectedRuleRefIds.filter((selectedProfile) =>\n            selectedProfile.id !== profile.id\n        );\n        setSelectedRuleRefIds([\n            { id: profile.id, ruleRefIds: newSelectedRuleRefIds },\n            ...filteredSelection\n        ]);\n    };\n\n    const onSave = () => {\n        if (isSaving) { return; }\n\n        setIsSaving(true);\n        updatePolicy(policy, updatedPolicy).then(() => {\n            setIsSaving(false);\n            linkToBackgroundWithHash();\n        }).catch(() => {\n            // TODO report error\n            setIsSaving(false);\n            linkToBackgroundWithHash();\n        });\n    };\n\n    const actions = [\n        <Button\n            isDisabled={ saveEnabled }\n            key='save'\n            variant='primary'\n            spinnerAriaValueText='Saving'\n            isLoading={ isSaving }\n            onClick={ onSave }>\n            Save\n        </Button>,\n        <Button\n            key='cancel'\n            variant='secondary'\n            onClick={ () => linkToBackgroundWithHash() }>\n            Cancel\n        </Button>\n    ];\n\n    const updateSelectedRuleRefIds = () => {\n        if (policy) {\n            setSelectedRuleRefIds(policyProfiles.map((policyProfile) => ({\n                id: policyProfile.id,\n                ruleRefIds: policyProfile.rules.map((rule) => (rule.refId))\n            })));\n        }\n    };\n\n    useEffect(() => {\n        setUpdatedPolicy({\n            ...updatedPolicy,\n            hosts: selectedEntities ? selectedEntities : []\n        });\n        updateSelectedRuleRefIds();\n\n        setOsMinorVersionCounts(\n            profilesToOsMinorMap(policyProfiles, selectedEntities)\n        );\n    }, [selectedEntities]);\n\n    useEffect(() => setUpdatedPolicy({ ...updatedPolicy, selectedRuleRefIds }), [selectedRuleRefIds]);\n\n    useEffect(() => {\n        if (policy) {\n            const complianceThresholdValid =\n                (policy.complianceThreshold < 101 && policy.complianceThreshold > 0);\n            setUpdatedPolicy({\n                ...policy,\n                complianceThresholdValid\n            });\n            updateSelectedRuleRefIds();\n\n            dispatch({\n                type: 'SELECT_ENTITIES',\n                payload: { ids: policy?.hosts || [] }\n            });\n            setOsMinorVersionCounts(\n                profilesToOsMinorMap(policyProfiles, policy.hosts)\n            );\n        }\n    }, [policy]);\n\n    useTitleEntity(route, policy?.name);\n\n    return <Modal\n        isOpen\n        style={ { height: '400px' } }\n        width={ 1000 }\n        title={ `Edit ${ policy ? policy.name : '' }` }\n        onClose={ () => linkToBackgroundWithHash() }\n        actions={ actions }>\n        { policy ? <Form>\n            <RoutedTabs defaultTab='details'>\n                <Tab eventKey='details' title={<TabTitleText>Details</TabTitleText>}>\n                    <EditPolicyDetailsTab\n                        policy={ policy }\n                        setUpdatedPolicy={ setUpdatedPolicy } />\n                </Tab>\n\n                <Tab eventKey='rules' title={ <TabTitleText>Rules</TabTitleText> }>\n                    <EditPolicyRulesTab\n                        policy={ policy }\n                        handleSelect={ handleRuleSelect }\n                        selectedRuleRefIds={ selectedRuleRefIds }\n                        osMinorVersionCounts={ osMinorVersionCounts }\n                    />\n                </Tab>\n\n                <Tab eventKey='systems' title={ <TabTitleText>Systems</TabTitleText> }>\n                    <EditPolicySystemsTab\n                        osMajorVersion={ policy.osMajorVersion }\n                        policyOsMinorVersions={ uniq(policyProfiles.map(profile => profile.osMinorVersion)) }\n                    />\n                </Tab>\n            </RoutedTabs>\n        </Form> : <Spinner /> }\n    </Modal>;\n};\n\nEditPolicy.propTypes = {\n    route: propTypes.object\n};\n\nexport default EditPolicy;\n","import { useMutation } from '@apollo/react-hooks';\nimport {\n    ASSOCIATE_SYSTEMS_TO_PROFILES, CREATE_BUSINESS_OBJECTIVE, UPDATE_PROFILE, CREATE_PROFILE, ASSOCIATE_RULES_TO_PROFILE\n} from 'Utilities/graphql/mutations';\n\nconst useCreateBusinessObjective = () => {\n    const [create] = useMutation(CREATE_BUSINESS_OBJECTIVE);\n\n    return async (policy, newBusinessObjective) => {\n        if (policy?.businessObjective?.title === newBusinessObjective?.title) {\n            return policy?.businessObjective?.id;\n        } else if (newBusinessObjective?.title === '') {\n            return null;\n        } else {\n            const { data, error } = await create({ variables: {\n                input: { title: newBusinessObjective.title }\n            } });\n\n            if (error) { throw error; }\n\n            return data.createBusinessObjective.businessObjective.id;\n        }\n    };\n};\n\nconst useAssociateSystems = () => {\n    const [associateSystems] = useMutation(ASSOCIATE_SYSTEMS_TO_PROFILES);\n\n    return async ({ id }, hosts) => {\n        const { data, error } = await associateSystems({\n            variables: { input: {\n                id,\n                systemIds: hosts.map((h) => (h.id))\n            } }\n        });\n\n        if (error) { throw error; }\n\n        return data?.associateSystems?.profile;\n    };\n};\n\nconst useAssociateRules = () => {\n    const [associateRules] = useMutation(ASSOCIATE_RULES_TO_PROFILE);\n\n    return async ({ id, ruleRefIds }, profiles) => {\n        const profile = profiles.find((profile) => (\n            profile.id === id || profile.parentProfileId === id\n        ));\n        const ruleInput = {\n            id: profile?.id,\n            ruleRefIds\n        };\n\n        const { error } = await associateRules({ variables: { input: ruleInput } });\n        if (error) { throw error; }\n    };\n};\n\nconst usePolicy = () => {\n    const createBusinessObjective = useCreateBusinessObjective();\n    const [updateProfile] = useMutation(UPDATE_PROFILE);\n    const [createProfile] = useMutation(CREATE_PROFILE);\n    const associateSystems = useAssociateSystems();\n    const associateRules = useAssociateRules();\n\n    return async (policy, updatedPolicy, onProgress) => {\n        const selectedRuleRefIds = updatedPolicy?.selectedRuleRefIds || [];\n\n        const expectedUpdates = 3 + selectedRuleRefIds.length;\n        let progress = 0;\n        const dispatchProgress = () => {\n            if (onProgress) {\n                onProgress((++progress) / expectedUpdates);\n            }\n        };\n\n        const businessObjectiveId = await createBusinessObjective(policy, updatedPolicy?.businessObjective);\n        dispatchProgress();\n\n        let policyInput = {\n            name: updatedPolicy.name,\n            description: updatedPolicy.description,\n            complianceThreshold: parseFloat(updatedPolicy.complianceThreshold)\n        };\n\n        if (businessObjectiveId) {\n            policyInput.businessObjectiveId = businessObjectiveId;\n        }\n\n        if (policy === null) {\n            policyInput.cloneFromProfileId = updatedPolicy.cloneFromProfileId;\n            policyInput.refId = updatedPolicy.refId;\n            policyInput.benchmarkId = updatedPolicy.benchmarkId;\n\n            let {\n                data: { createProfile: { profile: { id } } },\n                error\n            } = await createProfile({ variables: { input: policyInput } });\n\n            if (error) { throw error; }\n\n            dispatchProgress();\n            policy = { id };\n        } else {\n            policyInput.id = policy.id;\n\n            let { error } = await updateProfile({ variables: { input: policyInput } });\n            if (error) { throw error; }\n\n            dispatchProgress();\n        }\n\n        const { policy: { profiles } } = await associateSystems(policy, updatedPolicy.hosts);\n        dispatchProgress();\n\n        for (const profileSelectedRuleRefIds of selectedRuleRefIds) {\n            await associateRules(profileSelectedRuleRefIds, profiles);\n            dispatchProgress();\n        }\n    };\n};\n\nexport default usePolicy;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { UnsupportedSSGVersion } from 'PresentationalComponents';\n\nconst SSGVersion = ({ supported, ssgVersion }) => {\n    ssgVersion ||= 'Not available';\n    return supported ? ssgVersion :\n        <UnsupportedSSGVersion messageVariant='singular'>\n            { ssgVersion }\n        </UnsupportedSSGVersion>;\n};\n\nSSGVersion.propTypes = {\n    supported: propTypes.bool,\n    ssgVersion: propTypes.string\n};\n\nexport default {\n    SSGVersion\n};\n","import React, { memo } from 'react';\nimport propTypes from 'prop-types';\nimport { withApollo } from '@apollo/react-hoc';\nimport { connect } from 'react-redux';\nimport gql from 'graphql-tag';\nimport { pickBy } from 'lodash';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport ComplianceRemediationButton\n    from '@redhat-cloud-services/frontend-components-inventory-compliance/ComplianceRemediationButton';\nimport registry from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport {\n    NoSystemsTableBody\n} from 'PresentationalComponents';\n\nimport { exportFromState, selectAll, clearSelection, SELECT_ENTITY } from 'Store/ActionTypes';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport { FilterConfigBuilder } from '@redhat-cloud-services/frontend-components-inventory-compliance/Utilities';\nimport { entitiesReducer } from 'Store/Reducers/SystemStore';\nimport {\n    DEFAULT_SYSTEMS_FILTER_CONFIGURATION, COMPLIANT_SYSTEMS_FILTER_CONFIGURATION,\n    systemsPolicyFilterConfiguration, systemsOsFilterConfiguration\n} from '@/constants';\nimport {\n    ErrorPage,\n    StateView,\n    StateViewPart\n} from 'PresentationalComponents';\nimport { TableVariant } from '@patternfly/react-table';\nimport { Alert } from '@patternfly/react-core';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\n\nexport const GET_SYSTEMS = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    refId\n                    lastScanned\n                    compliant\n                    external\n                    score\n                    supported\n                    ssgVersion\n                    rules {\n                        refId\n                        title\n                        compliant\n                        remediationAvailable\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const GET_SYSTEMS_WITHOUT_FAILED_RULES = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    lastScanned\n                    external\n                    compliant\n                    score\n                    supported\n                    ssgVersion\n                    policy {\n                        id\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nconst initFilterState = (filterConfig) => (\n    pickBy(filterConfig.initialDefaultState(), (value) => (!!value))\n);\n\nconst initialState = {\n    page: 1\n};\n\nconst policyFilter = (policies, osFilter) => ([\n    ...systemsPolicyFilterConfiguration(policies),\n    ...(osFilter ? systemsOsFilterConfiguration(policies) : [])\n]);\n\n@registry()\nclass SystemsTable extends React.Component {\n    inventory = React.createRef();\n    filterConfig = new FilterConfigBuilder([\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(this.props.compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(this.props.policies && this.props.policies.length > 0 ?\n            policyFilter(this.props.policies, this.props.showOsFilter) : [])\n    ]);\n    chipBuilder = this.filterConfig.getChipBuilder();\n    filterBuilder = this.filterConfig.getFilterBuilder();\n\n    state = {\n        ...initialState,\n        policyId: this.props.policyId,\n        perPage: 50,\n        totalCount: 0,\n        activeFilters: initFilterState(this.filterConfig)\n    }\n\n    componentDidMount = () => {\n        const { clearAll, selectedEntities } = this.props;\n        if (selectedEntities && selectedEntities.length > 0) {\n            clearAll();\n        }\n\n        (this.props.preselectedSystems ?\n            Promise.resolve(this.props.selectEntities(this.props.preselectedSystems)) : Promise.resolve())\n        .then(() => {\n            this.updateSystems();\n        });\n    }\n\n    componentDidUpdate = (prevProps) => {\n        if (prevProps.complianceThreshold !== this.props.complianceThreshold) {\n            this.updateSystems();\n        }\n    }\n\n    onRefresh = ({ page, per_page: perPage, ...options }) => {\n        const { showAllSystems } = this.props;\n        if (showAllSystems && this.inventory && this.inventory.current) {\n            this.setState({ page, perPage }, () => { this.inventory.current.onRefreshData({\n                page, perPage, ...options, per_page: perPage // eslint-disable-line camelcase\n            }); }\n            );\n        } else {\n            this.setState({ page, perPage }, () => this.updateSystems().then(() => {\n                if (this.inventory && this.inventory.current) {\n                    this.inventory.current.onRefreshData({\n                        page, perPage, ...options, per_page: perPage // eslint-disable-line camelcase\n                    });\n                }\n            }));\n        }\n    }\n\n    fetchSystems = () => {\n        const { defaultFilter, client, showOnlySystemsWithTestResults, remediationsEnabled } = this.props;\n        const { policyId, perPage, page, activeFilters } = this.state;\n        let filter = [\n            defaultFilter,\n            showOnlySystemsWithTestResults && 'has_test_results = true',\n            this.filterBuilder.buildFilterString(activeFilters)\n        ].filter((e)=>!!e).join(' and ');\n\n        let variables = { filter, perPage, page, policyId };\n\n        return client.query({\n            query: remediationsEnabled ? GET_SYSTEMS : GET_SYSTEMS_WITHOUT_FAILED_RULES,\n            fetchResults: true,\n            fetchPolicy: 'no-cache',\n            variables\n        });\n    }\n\n    updateSystems = () => {\n        const prevSystems = this.props.systems.map((s) => s.node.id).sort();\n        return this.fetchSystems().then((items) => this.props.updateSystems({\n            systems: items.data.systems.edges,\n            systemsCount: items.data.systems.totalCount\n        })\n        ).then(() => {\n            const newSystems = this.props.systems.map((s) => s.node.id).sort();\n            if (JSON.stringify(newSystems) === JSON.stringify(prevSystems)) {\n                this.props.updateRows();\n            }\n        }).catch((error) => {\n            this.setState(prevState => ({ ...prevState, error }));\n        });\n    }\n\n    onExportSelect = (_, format) => (\n        this.props.exportFromState(format)\n    )\n\n    onFilterUpdate = (filter, selectedValues) => {\n        this.props.updateSystems({\n            systems: [],\n            systemsCount: 0\n        });\n        this.setState({\n            ...initialState,\n            activeFilters: {\n                ...this.state.activeFilters,\n                [filter]: selectedValues\n            }\n        }, this.updateSystems);\n    }\n\n    deleteFilter = (chips) => {\n        const activeFilters =  this.filterConfig.removeFilterWithChip(\n            chips, this.state.activeFilters\n        );\n        this.setState({\n            ...initialState,\n            activeFilters\n        }, this.updateSystems);\n    }\n\n    clearAllFilter = () => {\n        this.setState({\n            ...initialState,\n            activeFilters: initFilterState(this.filterConfig)\n        }, this.updateSystems);\n    }\n\n    onFilterDelete = (_event, chips, clearAll = false) => {\n        clearAll ? this.clearAllFilter() : this.deleteFilter(chips[0]);\n    }\n\n    onBulkSelect = () => {\n        const { selectedEntities, selectAll, clearSelection, allSelectedOnPage } = this.props;\n\n        if (selectedEntities.length === 0 ||\n            (selectedEntities.length > 0 && !allSelectedOnPage)) {\n            selectAll();\n        } else {\n            clearSelection();\n        }\n    }\n\n    isExportDisabled = () => {\n        const { total, selectedEntities } = this.props;\n        return (total || 0) === 0 && selectedEntities.length === 0;\n    }\n\n    render() {\n        const {\n            remediationsEnabled, compact, enableExport, showAllSystems, showActions, showComplianceSystemsInfo,\n            selectedEntities, selectedEntitiesIds, systems, total, policyId, systemProps, columns\n        } = this.props;\n        const {\n            page, perPage, activeFilters, error\n        } = this.state;\n        let noError;\n        const filterConfig = this.filterConfig.buildConfiguration(\n            this.onFilterUpdate,\n            activeFilters,\n            { hideLabel: true }\n        );\n        const filterChips = this.chipBuilder.chipsFor(this.state.activeFilters);\n        const exportConfig = enableExport ? {\n            isDisabled: this.isExportDisabled(),\n            onSelect: this.onExportSelect\n        } : {};\n        const inventoryTableProps = {\n            ...systemProps,\n            onRefresh: this.onRefresh,\n            ref: this.inventory,\n            page,\n            perPage,\n            exportConfig,\n            tableProps: {\n                canSelectAll: false\n            },\n            bulkSelect: {\n                checked: selectedEntities.length > 0 ?\n                    (this.props.allSelectedOnPage ? true : null)\n                    : false,\n                onSelect: this.onBulkSelect,\n                count: selectedEntities.length,\n                label: selectedEntities.length > 0 ? `${ selectedEntities.length } Selected` : undefined\n            }\n        };\n\n        if (showActions) {\n            inventoryTableProps.actions = [{\n                title: 'View in inventory',\n                onClick: (_event, _index, { id }) => {\n                    const beta = window.location.pathname.split('/')[1] === 'beta';\n                    window.location.href = `${window.location.origin}${beta ? '/beta' : ''}/insights/inventory/${id}`;\n                }\n            }];\n        }\n\n        if (!showAllSystems) {\n            inventoryTableProps.total = total;\n            inventoryTableProps.items = systems.map((edge) => edge.node.id);\n            inventoryTableProps.filterConfig = filterConfig;\n            inventoryTableProps.activeFiltersConfig = {\n                filters: filterChips,\n                onDelete: this.onFilterDelete\n            };\n        }\n\n        if (compact) {\n            inventoryTableProps.variant = TableVariant.compact;\n        }\n\n        if (error === undefined) {\n            noError = true;\n        }\n\n        if (policyId && total === 0 && Object.keys(activeFilters).length === 0) {\n            inventoryTableProps.tableProps.rows = [{ cells: [{ title: <NoSystemsTableBody /> }] }];\n            inventoryTableProps.tableProps.columns = [];\n            inventoryTableProps.hasItems = false;\n            inventoryTableProps.hasCheckbox = false;\n        }\n\n        if (!showAllSystems && remediationsEnabled) {\n            inventoryTableProps.dedicatedAction = <ComplianceRemediationButton\n                allSystems={ systemsWithRuleObjectsFailed(systems.filter((edge) => (\n                    selectedEntitiesIds.includes(edge.node.id)\n                )).map(edge => edge.node)) }\n                selectedRules={ [] } />;\n        }\n\n        return (\n            <StateView stateValues={{ error, noError }}>\n                <StateViewPart stateKey='error'>\n                    <ErrorPage error={error}/>\n                </StateViewPart>\n                <StateViewPart stateKey='noError'>\n\n                    { showComplianceSystemsInfo && <Alert\n                        isInline\n                        variant=\"info\"\n                        title={ 'The list of systems in this view is different than those that appear in the Inventory. ' +\n                            'Only systems previously or currently associated with compliance policies are displayed.' } /> }\n                    <InventoryTable\n                        { ...inventoryTableProps }\n                        fallback={<SkeletonTable colSize={2} rowSize={15} />}\n                        onLoad={({ INVENTORY_ACTION_TYPES, mergeWithEntities }) => {\n                            this.getRegistry().register({\n                                ...mergeWithEntities(\n                                    entitiesReducer(\n                                        INVENTORY_ACTION_TYPES, columns, showAllSystems\n                                    ))\n                            });\n                        }}\n                    />\n                </StateViewPart>\n            </StateView>\n        );\n    }\n}\n\nSystemsTable.propTypes = {\n    allSelectedOnPage: propTypes.bool,\n    clearAll: propTypes.func,\n    clearInventoryFilter: propTypes.func,\n    clearSelection: propTypes.func,\n    client: propTypes.object,\n    columns: propTypes.array,\n    compact: propTypes.bool,\n    complianceThreshold: propTypes.number,\n    compliantFilter: propTypes.bool,\n    enableExport: propTypes.bool,\n    error: propTypes.object,\n    exportFromState: propTypes.func,\n    policies: propTypes.array,\n    policyId: propTypes.string,\n    defaultFilter: propTypes.string,\n    preselectedSystems: propTypes.array,\n    remediationsEnabled: propTypes.bool,\n    selectAll: propTypes.func,\n    selectEntities: propTypes.func,\n    selectedEntities: propTypes.array,\n    selectedEntitiesIds: propTypes.array,\n    showActions: propTypes.bool,\n    showAllSystems: propTypes.bool,\n    showOnlySystemsWithTestResults: propTypes.bool,\n    showOsFilter: propTypes.bool,\n    systems: propTypes.array,\n    total: propTypes.number,\n    updateRows: propTypes.func,\n    updateSystems: propTypes.func,\n    systemProps: propTypes.shape({\n        isFullView: propTypes.bool\n    }),\n    showComplianceSystemsInfo: propTypes.bool\n};\n\nSystemsTable.defaultProps = {\n    remediationsEnabled: true,\n    compact: false,\n    enableExport: true,\n    showAllSystems: false,\n    complianceThreshold: 0,\n    showOnlySystemsWithTestResults: false,\n    showActions: true,\n    compliantFilter: false,\n    selectedEntities: [],\n    selectedEntitiesIds: [],\n    systems: [],\n    clearAll: () => ({}),\n    exportFromState: () => ({}),\n    systemProps: {},\n    showComplianceSystemsInfo: false\n};\n\nconst mapStateToProps = state => {\n    if (state.entities === undefined || state.entities.rows === undefined) {\n        return { selectedEntities: [], systems: [] };\n    }\n\n    const allSelectedOnPage = state.entities.rows.filter((row) => (\n        !(state.entities.selectedEntities || []).map((e) => e.id).includes(row.id)\n    )).length === 0;\n\n    return {\n        allSelectedOnPage,\n        selectedEntities: state.entities.selectedEntities,\n        selectedEntitiesIds: (state.entities.selectedEntities || []).map((e) => (e.id)),\n        systems: state.entities.systems,\n        total: state.entities.total\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clearInventoryFilter: () => dispatch({ type: 'CLEAR_FILTERS' }),\n        exportFromState: (format) => dispatch(exportFromState(format)),\n        updateSystems: (args) => {\n            dispatch({\n                type: 'UPDATE_SYSTEMS',\n                ...args\n            });\n        },\n        updateRows: () => dispatch({ type: 'UPDATE_ROWS' }),\n        selectAll: () => dispatch(selectAll()),\n        clearSelection: () => dispatch(clearSelection()),\n        clearAll: () => dispatch({\n            type: SELECT_ENTITY,\n            payload: { clearAll: true }\n        }),\n        selectEntities: (ids) => dispatch({\n            type: 'SELECT_ENTITIES',\n            payload: { ids }\n        })\n    };\n};\n\n// eslint-disable-next-line react/display-name\nconst ConnectedSystemsTable = memo((props) => {\n    return <SystemsTable {...props} />;\n});\n\nexport { default as Cells } from './Cells';\nexport { SystemsTable };\nexport const SystemsTableWithApollo = withApollo(ConnectedSystemsTable);\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SystemsTableWithApollo);\n","import gql from 'graphql-tag';\nimport pickBy from 'lodash/pickBy';\nimport { systemsPolicyFilterConfiguration, systemsOsFilterConfiguration } from '@/constants';\n\nexport const GET_SYSTEMS = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    refId\n                    lastScanned\n                    compliant\n                    external\n                    score\n                    supported\n                    ssgVersion\n                    majorOsVersion\n                    rules {\n                        refId\n                        title\n                        compliant\n                        remediationAvailable\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const GET_SYSTEMS_WITHOUT_FAILED_RULES = gql`\nquery getSystems($filter: String!, $policyId: ID, $perPage: Int, $page: Int) {\n    systems(search: $filter, limit: $perPage, offset: $page) {\n        totalCount\n        edges {\n            node {\n                id\n                name\n                osMajorVersion\n                osMinorVersion\n                testResultProfiles(policyId: $policyId) {\n                    id\n                    name\n                    lastScanned\n                    external\n                    compliant\n                    score\n                    supported\n                    ssgVersion\n                    policy {\n                        id\n                    }\n                }\n                policies(policyId: $policyId) {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n`;\n\nexport const policyFilter = (policies, osFilter) => ([\n    ...systemsPolicyFilterConfiguration(policies),\n    ...(osFilter ? systemsOsFilterConfiguration(policies) : [])\n]);\n\nexport const initFilterState = (filterConfig) => (\n    pickBy(filterConfig.initialDefaultState(), (value) => (!!value))\n);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Skeleton, { SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { registryDecorator } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { InventoryDetail, DetailWrapper } from '@redhat-cloud-services/frontend-components/Inventory';\n\n@registryDecorator()\nclass InventoryDetails extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <DetailWrapper onLoad={({ mergeWithDetail }) => this.getRegistry().register({\n                ...mergeWithDetail()\n            })}>\n                <InventoryDetail fallback={<Skeleton size={ SkeletonSize.md } />} hideBack />\n            </DetailWrapper>\n        );\n    }\n}\n\nInventoryDetails.propTypes = {\n    entity: propTypes.object\n};\n\nconst ConnectedInventoryDetails = (props) => {\n    return <InventoryDetails {...props} />;\n};\n\nexport default ConnectedInventoryDetails;\n","import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { withApollo } from '@apollo/react-hoc';\nimport PropTypes from 'prop-types';\nimport { useStore, useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { policyFilter } from './constants';\nimport { systemsReducer } from 'Store/Reducers/SystemStore';\nimport { selectAll, clearSelection } from 'Store/ActionTypes';\nimport { exportFromState } from 'Utilities/Export';\nimport { DEFAULT_SYSTEMS_FILTER_CONFIGURATION, COMPLIANT_SYSTEMS_FILTER_CONFIGURATION } from '@/constants';\nimport debounce from 'lodash/debounce';\nimport {\n    ErrorPage,\n    StateView,\n    StateViewPart\n} from 'PresentationalComponents';\nimport { Alert } from '@patternfly/react-core';\nimport { TableVariant } from '@patternfly/react-table';\n// eslint-disable-next-line max-len\nimport ComplianceRemediationButton from '@redhat-cloud-services/frontend-components-inventory-compliance/ComplianceRemediationButton';\nimport { systemsWithRuleObjectsFailed } from 'Utilities/ruleHelpers';\nimport useFilterConfig from 'Utilities/hooks/useFilterConfig';\nimport { InventoryTable as FECInventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\n\nexport const InventoryTable = ({\n    columns,\n    showAllSystems,\n    policyId,\n    query,\n    client,\n    showActions,\n    enableExport,\n    compliantFilter,\n    policies,\n    showOnlySystemsWithTestResults,\n    showOsFilter,\n    error,\n    showComplianceSystemsInfo,\n    compact,\n    remediationsEnabled,\n    systemProps,\n    defaultFilter,\n    emptyStateComponent,\n    prependComponent\n}) => {\n    const store = useStore();\n    const dispatch = useDispatch();\n    const inventory = useRef(null);\n    const [pagination, setPagination] = useState({\n        perPage: 50,\n        page: 1\n    });\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [isEmpty, setIsEmpty] = useState(false);\n    const { conditionalFilter, activeFilters, buildFilterString } = useFilterConfig([\n        ...DEFAULT_SYSTEMS_FILTER_CONFIGURATION,\n        ...(compliantFilter ? COMPLIANT_SYSTEMS_FILTER_CONFIGURATION : []),\n        ...(policies?.length > 0 ? policyFilter(policies, showOsFilter) : [])\n    ]);\n    const total = useSelector(({ entities }) => entities?.systemsCount) || 0;\n    const items = useSelector(({ entities } = {}) => (entities?.systems?.map((system) => (\n        system?.node?.id\n    )) || []), shallowEqual);\n    const selectedEntities = useSelector(({ entities } = {}) => (entities?.selectedEntities || []), shallowEqual);\n    const onBulkSelect = (isSelected) => isSelected ? dispatch(selectAll()) : dispatch(clearSelection());\n\n    const fetchSystems = (perPage = 50, page = 1) => {\n        setIsLoaded(false);\n\n        const filterString = buildFilterString();\n        const combindedFilter = [\n            ...showOnlySystemsWithTestResults ? ['has_test_results = true'] : [],\n            ...filterString?.length > 0 ? [filterString] : []\n        ].join(' and ');\n        const filter = defaultFilter ? `(${ defaultFilter }) and (${ combindedFilter })` : combindedFilter;\n\n        dispatch({ type: 'GET_SYSTEMS_PENDING' });\n        return client.query({\n            query,\n            fetchResults: true,\n            fetchPolicy: 'no-cache',\n            variables: {\n                filter,\n                perPage,\n                page,\n                ...policyId && { policyId }\n            }\n        }).then(({ data, loading }) => {\n            dispatch({\n                type: 'GET_SYSTEMS_FULFILLED',\n                systems: data.systems.edges,\n                systemsCount: data.systems.totalCount\n            });\n            setIsLoaded(true);\n            setPagination(() => ({ page, perPage }));\n\n            if (emptyStateComponent && !loading && data.systems.totalCount === 0) {\n                setIsEmpty(true);\n            }\n\n            return { data, loading };\n        });\n    };\n\n    const debounceFetchSystems = useCallback(\n        debounce(fetchSystems, 800),\n        [conditionalFilter.activeFiltersConfig.filters]\n    );\n\n    useEffect(() => {\n        if (conditionalFilter.activeFiltersConfig.filters) {\n            debounceFetchSystems(pagination.perPage, 1);\n        }\n    }, [activeFilters]);\n\n    const onRefresh = (options, callback) => {\n        query && fetchSystems(options.per_page, options.page);\n        if (!callback && inventory && inventory.current) {\n            inventory.current.onRefreshData(options);\n        } else if (callback) {\n            callback(options);\n        }\n    };\n\n    return <StateView stateValues={{ error, noError: error === undefined && !isEmpty, empty: isEmpty }}>\n        <StateViewPart stateKey='error'>\n            { !!prependComponent && prependComponent }\n            <ErrorPage error={error}/>\n        </StateViewPart>\n        <StateViewPart stateKey='empty'>\n            { emptyStateComponent }\n        </StateViewPart>\n        <StateViewPart stateKey='noError'>\n            { !!prependComponent && isLoaded && prependComponent }\n            { showComplianceSystemsInfo && <Alert\n                isInline\n                variant=\"info\"\n                title={ 'The list of systems in this view is different than those that appear in the Inventory. ' +\n                    'Only systems currently associated with or reporting against compliance policies are displayed.' } /> }\n            <FECInventoryTable\n                { ...systemProps }\n                onLoad={({\n                    INVENTORY_ACTION_TYPES,\n                    mergeWithEntities\n                }) => {\n                    getRegistry().register({\n                        ...mergeWithEntities(\n                            systemsReducer(\n                                INVENTORY_ACTION_TYPES, columns, showAllSystems, policyId\n                            ))\n                    });\n                }}\n                fallback={<SkeletonTable colSize={2} rowSize={15} />}\n                tableProps={{\n                    canSelectAll: false\n                }}\n                variant={compact ? TableVariant.compact : ''}\n                ref={inventory}\n                onRefresh={onRefresh}\n                bulkSelect={{\n                    checked: selectedEntities.length > 0 ?\n                        (items?.every(id => selectedEntities?.find((selected) => selected?.id === id)) ? true : null)\n                        : false,\n                    onSelect: onBulkSelect,\n                    count: selectedEntities.length,\n                    label: selectedEntities.length > 0 ? `${ selectedEntities.length } Selected` : undefined\n                }}\n                {...!showAllSystems && {\n                    ...pagination,\n                    isLoaded,\n                    items,\n                    total,\n                    ...conditionalFilter,\n                    ...remediationsEnabled && {\n                        dedicatedAction: <ComplianceRemediationButton\n                            allSystems={ systemsWithRuleObjectsFailed(selectedEntities) }\n                            selectedRules={ [] } />\n                    }\n                }}\n                {...enableExport && {\n                    exportConfig: {\n                        isDisabled: total === 0 && selectedEntities.length === 0,\n                        onSelect: (_, format) => exportFromState(store.getState()?.entities, format)\n                    }\n                }}\n                {...showActions && {\n                    actions: [{\n                        title: 'View in inventory',\n                        onClick: (_event, _index, { id }) => {\n                            const beta = window.location.pathname.split('/')[1] === 'beta';\n                            window.location.href = `${window.location.origin}${beta ? '/beta' : ''}/insights/inventory/${id}`;\n                        }\n                    }]\n                }}\n            />\n        </StateViewPart>\n    </StateView>;\n};\n\nInventoryTable.propTypes = {\n    columns: PropTypes.arrayOf(PropTypes.shape({})),\n    policies: PropTypes.arrayOf(PropTypes.shape({})),\n    client: PropTypes.object,\n    showAllSystems: PropTypes.bool,\n    policyId: PropTypes.string,\n    query: PropTypes.string,\n    showActions: PropTypes.bool,\n    enableExport: PropTypes.bool,\n    compliantFilter: PropTypes.bool,\n    showOnlySystemsWithTestResults: PropTypes.bool,\n    showOsFilter: PropTypes.bool,\n    showComplianceSystemsInfo: PropTypes.bool,\n    error: PropTypes.object,\n    compact: PropTypes.bool,\n    remediationsEnabled: PropTypes.bool,\n    defaultFilter: PropTypes.string,\n    systemProps: PropTypes.shape({\n        isFullView: PropTypes.bool\n    }),\n    emptyStateComponent: PropTypes.node,\n    prependComponent: PropTypes.node\n};\n\nInventoryTable.defaultProps = {\n    policyId: '',\n    showActions: true,\n    enableExport: true,\n    compliantFilter: false,\n    showOnlySystemsWithTestResults: false,\n    showComplianceSystemsInfo: false,\n    compact: false,\n    remediationsEnabled: true\n};\n\nexport default withApollo(InventoryTable);\n","const CSV_FILE_PREFIX = 'compliance-export';\nconst CSV_DELIMITER = ',';\n\nconst linkAndDownload = (data, filename) => {\n    if (!data) {\n        return;\n    }\n\n    let link = document.createElement('a');\n    link.setAttribute('href', data);\n    link.setAttribute('download', filename);\n    link.dispatchEvent(new MouseEvent(`click`, { bubbles: true, cancelable: true, view: window }));\n};\n\nconst getNestedObject = (nestedObj, path) => {\n    return path.split('.').reduce(\n        (obj, key) => (obj && obj[key] !== 'undefined') ? obj[key] : undefined, nestedObj\n    );\n};\n\nconst textCsvCell = (row, key) => {\n    let cell = getNestedObject(row, key);\n\n    if (cell.exportValue) {\n        cell = cell.exportValue;\n    }\n\n    if (typeof(cell) === 'object') {\n        cell = getNestedObject(row, key + '_text');\n    }\n\n    if (typeof(cell) === 'string' && cell.includes(',')) {\n        cell = '\"' + cell + '\"';\n    }\n\n    return cell;\n};\n\nexport const csvFromState = (state) => {\n    const { rows, columns, selectedEntities } = state;\n\n    if (rows) {\n        let csvRows = [columns.map((column) => column.title).join(CSV_DELIMITER)];\n        csvRows = csvRows.concat((selectedEntities || rows).map((row) => (\n            state.columns.map((column) => !column.noExport ? textCsvCell(row, column.key) : '').join(CSV_DELIMITER)\n        )));\n\n        return encodeURI('data:text/csv;charset=utf-8,' + csvRows.join('\\n'));\n    }\n};\n\nexport const jsonFromState = (state) => {\n    const { rows, columns, selectedEntities } = state;\n    let result;\n\n    if (rows) {\n        result = (selectedEntities || rows).map((row) => {\n            let object = {};\n            columns.forEach((column) => {\n                const keys = column.key.split('.');\n                const key = keys[keys.length - 1];\n                object[key] = textCsvCell(row, column.key);\n            });\n\n            return object;\n        });\n\n        return encodeURI('data:application/json;charset=utf-8,' + JSON.stringify(result));\n    }\n};\n\nconst filename = (format) => (\n    CSV_FILE_PREFIX + '-' + (new Date()).toISOString() + '.' + format\n);\n\nexport const exportFromState = (state, format) => {\n    let content;\n\n    if (format === 'csv') {\n        content = csvFromState(state);\n    } else if (format === 'json') {\n        content = jsonFromState(state);\n    }\n\n    linkAndDownload(content, filename(format));\n};\n\n","class ApiClient {\n    DEFAULT_API_HEADERS = {\n        'Content-Type': 'application/vnd.api+json',\n        Accept: 'application/json'\n    }\n\n    constructor(options = {}) {\n        this.apiBase = options.apiBase || '/api';\n        this.path = options.path || '';\n        this.authenticate = options.authenticate || (() => Promise.resolve({}));\n        this.onUnauthorised = options.onUnauthorised || (() => Promise.resolve({}));\n        this.defaultHeaders = options.headers || this.DEFAULT_API_HEADERS;\n    }\n\n    async request(path, apiProps, method, options = {}) {\n        return await this.callAuthenticate()\n        .then(() => this.fetch(path, apiProps, method, options))\n        .then(this.checkForEmptyResponse)\n        .then((response) => this.checkForErrors(response, options))\n        .then((response) => response.json())\n        .catch(this.finalCatch);\n    }\n\n    finalCatch(promise) {\n        if (promise.errors === undefined) {\n            return Promise.reject({ title: 'Error parsing' });\n        } else {\n            return Promise.reject({ ...promise });\n        }\n    }\n\n    fetch(path, apiProps, method, options) {\n        let params = {\n            method: method || 'get',\n            headers: this.defaultHeaders,\n            credentials: 'include'\n        };\n        const fullPath = `${ this.apiBase }${ this.path ? this.path : '' }${ path ? path : '' }`;\n        let url = new URL(fullPath, window.location.origin);\n        if (options.params) {\n            const params = Object.keys(options.params).map((key) => (\n                encodeURIComponent(key) + '=' + encodeURIComponent(options.params[key])\n            )).join('&');\n            url.search = new URLSearchParams(params);\n        }\n\n        if (apiProps) {\n            params.body = JSON.stringify(apiProps);\n        }\n\n        return fetch(\n            url, params\n        );\n    }\n\n    checkForEmptyResponse(response) {\n        return response.status === 204 ? { json: () => ({}) } : response;\n    }\n\n    checkForErrors(response, options = {}) {\n        if (response.status === 404 && options.ignore404) {\n            return { json: () => ({}) };\n        }\n\n        if (response.status === 401) {\n            return this.onUnauthorised();\n        }\n\n        const responseCloneJson = response.clone ? response.clone().json() : response;\n\n        if (response.status === 422) {\n            return responseCloneJson.then((json) =>\n                Promise.reject({ ...json, title: 'Validation error' })\n            );\n        }\n\n        if (response.status >= 400 && response.status <= 600) {\n            return responseCloneJson.then((json) =>\n                Promise.reject(json.errors[0])\n            );\n        }\n\n        return response;\n    }\n\n    callAuthenticate() {\n        return Promise.resolve(this.authenticate() || true);\n    }\n\n    create(path, apiProps) {\n        return this.request(path, apiProps, 'post');\n    }\n\n    update(path, apiProps) {\n        return this.request(path, apiProps, 'put');\n    }\n\n    get(path, options = {}) {\n        return this.request(path, null, 'get', options);\n    }\n\n    destroy(path) {\n        return this.request(path, null, 'delete');\n    }\n}\n\nexport default ApiClient;\n","import ApiClient from './utils/ApiClient';\n\nconst useApi = (options) => {\n    const apiClient = new ApiClient({\n        ...options\n    });\n\n    return apiClient;\n};\n\nexport default useApi;\n","import { useEffect, useState } from 'react';\nimport { COMPLIANCE_API_ROOT } from '@/constants';\nimport normalize from 'json-api-normalizer';\nimport useApi from './useApi';\n\nconst includePropAndDelete = (entity, prop) => {\n    const attributes = entity[prop];\n    let newEntity = entity;\n    delete newEntity[prop];\n    return { ...newEntity, ...attributes };\n};\n\nconst includeAttributes = (entity) => (\n    entity && includePropAndDelete(entity, 'attributes')\n);\n\nconst includeRelationship = (entity, normalizedJson) => {\n    let relationships = {};\n    Object.entries(entity?.relationships || []).forEach((item) => {\n        const [relationship, relationshipData] = item;\n        relationships[relationship] = relationshipData?.data.map((entity) => (\n            includeAttributes(normalizedJson?.[entity.type]?.[entity.id])\n        )).filter((v) => (!!v));\n    });\n    delete entity.relationships;\n    return { ...entity, ...relationships };\n};\n\nconst normalizeData = (json, type) => {\n    const jsonNormalized = normalize(json);\n    return Object.values(jsonNormalized[type] || {})?.map((entity) => (\n        includeRelationship(includeAttributes(entity), jsonNormalized)\n    ));\n};\n\nconst fetchCollection = async (apiClient, collection, params = {}, options = {}) => {\n    const json = await apiClient.get(`/${ collection }`, { params });\n    const normalized = await normalizeData(json, options?.type || collection);\n\n    return {\n        collection: normalized,\n        meta: json.meta,\n        total: json.meta.total,\n        json\n    };\n};\n\nconst useCollection = (collection, options = {}, effects = []) => {\n    const [collectionState, setCollectionState] = useState({\n        data: undefined,\n        loading: true,\n        error: undefined\n    });\n    const apiClient = useApi({\n        apiBase: COMPLIANCE_API_ROOT\n    });\n    const params = {\n        ...(options?.params || {}),\n        include: (options?.include || [])\n    };\n\n    useEffect(() => {\n        fetchCollection(apiClient, collection, params, options).then((data) => {\n            setCollectionState({\n                data,\n                loading: undefined,\n                error: undefined\n            });\n        });\n    }, effects);\n\n    return collectionState;\n};\n\nexport default useCollection;\n","export const profilesRulesFailed = (profiles) => (\n    profiles.flatMap(profile => profile.rules && profile.rules.filter(rule => !rule.compliant))\n);\n\nexport const profilesRulesPassed = (profiles) => (\n    profiles.flatMap(profile => profile.rules && profile.rules.filter(rule => rule.compliant))\n);\n\nexport const systemRulesPassed = (system) => (\n    system.testResultProfiles ? profilesRulesPassed(system.testResultProfiles) : []\n);\n\nexport const systemRulesFailed = (system) => (\n    system.testResultProfiles ? profilesRulesFailed(system.testResultProfiles) : []\n);\n\nexport const systemsWithRuleObjectsFailed = (systems) => (\n    systems.map(system => (\n        {\n            ...system,\n            ruleObjectsFailed: systemRulesFailed(system),\n            profiles: system.testResultProfiles\n        }\n    ))\n);\n","export const EXPORT = '@@COMPLIANCE/EXPORT';\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\n\nexport const exportFromState = (format) => ({\n    type: EXPORT, payload: { format }\n});\n\nexport const selectAll = () => ({\n    type: SELECT_ENTITY,\n    payload: { id: 0, selected: true }\n});\n\nexport const clearSelection = () => ({\n    type: SELECT_ENTITY,\n    payload: { id: 0, selected: false }\n});\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Link } from 'react-router-dom';\nimport { EXPORT, SELECT_ENTITY } from 'Store/ActionTypes';\nimport { exportFromState } from 'Utilities/Export';\nimport {\n    ComplianceScore as complianceScore,\n    complianceScoreString\n} from 'PresentationalComponents';\nimport {\n    Tooltip,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport {\n    profilesRulesPassed,\n    profilesRulesFailed\n} from 'Utilities/ruleHelpers';\nimport Truncate from 'react-truncate';\nimport { sortingByProp } from 'Utilities/helpers';\n\nconst NEVER = 'Never';\n\nexport const lastScanned = ({ testResultProfiles: profiles = [] }) => {\n    const dates = profiles.map((profile) => new Date(profile.lastScanned));\n    const last = new Date(Math.max.apply(null, dates.filter((date) => isFinite(date))));\n    const result = (last instanceof Date && isFinite(last)) ? last : NEVER;\n\n    return result;\n};\n\nexport const compliant = ({ testResultProfiles: profiles = [] }) => (\n    profiles.every(profile => profile.lastScanned === NEVER || profile.compliant === true)\n);\n\nexport const score = ({ testResultProfiles: profiles = [] }) => {\n    const scoreTotal = profiles.reduce((acc, profile) => acc + profile.score, 0);\n    const numScored = profiles.reduce((acc, profile) => {\n        if (profilesRulesPassed([profile]).length + profilesRulesFailed([profile]).length > 0) { return acc + 1; }\n\n        return acc;\n    }, 0);\n    if (numScored) { return scoreTotal / numScored; }\n\n    return 0;\n};\n\nexport const supported = ({ testResultProfiles: profiles = [] }) => (\n    profiles.reduce((acc, profile) => acc && profile.supported, true)\n);\n\nexport const policyNames = (system) => {\n    if (system === {}) { return ''; }\n\n    let policyNames = system.policies.map(({ name }) => name);\n    return policyNames.join(', ');\n};\n\nexport const policiesCell = ({ policyNames }) => ({\n    title: policyNames ? (\n        <Tooltip content={policyNames}>\n            <Truncate lines={2} width={540}>{policyNames}</Truncate>\n        </Tooltip>\n    ) : <Text className='grey-icon'>No policies</Text>,\n    exportValue: policyNames\n});\n\nexport const detailsLink = (system) => {\n    if (system.testResultProfiles && system.testResultProfiles.length > 0) {\n        return {\n            title: (\n                <Link to={{ pathname: `/systems/${system.id}` }}>\n                    View report\n                </Link>\n            )\n        };\n    }\n};\n\nexport const hasOsInfo = (matchingSystem) => (\n    typeof(matchingSystem.osMajorVersion) !== 'undefined' && typeof(matchingSystem.osMinorVersion) !== 'undefined' &&\n        matchingSystem.osMajorVersion !== null && matchingSystem.osMinorVersion !== null &&\n        !(matchingSystem.osMajorVersion === 0 && matchingSystem.osMinorVersion === 0)\n);\n\nconst displayNameCell = (system, matchingSystem) =>  ({\n    title: <TextContent>\n        { matchingSystem.name ? <Link to={{ pathname: `/systems/${matchingSystem.id}` }}>\n            { matchingSystem.name }\n        </Link> : system.display_name }\n        { hasOsInfo(matchingSystem) &&\n            <Text component={TextVariants.small}>RHEL {matchingSystem.osMajorVersion}.{matchingSystem.osMinorVersion}</Text> }\n    </TextContent>,\n    exportValue: system.display_name || matchingSystem.name\n});\n\nexport const systemName = (displayName, id, { osMajorVersion, osMinorVersion, name }) => (\n    <TextContent>\n        <Link to={{ pathname: `/systems/${id}` }}>\n            { displayName || name }\n        </Link>\n        { hasOsInfo({ osMajorVersion, osMinorVersion }) &&\n            <Text component={TextVariants.small}>RHEL {osMajorVersion}.{osMinorVersion}</Text> }\n    </TextContent>\n);\n\nconst isSelected = (id, selectedEntities) => (\n    !!(selectedEntities || []).find((entity) => (entity.id === id))\n);\n\nconst profilesSsgVersions = ({ testResultProfiles: profiles = [] }) => (\n    profiles.map((p) => (p.ssgVersion)).filter((version) => (!!version)).join(', ')\n);\n\nexport const mapCountOsMinorVersions = (systems) => {\n    if (!systems) { return {}; }\n\n    return systems.reduce((acc, { osMinorVersion }) => {\n        if (osMinorVersion !== undefined && osMinorVersion !== null) {\n            (acc[osMinorVersion] = acc[osMinorVersion] || { osMinorVersion, count: 0 }).count++;\n        }\n\n        return acc;\n    }, {});\n};\n\nexport const countOsMinorVersions = (systems) => (\n    Object.values(mapCountOsMinorVersions(systems)).sort(sortingByProp('osMinorVersion', 'desc'))\n);\n\nexport const systemsToInventoryEntities = (systems, entities, showAllSystems, selectedEntities) => (\n    entities.map(entity => {\n        // This should compare the inventory ID instead with\n        // the ID in compliance\n        if (entity.facts === undefined) { entity.facts = {}; }\n\n        let matchingSystem = systems.map((s) => s.node).find((system) => {\n            return entity.id === system.id;\n        });\n        if (matchingSystem === undefined) {\n            if (!showAllSystems) { return; }\n\n            matchingSystem = { testResultProfiles: [], policies: [] };\n        }\n\n        matchingSystem.policyNames = policyNames(matchingSystem);\n        matchingSystem.rulesPassed = profilesRulesPassed(matchingSystem.testResultProfiles).length;\n        matchingSystem.rulesFailed = profilesRulesFailed(matchingSystem.testResultProfiles).length;\n        matchingSystem.lastScanned = lastScanned(matchingSystem);\n        matchingSystem.compliant = compliant(matchingSystem);\n        matchingSystem.score = score(matchingSystem);\n        matchingSystem.supported = supported(matchingSystem);\n\n        return {\n            /* eslint-disable camelcase */\n            id: entity.id,\n            selected: isSelected(entity.id, selectedEntities),\n            account: entity.account,\n            bios_uuid: entity.bios_uuid,\n            created: entity.created,\n            display_name: entity.display_name || matchingSystem.name,\n            fqdn: entity.fqdn,\n            insights_id: entity.insights_id,\n            ip_addresses: entity.ip_addresses,\n            mac_addresses: entity.mac_addresses,\n            rhel_machine_id: entity.rhel_machine_id,\n            satellite_id: entity.satellite_id,\n            subscription_manager_id: entity.subscription_manager_id,\n            tags: entity.tags,\n            updated: entity.updated,\n            facts: {\n                inventory: {\n                    hostname: (entity.facts.inventory !== undefined) ?\n                        entity.facts.inventory.hostname :\n                        entity.facts.hostname,\n                    machine_id: (entity.facts.inventory !== undefined) ?\n                        entity.facts.inventory.machine_id :\n                        entity.facts.machine_id,\n                    release: (entity.facts.inventory !== undefined) ?\n                        entity.facts.inventory.release :\n                        entity.facts.release\n                },\n                compliance: {\n                    display_name: displayNameCell(entity, matchingSystem),\n                    policies: policiesCell(matchingSystem),\n                    details_link: detailsLink(matchingSystem),\n                    rules_passed: matchingSystem.rulesPassed,\n                    rules_failed: { title: <Link to={{\n                        pathname: `/systems/${matchingSystem.id}`,\n                        query: {\n                            hidePassed: true\n                        }\n                    }}>{matchingSystem.rulesFailed}</Link> },\n                    rules_failed_text: matchingSystem.rulesFailed,\n                    compliance_score: complianceScore(matchingSystem),\n                    compliance_score_text: complianceScoreString(matchingSystem),\n                    last_scanned: (matchingSystem.lastScanned instanceof Date) ?\n                        { title: <DateFormat date={Date.parse(matchingSystem.lastScanned)} type='relative' /> } :\n                        matchingSystem.lastScanned,\n                    last_scanned_text: matchingSystem.lastScanned,\n                    ssg_version: profilesSsgVersions(matchingSystem),\n                    supported: matchingSystem.supported\n                }\n            }\n            /* eslint-enable camelcase */\n        };\n    }).filter((value) => (!!value))\n);\n\nconst systemsToRows = (systems) => (\n    systems.map(({ node }) => ({\n        ...node,\n        policyNames: policyNames({ policies: node?.policies, testResultProfiles: [] }),\n        rulesPassed: profilesRulesPassed(node.testResultProfiles).length,\n        rulesFailed: profilesRulesFailed(node.testResultProfiles).length,\n        lastScanned: lastScanned(node),\n        compliant: compliant(node),\n        display_name: node.name, // eslint-disable-line camelcase\n        score: score(node),\n        supported: supported(node),\n        ssgVersion: profilesSsgVersions(node),\n        detailsLink: detailsLink(node)\n    }))\n);\n\nconst selectRowsByIds = (state, ids) => {\n    const rowsToSelect = state.rows.filter((row) => (\n        ids.includes(row.id) && !(state.selectedEntities || []).map((e) => (e.id)).includes(row.id)\n    ));\n\n    return {\n        ...state,\n        selectedEntities: (state.selectedEntities || []).concat(rowsToSelect)\n    };\n};\n\nconst deselectRowsByIds = (state, ids) => ({\n    ...state,\n    selectedEntities: (state.selectedEntities || []).filter((row) => !ids.includes(row.id))\n});\n\nconst selectAllRows = (state) => (\n    selectRowsByIds(state, state.rows.map((row) => (row.id)))\n);\n\nconst deselectAllRows = (state) => (\n    deselectRowsByIds(state, state.rows.map((row) => (row.id)))\n);\n\nconst selectRow = (state, id) => (\n    selectRowsByIds(state, [id])\n);\n\nconst deselectRow = (state, id) => (\n    deselectRowsByIds(state, [id])\n);\n\nexport const systemsReducer = (INVENTORY_ACTION, columns) => applyReducerHash({\n    ['GET_SYSTEMS_PENDING']: (state) => ({\n        ...state,\n        rows: [],\n        systems: undefined,\n        systemsCount: undefined,\n        columns,\n        loaded: false\n    }),\n    ['GET_SYSTEMS_FULFILLED']: (state, { systems, systemsCount }) => ({\n        ...state,\n        systems,\n        systemsCount,\n        total: systemsCount,\n        rows: systemsToRows(systems).map((row) => ({\n            ...row, selected: isSelected(row.id, state.selectedEntities)\n        })),\n        columns,\n        loaded: true\n    }),\n    [INVENTORY_ACTION.LOAD_ENTITIES_PENDING]: (state) => ({\n        ...state,\n        total: state.systemsCount,\n        rows: state.systems !== undefined ? systemsToRows(state.systems).map((row) => ({\n            ...row, selected: isSelected(row.id, state.selectedEntities)\n        })) : [],\n        columns,\n        loaded: state.systemsCount !== undefined\n    }),\n    [INVENTORY_ACTION.LOAD_ENTITIES_FULFILLED]: (state) => ({\n        ...state,\n        total: state.systemsCount,\n        rows: state.systems !== undefined ? systemsToRows(state.systems).map((row) => ({\n            ...row, selected: isSelected(row.id, state.selectedEntities)\n        })) : [],\n        columns,\n        loaded: state.systemsCount !== undefined\n    }),\n    [SELECT_ENTITY]: (state, { payload: { id, selected, clearAll } }) => {\n        let newState;\n\n        if (id === 0) {\n            newState = selected ? selectAllRows(state) : deselectAllRows(state);\n        } else {\n            newState = selected ? selectRow(state, id) : deselectRow(state, id);\n        }\n\n        if (newState.selectedEntities.length === 0 || clearAll) {\n            newState.selectedEntities = undefined;\n        }\n\n        return newState;\n    },\n    ['SELECT_ENTITIES']: (state, { payload: { ids } }) => ({\n        selectedEntities: ids\n    })\n});\n\nexport const entitiesReducer = (INVENTORY_ACTION, columns, showAllSystems) => applyReducerHash(\n    {\n        ['UPDATE_SYSTEMS']: (state, { systems, systemsCount }) => ({\n            ...state,\n            systems,\n            systemsCount\n        }),\n        ['UPDATE_ROWS']: (state) => ({\n            ...state,\n            loaded: true,\n            rows: systemsToInventoryEntities(\n                state.systems || [],\n                state.rows || [],\n                showAllSystems,\n                state.selectedEntities\n            )\n        }),\n        [INVENTORY_ACTION.LOAD_ENTITIES_FULFILLED]: (state) => ({\n            ...state,\n            rows: systemsToInventoryEntities(\n                state.systems || [],\n                state.rows,\n                showAllSystems,\n                state.selectedEntities\n            ),\n            total: !showAllSystems ? state.systemsCount : state.total,\n            columns: state.total > 0 ? columns : [{ title: '' }]\n        }),\n        [EXPORT]: (state, { payload: { format } }) => {\n            exportFromState(state, format);\n            return state;\n        },\n        [SELECT_ENTITY]: (state, { payload: { id, selected, clearAll } }) => {\n            let newState;\n\n            if (id === 0) {\n                newState = selected ? selectAllRows(state) : deselectAllRows(state);\n            } else {\n                newState = selected ? selectRow(state, id) : deselectRow(state, id);\n            }\n\n            if (newState.selectedEntities.length === 0 || clearAll) {\n                newState.selectedEntities = undefined;\n            }\n\n            return newState;\n        },\n        ['SELECT_ENTITIES']: (state, { payload: { ids } }) => ({\n            selectedEntities: ids\n        })\n    }\n);\n"],"sourceRoot":""}