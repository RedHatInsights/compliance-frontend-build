{"version":3,"sources":["webpack://compliance-frontend/./src/SmartComponents/PolicyDetails/PolicyDetails.scss","webpack://compliance-frontend/./src/SmartComponents/PolicyDetails/PolicyRulesTab.js","webpack://compliance-frontend/./src/SmartComponents/PolicyDetails/PolicySystemsTab.js","webpack://compliance-frontend/./src/SmartComponents/PolicyDetails/PolicyMultiversionRules.js","webpack://compliance-frontend/./src/SmartComponents/PolicyDetails/PolicyDetails.js","webpack://compliance-frontend/./src/SmartComponents/PolicyDetails/PolicyDetails.scss?2376"],"names":["exports","___CSS_LOADER_API_IMPORT___","push","module","id","PolicyRulesTab","loading","policy","Alert","variant","isInline","title","PageSection","PageSectionVariants","Text","component","TextVariants","benchmark","version","remediationsEnabled","columns","selectRulesTableColumns","profileRules","profile","refId","name","rules","propTypes","PolicySystemsTab","systemTableProps","newInventory","useFeature","showSsgVersions","InvCmp","InventoryTable","SystemsTable","query","GET_SYSTEMS","policyId","defaultFilter","showActions","key","props","width","isStatic","renderFunc","Link","to","pathname","supported","ssgVersion","ssg_version","complianceThreshold","PolicyMultiversionRules","profiles","level","defaultTab","map","Tab","TabTitleText","Label","color","length","eventKey","MULTIVERSION_QUERY","gql","QUERY","PolicyDetails","route","multiversionTabs","useParams","policy_id","location","useLocation","anchor","useAnchor","useQuery","variables","data","error","refetch","undefined","external","message","useEffect","useTitleEntity","stateValues","stateKey","PageHeader","Main","Spinner","Fragment","className","Breadcrumb","BreadcrumbItem","isActive","Grid","gutter","GridItem","xl2","xl","lg","md","sm","state","hash","backgroundLocation","Button","aria-label","update","hot","invalidate","oldLocals","accept","a","b","isNamedExport","p","isEqualLocals","dispose"],"mappings":"8GAEAA,EADkC,EAAQ,MAChCC,EAA4B,IAE9BC,KAAK,CAACC,EAAOC,GAAI,sJAAuJ,KAEhLD,EAAOH,QAAUA,G,4UCDXK,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,OAAZ,OACnB,kBAAC,aAAD,KACI,kBAAC,EAAAC,MAAD,CAAOC,QAAQ,OAAOC,UAAQ,EAACC,MAAM,6BACrC,kBAAC,EAAAC,YAAD,CAAaH,QAASI,6BAClB,kBAAC,EAAAC,KAAD,CAAMC,UAAWC,kBACb,uEADJ,+DAEkET,EAAOU,UAAUC,QAFnF,4JAOJ,kBAAC,KAAD,CACIC,qBAAqB,EACrBC,SAAUC,QAAwB,CAAC,OAAQ,WAAY,YACvDf,QAAUA,EACVgB,aAAc,CAAC,CACXC,QAAS,CAAEC,MAAOjB,EAAOiB,MAAOC,KAAMlB,EAAOkB,MAC7CC,MAAOnB,EAAOmB,YAM9BrB,EAAesB,UAAY,CACvBrB,QAASqB,SACTpB,OAAQoB,UAAgB,CACpBF,KAAME,WACNH,MAAOG,WACPD,MAAOC,UACPV,UAAWU,cAInB,U,gqBC7BA,IAAMC,EAAmB,SAAC,GAAiC,IAA/BrB,EAA+B,EAA/BA,OAAQsB,EAAuB,EAAvBA,iBAC1BC,GAAeC,OAAW,gBAC5BC,GAAkBD,OAAW,mBAC3BE,EAASH,EAAeI,KAAiBC,KAE/C,OACI,kBAACF,EAAD,KACIG,MAAOC,KACPC,SAAW/B,EAAOH,GAClBmC,cAAa,sBAAiBhC,EAAOH,IACrCoC,aAAc,EACdrB,qBAAsB,EACtBC,QAAO,IACHqB,IAAK,gCACL9B,MAAO,OACP+B,MAAO,CACHC,MAAO,GAAIC,UAAU,IAEtBd,GAAgB,CACfW,IAAK,eACLI,WAAY,SAACpB,EAAMrB,GAAP,OAAc,kBAAC,EAAA0C,KAAD,CAAMC,GAAI,CAAEC,SAAU,YAAF,OAAc5C,KAAlC,IAA4CqB,EAA5C,SAR3B,WAUDO,EAAkB,CAAC,CACrBS,IAAK,mBACL9B,MAAO,cACPkC,WAAY,SAACtB,GAAD,OACR,kBAAC,gBAAD,CAAkB0B,UAAY1B,EAAQ0B,UAAYC,WAAa3B,EAAQ4B,iBAE1E,KACLC,oBAAsB7C,EAAO6C,qBACxBvB,KAKjBD,EAAiBD,UAAY,CACzBpB,OAAQoB,UAAgB,CACpBvB,GAAIuB,sBACJyB,oBAAqBzB,wBAEzBE,iBAAkBF,YAGtB,U,ikBC9CA,IAAM0B,EAA0B,SAAC,GAAD,IAAuBC,EAAvB,EAAG/C,OAAUA,OAAU+C,SAAvB,OAC5B,kBAAC,aAAD,KACI,kBAAC,EAAA9C,MAAD,CAAOC,QAAQ,OAAOC,UAAQ,EAACC,MAAM,6BACrC,kBAAC,EAAAC,YAAD,CAAaH,QAAUI,6BACnB,kBAAC,KAAD,CAAY0C,MAAQ,EAAIC,WAAaF,EAAS,GAAGJ,YAEzCI,EAASG,KAAI,SAAClC,GAAD,OACT,kBAAC,EAAAmC,IAAD,CACIjB,IAAG,yBAAsBlB,EAAQ2B,YACjCvC,MACI,kBAAC,EAAAgD,aAAD,KACI,qCAAYpC,EAAQ2B,WAAa,KACjC,kBAAC,EAAAU,MAAD,CAAOC,MAAM,QAAStC,EAAQG,MAAMoC,SAG5CC,SAAWxC,EAAQ2B,YACnB,kBAAC,KAAD,CACI/B,qBAAqB,EACrBC,SAAUC,QAAwB,CAAC,OAAQ,WAAY,YACvDC,aAAc,CAAC,CACXC,QAAS,KAAKA,GACdG,MAAOH,EAAQG,kBAUnD2B,EAAwB1B,UAAY,CAChCpB,OAAQoB,uBAGZ,U,80DCnBO,IAAMqC,EAAqBC,IAAH,KAiDlBC,EAAQD,IAAH,KA2CLE,EAAgB,SAAC,GAAc,IAAZC,EAAY,EAAZA,MACtBZ,EAAa,UACba,GAAmBtC,OAAW,oBACjBO,GAAagC,iBAAxBC,UACFC,GAAWC,mBACXC,GAASC,UALyB,GAMAC,cAAUP,EAAmBL,EAAqBE,EAAQ,CAC9FW,UAAW,CAAEvC,cADXwC,EANkC,EAMlCA,KAAMC,EAN4B,EAM5BA,MAAOzE,EANqB,EAMrBA,QAAS0E,EANY,EAMZA,QAGxBzE,EAASuE,IAASxE,EAAUwE,EAAKvD,aAAU0D,EAc/C,OAZI1E,GAAUA,EAAO2E,WACjBH,EAAQ,CAAEI,QAAS,oCACnBL,OAAOG,EACP3E,OAAU2E,IAGdG,gBAAU,WACNJ,MACD,CAACR,KAEJa,OAAejB,EAAO7D,aAAR,EAAQA,EAAQkB,MAEvB,kBAAC,KAAD,CAAoB6D,YAAc,CAAEP,QAAOD,OAAMxE,YACpD,kBAAC,KAAD,CAAeiF,SAAS,WACpB,kBAACC,EAAA,EAAD,KAAY,kBAAC,KAAD,OACZ,kBAACC,EAAA,EAAD,KAAM,kBAACC,EAAA,EAAD,QAEV,kBAAC,KAAD,CAAeH,SAAS,QAClBhF,GAAU,kBAAC,EAAAoF,SAAD,KACR,kBAACH,EAAA,EAAD,CAAYI,UAAU,oBAClB,kBAAC,EAAAC,WAAD,KACI,kBAAC,KAAD,CAAoB9C,GAAG,KAAvB,cAGA,kBAAC,KAAD,CAAoBA,GAAG,iBAAvB,iBAGA,kBAAC,EAAA+C,eAAD,CAAgBC,UAAQ,GAAExF,EAAOkB,OAErC,kBAAC,EAAAuE,KAAD,CAAMC,OAAO,MACT,kBAAC,EAAAC,SAAD,CAAUC,IAAK,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC3C,kBAACf,EAAA,EAAD,CAAiB7E,MAAOJ,EAAOkB,QAEnC,kBAAC,EAAAyE,SAAD,CAAUN,UAAU,wBAAwBO,IAAK,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACzE,kBAAC,KAAD,CACIxD,GAAE,wBAAqBxC,EAAOH,GAA5B,SACFoG,MAAQ,CAAEjG,UACVkG,KAAO/B,EACPgC,mBAAqB,CAAED,KAAM,YAC7B,kBAAC,EAAAE,OAAD,CAAQlG,QAAQ,aAAhB,kBAIZ,kBAAC,KAAD,CAAYmG,aAAW,cAAcpD,WAAaA,GAC9C,kBAAC,EAAAE,IAAD,CAAK/C,MAAM,UAAUP,GAAG,iBAAiB2D,SAAS,YAClD,kBAAC,EAAAL,IAAD,CAAK/C,MAAM,QAAQP,GAAG,eAAe2D,SAAS,UAC9C,kBAAC,EAAAL,IAAD,CAAK/C,MAAM,UAAUP,GAAG,iBAAiB2D,SAAS,cAG1D,kBAAC0B,EAAA,EAAD,KACI,kBAAC,KAAD,CAAajC,WAAaA,GACtB,kBAAC,KAAD,CAAYO,SAAS,WACjB,kBAAC,KAAD,CAA0BxD,OAASA,KAEvC,kBAAC,KAAD,CAAYwD,SAAS,SACfM,EACE,kBAAC,EAAD,CAAyB9D,OAASA,IAClC,kBAAC,EAAD,CAAgBA,OAASA,KAEjC,kBAAC,KAAD,CAAYwD,SAAS,WACjB,kBAAC,EAAD,CAAkBxD,OAASA,WASvD4D,EAAcxC,UAAY,CACtByC,MAAOzC,YAGX,W,yEC9LIkF,EAAS,IAAI,IALH,CAEd,OAAiB,OACjB,WAAoB,IAMlB,IAAK,YAAkB1G,EAAO2G,IAAIC,WAAY,CAC5C,IA+BIC,EAAY,WAEhB7G,EAAO2G,IAAIG,OACT,OACA,eAnCkB,SAAuBC,EAAGC,EAAGC,GACnD,IAAKF,GAAKC,GAAKD,IAAMC,EACnB,OAAO,EAGT,IAAIE,EAEJ,IAAKA,KAAKH,EACR,GAKIA,EAAEG,KAAOF,EAAEE,GACb,OAAO,EAIX,IAAKA,KAAKF,EACR,IAKKD,EAAEG,GACL,OAAO,EAIX,OAAO,EAOIC,CAAcN,GADrB,YACgC,SAMxBA,EAAY,WAEZH,EAAO,MAPL1G,EAAO2G,IAAIC,gBAYzB5G,EAAO2G,IAAIS,SAAQ,WACjBV,OAIW","file":"js/PolicyDetails.2e7b8622e894756e4495.js","sourcesContent":["// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".threshold-tooltip{margin-bottom:var(--pf-global--spacer--md)}.grey-icon{color:var(--pf-global--Color--200)}.policy-description{padding-top:10px}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Alert, Text, TextVariants, PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { SystemRulesTable, selectRulesTableColumns } from '@redhat-cloud-services/frontend-components-inventory-compliance/esm';\n\nconst PolicyRulesTab = ({ loading, policy }) => (\n    <React.Fragment>\n        <Alert variant=\"info\" isInline title=\"Rule editing coming soon\" />\n        <PageSection variant={PageSectionVariants.light}>\n            <Text component={TextVariants.p}>\n                <strong>What rules are shown on this list?&nbsp;</strong>\n                This view shows rules that are from the latest SSG version ({ policy.benchmark.version }).\n                If you are using a different version of SSG for systems in this policy,\n                those rules will be different and can be viewed on the systems details page.\n            </Text>\n        </PageSection>\n        <SystemRulesTable\n            remediationsEnabled={false}\n            columns={ selectRulesTableColumns(['Rule', 'Severity', 'Ansible']) }\n            loading={ loading }\n            profileRules={[{\n                profile: { refId: policy.refId, name: policy.name },\n                rules: policy.rules\n            }]}\n        />\n    </React.Fragment>\n);\n\nPolicyRulesTab.propTypes = {\n    loading: propTypes.bool,\n    policy: propTypes.shape({\n        name: propTypes.string,\n        refId: propTypes.string,\n        rules: propTypes.array,\n        benchmark: propTypes.object\n    })\n};\n\nexport default PolicyRulesTab;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport { InventoryTable, SystemsTable } from 'SmartComponents';\nimport { GET_SYSTEMS } from '../SystemsTable/constants';\nimport { Link } from 'react-router-dom';\nimport { Cells } from '@/SmartComponents/SystemsTable/SystemsTable';\nimport useFeature from 'Utilities/hooks/useFeature';\n\nconst PolicySystemsTab = ({ policy, systemTableProps }) => {\n    const newInventory = useFeature('newInventory');\n    let showSsgVersions = useFeature('showSsgVersions');\n    const InvCmp = newInventory ? InventoryTable : SystemsTable;\n\n    return (\n        <InvCmp\n            query={GET_SYSTEMS}\n            policyId={ policy.id }\n            defaultFilter={`policy_id = ${policy.id}`}\n            showActions={ false }\n            remediationsEnabled={ false }\n            columns={[{\n                key: 'facts.compliance.display_name',\n                title: 'Name',\n                props: {\n                    width: 40, isStatic: true\n                },\n                ...newInventory && {\n                    key: 'display_name',\n                    renderFunc: (name, id) => <Link to={{ pathname: `/systems/${id}` }}> {name} </Link>\n                }\n            }, ...showSsgVersions ? [{\n                key: 'facts.compliance',\n                title: 'SSG version',\n                renderFunc: (profile) => (\n                    <Cells.SSGVersion supported={ profile.supported } ssgVersion={ profile.ssg_version } />\n                )\n            }] : []]}\n            complianceThreshold={ policy.complianceThreshold }\n            { ...systemTableProps }\n        />\n    );\n};\n\nPolicySystemsTab.propTypes = {\n    policy: propTypes.shape({\n        id: propTypes.string.isRequired,\n        complianceThreshold: propTypes.number.isRequired\n    }),\n    systemTableProps: propTypes.object\n};\n\nexport default PolicySystemsTab;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Alert, Label, Tab, TabTitleText, PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { SystemRulesTable, selectRulesTableColumns } from '@redhat-cloud-services/frontend-components-inventory-compliance/esm';\nimport { RoutedTabs } from 'PresentationalComponents';\n\nconst PolicyMultiversionRules = ({ policy: { policy: { profiles } } }) => (\n    <React.Fragment>\n        <Alert variant=\"info\" isInline title=\"Rule editing coming soon\" />\n        <PageSection variant={ PageSectionVariants.light }>\n            <RoutedTabs level={ 1 } defaultTab={ profiles[0].ssgVersion }>\n                {\n                    profiles.map((profile) => (\n                        <Tab\n                            key={ `ssgversion-tab-${ profile.ssgVersion }` }\n                            title={\n                                <TabTitleText>\n                                    <span>SSG { profile.ssgVersion + ' ' }</span>\n                                    <Label color=\"blue\">{ profile.rules.length }</Label>\n                                </TabTitleText>\n                            }\n                            eventKey={ profile.ssgVersion }>\n                            <SystemRulesTable\n                                remediationsEnabled={false}\n                                columns={ selectRulesTableColumns(['Rule', 'Severity', 'Ansible']) }\n                                profileRules={[{\n                                    profile: { ...profile },\n                                    rules: profile.rules\n                                }]} />\n                        </Tab>\n                    ))\n                }\n            </RoutedTabs>\n        </PageSection>\n    </React.Fragment>\n);\n\nPolicyMultiversionRules.propTypes = {\n    policy: propTypes.object.isRequired\n};\n\nexport default PolicyMultiversionRules;\n","import React, { Fragment, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Breadcrumb, BreadcrumbItem, Button, Grid, GridItem, Tab } from '@patternfly/react-core';\nimport {\n    PageHeader, PageHeaderTitle, Main, Spinner\n} from '@redhat-cloud-services/frontend-components';\nimport {\n    PolicyDetailsDescription, PolicyDetailsContentLoader, RoutedTabSwitcher as TabSwitcher, ContentTab,\n    StateViewWithError, StateViewPart, RoutedTabs, BreadcrumbLinkItem, BackgroundLink\n} from 'PresentationalComponents';\nimport { useAnchor } from 'Utilities/Router';\nimport useFeature from 'Utilities/hooks/useFeature';\nimport { useTitleEntity } from 'Utilities/hooks/useDocumentTitle';\nimport '@/Charts.scss';\nimport PolicyRulesTab from './PolicyRulesTab';\nimport PolicySystemsTab from './PolicySystemsTab';\nimport PolicyMultiversionRules from './PolicyMultiversionRules';\nimport './PolicyDetails.scss';\n\nexport const MULTIVERSION_QUERY = gql`\nquery Profile($policyId: String!){\n    profile(id: $policyId) {\n        id\n        name\n        refId\n        external\n        description\n        totalHostCount\n        compliantHostCount\n        complianceThreshold\n        majorOsVersion\n        lastScanned\n        policyType\n        policy {\n            id\n            name\n            refId\n            profiles {\n                ssgVersion\n                name\n                refId\n                rules {\n                    title\n                    severity\n                    rationale\n                    refId\n                    description\n                    remediationAvailable\n                    identifier\n                }\n            }\n        }\n        businessObjective {\n            id\n            title\n        }\n        hosts {\n            id\n        }\n        benchmark {\n            id\n            title\n            version\n        }\n    }\n}\n`;\n\nexport const QUERY = gql`\nquery Profile($policyId: String!){\n    profile(id: $policyId) {\n        id\n        name\n        refId\n        external\n        description\n        totalHostCount\n        compliantHostCount\n        complianceThreshold\n        majorOsVersion\n        lastScanned\n        policyType\n        policy {\n            id\n            name\n        }\n        businessObjective {\n            id\n            title\n        }\n        hosts {\n            id\n        }\n        rules {\n            title\n            severity\n            rationale\n            refId\n            description\n            remediationAvailable\n            identifier\n        }\n        benchmark {\n            id\n            title\n            version\n        }\n    }\n}\n`;\n\nexport const PolicyDetails = ({ route }) => {\n    const defaultTab = 'details';\n    const multiversionTabs = useFeature('multiversionTabs');\n    const { policy_id: policyId } = useParams();\n    const location = useLocation();\n    const anchor = useAnchor();\n    let { data, error, loading, refetch } = useQuery((multiversionTabs ? MULTIVERSION_QUERY : QUERY), {\n        variables: { policyId }\n    });\n    let policy = data && !loading ? data.profile : undefined;\n\n    if (policy && policy.external) {\n        error = { message: 'This is an external SCAP policy.' };\n        data = undefined;\n        loading = undefined;\n    }\n\n    useEffect(() => {\n        refetch();\n    }, [location]);\n\n    useTitleEntity(route, policy?.name);\n\n    return <StateViewWithError stateValues={ { error, data, loading } }>\n        <StateViewPart stateKey='loading'>\n            <PageHeader><PolicyDetailsContentLoader/></PageHeader>\n            <Main><Spinner/></Main>\n        </StateViewPart>\n        <StateViewPart stateKey='data'>\n            { policy && <Fragment>\n                <PageHeader className='page-header-tabs'>\n                    <Breadcrumb>\n                        <BreadcrumbLinkItem to='/'>\n                            Compliance\n                        </BreadcrumbLinkItem>\n                        <BreadcrumbLinkItem to='/scappolicies'>\n                            SCAP policies\n                        </BreadcrumbLinkItem>\n                        <BreadcrumbItem isActive>{policy.name}</BreadcrumbItem>\n                    </Breadcrumb>\n                    <Grid gutter='lg'>\n                        <GridItem xl2={11} xl={10} lg={12} md={12} sm={12}>\n                            <PageHeaderTitle title={policy.name} />\n                        </GridItem>\n                        <GridItem className='policy-details-button' xl2={1} xl={2} lg={2} md={3} sm={3}>\n                            <BackgroundLink\n                                to={ `/scappolicies/${ policy.id }/edit` }\n                                state={ { policy } }\n                                hash={ anchor }\n                                backgroundLocation={ { hash: 'details' } }>\n                                <Button variant='secondary'>Edit policy</Button>\n                            </BackgroundLink>\n                        </GridItem>\n                    </Grid>\n                    <RoutedTabs aria-label=\"Policy Tabs\" defaultTab={ defaultTab }>\n                        <Tab title='Details' id='policy-details' eventKey='details' />\n                        <Tab title='Rules' id='policy-rules' eventKey='rules' />\n                        <Tab title='Systems' id='policy-systems' eventKey='systems' />\n                    </RoutedTabs>\n                </PageHeader>\n                <Main>\n                    <TabSwitcher defaultTab={ defaultTab }>\n                        <ContentTab eventKey='details'>\n                            <PolicyDetailsDescription policy={ policy } />\n                        </ContentTab>\n                        <ContentTab eventKey='rules'>\n                            { multiversionTabs ?\n                                <PolicyMultiversionRules policy={ policy } /> :\n                                <PolicyRulesTab policy={ policy } /> }\n                        </ContentTab>\n                        <ContentTab eventKey='systems'>\n                            <PolicySystemsTab policy={ policy } />\n                        </ContentTab>\n                    </TabSwitcher>\n                </Main>\n            </Fragment> }\n        </StateViewPart>\n    </StateViewWithError>;\n};\n\nPolicyDetails.propTypes = {\n    route: propTypes.object\n};\n\nexport default PolicyDetails;\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./PolicyDetails.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./PolicyDetails.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};"],"sourceRoot":""}